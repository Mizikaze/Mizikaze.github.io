/* Generated by JSIL v0.6.0 build 23610. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm0E = JSIL.DeclareAssembly("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
JSIL.MakeStaticClass("System.HResults", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Configuration", -2146232062); 
  $.Constant({Static:true , Public:false}, "Xml", -2146232000); 
  $.Constant({Static:true , Public:false}, "XmlSchema", -2146231999); 
  $.Constant({Static:true , Public:false}, "XmlXslt", -2146231998); 
  $.Constant({Static:true , Public:false}, "XmlXPath", -2146231997); 
  $.Constant({Static:true , Public:false}, "Data", -2146232032); 
  $.Constant({Static:true , Public:false}, "DataDeletedRowInaccessible", -2146232031); 
  $.Constant({Static:true , Public:false}, "DataDuplicateName", -2146232030); 
  $.Constant({Static:true , Public:false}, "DataInRowChangingEvent", -2146232029); 
  $.Constant({Static:true , Public:false}, "DataInvalidConstraint", -2146232028); 
  $.Constant({Static:true , Public:false}, "DataMissingPrimaryKey", -2146232027); 
  $.Constant({Static:true , Public:false}, "DataNoNullAllowed", -2146232026); 
  $.Constant({Static:true , Public:false}, "DataReadOnly", -2146232025); 
  $.Constant({Static:true , Public:false}, "DataRowNotInTable", -2146232024); 
  $.Constant({Static:true , Public:false}, "DataVersionNotFound", -2146232023); 
  $.Constant({Static:true , Public:false}, "DataConstraint", -2146232022); 
  $.Constant({Static:true , Public:false}, "StrongTyping", -2146232021); 
  $.Constant({Static:true , Public:false}, "SqlType", -2146232016); 
  $.Constant({Static:true , Public:false}, "SqlNullValue", -2146232015); 
  $.Constant({Static:true , Public:false}, "SqlTruncate", -2146232014); 
  $.Constant({Static:true , Public:false}, "AdapterMapping", -2146232013); 
  $.Constant({Static:true , Public:false}, "DataAdapter", -2146232012); 
  $.Constant({Static:true , Public:false}, "DBConcurrency", -2146232011); 
  $.Constant({Static:true , Public:false}, "OperationAborted", -2146232010); 
  $.Constant({Static:true , Public:false}, "InvalidUdt", -2146232009); 
  $.Constant({Static:true , Public:false}, "Metadata", -2146232007); 
  $.Constant({Static:true , Public:false}, "InvalidQuery", -2146232006); 
  $.Constant({Static:true , Public:false}, "CommandCompilation", -2146232005); 
  $.Constant({Static:true , Public:false}, "CommandExecution", -2146232004); 
  $.Constant({Static:true , Public:false}, "SqlException", -2146232060); 
  $.Constant({Static:true , Public:false}, "OdbcException", -2146232009); 
  $.Constant({Static:true , Public:false}, "OracleException", -2146232008); 
  $.Constant({Static:true , Public:false}, "ConnectionPlanException", -2146232003); 
  $.Constant({Static:true , Public:false}, "NteBadKeySet", -2146893802); 
  $.Constant({Static:true , Public:false}, "Win32AccessDenied", -2147024891); 
  $.Constant({Static:true , Public:false}, "Win32InvalidHandle", -2147024890); 
  $.Constant({Static:true , Public:false}, "License", -2146232063); 
  $.Constant({Static:true , Public:false}, "InternalBufferOverflow", -2146232059); 
  $.Constant({Static:true , Public:false}, "ServiceControllerTimeout", -2146232058); 
  $.Constant({Static:true , Public:false}, "Install", -2146232057); 
  $.Constant({Static:true , Public:false}, "EFail", -2147467259); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.InvariantComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x272E7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x272E8, $.Int32, [$.Object, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "m_compareInfo", $asm06.TypeRef("System.Globalization.CompareInfo")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.DeclareNamespace("System.Configuration");
JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
    $sig.make(0x2717A, $asm08.TypeRef("System.Configuration.ConnectionStringSettingsCollection"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSection", 
    $sig.make(0x2717B, $.Object, [$.String], [])
  );

  $.Property({Static:true , Public:false}, "ConnectionStrings", $asm08.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));

});

JSIL.DeclareNamespace("System.Xml");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.IncrementalReadDecoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB2C4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB2C1, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB2C2, $.Int32, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DecodedCount", 
    $sig.make(0xB2BE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
    $sig.make(0xB2BF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0xB2C3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNextOutputBuffer", 
    $sig.make(0xB2C0, null, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.Base64Decoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB301, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConstructMapBase64", 
    $sig.make(0xB2FF, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB2FB, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB2FC, $.Int32, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DecodedCount", 
    $sig.make(0xB2F9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
    $sig.make(0xB2FA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0xB2FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNextOutputBuffer", 
    $sig.make(0xB2FE, null, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.Constant({Static:true , Public:false}, "MaxValidChar", 122); 
  $.Constant({Static:true , Public:false}, "Invalid", 255); 
  $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "bits", $.Int32); 
  $.Field({Static:false, Public:false}, "bitsFilled", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CharsBase64", $.String, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MapBase64", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Base64Encoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB1CD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Encode", 
    $sig.make(0xB1CF, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Flush", 
    $sig.make(0xB1D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteChars", 
    $sig.make(0xB1CE, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Constant({Static:true , Public:false}, "Base64LineSize", 76); 
  $.Constant({Static:true , Public:false}, "LineSizeInBytes", 57); 
  $.Field({Static:false, Public:false}, "leftOverBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "leftOverBytesCount", $.Int32); 
  $.Field({Static:false, Public:false}, "charsLine", $jsilcore.TypeRef("System.Array", [$.Char])); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Base64Encoder"), "System.Xml.XmlRawWriterBase64Encoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2719E, null, [$asm0E.TypeRef("System.Xml.XmlRawWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteChars", 
    $sig.make(0x271A0, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "rawWriter", $asm0E.TypeRef("System.Xml.XmlRawWriter")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Base64Encoder"), "System.Xml.XmlTextWriterBase64Encoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB1D7, null, [$asm0E.TypeRef("System.Xml.XmlTextEncoder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteChars", 
    $sig.make(0xB1D8, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "xmlTextEncoder", $asm0E.TypeRef("System.Xml.XmlTextEncoder")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.BinHexDecoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB383, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB37D, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB37E, $.Int32, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Decode", 
    $sig.make(0xB381, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Char]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DecodedCount", 
    $sig.make(0xB37B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
    $sig.make(0xB37C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0xB37F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNextOutputBuffer", 
    $sig.make(0xB380, null, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "hasHalfByteCached", $.Boolean); 
  $.Field({Static:false, Public:false}, "cachedHalfByte", $.Byte); 
  $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

});

JSIL.MakeStaticClass("System.Xml.BinHexEncoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "Encode", 
    $sig.make(0x272C6, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm0E.TypeRef("System.Xml.XmlWriter")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Encode", 
    $sig.make(0x272C8, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Encode", 
    $sig.make(0x272CB, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char])
      ], [])
  );

  $.Constant({Static:true , Public:false}, "s_hexDigits", "0123456789ABCDEF"); 
  $.Constant({Static:true , Public:false}, "CharsChunkSize", 128); 
});

JSIL.MakeStaticClass("System.Xml.Bits", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "ClearLeast", 
    $sig.make(0x272DC, $.UInt32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x272D8, $.Int32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExactlyOne", 
    $sig.make(0x272DA, $.Boolean, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LeastPosition", 
    $sig.make(0x272DD, $.Int32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MoreThanOne", 
    $sig.make(0x272DB, $.Boolean, [$.UInt32], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0101010101010101", $.UInt32, 1431655765); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0011001100110011", $.UInt32, 858993459); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0000111100001111", $.UInt32, 252645135); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0000000011111111", $.UInt32, 16711935); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_1111111111111111", $.UInt32, 65535); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.BitStack", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2738E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x2738D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PeekBit", 
    $sig.make(0x27395, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PopBit", 
    $sig.make(0x27390, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopCurr", 
    $sig.make(0x27398, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PushBit", 
    $sig.make(0x2738F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushCurr", 
    $sig.make(0x27397, null, [], [])
  );

  $.Field({Static:false, Public:false}, "bitStack", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
  $.Field({Static:false, Public:false}, "stackPos", $.Int32); 
  $.Field({Static:false, Public:false}, "curr", $.UInt32); 
  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.ByteStack", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x273DF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0x273DE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Peek", 
    $sig.make(0x273E2, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Pop", 
    $sig.make(0x273E1, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Push", 
    $sig.make(0x273E0, null, [$.Byte], [])
  );

  $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "growthRate", $.Int32); 
  $.Field({Static:false, Public:false}, "top", $.Int32); 
  $.Field({Static:false, Public:false}, "size", $.Int32); 
  $.Property({Static:false, Public:true }, "Length", $.Int32);

});

JSIL.MakeStaticClass("System.Xml.DiagnosticsSwitches", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "get_KeepTempFiles", 
    $sig.make(0x27417, $asm07.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_NonRecursiveTypeLoading", 
    $sig.make(0x2741B, $asm07.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PregenEventLog", 
    $sig.make(0x27418, $asm07.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_XmlSchema", 
    $sig.make(0x27416, $asm07.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_XmlSchemaContentModel", 
    $sig.make(0x27415, $asm07.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_XmlSerialization", 
    $sig.make(0x27419, $asm07.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_XslTypeInference", 
    $sig.make(0x2741A, $asm07.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
  );

  $.Field({Static:true , Public:false}, "xmlSchemaContentModel", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Field({Static:true , Public:false}, "xmlSchema", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Field({Static:true , Public:false}, "keepTempFiles", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Field({Static:true , Public:false}, "pregenEventLog", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Field({Static:true , Public:false}, "xmlSerialization", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Field({Static:true , Public:false}, "xslTypeInference", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Field({Static:true , Public:false}, "nonRecursiveTypeLoading", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Property({Static:true , Public:true }, "XmlSchemaContentModel", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

  $.Property({Static:true , Public:true }, "XmlSchema", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

  $.Property({Static:true , Public:true }, "KeepTempFiles", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

  $.Property({Static:true , Public:true }, "PregenEventLog", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

  $.Property({Static:true , Public:true }, "XmlSerialization", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

  $.Property({Static:true , Public:true }, "XslTypeInference", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

  $.Property({Static:true , Public:true }, "NonRecursiveTypeLoading", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.EmptyEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBBA2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0xBB9F, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0xBBA0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0xBBA1, null, [], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.HWStack", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27431, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27432, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2743C, null, [
        $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToTop", 
    $sig.make(0x27439, null, [$.Object], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2743E, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x2742E, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Length", 
    $sig.make(0x27430, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Peek", 
    $sig.make(0x27436, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x27434, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x27433, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x2742F, null, [$.Int32, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false}, "growthRate", $.Int32); 
  $.Field({Static:false, Public:false}, "used", $.Int32); 
  $.Field({Static:false, Public:false}, "size", $.Int32); 
  $.Field({Static:false, Public:false}, "limit", $.Int32); 
  $.Property({Static:false, Public:false}, "Item", $.Object);

  $.Property({Static:false, Public:false}, "Length", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeInterface(
  "System.Xml.IHasXmlNode", true, [], function ($) {
    $.Method({}, "GetNode", $sig.make(0x27551, $asm0E.TypeRef("System.Xml.XmlNode"), [], []));
  }, []);

JSIL.MakeInterface(
  "System.Xml.IXmlLineInfo", true, [], function ($) {
    $.Method({}, "HasLineInfo", $sig.make(0xA614, $.Boolean, [], []));
    $.Method({}, "get_LineNumber", $sig.make(0xA612, $.Int32, [], []));
    $.Method({}, "get_LinePosition", $sig.make(0xA613, $.Int32, [], []));
    $.Property({}, "LineNumber");
    $.Property({}, "LinePosition");
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.PositionInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBC99, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0xBC95, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0xBC96, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetPositionInfo", 
    $sig.make(0xBC98, $.Type, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0xBC97, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.PositionInfo"), "System.Xml.ReaderPositionInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27311, null, [$asm0E.TypeRef("System.Xml.IXmlLineInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x2730F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27310, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0x27312, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

});

JSIL.MakeInterface(
  "System.Xml.IXmlNamespaceResolver", true, [], function ($) {
    $.Method({}, "GetNamespacesInScope", $sig.make(0xA615, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], []));
    $.Method({}, "LookupNamespace", $sig.make(0xA616, $.String, [$.String], []));
    $.Method({}, "LookupPrefix", $sig.make(0xA617, $.String, [$.String], []));
  }, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.LineInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB27B, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0xB27C, null, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
  $.Field({Static:false, Public:false}, "linePos", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNameTable", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA8AC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xA8AA, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xA8AB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Get", 
    $sig.make(0xA8A8, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Get", 
    $sig.make(0xA8A9, $.String, [$.String], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNameTable"), "System.Xml.NameTable", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x273FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x273FD, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x273FE, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEntry", 
    $sig.make(0x27402, $.String, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Get", 
    $sig.make(0x273FF, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Get", 
    $sig.make(0x27401, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Grow", 
    $sig.make(0x27404, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TextEquals", 
    $sig.make(0x27406, $.Boolean, [
        $.String, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.NameTable/Entry")])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "mask", $.Int32); 
  $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.NameTable/Entry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A821, null, [
        $.String, $.Int32, 
        $.Type
      ], [])
  );

  $.Field({Static:false, Public:false}, "str", $.String); 
  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
});

JSIL.MakeStaticClass("System.Xml.Ref", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Equal", 
    $sig.make(0x2741E, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Equals", 
    $sig.make(0x27423, null, [$.Object, $.Object], [])
  );

});

JSIL.MakeStaticClass("System.Xml.ValidateNames", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "CreateName", 
    $sig.make(0x27458, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetInvalidNameException", 
    $sig.make(0x2744B, $asm06.TypeRef("System.Exception"), [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNameNoNamespaces", 
    $sig.make(0x2743B, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNmtokenNoNamespaces", 
    $sig.make(0x27438, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsReservedNamespace", 
    $sig.make(0x2744F, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNameNoNamespaces", 
    $sig.make(0x2743A, $.Int32, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNameTestThrow", 
    $sig.make(0x27448, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNCName", 
    $sig.make(0x2743D, $.Int32, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNCName", 
    $sig.make(0x27440, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNCNameInternal", 
    $sig.make(0x27444, $.Boolean, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNCNameThrow", 
    $sig.make(0x27442, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNmtoken", 
    $sig.make(0x27435, $.Int32, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseNmtokenNoNamespaces", 
    $sig.make(0x27437, $.Int32, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseQName", 
    $sig.make(0x27446, $.Int32, [
        $.String, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseQNameThrow", 
    $sig.make(0x27447, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SplitQName", 
    $sig.make(0x27459, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StartsWithXml", 
    $sig.make(0x2744D, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidName", 
    $sig.make(0x2744A, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateName", 
    $sig.make(0x27455, $.Boolean, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $asm0E.TypeRef("System.Xml.ValidateNames/Flags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateNameInternal", 
    $sig.make(0x27457, $.Boolean, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $asm0E.TypeRef("System.Xml.ValidateNames/Flags"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateNameThrow", 
    $sig.make(0x27451, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $asm0E.TypeRef("System.Xml.ValidateNames/Flags")
      ], [])
  );

  $.Field({Static:true , Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA73, null, [], []), 
    function ValidateNames__cctor () {
      $thisType.xmlCharType = new $asm0E.System.Xml.XmlCharType();
    }
  );

});

JSIL.MakeEnum(
  "System.Xml.ValidateNames/Flags", false, {
    NCNames: 1, 
    CheckLocalName: 2, 
    AllExceptPrefixMapping: 3, 
    CheckPrefixMapping: 4, 
    AllExceptNCNames: 6, 
    All: 7
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlCharType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "CombineSurrogateChar", 
    $sig.make(0xB222, $.Int32, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
    $sig.make(0xB20B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StaticLock", 
    $sig.make(0xB20A, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitInstance", 
    $sig.make(0xB20C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InRange", 
    $sig.make(0xB22A, $.Boolean, [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsAttributeValueChar", 
    $sig.make(0xB217, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsCharData", 
    $sig.make(0xB214, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsDigit", 
    $sig.make(0xB21D, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsExtender", 
    $sig.make(0xB20F, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsHexDigit", 
    $sig.make(0xB21E, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsHighSurrogate", 
    $sig.make(0xB21F, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsLetter", 
    $sig.make(0xB218, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsLowSurrogate", 
    $sig.make(0xB220, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsNameCharXml4e", 
    $sig.make(0xB21B, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsNameSingleChar", 
    $sig.make(0xB212, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsNCNameCharXml4e", 
    $sig.make(0xB219, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsNCNameSingleChar", 
    $sig.make(0xB210, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsOnlyCharData", 
    $sig.make(0xB226, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsOnlyDigits", 
    $sig.make(0xB227, $.Boolean, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsOnlyDigits", 
    $sig.make(0xB228, $.Boolean, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsOnlyWhitespace", 
    $sig.make(0xB224, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsOnlyWhitespaceWithPos", 
    $sig.make(0xB225, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsPubidChar", 
    $sig.make(0xB215, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsPublicId", 
    $sig.make(0xB229, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartNameCharXml4e", 
    $sig.make(0xB21C, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartNameSingleChar", 
    $sig.make(0xB213, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartNCNameCharXml4e", 
    $sig.make(0xB21A, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartNCNameSingleChar", 
    $sig.make(0xB211, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSurrogate", 
    $sig.make(0xB221, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsTextChar", 
    $sig.make(0xB216, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsWhiteSpace", 
    $sig.make(0xB20E, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SplitSurrogateChar", 
    $sig.make(0xB223, null, [
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Char]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Char])
      ], [])
  );

  $.Constant({Static:true , Public:false}, "SurHighStart", 55296); 
  $.Constant({Static:true , Public:false}, "SurHighEnd", 56319); 
  $.Constant({Static:true , Public:false}, "SurLowStart", 56320); 
  $.Constant({Static:true , Public:false}, "SurLowEnd", 57343); 
  $.Constant({Static:true , Public:false}, "SurMask", 64512); 
  $.Constant({Static:true , Public:false}, "fWhitespace", 1); 
  $.Constant({Static:true , Public:false}, "fLetter", 2); 
  $.Constant({Static:true , Public:false}, "fNCStartNameSC", 4); 
  $.Constant({Static:true , Public:false}, "fNCNameSC", 8); 
  $.Constant({Static:true , Public:false}, "fCharData", 16); 
  $.Constant({Static:true , Public:false}, "fNCNameXml4e", 32); 
  $.Constant({Static:true , Public:false}, "fText", 64); 
  $.Constant({Static:true , Public:false}, "fAttrValue", 128); 
  $.Constant({Static:true , Public:false}, "s_PublicIdBitmap", "\u2400\0\uffbb\uafff\uffff\u87ff\ufffe\u07ff"); 
  $.Constant({Static:true , Public:false}, "CharPropertiesSize", 65536); 
  $.Field({Static:true , Public:false}, "s_Lock", $.Object); 
  $.Property({Static:true , Public:false}, "StaticLock", $.Object);

  $.Property({Static:true , Public:true }, "Instance", $.Type);

});

JSIL.MakeStaticClass("System.Xml.XmlComplianceUtil", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "CDataNormalize", 
    $sig.make(0x2747C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsValidLanguageID", 
    $sig.make(0x2747E, $.Boolean, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NonCDataNormalize", 
    $sig.make(0x2747A, $.String, [$.String], [])
  );

});

JSIL.MakeEnum(
  "System.Xml.ExceptionType", false, {
    ArgumentException: 0, 
    XmlException: 1
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlDateTimeSerializationMode", true, {
    Local: 0, 
    Utc: 1, 
    Unspecified: 2, 
    RoundtripKind: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlConvert", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27502, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateAllDateTimeFormats", 
    $sig.make(0x274D4, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateException", 
    $sig.make(0x274EE, $asm06.TypeRef("System.Exception"), [$.String, $asm0E.TypeRef("System.Xml.ExceptionType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateException", 
    $sig.make(0x274EF, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.ExceptionType"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateException", 
    $sig.make(0x274F0, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateException", 
    $sig.make(0x274F1, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.ExceptionType"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateException", 
    $sig.make(0x274F2, $asm06.TypeRef("System.Exception"), [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateException", 
    $sig.make(0x274F3, $asm06.TypeRef("System.Exception"), [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.ExceptionType"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
    $sig.make(0x274FA, $asm06.TypeRef("System.Exception"), [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
    $sig.make(0x274FB, $asm06.TypeRef("System.Exception"), [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32, $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
    $sig.make(0x274FC, $asm06.TypeRef("System.Exception"), [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
    $sig.make(0x274FD, $asm06.TypeRef("System.Exception"), [
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
    $sig.make(0x274FE, $asm06.TypeRef("System.Exception"), [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
    $sig.make(0x274FF, $asm06.TypeRef("System.Exception"), [
        $.Char, $.Char, 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
    $sig.make(0x274F7, $asm06.TypeRef("System.Exception"), [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
    $sig.make(0x274F8, $asm06.TypeRef("System.Exception"), [$.Char, $asm0E.TypeRef("System.Xml.ExceptionType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
    $sig.make(0x274F9, $asm06.TypeRef("System.Exception"), [
        $.Char, $asm0E.TypeRef("System.Xml.ExceptionType"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidNameArgumentException", 
    $sig.make(0x27501, $asm06.TypeRef("System.ArgumentException"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidNameCharException", 
    $sig.make(0x27500, $asm06.TypeRef("System.Exception"), [
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
    $sig.make(0x274F4, $asm06.TypeRef("System.Exception"), [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
    $sig.make(0x274F5, $asm06.TypeRef("System.Exception"), [
        $.Char, $.Char, 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
    $sig.make(0x274F6, $asm06.TypeRef("System.Exception"), [
        $.Char, $.Char, 
        $asm0E.TypeRef("System.Xml.ExceptionType"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DecodeName", 
    $sig.make(0x27480, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DoubleToInt64Bits", 
    $sig.make(0x274E9, $.Int64, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EncodeLocalName", 
    $sig.make(0x2747F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EncodeName", 
    $sig.make(0x2747B, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EncodeName", 
    $sig.make(0x27482, $.String, [
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EncodeNmToken", 
    $sig.make(0x2747D, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EscapeValueForDebuggerDisplay", 
    $sig.make(0x274ED, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromBinHexString", 
    $sig.make(0x27485, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromBinHexString", 
    $sig.make(0x27486, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromHex", 
    $sig.make(0x27483, $.Int32, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AllDateTimeFormats", 
    $sig.make(0x27479, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsNCNameChar", 
    $sig.make(0x2749A, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
    $sig.make(0x274E8, $.Boolean, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsPublicIdChar", 
    $sig.make(0x2749D, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsStartNCNameChar", 
    $sig.make(0x27499, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsWhitespaceChar", 
    $sig.make(0x2749E, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsXmlChar", 
    $sig.make(0x2749B, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsXmlSurrogatePair", 
    $sig.make(0x2749C, $.Boolean, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SplitString", 
    $sig.make(0x274E6, $jsilcore.TypeRef("System.Array", [$.String]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SplitString", 
    $sig.make(0x274E7, $jsilcore.TypeRef("System.Array", [$.String]), [$.String, $asm06.TypeRef("System.StringSplitOptions")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StrEqual", 
    $sig.make(0x274E2, $.Boolean, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SwitchToLocalTime", 
    $sig.make(0x274DE, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SwitchToUtcTime", 
    $sig.make(0x274DF, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToBinHexString", 
    $sig.make(0x27487, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
    $sig.make(0x274B3, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToByte", 
    $sig.make(0x274C3, $.Byte, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToChar", 
    $sig.make(0x274B5, $.Char, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0x274D5, $asm06.TypeRef("System.DateTime"), [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlConvert.ToDateTime() that takes in XmlDateTimeSerializationMode"]; });

  $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0x274D6, $asm06.TypeRef("System.DateTime"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0x274D7, $asm06.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0x274D8, $asm06.TypeRef("System.DateTime"), [$.String, $asm0E.TypeRef("System.Xml.XmlDateTimeSerializationMode")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
    $sig.make(0x274D9, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
    $sig.make(0x274DA, $asm06.TypeRef("System.DateTimeOffset"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
    $sig.make(0x274DB, $asm06.TypeRef("System.DateTimeOffset"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
    $sig.make(0x274B7, $asm06.TypeRef("System.Decimal"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
    $sig.make(0x274CD, $.Double, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
    $sig.make(0x274DC, $asm06.TypeRef("System.Guid"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
    $sig.make(0x274BD, $.Int16, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
    $sig.make(0x274BF, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
    $sig.make(0x274C1, $.Int64, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToInteger", 
    $sig.make(0x274B9, $asm06.TypeRef("System.Decimal"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToSByte", 
    $sig.make(0x274BB, $.SByte, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
    $sig.make(0x274CB, $.Single, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x2749F, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A0, $.String, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A1, $.String, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A2, $.String, [$.SByte], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A3, $.String, [$.Int16], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A4, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A5, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A6, $.String, [$.Byte], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A7, $.String, [$.UInt16], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A8, $.String, [$.UInt32], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274A9, $.String, [$.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274AA, $.String, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274AB, $.String, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274AC, $.String, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274AD, $.String, [$asm06.TypeRef("System.DateTime")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlConvert.ToString() that takes in XmlDateTimeSerializationMode"]; });

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274AE, $.String, [$asm06.TypeRef("System.DateTime"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274AF, $.String, [$asm06.TypeRef("System.DateTime"), $asm0E.TypeRef("System.Xml.XmlDateTimeSerializationMode")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274B0, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274B1, $.String, [$asm06.TypeRef("System.DateTimeOffset"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0x274B2, $.String, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
    $sig.make(0x274D2, $asm06.TypeRef("System.TimeSpan"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
    $sig.make(0x274C5, $.UInt16, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
    $sig.make(0x274C7, $.UInt32, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
    $sig.make(0x274C9, $.UInt64, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:false}, "ToUri", 
    $sig.make(0x274E0, $asm07.TypeRef("System.Uri"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXPathDouble", 
    $sig.make(0x274CF, $.Double, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXPathString", 
    $sig.make(0x274D0, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TrimString", 
    $sig.make(0x274E3, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TrimStringEnd", 
    $sig.make(0x274E5, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TrimStringStart", 
    $sig.make(0x274E4, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToBoolean", 
    $sig.make(0x274B4, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToByte", 
    $sig.make(0x274C4, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToChar", 
    $sig.make(0x274B6, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Char])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToDecimal", 
    $sig.make(0x274B8, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToDouble", 
    $sig.make(0x274CE, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToGuid", 
    $sig.make(0x274DD, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToInt16", 
    $sig.make(0x274BE, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int16])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToInt32", 
    $sig.make(0x274C0, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToInt64", 
    $sig.make(0x274C2, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToInteger", 
    $sig.make(0x274BA, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToSByte", 
    $sig.make(0x274BC, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.SByte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToSingle", 
    $sig.make(0x274CC, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToTimeSpan", 
    $sig.make(0x274D3, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.TimeSpan")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToUInt16", 
    $sig.make(0x274C6, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt16])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToUInt32", 
    $sig.make(0x274C8, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToUInt64", 
    $sig.make(0x274CA, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryToUri", 
    $sig.make(0x274E1, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Uri")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryVerifyName", 
    $sig.make(0x27489, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryVerifyNCName", 
    $sig.make(0x2748E, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryVerifyNMTOKEN", 
    $sig.make(0x27493, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryVerifyNormalizedString", 
    $sig.make(0x27495, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryVerifyTOKEN", 
    $sig.make(0x27490, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
    $sig.make(0x274EA, null, [$.String, $asm0E.TypeRef("System.Xml.ExceptionType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
    $sig.make(0x274EB, null, [
        $.String, $asm0E.TypeRef("System.Xml.ExceptionType"), 
        $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
    $sig.make(0x274EC, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32, $asm0E.TypeRef("System.Xml.ExceptionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyName", 
    $sig.make(0x27488, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyNCName", 
    $sig.make(0x2748C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyNCName", 
    $sig.make(0x2748D, $.String, [$.String, $asm0E.TypeRef("System.Xml.ExceptionType")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyNMTOKEN", 
    $sig.make(0x27491, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyNMTOKEN", 
    $sig.make(0x27492, $.String, [$.String, $asm0E.TypeRef("System.Xml.ExceptionType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyNormalizedString", 
    $sig.make(0x27494, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyPublicId", 
    $sig.make(0x27497, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyQName", 
    $sig.make(0x2748A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyQName", 
    $sig.make(0x2748B, $.String, [$.String, $asm0E.TypeRef("System.Xml.ExceptionType")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyTOKEN", 
    $sig.make(0x2748F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyWhitespace", 
    $sig.make(0x27498, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifyXmlChars", 
    $sig.make(0x27496, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XPathRound", 
    $sig.make(0x274D1, $.Double, [$.Double], [])
  );

  $.Field({Static:true , Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:true , Public:false}, "crt", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_EncodedCharLength", $.Int32, 7); 
  $.Field({Static:true , Public:false}, "c_EncodeCharPattern", $asm07.TypeRef("System.Text.RegularExpressions.Regex")); 
  $.Field({Static:true , Public:false}, "c_DecodeCharPattern", $asm07.TypeRef("System.Text.RegularExpressions.Regex")); 
  $.Field({Static:true , Public:false}, "s_allDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WhitespaceChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA75, null, [], []), 
    function XmlConvert__cctor () {
      $thisType.xmlCharType = new $asm0E.System.Xml.XmlCharType();
    }
  );

  $.Property({Static:true , Public:false}, "AllDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlDownloadManager", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27006, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNonFileStream", 
    $sig.make(0x27004, $asm06.TypeRef("System.IO.Stream"), [
        $asm07.TypeRef("System.Uri"), $asm07.TypeRef("System.Net.ICredentials"), 
        $asm07.TypeRef("System.Net.IWebProxy"), $asm07.TypeRef("System.Net.Cache.RequestCachePolicy")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStream", 
    $sig.make(0x27003, $asm06.TypeRef("System.IO.Stream"), [
        $asm07.TypeRef("System.Uri"), $asm07.TypeRef("System.Net.ICredentials"), 
        $asm07.TypeRef("System.Net.IWebProxy"), $asm07.TypeRef("System.Net.Cache.RequestCachePolicy")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Remove", 
    $sig.make(0x27005, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "connections", $asm06.TypeRef("System.Collections.Hashtable")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.OpenedHost", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2754A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nonCachedConnectionsCount", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.IO.Stream"), "System.Xml.XmlRegisteredNonCachedStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2751C, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlDownloadManager"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BeginRead", 
    $sig.make(0x2751F, $asm06.TypeRef("System.IAsyncResult"), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BeginWrite", 
    $sig.make(0x27520, $asm06.TypeRef("System.IAsyncResult"), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x2751E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndRead", 
    $sig.make(0x27521, $.Int32, [$asm06.TypeRef("System.IAsyncResult")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndWrite", 
    $sig.make(0x27522, null, [$asm06.TypeRef("System.IAsyncResult")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x2751D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27523, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanRead", 
    $sig.make(0x27516, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanSeek", 
    $sig.make(0x27517, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanWrite", 
    $sig.make(0x27518, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0x27519, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0x2751A, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x27525, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadByte", 
    $sig.make(0x27526, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x27528, $.Int64, [$.Int64, $asm06.TypeRef("System.IO.SeekOrigin")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0x2751B, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetLength", 
    $sig.make(0x2752A, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x2752C, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteByte", 
    $sig.make(0x2752E, null, [$.Byte], [])
  );

  $.Field({Static:false, Public:false}, "stream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "downloadManager", $asm0E.TypeRef("System.Xml.XmlDownloadManager")); 
  $.Field({Static:false, Public:false}, "host", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

});

JSIL.MakeClass($asm06.TypeRef("System.IO.MemoryStream"), "System.Xml.XmlCachedStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27773, null, [$asm07.TypeRef("System.Uri"), $asm06.TypeRef("System.IO.Stream")], [])
  );

  $.Constant({Static:true , Public:false}, "MoveBufferSize", 4096); 
  $.Field({Static:false, Public:false}, "uri", $asm07.TypeRef("System.Uri")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Text.Decoder"), "System.Xml.UTF16Decoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2780B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Convert", 
    $sig.make(0x27810, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32, $.Int32, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCharCount", 
    $sig.make(0x2780C, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCharCount", 
    $sig.make(0x2780D, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetChars", 
    $sig.make(0x2780E, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

  $.Constant({Static:true , Public:false}, "CharSize", 2); 
  $.Field({Static:false, Public:false}, "bigEndian", $.Boolean); 
  $.Field({Static:false, Public:false}, "lastByte", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Text.Decoder"), "System.Xml.SafeAsciiDecoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27818, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Convert", 
    $sig.make(0x2781B, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32, $.Int32, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCharCount", 
    $sig.make(0x27819, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetChars", 
    $sig.make(0x2781A, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Text.Encoding"), "System.Xml.Ucs4Encoding", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2784A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CodePage", 
    $sig.make(0x2783A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UCS4_2143", 
    $sig.make(0x2783D, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UCS4_3412", 
    $sig.make(0x2783E, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UCS4_Bigendian", 
    $sig.make(0x2783C, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UCS4_Littleendian", 
    $sig.make(0x2783B, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WebName", 
    $sig.make(0x27839, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetByteCount", 
    $sig.make(0x27840, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetByteCount", 
    $sig.make(0x27841, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Char])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBytes", 
    $sig.make(0x27842, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBytes", 
    $sig.make(0x27843, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCharCount", 
    $sig.make(0x27845, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCharCount", 
    $sig.make(0x27848, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetChars", 
    $sig.make(0x27846, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDecoder", 
    $sig.make(0x2783F, $asm06.TypeRef("System.Text.Decoder"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEncoder", 
    $sig.make(0x27849, $asm06.TypeRef("System.Text.Encoder"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetMaxByteCount", 
    $sig.make(0x27844, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetMaxCharCount", 
    $sig.make(0x27847, $.Int32, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "ucs4Decoder", $asm0E.TypeRef("System.Xml.Ucs4Decoder")); 
  $.Property({Static:false, Public:true , Virtual:true }, "WebName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "CodePage", $.Int32);

  $.Property({Static:true , Public:false}, "UCS4_Littleendian", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:true , Public:false}, "UCS4_Bigendian", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:true , Public:false}, "UCS4_2143", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:true , Public:false}, "UCS4_3412", $asm06.TypeRef("System.Text.Encoding"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding1234", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x278CE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EncodingName", 
    $sig.make(0x278CA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPreamble", 
    $sig.make(0x278D1, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding4321", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27908, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EncodingName", 
    $sig.make(0x27906, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPreamble", 
    $sig.make(0x2790A, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding2143", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27931, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EncodingName", 
    $sig.make(0x2792F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPreamble", 
    $sig.make(0x27934, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding3412", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2796F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EncodingName", 
    $sig.make(0x2796E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPreamble", 
    $sig.make(0x27970, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Text.Decoder"), "System.Xml.Ucs4Decoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27875, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Convert", 
    $sig.make(0x27873, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32, $.Int32, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCharCount", 
    $sig.make(0x27870, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetChars", 
    $sig.make(0x27872, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFullChars", 
    $sig.make(0x27871, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Ucs4ToUTF16", 
    $sig.make(0x27874, null, [
        $.UInt32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "lastBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "lastBytesCount", $.Int32); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder4321", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27982, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFullChars", 
    $sig.make(0x27981, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder1234", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x279FE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFullChars", 
    $sig.make(0x279FC, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder2143", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A1B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFullChars", 
    $sig.make(0x27A1A, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder3412", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A32, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFullChars", 
    $sig.make(0x27A31, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.SystemException"), "System.Xml.XmlException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27ABA, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27ABE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27AC0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27AC3, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27AC5, null, [
        $.String, $asm06.TypeRef("System.Exception"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AC7, null, [
        $.String, $asm06.TypeRef("System.Exception"), 
        $.Int32, $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27ACA, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27ACC, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27ACE, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AD0, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AD3, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.IXmlLineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AD7, null, [
        $.String, $.String, 
        $asm06.TypeRef("System.Exception"), $asm0E.TypeRef("System.Xml.IXmlLineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27ADF, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.IXmlLineInfo"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AE1, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.IXmlLineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AE2, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.IXmlLineInfo"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AE4, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AE8, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AEC, null, [
        $.String, $.String, 
        $.Int32, $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AF0, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AF4, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.Int32, $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AFD, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AFF, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception"), $.Int32, 
        $.Int32, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildCharExceptionArgs", 
    $sig.make(0x27B05, $jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildCharExceptionArgs", 
    $sig.make(0x27B06, $jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildCharExceptionArgs", 
    $sig.make(0x27B07, $jsilcore.TypeRef("System.Array", [$.String]), [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildCharExceptionArgs", 
    $sig.make(0x27B0A, $jsilcore.TypeRef("System.Array", [$.String]), [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
    $sig.make(0x27B04, $.String, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FormatUserMessage", 
    $sig.make(0x27B02, $.String, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x27AB5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27AB6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0x27AB8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ResString", 
    $sig.make(0x27AB9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
    $sig.make(0x27AB7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x27ABB, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCatchableException", 
    $sig.make(0x27B0C, $.Boolean, [$asm06.TypeRef("System.Exception")], [])
  );

  $.Field({Static:false, Public:false}, "res", $.String); 
  $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Field({Static:false, Public:false}, "sourceUri", $.String)
    .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
  $.Field({Static:false, Public:false}, "message", $.String); 
  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "SourceUri", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

  $.Property({Static:false, Public:false}, "ResString", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNamespaceManager", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA981, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA982, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
    $sig.make(0xA985, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultNamespace", 
    $sig.make(0xA980, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_EmptyResolver", 
    $sig.make(0xA97E, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xA97F, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xA987, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNamespaceDeclaration", 
    $sig.make(0xA98D, $.Boolean, [
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
    $sig.make(0xA988, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasNamespace", 
    $sig.make(0xA98C, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0xA989, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceDecl", 
    $sig.make(0xA98A, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0xA98B, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PopScope", 
    $sig.make(0xA984, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PushScope", 
    $sig.make(0xA983, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveNamespace", 
    $sig.make(0xA986, null, [$.String, $.String], [])
  );

  $.Constant({Static:true , Public:false}, "MinDeclsCountForHashtable", 16); 
  $.Field({Static:true , Public:false}, "s_EmptyResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Field({Static:false, Public:false}, "nsdecls", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNamespaceManager/NamespaceDeclaration")])); 
  $.Field({Static:false, Public:false}, "lastDecl", $.Int32); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "scopeId", $.Int32); 
  $.Field({Static:false, Public:false}, "hashTable", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
  $.Field({Static:false, Public:false}, "useHashtable", $.Boolean); 
  $.Field({Static:false, Public:false}, "xml", $.String); 
  $.Field({Static:false, Public:false}, "xmlNs", $.String); 
  $.Property({Static:true , Public:false}, "EmptyResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlNamespaceManager/NamespaceDeclaration", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x2A86B, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:false, Public:true }, "prefix", $.String); 
  $.Field({Static:false, Public:true }, "uri", $.String); 
  $.Field({Static:false, Public:true }, "scopeId", $.Int32); 
  $.Field({Static:false, Public:true }, "previousNsIndex", $.Int32); 
});

JSIL.MakeEnum(
  "System.Xml.XmlNamespaceScope", true, {
    All: 0, 
    ExcludeXml: 1, 
    Local: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlNodeOrder", true, {
    Before: 0, 
    After: 1, 
    Same: 2, 
    Unknown: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlNodeType", true, {
    None: 0, 
    Element: 1, 
    Attribute: 2, 
    Text: 3, 
    CDATA: 4, 
    EntityReference: 5, 
    Entity: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    Document: 9, 
    DocumentType: 10, 
    DocumentFragment: 11, 
    Notation: 12, 
    Whitespace: 13, 
    SignificantWhitespace: 14, 
    EndElement: 15, 
    EndEntity: 16, 
    XmlDeclaration: 17
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlResolver", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xAF78, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEntity", 
    $sig.make(0xAF75, $.Object, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveUri", 
    $sig.make(0xAF76, $asm07.TypeRef("System.Uri"), [$asm07.TypeRef("System.Uri"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
    $sig.make(0xAF74, null, [$asm07.TypeRef("System.Net.ICredentials")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SupportsType", 
    $sig.make(0xAF77, $.Boolean, [$asm07.TypeRef("System.Uri"), $asm06.TypeRef("System.Type")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm07.TypeRef("System.Net.ICredentials"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlResolver"), "System.Xml.XmlNullResolver", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27553, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEntity", 
    $sig.make(0x27554, $.Object, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
    $sig.make(0x27552, null, [$asm07.TypeRef("System.Net.ICredentials")], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Singleton", $.Type); 
  $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm07.TypeRef("System.Net.ICredentials"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlQualifiedName", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB234, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB235, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB236, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Atomize", 
    $sig.make(0xB240, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB242, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Compare", 
    $sig.make(0xB243, $.Int32, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xB239, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0xB233, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB232, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0xB231, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xB237, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0xB23D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xB23A, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xB23B, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Parse", 
    $sig.make(0xB241, $.Type, [
        $.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNamespace", 
    $sig.make(0xB23E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xB238, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToString", 
    $sig.make(0xB23C, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Verify", 
    $sig.make(0xB23F, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "hash", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

});

JSIL.MakeStaticClass("System.Xml.XmlReservedNs", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "NsXml", "http://www.w3.org/XML/1998/namespace"); 
  $.Constant({Static:true , Public:false}, "NsXmlNs", "http://www.w3.org/2000/xmlns/"); 
  $.Constant({Static:true , Public:false}, "NsDataType", "urn:schemas-microsoft-com:datatypes"); 
  $.Constant({Static:true , Public:false}, "NsDataTypeAlias", "uuid:C2F41010-65B3-11D1-A29F-00AA00C14882"); 
  $.Constant({Static:true , Public:false}, "NsDataTypeOld", "urn:uuid:C2F41010-65B3-11D1-A29F-00AA00C14882/"); 
  $.Constant({Static:true , Public:false}, "NsMsxsl", "urn:schemas-microsoft-com:xslt"); 
  $.Constant({Static:true , Public:false}, "NsXdr", "urn:schemas-microsoft-com:xml-data"); 
  $.Constant({Static:true , Public:false}, "NsXslDebug", "urn:schemas-microsoft-com:xslt-debug"); 
  $.Constant({Static:true , Public:false}, "NsXdrAlias", "uuid:BDC6E3F0-6DA3-11D1-A2A3-00AA00C14882"); 
  $.Constant({Static:true , Public:false}, "NsWdXsl", "http://www.w3.org/TR/WD-xsl"); 
  $.Constant({Static:true , Public:false}, "NsXs", "http://www.w3.org/2001/XMLSchema"); 
  $.Constant({Static:true , Public:false}, "NsXsd", "http://www.w3.org/2001/XMLSchema-datatypes"); 
  $.Constant({Static:true , Public:false}, "NsXsi", "http://www.w3.org/2001/XMLSchema-instance"); 
  $.Constant({Static:true , Public:false}, "NsXslt", "http://www.w3.org/1999/XSL/Transform"); 
  $.Constant({Static:true , Public:false}, "NsExsltCommon", "http://exslt.org/common"); 
  $.Constant({Static:true , Public:false}, "NsExsltDates", "http://exslt.org/dates-and-times"); 
  $.Constant({Static:true , Public:false}, "NsExsltMath", "http://exslt.org/math"); 
  $.Constant({Static:true , Public:false}, "NsExsltRegExps", "http://exslt.org/regular-expressions"); 
  $.Constant({Static:true , Public:false}, "NsExsltSets", "http://exslt.org/sets"); 
  $.Constant({Static:true , Public:false}, "NsExsltStrings", "http://exslt.org/strings"); 
  $.Constant({Static:true , Public:false}, "NsXQueryFunc", "http://www.w3.org/2003/11/xpath-functions"); 
  $.Constant({Static:true , Public:false}, "NsXQueryDataType", "http://www.w3.org/2003/11/xpath-datatypes"); 
  $.Constant({Static:true , Public:false}, "NsCollationBase", "http://collations.microsoft.com"); 
  $.Constant({Static:true , Public:false}, "NsCollCodePoint", "http://www.w3.org/2004/10/xpath-functions/collation/codepoint"); 
  $.Constant({Static:true , Public:false}, "NsXsltInternal", "http://schemas.microsoft.com/framework/2003/xml/xslt/internal"); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlResolver"), "System.Xml.XmlSecureResolver", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2755F, null, [$asm0E.TypeRef("System.Xml.XmlResolver"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27560, null, [$asm0E.TypeRef("System.Xml.XmlResolver"), $asm06.TypeRef("System.Security.Policy.Evidence")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27561, null, [$asm0E.TypeRef("System.Xml.XmlResolver"), $asm06.TypeRef("System.Security.PermissionSet")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateEvidenceForUrl", 
    $sig.make(0x27567, $asm06.TypeRef("System.Security.Policy.Evidence"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEntity", 
    $sig.make(0x27562, $.Object, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveUri", 
    $sig.make(0x27563, $asm07.TypeRef("System.Uri"), [$asm07.TypeRef("System.Uri"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
    $sig.make(0x2755E, null, [$asm07.TypeRef("System.Net.ICredentials")], [])
  );

  $.Field({Static:false, Public:false}, "resolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "permissionSet", $asm06.TypeRef("System.Security.PermissionSet")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm07.TypeRef("System.Net.ICredentials"));

});

JSIL.MakeClass($asm06.TypeRef("System.Security.Policy.EvidenceBase"), "System.Xml.XmlSecureResolver/UncDirectory", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A81A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2A828, $asm06.TypeRef("System.Security.Policy.EvidenceBase"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateIdentityPermission", 
    $sig.make(0x2A81E, $asm06.TypeRef("System.Security.IPermission"), [$asm06.TypeRef("System.Security.Policy.Evidence")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x2A82D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToXml", 
    $sig.make(0x2A829, $asm06.TypeRef("System.Security.SecurityElement"), [], [])
  );

  $.Field({Static:false, Public:false}, "uncDir", $.String); 
  $.ImplementInterfaces($asm06.TypeRef("System.Security.Policy.IIdentityPermissionFactory"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlResolver"), "System.Xml.XmlUrlResolver", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x26F5D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DownloadManager", 
    $sig.make(0x26F47, $asm0E.TypeRef("System.Xml.XmlDownloadManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEntity", 
    $sig.make(0x26F5F, $.Object, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveUri", 
    $sig.make(0x26F60, $asm07.TypeRef("System.Uri"), [$asm07.TypeRef("System.Uri"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CachePolicy", 
    $sig.make(0x26F59, null, [$asm07.TypeRef("System.Net.Cache.RequestCachePolicy")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
    $sig.make(0x26F52, null, [$asm07.TypeRef("System.Net.ICredentials")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Proxy", 
    $sig.make(0x26F55, null, [$asm07.TypeRef("System.Net.IWebProxy")], [])
  );

  $.Field({Static:true , Public:false}, "s_DownloadManager", $.Object); 
  $.Field({Static:false, Public:false}, "_credentials", $asm07.TypeRef("System.Net.ICredentials")); 
  $.Field({Static:false, Public:false}, "_proxy", $asm07.TypeRef("System.Net.IWebProxy")); 
  $.Field({Static:false, Public:false}, "_cachePolicy", $asm07.TypeRef("System.Net.Cache.RequestCachePolicy")); 
  $.Property({Static:true , Public:false}, "DownloadManager", $asm0E.TypeRef("System.Xml.XmlDownloadManager"));

  $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm07.TypeRef("System.Net.ICredentials"));

  $.Property({Static:false, Public:true }, "Proxy", $asm07.TypeRef("System.Net.IWebProxy"));

  $.Property({Static:false, Public:true }, "CachePolicy", $asm07.TypeRef("System.Net.Cache.RequestCachePolicy"));

});

JSIL.MakeClass($asm06.TypeRef("System.Text.EncoderFallback"), "System.Xml.CharEntityEncoderFallback", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x275BC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanReplaceAt", 
    $sig.make(0x275BF, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateFallbackBuffer", 
    $sig.make(0x275BD, $asm06.TypeRef("System.Text.EncoderFallbackBuffer"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxCharCount", 
    $sig.make(0x275B9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StartOffset", 
    $sig.make(0x275BA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x275BE, null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_StartOffset", 
    $sig.make(0x275BB, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "fallbackBuffer", $asm0E.TypeRef("System.Xml.CharEntityEncoderFallbackBuffer")); 
  $.Field({Static:false, Public:false}, "textContentMarks", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "endMarkPos", $.Int32); 
  $.Field({Static:false, Public:false}, "curMarkPos", $.Int32); 
  $.Field({Static:false, Public:false}, "startOffset", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "MaxCharCount", $.Int32);

  $.Property({Static:false, Public:false}, "StartOffset", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Text.EncoderFallbackBuffer"), "System.Xml.CharEntityEncoderFallbackBuffer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2761F, null, [$asm0E.TypeRef("System.Xml.CharEntityEncoderFallback")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Fallback", 
    $sig.make(0x27620, $.Boolean, [$.Char, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Fallback", 
    $sig.make(0x27621, $.Boolean, [
        $.Char, $.Char, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Remaining", 
    $sig.make(0x2761E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNextChar", 
    $sig.make(0x27622, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MovePrevious", 
    $sig.make(0x27623, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x27624, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SurrogateCharToUtf32", 
    $sig.make(0x27625, $.Int32, [$.Char, $.Char], [])
  );

  $.Field({Static:false, Public:false}, "parent", $asm0E.TypeRef("System.Xml.CharEntityEncoderFallback")); 
  $.Field({Static:false, Public:false}, "charEntity", $.String); 
  $.Field({Static:false, Public:false}, "charEntityIndex", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Remaining", $.Int32);

});

JSIL.MakeEnum(
  "System.Xml.ConformanceLevel", true, {
    Auto: 0, 
    Fragment: 1, 
    Document: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DtdProcessing", true, {
    Prohibit: 0, 
    Ignore: 1, 
    Parse: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.EntityHandling", true, {
    ExpandEntities: 1, 
    ExpandCharEntities: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlWriter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x9BAD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x9B84, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA3, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA4, $.Type, [$.String, $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA5, $.Type, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA6, $.Type, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA7, $.Type, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA8, $.Type, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BA9, $.Type, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BAA, $.Type, [$asm06.TypeRef("System.Text.StringBuilder"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BAB, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9BAC, $.Type, [$.Type, $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x9BA0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x9BA1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x9B85, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x9B5A, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteState", 
    $sig.make(0x9B5B, $asm0E.TypeRef("System.Xml.WriteState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x9B5E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x9B5C, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x9B87, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteAttributes", 
    $sig.make(0x9B9A, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
    $sig.make(0x9B6B, null, [
        $.String, $.String, 
        $.String
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
    $sig.make(0x9B6C, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
    $sig.make(0x9B6D, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x9B82, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBinHex", 
    $sig.make(0x9B83, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x9B72, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x9B79, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x9B7F, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x9B74, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x9B65, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
    $sig.make(0x9B9D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
    $sig.make(0x9B9E, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
    $sig.make(0x9B9F, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x9B71, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0x9B64, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x9B69, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x9B77, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x9B6A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLocalNamespaces", 
    $sig.make(0x9BA2, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteName", 
    $sig.make(0x9B8A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNmToken", 
    $sig.make(0x9B89, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNode", 
    $sig.make(0x9B9B, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNode", 
    $sig.make(0x9B9C, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x9B75, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteQualifiedName", 
    $sig.make(0x9B8C, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x9B80, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x9B81, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x9B6E, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x9B6F, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x9B70, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x9B62, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x9B63, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x9B66, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x9B67, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x9B68, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x9B7C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x9B7E, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B90, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B92, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B93, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B94, null, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B95, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B96, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B97, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B98, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x9B99, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x9B7B, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "WriteNodeBufferSize", 1024); 
  $.Field({Static:false, Public:false}, "writeNodeBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0E.TypeRef("System.Xml.WriteState"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlRawWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27272, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Close", 
    $sig.make(0x27270, null, [$asm0E.TypeRef("System.Xml.WriteState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceResolver", 
    $sig.make(0x27235, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27237, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteState", 
    $sig.make(0x27232, $asm0E.TypeRef("System.Xml.WriteState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27234, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27233, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x2723F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnRootElement", 
    $sig.make(0x2725A, null, [$asm0E.TypeRef("System.Xml.ConformanceLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NamespaceResolver", 
    $sig.make(0x27236, null, [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27258, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteAttributes", 
    $sig.make(0x2724F, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x2723E, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27243, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27244, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27247, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x2723B, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndBase64", 
    $sig.make(0x2726F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0x2723A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x2723C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x2725C, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndNamespaceDeclaration", 
    $sig.make(0x2726D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x2723D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x2725D, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteName", 
    $sig.make(0x27241, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27261, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNmToken", 
    $sig.make(0x27240, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNode", 
    $sig.make(0x27251, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNode", 
    $sig.make(0x27252, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteQualifiedName", 
    $sig.make(0x27242, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedName", 
    $sig.make(0x2725F, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27248, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27249, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x27238, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x27239, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartNamespaceDeclaration", 
    $sig.make(0x27263, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27245, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x2724A, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x2724D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27246, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27254, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27256, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "base64Encoder", $asm0E.TypeRef("System.Xml.XmlRawWriterBase64Encoder")); 
  $.Field({Static:false, Public:false}, "resolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0E.TypeRef("System.Xml.WriteState"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlEncodedRawTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27568, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2756A, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2756E, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTextContentMark", 
    $sig.make(0x2759F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27590, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EncodeChars", 
    $sig.make(0x27593, null, [
        $.Int32, $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27591, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushBuffer", 
    $sig.make(0x27592, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushEncoder", 
    $sig.make(0x27594, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27565, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27566, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GrowTextContentMarks", 
    $sig.make(0x275A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RawText", 
    $sig.make(0x27597, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x2757D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateContentChars", 
    $sig.make(0x275AC, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27585, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCDataSection", 
    $sig.make(0x2759B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27589, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x2758D, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27586, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCommentOrPi", 
    $sig.make(0x2759A, null, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x2757B, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27581, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x2757E, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndNamespaceDeclaration", 
    $sig.make(0x27584, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27588, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x2757F, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27582, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27587, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x2758E, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x2758F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27580, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x2757C, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartNamespaceDeclaration", 
    $sig.make(0x27583, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x2758B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x2758C, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x2758A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27571, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27574, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "BUFSIZE", 6144); 
  $.Constant({Static:true , Public:false}, "OVERFLOW", 32); 
  $.Constant({Static:true , Public:false}, "INIT_MARKS_COUNT", 64); 
  $.Field({Static:false, Public:false}, "bufBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "stream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "encoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "bufPos", $.Int32); 
  $.Field({Static:false, Public:false}, "textPos", $.Int32); 
  $.Field({Static:false, Public:false}, "contentPos", $.Int32); 
  $.Field({Static:false, Public:false}, "cdataPos", $.Int32); 
  $.Field({Static:false, Public:false}, "attrEndPos", $.Int32); 
  $.Field({Static:false, Public:false}, "bufLen", $.Int32); 
  $.Field({Static:false, Public:false}, "writeToNull", $.Boolean); 
  $.Field({Static:false, Public:false}, "hadDoubleBracket", $.Boolean); 
  $.Field({Static:false, Public:false}, "inAttributeValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "bufBytesUsed", $.Int32); 
  $.Field({Static:false, Public:false}, "bufChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "encoder", $asm06.TypeRef("System.Text.Encoder")); 
  $.Field({Static:false, Public:false}, "writer", $asm06.TypeRef("System.IO.TextWriter")); 
  $.Field({Static:false, Public:false}, "trackTextContent", $.Boolean); 
  $.Field({Static:false, Public:false}, "inTextContent", $.Boolean); 
  $.Field({Static:false, Public:false}, "lastMarkPos", $.Int32); 
  $.Field({Static:false, Public:false}, "textContentMarks", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "charEntityFallback", $asm0E.TypeRef("System.Xml.CharEntityEncoderFallback")); 
  $.Field({Static:false, Public:false}, "newLineHandling", $asm0E.TypeRef("System.Xml.NewLineHandling")); 
  $.Field({Static:false, Public:false}, "closeOutput", $.Boolean); 
  $.Field({Static:false, Public:false}, "omitXmlDeclaration", $.Boolean); 
  $.Field({Static:false, Public:false}, "newLineChars", $.String); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "standalone", $asm0E.TypeRef("System.Xml.XmlStandalone")); 
  $.Field({Static:false, Public:false}, "outputMethod", $asm0E.TypeRef("System.Xml.XmlOutputMethod")); 
  $.Field({Static:false, Public:false}, "autoXmlDeclaration", $.Boolean); 
  $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlEncodedRawTextWriter"), "System.Xml.HtmlEncodedRawTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x275F5, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x275F7, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x2760B, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OutputRestAmps", 
    $sig.make(0x27611, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x275FF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27608, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x2760A, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x275FD, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27604, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27600, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27607, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27601, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMetaElement", 
    $sig.make(0x2760C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27605, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27603, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x275FE, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27606, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27609, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x275F9, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x275FB, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "StackIncrement", 10); 
  $.Field({Static:false, Public:false}, "elementScope", $asm0E.TypeRef("System.Xml.ByteStack")); 
  $.Field({Static:false, Public:false}, "currentElementProperties", $asm0E.TypeRef("System.Xml.ElementProperties")); 
  $.Field({Static:false, Public:false}, "currentAttributeProperties", $asm0E.TypeRef("System.Xml.AttributeProperties")); 
  $.Field({Static:false, Public:false}, "endsWithAmpersand", $.Boolean); 
  $.Field({Static:false, Public:false}, "uriEscapingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "mediaType", $.String); 
  $.Field({Static:true , Public:false}, "elementPropertySearch", $asm0E.TypeRef("System.Xml.TernaryTreeReadOnly")); 
  $.Field({Static:true , Public:false}, "attributePropertySearch", $asm0E.TypeRef("System.Xml.TernaryTreeReadOnly")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.HtmlEncodedRawTextWriter"), "System.Xml.HtmlEncodedRawTextWriterIndent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27822, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27823, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushBuffer", 
    $sig.make(0x27829, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x2782A, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27826, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27824, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27827, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
    $sig.make(0x2782C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27828, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27825, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "endBlockPos", $.Int32); 
  $.Field({Static:false, Public:false}, "indentChars", $.String); 
  $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.HtmlTernaryTree", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2785E, null, [], [])
  );

  $.Field({Static:true , Public:false}, "htmlElements", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "htmlAttributes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlUtf8RawTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27886, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27887, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x278AC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x278AD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushBuffer", 
    $sig.make(0x278AE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushEncoder", 
    $sig.make(0x278B0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27884, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27885, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSurrogateByte", 
    $sig.make(0x278BF, $.Boolean, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RawText", 
    $sig.make(0x278B5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x2788C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateContentChars", 
    $sig.make(0x278DE, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27896, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCDataSection", 
    $sig.make(0x278BD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x2789D, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x278A3, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27897, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCommentOrPi", 
    $sig.make(0x278BB, null, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x2788A, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27890, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x2788D, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndNamespaceDeclaration", 
    $sig.make(0x27893, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x2789B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x2788E, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27891, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27899, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x278A4, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x278A5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x2788F, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x2788B, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartNamespaceDeclaration", 
    $sig.make(0x27892, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x278A1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x278A2, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x2789F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27888, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27889, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "BUFSIZE", 6144); 
  $.Constant({Static:true , Public:false}, "OVERFLOW", 32); 
  $.Constant({Static:true , Public:false}, "INIT_MARKS_COUNT", 64); 
  $.Field({Static:false, Public:false}, "bufBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "stream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "encoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "bufPos", $.Int32); 
  $.Field({Static:false, Public:false}, "textPos", $.Int32); 
  $.Field({Static:false, Public:false}, "contentPos", $.Int32); 
  $.Field({Static:false, Public:false}, "cdataPos", $.Int32); 
  $.Field({Static:false, Public:false}, "attrEndPos", $.Int32); 
  $.Field({Static:false, Public:false}, "bufLen", $.Int32); 
  $.Field({Static:false, Public:false}, "writeToNull", $.Boolean); 
  $.Field({Static:false, Public:false}, "hadDoubleBracket", $.Boolean); 
  $.Field({Static:false, Public:false}, "inAttributeValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "newLineHandling", $asm0E.TypeRef("System.Xml.NewLineHandling")); 
  $.Field({Static:false, Public:false}, "closeOutput", $.Boolean); 
  $.Field({Static:false, Public:false}, "omitXmlDeclaration", $.Boolean); 
  $.Field({Static:false, Public:false}, "newLineChars", $.String); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "standalone", $asm0E.TypeRef("System.Xml.XmlStandalone")); 
  $.Field({Static:false, Public:false}, "outputMethod", $asm0E.TypeRef("System.Xml.XmlOutputMethod")); 
  $.Field({Static:false, Public:false}, "autoXmlDeclaration", $.Boolean); 
  $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlUtf8RawTextWriter"), "System.Xml.HtmlUtf8RawTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2791F, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x2794A, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OutputRestAmps", 
    $sig.make(0x27960, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27927, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27939, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27942, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27924, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x2792E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27929, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27935, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x2792B, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMetaElement", 
    $sig.make(0x2794D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27930, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x2792C, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27925, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27932, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x2793F, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27920, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27922, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "StackIncrement", 10); 
  $.Field({Static:false, Public:false}, "elementScope", $asm0E.TypeRef("System.Xml.ByteStack")); 
  $.Field({Static:false, Public:false}, "currentElementProperties", $asm0E.TypeRef("System.Xml.ElementProperties")); 
  $.Field({Static:false, Public:false}, "currentAttributeProperties", $asm0E.TypeRef("System.Xml.AttributeProperties")); 
  $.Field({Static:false, Public:false}, "endsWithAmpersand", $.Boolean); 
  $.Field({Static:false, Public:false}, "uriEscapingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "mediaType", $.String); 
  $.Field({Static:true , Public:false}, "elementPropertySearch", $asm0E.TypeRef("System.Xml.TernaryTreeReadOnly")); 
  $.Field({Static:true , Public:false}, "attributePropertySearch", $asm0E.TypeRef("System.Xml.TernaryTreeReadOnly")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.HtmlUtf8RawTextWriter"), "System.Xml.HtmlUtf8RawTextWriterIndent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27990, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushBuffer", 
    $sig.make(0x27996, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x27997, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27993, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27991, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27994, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
    $sig.make(0x27998, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27995, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27992, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "endBlockPos", $.Int32); 
  $.Field({Static:false, Public:false}, "indentChars", $.String); 
  $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
});

JSIL.MakeInterface(
  "System.Xml.IDtdInfo", false, [], function ($) {
    $.Method({}, "get_Name", $sig.make(0xA977, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], []));
    $.Method({}, "get_InternalDtdSubset", $sig.make(0xA978, $.String, [], []));
    $.Method({}, "get_HasDefaultAttributes", $sig.make(0xA979, $.Boolean, [], []));
    $.Method({}, "get_HasNonCDataAttributes", $sig.make(0xA97A, $.Boolean, [], []));
    $.Method({}, "LookupAttributeList", $sig.make(0xA97B, $asm0E.TypeRef("System.Xml.IDtdAttributeListInfo"), [$.String, $.String], []));
    $.Method({}, "GetAttributeLists", $sig.make(0xA97C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")]), [], []));
    $.Method({}, "LookupEntity", $sig.make(0xA97D, $asm0E.TypeRef("System.Xml.IDtdEntityInfo"), [$.String], []));
    $.Property({}, "Name");
    $.Property({}, "InternalDtdSubset");
    $.Property({}, "HasDefaultAttributes");
    $.Property({}, "HasNonCDataAttributes");
  }, []);

JSIL.MakeInterface(
  "System.Xml.IDtdAttributeListInfo", false, [], function ($) {
    $.Method({}, "get_Prefix", $sig.make(0xB255, $.String, [], []));
    $.Method({}, "get_LocalName", $sig.make(0xB256, $.String, [], []));
    $.Method({}, "get_HasNonCDataAttributes", $sig.make(0xB257, $.Boolean, [], []));
    $.Method({}, "LookupAttribute", $sig.make(0xB258, $asm0E.TypeRef("System.Xml.IDtdAttributeInfo"), [$.String, $.String], []));
    $.Method({}, "LookupDefaultAttributes", $sig.make(0xB259, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo")]), [], []));
    $.Method({}, "LookupIdAttribute", $sig.make(0xB25A, $asm0E.TypeRef("System.Xml.IDtdAttributeInfo"), [], []));
    $.Property({}, "Prefix");
    $.Property({}, "LocalName");
    $.Property({}, "HasNonCDataAttributes");
  }, []);

JSIL.MakeInterface(
  "System.Xml.IDtdAttributeInfo", false, [], function ($) {
    $.Method({}, "get_Prefix", $sig.make(0xB2E8, $.String, [], []));
    $.Method({}, "get_LocalName", $sig.make(0xB2E9, $.String, [], []));
    $.Method({}, "get_LineNumber", $sig.make(0xB2EA, $.Int32, [], []));
    $.Method({}, "get_LinePosition", $sig.make(0xB2EB, $.Int32, [], []));
    $.Method({}, "get_IsNonCDataType", $sig.make(0xB2EC, $.Boolean, [], []));
    $.Method({}, "get_IsDeclaredInExternal", $sig.make(0xB2ED, $.Boolean, [], []));
    $.Method({}, "get_IsXmlAttribute", $sig.make(0xB2EE, $.Boolean, [], []));
    $.Property({}, "Prefix");
    $.Property({}, "LocalName");
    $.Property({}, "LineNumber");
    $.Property({}, "LinePosition");
    $.Property({}, "IsNonCDataType");
    $.Property({}, "IsDeclaredInExternal");
    $.Property({}, "IsXmlAttribute");
  }, []);

JSIL.MakeInterface(
  "System.Xml.IDtdDefaultAttributeInfo", false, [], function ($) {
    $.Method({}, "get_DefaultValueExpanded", $sig.make(0xB2EF, $.String, [], []));
    $.Method({}, "get_DefaultValueTyped", $sig.make(0xB2F0, $.Object, [], []));
    $.Method({}, "get_ValueLineNumber", $sig.make(0xB2F1, $.Int32, [], []));
    $.Method({}, "get_ValueLinePosition", $sig.make(0xB2F2, $.Int32, [], []));
    $.Property({}, "DefaultValueExpanded");
    $.Property({}, "DefaultValueTyped");
    $.Property({}, "ValueLineNumber");
    $.Property({}, "ValueLinePosition");
  }, [$asm0E.TypeRef("System.Xml.IDtdAttributeInfo")]);

JSIL.MakeInterface(
  "System.Xml.IDtdEntityInfo", false, [], function ($) {
    $.Method({}, "get_Name", $sig.make(0xB249, $.String, [], []));
    $.Method({}, "get_IsExternal", $sig.make(0xB24A, $.Boolean, [], []));
    $.Method({}, "get_IsDeclaredInExternal", $sig.make(0xB24B, $.Boolean, [], []));
    $.Method({}, "get_IsUnparsedEntity", $sig.make(0xB24C, $.Boolean, [], []));
    $.Method({}, "get_IsParameterEntity", $sig.make(0xB24D, $.Boolean, [], []));
    $.Method({}, "get_BaseUriString", $sig.make(0xB24E, $.String, [], []));
    $.Method({}, "get_DeclaredUriString", $sig.make(0xB24F, $.String, [], []));
    $.Method({}, "get_SystemId", $sig.make(0xB250, $.String, [], []));
    $.Method({}, "get_PublicId", $sig.make(0xB251, $.String, [], []));
    $.Method({}, "get_Text", $sig.make(0xB252, $.String, [], []));
    $.Method({}, "get_LineNumber", $sig.make(0xB253, $.Int32, [], []));
    $.Method({}, "get_LinePosition", $sig.make(0xB254, $.Int32, [], []));
    $.Property({}, "Name");
    $.Property({}, "IsExternal");
    $.Property({}, "IsDeclaredInExternal");
    $.Property({}, "IsUnparsedEntity");
    $.Property({}, "IsParameterEntity");
    $.Property({}, "BaseUriString");
    $.Property({}, "DeclaredUriString");
    $.Property({}, "SystemId");
    $.Property({}, "PublicId");
    $.Property({}, "Text");
    $.Property({}, "LineNumber");
    $.Property({}, "LinePosition");
  }, []);

JSIL.MakeInterface(
  "System.Xml.IDtdParser", false, [], function ($) {
    $.Method({}, "ParseInternalDtd", $sig.make(0x2765E, $asm0E.TypeRef("System.Xml.IDtdInfo"), [$asm0E.TypeRef("System.Xml.IDtdParserAdapter"), $.Boolean], []));
    $.Method({}, "ParseFreeFloatingDtd", $sig.make(0x2765F, $asm0E.TypeRef("System.Xml.IDtdInfo"), [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm0E.TypeRef("System.Xml.IDtdParserAdapter")
        ], []));
  }, []);

JSIL.MakeInterface(
  "System.Xml.IDtdParserAdapter", false, [], function ($) {
    $.Method({}, "get_NameTable", $sig.make(0x27660, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], []));
    $.Method({}, "get_NamespaceResolver", $sig.make(0x27662, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], []));
    $.Method({}, "get_BaseUri", $sig.make(0x27663, $asm07.TypeRef("System.Uri"), [], []));
    $.Method({}, "get_ParsingBuffer", $sig.make(0x27664, $jsilcore.TypeRef("System.Array", [$.Char]), [], []));
    $.Method({}, "get_ParsingBufferLength", $sig.make(0x27669, $.Int32, [], []));
    $.Method({}, "get_CurrentPosition", $sig.make(0x2766D, $.Int32, [], []));
    $.Method({}, "set_CurrentPosition", $sig.make(0x2766E, null, [$.Int32], []));
    $.Method({}, "get_LineNo", $sig.make(0x27670, $.Int32, [], []));
    $.Method({}, "get_LineStartPosition", $sig.make(0x27671, $.Int32, [], []));
    $.Method({}, "get_IsEof", $sig.make(0x27673, $.Boolean, [], []));
    $.Method({}, "get_EntityStackLength", $sig.make(0x27676, $.Int32, [], []));
    $.Method({}, "get_IsEntityEolNormalized", $sig.make(0x2767F, $.Boolean, [], []));
    $.Method({}, "ReadData", $sig.make(0x27683, $.Int32, [], []));
    $.Method({}, "OnNewLine", $sig.make(0x27684, null, [$.Int32], []));
    $.Method({}, "ParseNumericCharRef", $sig.make(0x27687, $.Int32, [$asm06.TypeRef("System.Text.StringBuilder")], []));
    $.Method({}, "ParseNamedCharRef", $sig.make(0x27689, $.Int32, [$.Boolean, $asm06.TypeRef("System.Text.StringBuilder")], []));
    $.Method({}, "ParsePI", $sig.make(0x2768A, null, [$asm06.TypeRef("System.Text.StringBuilder")], []));
    $.Method({}, "ParseComment", $sig.make(0x2768C, null, [$asm06.TypeRef("System.Text.StringBuilder")], []));
    $.Method({}, "PushEntity", $sig.make(0x2768F, $.Boolean, [$asm0E.TypeRef("System.Xml.IDtdEntityInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], []));
    $.Method({}, "PopEntity", $sig.make(0x27692, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.IDtdEntityInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], []));
    $.Method({}, "PushExternalSubset", $sig.make(0x27694, $.Boolean, [$.String, $.String], []));
    $.Method({}, "PushInternalDtd", $sig.make(0x27695, null, [$.String, $.String], []));
    $.Method({}, "OnSystemId", $sig.make(0x27697, null, [
          $.String, $asm0E.TypeRef("System.Xml.LineInfo"), 
          $asm0E.TypeRef("System.Xml.LineInfo")
        ], []));
    $.Method({}, "OnPublicId", $sig.make(0x27699, null, [
          $.String, $asm0E.TypeRef("System.Xml.LineInfo"), 
          $asm0E.TypeRef("System.Xml.LineInfo")
        ], []));
    $.Method({}, "Throw", $sig.make(0x2769C, null, [$asm06.TypeRef("System.Exception")], []));
    $.Property({}, "NameTable");
    $.Property({}, "NamespaceResolver");
    $.Property({}, "BaseUri");
    $.Property({}, "ParsingBuffer");
    $.Property({}, "ParsingBufferLength");
    $.Property({}, "CurrentPosition");
    $.Property({}, "LineNo");
    $.Property({}, "LineStartPosition");
    $.Property({}, "IsEof");
    $.Property({}, "EntityStackLength");
    $.Property({}, "IsEntityEolNormalized");
  }, []);

JSIL.MakeInterface(
  "System.Xml.IDtdParserAdapterWithValidation", false, [], function ($) {
    $.Method({}, "get_DtdValidation", $sig.make(0x276A6, $.Boolean, [], []));
    $.Method({}, "get_ValidationEventHandling", $sig.make(0x276A9, $asm0E.TypeRef("System.Xml.IValidationEventHandling"), [], []));
    $.Property({}, "DtdValidation");
    $.Property({}, "ValidationEventHandling");
  }, [$asm0E.TypeRef("System.Xml.IDtdParserAdapter")]);

JSIL.MakeInterface(
  "System.Xml.IDtdParserAdapterV1", false, [], function ($) {
    $.Method({}, "get_V1CompatibilityMode", $sig.make(0x276B2, $.Boolean, [], []));
    $.Method({}, "get_Normalization", $sig.make(0x276B5, $.Boolean, [], []));
    $.Method({}, "get_Namespaces", $sig.make(0x276BC, $.Boolean, [], []));
    $.Property({}, "V1CompatibilityMode");
    $.Property({}, "Normalization");
    $.Property({}, "Namespaces");
  }, [$asm0E.TypeRef("System.Xml.IDtdParserAdapterWithValidation"), $asm0E.TypeRef("System.Xml.IDtdParserAdapter")]);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.IncrementalReadDummyDecoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x276C8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0x276C3, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0x276C5, $.Int32, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DecodedCount", 
    $sig.make(0x276C0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
    $sig.make(0x276C1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x276C6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNextOutputBuffer", 
    $sig.make(0x276C2, null, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.IncrementalReadCharsDecoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB2CD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB2CE, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Decode", 
    $sig.make(0xB2CF, $.Int32, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DecodedCount", 
    $sig.make(0xB2CB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
    $sig.make(0xB2CC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0xB2D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNextOutputBuffer", 
    $sig.make(0xB2D1, null, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

});

JSIL.MakeInterface(
  "System.Xml.IValidationEventHandling", false, [], function ($) {
    $.Method({}, "get_EventHandler", $sig.make(0xB2AC, $.Object, [], []));
    $.Method({}, "SendEvent", $sig.make(0xB2AD, null, [$asm06.TypeRef("System.Exception"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], []));
    $.Property({}, "EventHandler");
  }, []);

JSIL.MakeEnum(
  "System.Xml.NamespaceHandling", true, {
    Default: 0, 
    OmitDuplicates: 1
  }, true
);

JSIL.MakeEnum(
  "System.Xml.NewLineHandling", true, {
    Replace: 0, 
    Entitize: 1, 
    None: 2
  }, false
);

JSIL.MakeDelegate("System.Xml.OnRemoveWriter", false, []);

JSIL.MakeInterface(
  "System.Xml.IRemovableWriter", false, [], function ($) {
    $.Method({}, "get_OnRemoveWriterEvent", $sig.make(0x2777B, $asm0E.TypeRef("System.Xml.OnRemoveWriter"), [], []));
    $.Method({}, "set_OnRemoveWriterEvent", $sig.make(0x2777C, null, [$asm0E.TypeRef("System.Xml.OnRemoveWriter")], []));
    $.Property({}, "OnRemoveWriterEvent");
  }, []);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.QueryOutputWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27781, null, [$asm0E.TypeRef("System.Xml.XmlRawWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x2779F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndCDataSection", 
    $sig.make(0x277AB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x277A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceResolver", 
    $sig.make(0x2777D, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x2777F, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27780, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NamespaceResolver", 
    $sig.make(0x2777E, null, [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartCDataSection", 
    $sig.make(0x277A3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27788, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x2778E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27795, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27793, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x2778F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27784, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x2778A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27786, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndNamespaceDeclaration", 
    $sig.make(0x2778D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27794, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27787, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x2778B, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27790, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27798, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x2779E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27789, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27785, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartNamespaceDeclaration", 
    $sig.make(0x2778C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27792, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27797, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27791, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27782, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27783, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "wrapped", $asm0E.TypeRef("System.Xml.XmlRawWriter")); 
  $.Field({Static:false, Public:false}, "inCDataSection", $.Boolean); 
  $.Field({Static:false, Public:false}, "lookupCDataElems", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Int32])); 
  $.Field({Static:false, Public:false}, "bitsCData", $asm0E.TypeRef("System.Xml.BitStack")); 
  $.Field({Static:false, Public:false}, "qnameCData", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "outputDocType", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkWellFormedDoc", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasDocElem", $.Boolean); 
  $.Field({Static:false, Public:false}, "inAttr", $.Boolean); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "depth", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWriter"), "System.Xml.QueryOutputWriterV1", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x277CC, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x277E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndCDataSection", 
    $sig.make(0x277E9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x277E6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteState", 
    $sig.make(0x277CB, $asm0E.TypeRef("System.Xml.WriteState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x277E7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartCDataSection", 
    $sig.make(0x277E8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x277DC, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x277D6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x277DE, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x277DB, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x277D7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x277D0, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x277D5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0x277CF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x277D2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x277DD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x277D3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x277D8, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x277E2, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x277E4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x277D4, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x277CD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x277CE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x277D1, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x277DA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x277DF, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x277D9, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "wrapped", $asm0E.TypeRef("System.Xml.XmlWriter")); 
  $.Field({Static:false, Public:false}, "inCDataSection", $.Boolean); 
  $.Field({Static:false, Public:false}, "lookupCDataElems", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")])); 
  $.Field({Static:false, Public:false}, "bitsCData", $asm0E.TypeRef("System.Xml.BitStack")); 
  $.Field({Static:false, Public:false}, "qnameCData", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "outputDocType", $.Boolean); 
  $.Field({Static:false, Public:false}, "inAttr", $.Boolean); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "standalone", $asm0E.TypeRef("System.Xml.XmlStandalone")); 
  $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0E.TypeRef("System.Xml.WriteState"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.ReadContentAsBinaryHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB85B, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateOrReset", 
    $sig.make(0xB85C, $.Type, [$.Type, $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finish", 
    $sig.make(0xB861, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0xB863, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitBase64Decoder", 
    $sig.make(0xB865, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitBinHexDecoder", 
    $sig.make(0xB866, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitOnElement", 
    $sig.make(0xB864, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToNextContentNode", 
    $sig.make(0xB869, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
    $sig.make(0xB85D, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinary", 
    $sig.make(0xB867, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinHex", 
    $sig.make(0xB85E, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBase64", 
    $sig.make(0xB85F, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinary", 
    $sig.make(0xB868, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinHex", 
    $sig.make(0xB860, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0xB862, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "ChunkSize", 256); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "state", $asm0E.TypeRef("System.Xml.ReadContentAsBinaryHelper/State")); 
  $.Field({Static:false, Public:false}, "valueOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "isEnd", $.Boolean); 
  $.Field({Static:false, Public:false}, "canReadValueChunk", $.Boolean); 
  $.Field({Static:false, Public:false}, "valueChunk", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "valueChunkLength", $.Int32); 
  $.Field({Static:false, Public:false}, "decoder", $asm0E.TypeRef("System.Xml.IncrementalReadDecoder")); 
  $.Field({Static:false, Public:false}, "base64Decoder", $asm0E.TypeRef("System.Xml.Base64Decoder")); 
  $.Field({Static:false, Public:false}, "binHexDecoder", $asm0E.TypeRef("System.Xml.BinHexDecoder")); 
});

JSIL.MakeEnum(
  "System.Xml.ReadContentAsBinaryHelper/State", false, {
    None: 0, 
    InReadContent: 1, 
    InReadElementContent: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.TernaryTreeByte", false, {
    characterByte: 0, 
    leftTree: 1, 
    rightTree: 2, 
    data: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.ElementProperties", false, {
    DEFAULT: 0, 
    URI_PARENT: 1, 
    BOOL_PARENT: 2, 
    NAME_PARENT: 4, 
    EMPTY: 8, 
    NO_ENTITIES: 16, 
    HEAD: 32, 
    BLOCK_WS: 64, 
    HAS_NS: 128
  }, false
);

JSIL.MakeEnum(
  "System.Xml.AttributeProperties", false, {
    DEFAULT: 0, 
    URI: 1, 
    BOOLEAN: 2, 
    NAME: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.TernaryTreeReadOnly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2762C, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FindCaseInsensitiveString", 
    $sig.make(0x2762D, $.Byte, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "nodeBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
});

JSIL.MakeEnum(
  "System.Xml.ReadState", true, {
    Initial: 0, 
    Interactive: 1, 
    Error: 2, 
    EndOfFile: 3, 
    Closed: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.SecureStringHasher", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x277FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x277FE, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x277FF, $.Int32, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.String]))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlEncodedRawTextWriter"), "System.Xml.TextEncodedRawTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B98, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B99, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27B97, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27BA0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27BA4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27BA8, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27BAC, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27BA5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27B9C, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27BA2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27B9E, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27BA7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27B9F, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27BA3, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27BA6, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27BAD, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27BAE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27BA1, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27B9D, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27BAB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27BA9, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27BAA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27B9A, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27B9B, null, [$.String], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlUtf8RawTextWriter"), "System.Xml.TextUtf8RawTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27BBE, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27BBD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27BC5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27BC9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27BCD, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27BD1, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27BCA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27BC1, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27BC7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27BC3, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27BCC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27BC4, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27BC8, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27BCB, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27BD2, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27BD3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27BC6, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27BC2, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27BD0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27BCE, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27BCF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27BBF, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27BC0, null, [$.String], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.ValidatingReaderNodeData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27BFE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C00, null, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0x27C05, null, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearName", 
    $sig.make(0x27C07, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttInfo", 
    $sig.make(0x27BF9, $asm0E.TypeRef("System.Xml.AttributePSVIInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x27BF1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x27BFB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27BFC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27BE7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x27BEB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27BF7, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OriginalStringValue", 
    $sig.make(0x27BF5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27BEF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RawValue", 
    $sig.make(0x27BF3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAtomizedNameWPrefix", 
    $sig.make(0x27C02, $.String, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AttInfo", 
    $sig.make(0x27BFA, null, [$asm0E.TypeRef("System.Xml.AttributePSVIInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
    $sig.make(0x27BF2, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LocalName", 
    $sig.make(0x27BE9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x27BED, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NodeType", 
    $sig.make(0x27BF8, null, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OriginalStringValue", 
    $sig.make(0x27BF6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
    $sig.make(0x27BF0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
    $sig.make(0x27BF4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
    $sig.make(0x27C0B, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
    $sig.make(0x27C0D, null, [
        $.String, $.String, 
        $.String, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
    $sig.make(0x27C0F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
    $sig.make(0x27C11, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
    $sig.make(0x27C08, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
    $sig.make(0x27C0A, null, [$asm0E.TypeRef("System.Xml.IXmlLineInfo")], [])
  );

  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "nameWPrefix", $.String); 
  $.Field({Static:false, Public:false}, "rawValue", $.String); 
  $.Field({Static:false, Public:false}, "originalStringValue", $.String); 
  $.Field({Static:false, Public:false}, "depth", $.Int32); 
  $.Field({Static:false, Public:false}, "attributePSVIInfo", $asm0E.TypeRef("System.Xml.AttributePSVIInfo")); 
  $.Field({Static:false, Public:false}, "nodeType", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
  $.Field({Static:false, Public:false}, "linePos", $.Int32); 
  $.Property({Static:false, Public:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true }, "RawValue", $.String);

  $.Property({Static:false, Public:true }, "OriginalStringValue", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true }, "AttInfo", $asm0E.TypeRef("System.Xml.AttributePSVIInfo"));

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

});

JSIL.MakeEnum(
  "System.Xml.ValidationType", true, {
    None: 0, 
    Auto: 1, 
    DTD: 2, 
    XDR: 3, 
    Schema: 4
  }, false
);

JSIL.MakeEnum(
  "System.Xml.WhitespaceHandling", true, {
    All: 0, 
    Significant: 1, 
    None: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlAutoDetectWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27D6F, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D70, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D71, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27D83, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWrappedWriter", 
    $sig.make(0x27D99, null, [$asm0E.TypeRef("System.Xml.XmlOutputMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureWrappedWriter", 
    $sig.make(0x27D97, null, [$asm0E.TypeRef("System.Xml.XmlOutputMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27D84, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceResolver", 
    $sig.make(0x27D6C, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OnRemoveWriterEvent", 
    $sig.make(0x27D69, $asm0E.TypeRef("System.Xml.OnRemoveWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27D6B, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x27D6E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsHtmlTag", 
    $sig.make(0x27D96, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NamespaceResolver", 
    $sig.make(0x27D6D, null, [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OnRemoveWriterEvent", 
    $sig.make(0x27D6A, null, [$asm0E.TypeRef("System.Xml.OnRemoveWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27D90, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TextBlockCreatesWriter", 
    $sig.make(0x27D98, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x27D81, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBinHex", 
    $sig.make(0x27D82, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27D76, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27D7F, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27D7B, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27D77, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27D72, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27D75, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27D91, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndNamespaceDeclaration", 
    $sig.make(0x27D95, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27D7E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27D92, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27D93, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27D78, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27D7C, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27D7D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27D74, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27D73, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartNamespaceDeclaration", 
    $sig.make(0x27D94, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27D7A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27D80, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D85, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D86, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D87, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D88, null, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D89, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D8A, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D8B, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D8C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27D8D, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27D79, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27D8E, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27D8F, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "wrapped", $asm0E.TypeRef("System.Xml.XmlRawWriter")); 
  $.Field({Static:false, Public:false}, "onRemove", $asm0E.TypeRef("System.Xml.OnRemoveWriter")); 
  $.Field({Static:false, Public:false}, "writerSettings", $asm0E.TypeRef("System.Xml.XmlWriterSettings")); 
  $.Field({Static:false, Public:false}, "eventCache", $asm0E.TypeRef("System.Xml.XmlEventCache")); 
  $.Field({Static:false, Public:false}, "textWriter", $asm06.TypeRef("System.IO.TextWriter")); 
  $.Field({Static:false, Public:false}, "strm", $asm06.TypeRef("System.IO.Stream")); 
  $.Property({Static:false, Public:true , Virtual:true }, "OnRemoveWriterEvent", $asm0E.TypeRef("System.Xml.OnRemoveWriter"));

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IRemovableWriter"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x9B08, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddLineInfo", 
    $sig.make(0x9AE3, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlLineInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CalcBufferSize", 
    $sig.make(0x9B07, $.Int32, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CanReadContentAs", 
    $sig.make(0x9AD8, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanReadContentAs", 
    $sig.make(0x9ADF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckElement", 
    $sig.make(0x9ADB, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x9AA4, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AEA, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AEB, $.Type, [$.String, $asm0E.TypeRef("System.Xml.XmlReaderSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AED, $.Type, [
        $.String, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AF1, $.Type, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AF3, $.Type, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlReaderSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AF5, $.Type, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AF7, $.Type, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AFC, $.Type, [$asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9AFE, $.Type, [$asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.XmlReaderSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9B01, $.Type, [
        $asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9B04, $.Type, [
        $asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x9B05, $.Type, [$.Type, $asm0E.TypeRef("System.Xml.XmlReaderSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReadContentAsException", 
    $sig.make(0x9ADC, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateReadContentAsException", 
    $sig.make(0x9AE0, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.IXmlLineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReadElementContentAsException", 
    $sig.make(0x9ADE, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateReadElementContentAsException", 
    $sig.make(0x9AE1, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.IXmlLineInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateSqlReader", 
    $sig.make(0x9B06, $.Type, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWriterForInnerOuterXml", 
    $sig.make(0x9AD1, $asm0E.TypeRef("System.Xml.XmlWriter"), [$asm06.TypeRef("System.IO.StringWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x9AD5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x9AD6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsXxx", 
    $sig.make(0x9AE6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x9A3B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x9A2C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x9A4D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadValueChunk", 
    $sig.make(0x9A53, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0x9A4A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
    $sig.make(0x9A69, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x9A2B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0x9A60, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x9A44, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x9A56, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x9A26, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x9A2E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultInternal", 
    $sig.make(0x9A5B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x9A2D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x9A3D, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x9A3E, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x9A3F, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x9A21, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x9A1B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceManager", 
    $sig.make(0x9A58, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x9A23, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x9A48, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x9A19, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x9A25, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0x9A2F, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x9A47, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x9A34, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x9A17, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x9A28, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x9A36, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x9A32, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x9A30, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x9A95, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x9A96, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x9A98, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
    $sig.make(0x9AE7, $asm06.TypeRef("System.Text.Encoding"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetV1ConformanceLevel", 
    $sig.make(0x9AE8, $asm0E.TypeRef("System.Xml.ConformanceLevel"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetXmlTextReaderImpl", 
    $sig.make(0x9AE9, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasValueInternal", 
    $sig.make(0x9AD9, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsString", 
    $sig.make(0x9AE4, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsName", 
    $sig.make(0x9ACB, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsNameToken", 
    $sig.make(0x9ACC, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
    $sig.make(0x9AC1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
    $sig.make(0x9AC2, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
    $sig.make(0x9AC3, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsTextualNode", 
    $sig.make(0x9AD7, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x9AA7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x9A99, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x9A9B, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x9A9D, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToContent", 
    $sig.make(0x9AB1, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x9AA0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x9A9E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x9A9F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x9AA3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x9AA2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAs", 
    $sig.make(0x9A79, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x9AA9, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x9AAC, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBoolean", 
    $sig.make(0x9A6E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDateTime", 
    $sig.make(0x9A6F, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDecimal", 
    $sig.make(0x9A73, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDouble", 
    $sig.make(0x9A71, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsFloat", 
    $sig.make(0x9A72, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsInt", 
    $sig.make(0x9A75, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsLong", 
    $sig.make(0x9A76, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsObject", 
    $sig.make(0x9A6C, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsString", 
    $sig.make(0x9A78, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAs", 
    $sig.make(0x9A92, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAs", 
    $sig.make(0x9A93, $.Object, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x9AAB, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x9AAD, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
    $sig.make(0x9A7C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
    $sig.make(0x9A7D, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDateTime", 
    $sig.make(0x9A7E, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDateTime", 
    $sig.make(0x9A80, $asm06.TypeRef("System.DateTime"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDecimal", 
    $sig.make(0x9A85, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDecimal", 
    $sig.make(0x9A87, $asm06.TypeRef("System.Decimal"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
    $sig.make(0x9A81, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
    $sig.make(0x9A82, $.Double, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsFloat", 
    $sig.make(0x9A83, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsFloat", 
    $sig.make(0x9A84, $.Single, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
    $sig.make(0x9A8C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
    $sig.make(0x9A8D, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
    $sig.make(0x9A8E, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
    $sig.make(0x9A8F, $.Int64, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsObject", 
    $sig.make(0x9A7A, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsObject", 
    $sig.make(0x9A7B, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
    $sig.make(0x9A90, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
    $sig.make(0x9A91, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementString", 
    $sig.make(0x9ABC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementString", 
    $sig.make(0x9ABD, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementString", 
    $sig.make(0x9ABE, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadEndElement", 
    $sig.make(0x9AC0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadInnerXml", 
    $sig.make(0x9ACD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadOuterXml", 
    $sig.make(0x9AD0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadStartElement", 
    $sig.make(0x9AB2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadStartElement", 
    $sig.make(0x9AB4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadStartElement", 
    $sig.make(0x9AB9, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0x9AB0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadSubtree", 
    $sig.make(0x9AD4, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToDescendant", 
    $sig.make(0x9AC6, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToDescendant", 
    $sig.make(0x9AC7, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToFollowing", 
    $sig.make(0x9AC4, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToFollowing", 
    $sig.make(0x9AC5, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToNextSibling", 
    $sig.make(0x9AC9, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToNextSibling", 
    $sig.make(0x9ACA, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadValueChunk", 
    $sig.make(0x9AAF, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x9AA8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNamespacesFlag", 
    $sig.make(0x9AD2, null, [$asm0E.TypeRef("System.Xml.XmlTextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupReadElementContentAsXxx", 
    $sig.make(0x9AE5, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x9AA5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipSubtree", 
    $sig.make(0x9ADA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttributeValue", 
    $sig.make(0x9ACF, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNode", 
    $sig.make(0x9ACE, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $.Boolean], [])
  );

  $.Constant({Static:true , Public:false}, "DefaultBufferSize", 4096); 
  $.Constant({Static:true , Public:false}, "BiggerBufferSize", 8192); 
  $.Constant({Static:true , Public:false}, "MaxStreamLengthForDefaultBufferSize", 65536); 
  $.Field({Static:true , Public:false}, "IsTextualNodeBitmap", $.UInt32, 24600); 
  $.Field({Static:true , Public:false}, "CanReadContentAsBitmap", $.UInt32, 123324); 
  $.Field({Static:true , Public:false}, "HasValueBitmap", $.UInt32, 157084); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:false}, "IsDefaultInternal", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; })
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlReader/XmlReaderDebuggerDisplayProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A864, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x2A865, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlWrappingReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27AFC, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27B1E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x27AD9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27AC6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0x27AED, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x27AC4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0x27AFB, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x27ADA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x27ADE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x27AC1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x27ACB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27AC9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x27AF6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27AF9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27AB3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x27AB2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x27AB4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x27AE3, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27AB1, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27ABC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0x27AF3, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x27ADB, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x27AF1, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27AAF, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27AC2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27AD8, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27AD5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27ACD, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27AFE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27B01, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27B08, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0x27B2A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x27B24, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27B0B, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27B0D, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27B0F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x27B1A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x27B11, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x27B13, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x27B1D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x27B28, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x27B26, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x27B21, null, [], [])
  );

  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "readerAsIXmlLineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWrappingReader"), "System.Xml.XmlCharCheckingReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27C03, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $.Boolean, 
        $.Boolean, $.Boolean, 
        $.Boolean, $asm0E.TypeRef("System.Xml.DtdProcessing")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
    $sig.make(0x27C2F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckWhitespace", 
    $sig.make(0x27C2A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadBinary", 
    $sig.make(0x27C30, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x27C01, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x27BFF, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27BFD, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27C04, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27C06, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27C12, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x27C1E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x27C14, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x27C16, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x27C20, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x27C21, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x27C22, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x27C23, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x27C24, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x27C25, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0x27C26, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0x27C27, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
    $sig.make(0x27C2B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
    $sig.make(0x27C2D, null, [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "state", $asm0E.TypeRef("System.Xml.XmlCharCheckingReader/State")); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignorePis", $.Boolean); 
  $.Field({Static:false, Public:false}, "dtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing")); 
  $.Field({Static:false, Public:false}, "lastNodeType", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "readBinaryHelper", $asm0E.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

});

JSIL.MakeEnum(
  "System.Xml.XmlCharCheckingReader/State", false, {
    Initial: 0, 
    InReadBinary: 1, 
    Error: 2, 
    Interactive: 3
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlCharCheckingReader"), "System.Xml.XmlCharCheckingReaderWithNS", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27CA4, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), 
        $.Boolean, $.Boolean, 
        $.Boolean, $.Boolean, 
        $asm0E.TypeRef("System.Xml.DtdProcessing")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x27CA6, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x27CA8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x27CAA, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "readerAsNSResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlWrappingWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27CCE, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27CE4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x27CF0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27CE5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27CCA, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteState", 
    $sig.make(0x27CCB, $asm0E.TypeRef("System.Xml.WriteState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27CCD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27CCC, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x27CE6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x27CE3, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27CD8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27CDC, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27CE0, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27CD9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27CD2, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27CD7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0x27CD1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x27CD4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27CDB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x27CD5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27CDA, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27CE1, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27CE2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27CD6, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x27CCF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x27CD0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27CD3, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27CDE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27CDF, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CE7, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CE8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CE9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CEA, null, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CEB, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CEC, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CED, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CEE, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27CEF, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27CDD, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "writer", $asm0E.TypeRef("System.Xml.XmlWriter")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0E.TypeRef("System.Xml.WriteState"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWrappingWriter"), "System.Xml.XmlCharCheckingWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27D32, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $.Boolean, 
        $.Boolean, $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
    $sig.make(0x27D41, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
    $sig.make(0x27D42, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27D31, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InterleaveInvalidChars", 
    $sig.make(0x27D47, $.String, [
        $.String, $.Char, 
        $.Char
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReplaceNewLines", 
    $sig.make(0x27D45, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReplaceNewLines", 
    $sig.make(0x27D46, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateNCName", 
    $sig.make(0x27D43, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
    $sig.make(0x27D44, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27D36, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27D3D, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27D37, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27D33, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27D39, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteName", 
    $sig.make(0x27D3F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNmToken", 
    $sig.make(0x27D3E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27D38, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteQualifiedName", 
    $sig.make(0x27D40, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27D35, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27D34, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27D3B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27D3C, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27D3A, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "checkValues", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkNames", $.Boolean); 
  $.Field({Static:false, Public:false}, "replaceNewLines", $.Boolean); 
  $.Field({Static:false, Public:false}, "newLineChars", $.String); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlEncodedRawTextWriter"), "System.Xml.XmlEncodedRawTextWriterIndent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DA1, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DA2, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27DA0, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x27DB6, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnRootElement", 
    $sig.make(0x27DA6, null, [$asm0E.TypeRef("System.Xml.ConformanceLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27DA5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x27DB5, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27DAA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27DAE, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27DB2, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27DAB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27DA3, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27DA7, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27DAD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27DA8, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
    $sig.make(0x27DB7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27DAC, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27DB3, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27DB4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27DA9, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27DA4, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27DB1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27DAF, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27DB0, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
  $.Field({Static:false, Public:false}, "indentChars", $.String); 
  $.Field({Static:false, Public:false}, "mixedContent", $.Boolean); 
  $.Field({Static:false, Public:false}, "mixedContentStack", $asm0E.TypeRef("System.Xml.BitStack")); 
  $.Field({Static:false, Public:false}, "conformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlEventCache", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27E5F, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
    $sig.make(0x27E84, null, [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
    $sig.make(0x27E86, null, [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
    $sig.make(0x27E88, null, [
        $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
    $sig.make(0x27E8A, null, [
        $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
    $sig.make(0x27E8E, null, [
        $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
    $sig.make(0x27E8F, null, [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27E74, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x27E78, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndEvents", 
    $sig.make(0x27E60, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EventsToString", 
    $sig.make(0x27E62, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EventsToWriter", 
    $sig.make(0x27E61, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27E75, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
    $sig.make(0x27E5C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRootNode", 
    $sig.make(0x27E5D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27E5E, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NewEvent", 
    $sig.make(0x27E90, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27E7D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToBytes", 
    $sig.make(0x27E91, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x27E72, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBinHex", 
    $sig.make(0x27E73, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27E67, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27E70, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27E6C, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27E68, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27E63, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27E66, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndBase64", 
    $sig.make(0x27E83, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27E7E, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27E6F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27E80, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27E81, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27E69, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27E6D, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27E6E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27E65, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27E64, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27E6B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27E71, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27E76, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27E77, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27E6A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27E79, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27E7B, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "InitialPageSize", 32); 
  $.Field({Static:false, Public:false}, "pages", $asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEvent")])])); 
  $.Field({Static:false, Public:false}, "pageCurr", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEvent")])); 
  $.Field({Static:false, Public:false}, "pageSize", $.Int32); 
  $.Field({Static:false, Public:false}, "hasRootNode", $.Boolean); 
  $.Field({Static:false, Public:false}, "singleText", $asm10.TypeRef("System.Xml.Xsl.Runtime.StringConcat")); 
  $.Field({Static:false, Public:false}, "baseUri", $.String); 
  $.Property({Static:false, Public:true }, "BaseUri", $.String);

  $.Property({Static:false, Public:true }, "HasRootNode", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

});

JSIL.MakeEnum(
  "System.Xml.XmlEventCache/XmlEventType", false, {
    Unknown: 0, 
    DocType: 1, 
    StartElem: 2, 
    StartAttr: 3, 
    EndAttr: 4, 
    CData: 5, 
    Comment: 6, 
    PI: 7, 
    Whitespace: 8, 
    String: 9, 
    Raw: 10, 
    EntRef: 11, 
    CharEnt: 12, 
    SurrCharEnt: 13, 
    Base64: 14, 
    BinHex: 15, 
    XmlDecl1: 16, 
    XmlDecl2: 17, 
    StartContent: 18, 
    EndElem: 19, 
    FullEndElem: 20, 
    Nmsp: 21, 
    EndBase64: 22, 
    Close: 23, 
    Flush: 24, 
    Dispose: 25
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlEventCache/XmlEvent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "get_EventType", 
    $sig.make(0x2A8BA, $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Object", 
    $sig.make(0x2A8C0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_String1", 
    $sig.make(0x2A8BB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_String2", 
    $sig.make(0x2A8BC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_String3", 
    $sig.make(0x2A8BE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
    $sig.make(0x2A8C1, null, [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
    $sig.make(0x2A8C2, null, [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
    $sig.make(0x2A8C3, null, [
        $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
    $sig.make(0x2A8C4, null, [
        $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
    $sig.make(0x2A8C5, null, [
        $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
    $sig.make(0x2A8C7, null, [$asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.Object], [])
  );

  $.Field({Static:false, Public:false}, "eventType", $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType")); 
  $.Field({Static:false, Public:false}, "s1", $.String); 
  $.Field({Static:false, Public:false}, "s2", $.String); 
  $.Field({Static:false, Public:false}, "s3", $.String); 
  $.Field({Static:false, Public:false}, "o", $.Object); 
  $.Property({Static:false, Public:true }, "EventType", $asm0E.TypeRef("System.Xml.XmlEventCache/XmlEventType"));

  $.Property({Static:false, Public:true }, "String1", $.String);

  $.Property({Static:false, Public:true }, "String2", $.String);

  $.Property({Static:false, Public:true }, "String3", $.String);

  $.Property({Static:false, Public:true }, "Object", $.Object);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlParserContext", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA903, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $.String, $asm0E.TypeRef("System.Xml.XmlSpace")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA904, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $.String, $asm0E.TypeRef("System.Xml.XmlSpace"), 
        $asm06.TypeRef("System.Text.Encoding")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA905, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $.String, $.String, 
        $.String, $.String, 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlSpace")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA906, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $.String, $.String, 
        $.String, $.String, 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlSpace"), $asm06.TypeRef("System.Text.Encoding")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xA8F8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocTypeName", 
    $sig.make(0xA8F2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
    $sig.make(0xA900, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDtdInfo", 
    $sig.make(0xA902, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InternalSubset", 
    $sig.make(0xA8FA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceManager", 
    $sig.make(0xA8F0, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xA8EE, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
    $sig.make(0xA8F4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
    $sig.make(0xA8F6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0xA8FC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0xA8FE, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseURI", 
    $sig.make(0xA8F9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DocTypeName", 
    $sig.make(0xA8F3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
    $sig.make(0xA901, null, [$asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InternalSubset", 
    $sig.make(0xA8FB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NamespaceManager", 
    $sig.make(0xA8F1, null, [$asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NameTable", 
    $sig.make(0xA8EF, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PublicId", 
    $sig.make(0xA8F5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SystemId", 
    $sig.make(0xA8F7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
    $sig.make(0xA8FD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
    $sig.make(0xA8FF, null, [$asm0E.TypeRef("System.Xml.XmlSpace")], [])
  );

  $.Field({Static:false, Public:false}, "_nt", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "_nsMgr", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "_docTypeName", $.String); 
  $.Field({Static:false, Public:false}, "_pubId", $.String); 
  $.Field({Static:false, Public:false}, "_sysId", $.String); 
  $.Field({Static:false, Public:false}, "_internalSubset", $.String); 
  $.Field({Static:false, Public:false}, "_xmlLang", $.String); 
  $.Field({Static:false, Public:false}, "_xmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace")); 
  $.Field({Static:false, Public:false}, "_baseURI", $.String); 
  $.Field({Static:false, Public:false}, "_encoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:true }, "DocTypeName", $.String);

  $.Property({Static:false, Public:true }, "PublicId", $.String);

  $.Property({Static:false, Public:true }, "SystemId", $.String);

  $.Property({Static:false, Public:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true }, "InternalSubset", $.String);

  $.Property({Static:false, Public:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true }, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:false}, "HasDtdInfo", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlReaderSettings", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA8D8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
    $sig.make(0xA8D6, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddConformanceWrapper", 
    $sig.make(0xA8E7, $asm0E.TypeRef("System.Xml.XmlReader"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddValidation", 
    $sig.make(0xA8E4, $asm0E.TypeRef("System.Xml.XmlReader"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddValidationAndConformanceWrapper", 
    $sig.make(0xA8E5, $asm0E.TypeRef("System.Xml.XmlReader"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckReadOnly", 
    $sig.make(0xA8E1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xA8DB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDefaultResolver", 
    $sig.make(0xA8E3, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDtdValidatingReader", 
    $sig.make(0xA8E6, $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
    $sig.make(0xA8DD, $asm0E.TypeRef("System.Xml.XmlReader"), [$.String, $asm0E.TypeRef("System.Xml.XmlParserContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
    $sig.make(0xA8DE, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm06.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Uri"), 
        $.String, $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
    $sig.make(0xA8DF, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm06.TypeRef("System.IO.TextReader"), $.String, 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
    $sig.make(0xA8E0, $asm0E.TypeRef("System.Xml.XmlReader"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CheckCharacters", 
    $sig.make(0xA8BC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CloseInput", 
    $sig.make(0xA8CC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ConformanceLevel", 
    $sig.make(0xA8BA, $asm0E.TypeRef("System.Xml.ConformanceLevel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DtdProcessing", 
    $sig.make(0xA8CA, $asm0E.TypeRef("System.Xml.DtdProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreComments", 
    $sig.make(0xA8C6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreProcessingInstructions", 
    $sig.make(0xA8C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreWhitespace", 
    $sig.make(0xA8C2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumberOffset", 
    $sig.make(0xA8B6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePositionOffset", 
    $sig.make(0xA8B8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxCharactersFromEntities", 
    $sig.make(0xA8C0, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxCharactersInDocument", 
    $sig.make(0xA8BE, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xA8B3, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProhibitDtd", 
    $sig.make(0xA8C8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
    $sig.make(0xA8D4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
    $sig.make(0xA8D2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValidationFlags", 
    $sig.make(0xA8D0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValidationType", 
    $sig.make(0xA8CE, $asm0E.TypeRef("System.Xml.ValidationType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEventHandler", 
    $sig.make(0xA8DC, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXmlResolver", 
    $sig.make(0xA8D9, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xA8E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
    $sig.make(0xA8D7, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0xA8DA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CheckCharacters", 
    $sig.make(0xA8BD, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CloseInput", 
    $sig.make(0xA8CD, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ConformanceLevel", 
    $sig.make(0xA8BB, null, [$asm0E.TypeRef("System.Xml.ConformanceLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DtdProcessing", 
    $sig.make(0xA8CB, null, [$asm0E.TypeRef("System.Xml.DtdProcessing")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IgnoreComments", 
    $sig.make(0xA8C7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IgnoreProcessingInstructions", 
    $sig.make(0xA8C5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IgnoreWhitespace", 
    $sig.make(0xA8C3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LineNumberOffset", 
    $sig.make(0xA8B7, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LinePositionOffset", 
    $sig.make(0xA8B9, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaxCharactersFromEntities", 
    $sig.make(0xA8C1, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaxCharactersInDocument", 
    $sig.make(0xA8BF, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NameTable", 
    $sig.make(0xA8B4, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ProhibitDtd", 
    $sig.make(0xA8C9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
    $sig.make(0xA8D5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schemas", 
    $sig.make(0xA8D3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ValidationFlags", 
    $sig.make(0xA8D1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ValidationType", 
    $sig.make(0xA8CF, null, [$asm0E.TypeRef("System.Xml.ValidationType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0xA8B5, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "lineNumberOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "linePositionOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "conformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel")); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "maxCharactersInDocument", $.Int64); 
  $.Field({Static:false, Public:false}, "maxCharactersFromEntities", $.Int64); 
  $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
  $.Field({Static:false, Public:false}, "dtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing")); 
  $.Field({Static:false, Public:false}, "validationType", $asm0E.TypeRef("System.Xml.ValidationType")); 
  $.Field({Static:false, Public:false}, "validationFlags", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "valEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "closeInput", $.Boolean); 
  $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean); 
  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "LineNumberOffset", $.Int32);

  $.Property({Static:false, Public:true }, "LinePositionOffset", $.Int32);

  $.Property({Static:false, Public:true }, "ConformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel"));

  $.Property({Static:false, Public:true }, "CheckCharacters", $.Boolean);

  $.Property({Static:false, Public:true }, "MaxCharactersInDocument", $.Int64);

  $.Property({Static:false, Public:true }, "MaxCharactersFromEntities", $.Int64);

  $.Property({Static:false, Public:true }, "IgnoreWhitespace", $.Boolean);

  $.Property({Static:false, Public:true }, "IgnoreProcessingInstructions", $.Boolean);

  $.Property({Static:false, Public:true }, "IgnoreComments", $.Boolean);

  $.Property({Static:false, Public:true }, "ProhibitDtd", $.Boolean)
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlReaderSettings.DtdProcessing property instead."]; });

  $.Property({Static:false, Public:true }, "DtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing"));

  $.Property({Static:false, Public:true }, "CloseInput", $.Boolean);

  $.Property({Static:false, Public:true }, "ValidationType", $asm0E.TypeRef("System.Xml.ValidationType"));

  $.Property({Static:false, Public:true }, "ValidationFlags", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

  $.Property({Static:false, Public:true }, "Schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"));

  $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

});

JSIL.MakeEnum(
  "System.Xml.XmlSpace", true, {
    None: 0, 
    Default: 1, 
    Preserve: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWrappingReader"), "System.Xml.XmlSubtreeReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27F4F, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
    $sig.make(0x27F73, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckBuffer", 
    $sig.make(0x27F94, null, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27F5B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x27F6D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsBinary", 
    $sig.make(0x27F8F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsType", 
    $sig.make(0x27F93, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsBinary", 
    $sig.make(0x27F8E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x27F48, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27F43, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x27F49, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadValueChunk", 
    $sig.make(0x27F4A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x27F42, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x27F45, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InAttributeActiveState", 
    $sig.make(0x27F4D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InNamespaceActiveState", 
    $sig.make(0x27F4E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27F44, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27F3E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x27F3D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x27F3F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x27F47, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27F3C, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27F40, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x27F46, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27F41, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27F50, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27F51, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27F52, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitReadContentAsType", 
    $sig.make(0x27F92, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitReadElementContentAsBinary", 
    $sig.make(0x27F8D, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlSubtreeReader/State")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x27F6C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27F53, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27F54, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27F55, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x27F58, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x27F56, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x27F57, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToNsAttribute", 
    $sig.make(0x27F8C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessNamespaces", 
    $sig.make(0x27F72, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x27F5A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x27F59, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAs", 
    $sig.make(0x27F66, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x27F67, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x27F69, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBoolean", 
    $sig.make(0x27F5E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDateTime", 
    $sig.make(0x27F5F, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDecimal", 
    $sig.make(0x27F62, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDouble", 
    $sig.make(0x27F60, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsFloat", 
    $sig.make(0x27F61, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsInt", 
    $sig.make(0x27F63, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsLong", 
    $sig.make(0x27F64, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsObject", 
    $sig.make(0x27F5D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsString", 
    $sig.make(0x27F65, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x27F68, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x27F6A, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadValueChunk", 
    $sig.make(0x27F6B, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveNamespace", 
    $sig.make(0x27F74, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetCurrentNode", 
    $sig.make(0x27F91, null, [$asm0E.TypeRef("System.Xml.XmlSubtreeReader/NodeData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetEmptyNode", 
    $sig.make(0x27F90, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x27F5C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.get_LineNumber", 
    $sig.make(0x27F4B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.get_LinePosition", 
    $sig.make(0x27F4C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.HasLineInfo", 
    $sig.make(0x27F6E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x27F6F, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x27F70, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x27F71, $.String, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "AttributeActiveStates", 98); 
  $.Constant({Static:true , Public:false}, "NamespaceActiveStates", 2018); 
  $.Field({Static:false, Public:false}, "initialDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "state", $asm0E.TypeRef("System.Xml.XmlSubtreeReader/State")); 
  $.Field({Static:false, Public:false}, "nsManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "nsAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlSubtreeReader/NodeData")])); 
  $.Field({Static:false, Public:false}, "nsAttrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "curNsAttr", $.Int32); 
  $.Field({Static:false, Public:false}, "xmlns", $.String); 
  $.Field({Static:false, Public:false}, "xmlnsUri", $.String); 
  $.Field({Static:false, Public:false}, "nsIncReadOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "binDecoder", $asm0E.TypeRef("System.Xml.IncrementalReadDecoder")); 
  $.Field({Static:false, Public:false}, "useCurNode", $.Boolean); 
  $.Field({Static:false, Public:false}, "curNode", $asm0E.TypeRef("System.Xml.XmlSubtreeReader/NodeData")); 
  $.Field({Static:false, Public:false}, "tmpNode", $asm0E.TypeRef("System.Xml.XmlSubtreeReader/NodeData")); 
  $.Field({Static:false, Public:false}, "InitialNamespaceAttributeCount", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlLineInfo.LineNumber", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlLineInfo.LinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "InAttributeActiveState", $.Boolean);

  $.Property({Static:false, Public:false}, "InNamespaceActiveState", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlSubtreeReader/NodeData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28033, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Set", 
    $sig.make(0x28034, null, [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $.String, 
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "value", $.String); 
});

JSIL.MakeEnum(
  "System.Xml.XmlSubtreeReader/State", false, {
    Initial: 0, 
    Interactive: 1, 
    Error: 2, 
    EndOfFile: 3, 
    Closed: 4, 
    PopNamespaceScope: 5, 
    ClearNsAttributes: 6, 
    ReadElementContentAsBase64: 7, 
    ReadElementContentAsBinHex: 8, 
    ReadContentAsBase64: 9, 
    ReadContentAsBinHex: 10
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlTextEncoder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB1E1, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndAttribute", 
    $sig.make(0xB1E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Flush", 
    $sig.make(0xB1ED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttributeValue", 
    $sig.make(0xB1E0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_QuoteChar", 
    $sig.make(0xB1DF, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartAttribute", 
    $sig.make(0xB1E2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write", 
    $sig.make(0xB1E5, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write", 
    $sig.make(0xB1E7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCharEntity", 
    $sig.make(0xB1EB, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCharEntityImpl", 
    $sig.make(0xB1EF, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCharEntityImpl", 
    $sig.make(0xB1F0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEntityRef", 
    $sig.make(0xB1EC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEntityRefImpl", 
    $sig.make(0xB1F1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
    $sig.make(0xB1E9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
    $sig.make(0xB1EA, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteRawWithSurrogateChecking", 
    $sig.make(0xB1E8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStringFragment", 
    $sig.make(0xB1EE, null, [
        $.String, $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateChar", 
    $sig.make(0xB1E4, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateCharEntity", 
    $sig.make(0xB1E6, null, [$.Char, $.Char], [])
  );

  $.Field({Static:false, Public:false}, "textWriter", $asm06.TypeRef("System.IO.TextWriter")); 
  $.Field({Static:false, Public:false}, "inAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
  $.Field({Static:false, Public:false}, "attrValue", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "cacheAttrValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Property({Static:false, Public:false}, "QuoteChar", $.Char);

  $.Property({Static:false, Public:false}, "AttributeValue", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlTextReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA64A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA64B, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA64C, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA64E, null, [$.String, $asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA655, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA656, null, [
        $.String, $asm06.TypeRef("System.IO.Stream"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA657, null, [$asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA658, null, [$.String, $asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA659, null, [$asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA65A, null, [
        $.String, $asm06.TypeRef("System.IO.TextReader"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA65B, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA65C, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA65D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA65E, null, [$.String, $asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0xA66A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0xA628, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xA620, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0xA632, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadValueChunk", 
    $sig.make(0xA633, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0xA630, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0xA61F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0xA649, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DtdProcessing", 
    $sig.make(0xA63F, $asm0E.TypeRef("System.Xml.DtdProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
    $sig.make(0xA63A, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EntityHandling", 
    $sig.make(0xA641, $asm0E.TypeRef("System.Xml.EntityHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0xA62A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0xA61D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Impl", 
    $sig.make(0xA644, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0xA622, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0xA621, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0xA634, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0xA635, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xA61A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xA619, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceManager", 
    $sig.make(0xA645, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
    $sig.make(0xA636, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xA61B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xA62E, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xA618, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Normalization", 
    $sig.make(0xA638, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xA61C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProhibitDtd", 
    $sig.make(0xA63D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0xA623, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0xA62C, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xA61E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WhitespaceHandling", 
    $sig.make(0xA63B, $asm0E.TypeRef("System.Xml.WhitespaceHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0xA626, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0xA625, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xA65F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xA660, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xA661, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
    $sig.make(0xA69F, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetRemainder", 
    $sig.make(0xA6A1, $asm06.TypeRef("System.IO.TextReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0xA673, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0xA66C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xA662, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xA663, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xA664, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0xA667, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0xA665, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0xA666, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xA669, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0xA668, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadBase64", 
    $sig.make(0xA6A3, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadBinHex", 
    $sig.make(0xA6A4, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadChars", 
    $sig.make(0xA6A2, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0xA66E, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0xA670, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0xA66F, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0xA671, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0xA672, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetState", 
    $sig.make(0xA6A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0xA66D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DtdProcessing", 
    $sig.make(0xA640, null, [$asm0E.TypeRef("System.Xml.DtdProcessing")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EntityHandling", 
    $sig.make(0xA642, null, [$asm0E.TypeRef("System.Xml.EntityHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
    $sig.make(0xA637, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Normalization", 
    $sig.make(0xA639, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ProhibitDtd", 
    $sig.make(0xA63E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_WhitespaceHandling", 
    $sig.make(0xA63C, null, [$asm0E.TypeRef("System.Xml.WhitespaceHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0xA643, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlValidatingReaderCompatibilityMode", 
    $sig.make(0xA648, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0xA66B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0xA69C, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0xA69D, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0xA69E, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "impl", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

  $.Property({Static:false, Public:true }, "Normalization", $.Boolean);

  $.Property({Static:false, Public:true }, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:true }, "WhitespaceHandling", $asm0E.TypeRef("System.Xml.WhitespaceHandling"));

  $.Property({Static:false, Public:true }, "ProhibitDtd", $.Boolean)
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use DtdProcessing property instead."]; });

  $.Property({Static:false, Public:true }, "DtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing"));

  $.Property({Static:false, Public:true }, "EntityHandling", $asm0E.TypeRef("System.Xml.EntityHandling"));

  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:false}, "Impl", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl"));

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:false}, "XmlValidatingReaderCompatibilityMode", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlTextReaderImpl", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9EE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9EF, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F0, null, [
        $asm0E.TypeRef("System.Xml.XmlResolver"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F1, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F2, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F3, null, [$.String, $asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F4, null, [
        $.String, $asm06.TypeRef("System.IO.Stream"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F5, null, [$asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F6, null, [$asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F7, null, [$.String, $asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F8, null, [
        $.String, $asm06.TypeRef("System.IO.TextReader"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9F9, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9FA, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9FB, null, [$.String, $asm0E.TypeRef("System.Xml.XmlParserContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA9FC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA9FD, null, [$.String, $asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9FE, null, [
        $asm06.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm0E.TypeRef("System.Xml.XmlParserContext"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA9FF, null, [
        $asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.XmlReaderSettings"), 
        $.String, $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xAA00, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlParserContext"), 
        $asm0E.TypeRef("System.Xml.XmlReaderSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0xAA94, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0xAA95, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttributeChunkToList", 
    $sig.make(0xAA6A, null, [
        $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttributeNoChecks", 
    $sig.make(0xAA93, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributeDtd", 
    $sig.make(0xAAC4, $.Boolean, [
        $asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo"), $.Boolean, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributeInternal", 
    $sig.make(0xAAC6, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [
        $.String, $.String, 
        $.String, $.String, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributeNonDtd", 
    $sig.make(0xAAC5, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributesAndNormalize", 
    $sig.make(0xAA5F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
    $sig.make(0xAA9A, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNode", 
    $sig.make(0xAA91, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.Int32, $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:false}, "AdjustLineInfo", 
    $sig.make(0xAACD, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.LineInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AdjustLineInfo", 
    $sig.make(0xAACE, null, [
        $.String, $.Int32, 
        $.Int32, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.LineInfo")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocNode", 
    $sig.make(0xAA92, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AttributeDuplCheck", 
    $sig.make(0xAA65, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AttributeNamespaceLookup", 
    $sig.make(0xAA64, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BlockCopy", 
    $sig.make(0xAAD3, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BlockCopyChars", 
    $sig.make(0xAAD2, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeCurrentNodeType", 
    $sig.make(0xAAC2, null, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckEncoding", 
    $sig.make(0xAA52, $asm06.TypeRef("System.Text.Encoding"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0xAA0B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Close", 
    $sig.make(0xAA58, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DetectEncoding", 
    $sig.make(0xAA4F, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnNewLine", 
    $sig.make(0xAA22, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnPublicId", 
    $sig.make(0xAA2E, null, [
        $.String, $asm0E.TypeRef("System.Xml.LineInfo"), 
        $asm0E.TypeRef("System.Xml.LineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnSystemId", 
    $sig.make(0xAA2D, null, [
        $.String, $asm0E.TypeRef("System.Xml.LineInfo"), 
        $asm0E.TypeRef("System.Xml.LineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseComment", 
    $sig.make(0xAA27, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseNamedCharRef", 
    $sig.make(0xAA25, $.Int32, [$.Boolean, $asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseNumericCharRef", 
    $sig.make(0xAA24, $.Int32, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParsePI", 
    $sig.make(0xAA26, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PopEntity", 
    $sig.make(0xAA29, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.IDtdEntityInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushEntity", 
    $sig.make(0xAA28, $.Boolean, [$asm0E.TypeRef("System.Xml.IDtdEntityInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushExternalSubset", 
    $sig.make(0xAA2A, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushInternalDtd", 
    $sig.make(0xAA2B, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ReadData", 
    $sig.make(0xAA23, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_Throw", 
    $sig.make(0xAA2C, null, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EatWhitespaces", 
    $sig.make(0xAA86, $.Int32, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ElementNamespaceLookup", 
    $sig.make(0xAA63, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishAttributeValueIterator", 
    $sig.make(0xAA42, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishIncrementalRead", 
    $sig.make(0xAAAD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishOtherValueIterator", 
    $sig.make(0xAA6E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishPartialValue", 
    $sig.make(0xAA6D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsBinary", 
    $sig.make(0xAA71, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsBinary", 
    $sig.make(0xAA72, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadValueChunk", 
    $sig.make(0xAA70, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FullAttributeCleanup", 
    $sig.make(0xAA9C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0xA9B8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xA9AE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0xA9BB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadValueChunk", 
    $sig.make(0xA9BC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0xA9B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0xA9AD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0xA9E0, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_BaseUri", 
    $sig.make(0xA9D1, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_CurrentPosition", 
    $sig.make(0xA9D5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_DtdValidation", 
    $sig.make(0xA9CD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_EntityStackLength", 
    $sig.make(0xA9D7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_IsEntityEolNormalized", 
    $sig.make(0xA9D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_IsEof", 
    $sig.make(0xA9D2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_LineNo", 
    $sig.make(0xA9DB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_LineStartPosition", 
    $sig.make(0xA9DC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_NamespaceResolver", 
    $sig.make(0xA9CC, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_Namespaces", 
    $sig.make(0xA9CF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_NameTable", 
    $sig.make(0xA9CB, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_Normalization", 
    $sig.make(0xA9CE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ParsingBuffer", 
    $sig.make(0xA9D3, $jsilcore.TypeRef("System.Array", [$.Char]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ParsingBufferLength", 
    $sig.make(0xA9D4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_V1CompatibilityMode", 
    $sig.make(0xA9D0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ValidationEventHandling", 
    $sig.make(0xA9D9, $asm0E.TypeRef("System.Xml.IValidationEventHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdProcessing", 
    $sig.make(0xA9C6, $asm0E.TypeRef("System.Xml.DtdProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdValidation", 
    $sig.make(0xA9DE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
    $sig.make(0xA9C3, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EntityHandling", 
    $sig.make(0xA9C8, $asm0E.TypeRef("System.Xml.EntityHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0xA9B5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FragmentType", 
    $sig.make(0xA9E4, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InAttributeValueIterator", 
    $sig.make(0xA9DD, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "get_InEntity", 
    $sig.make(0xA9DF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalSchemaType", 
    $sig.make(0xA9E5, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalTypedValue", 
    $sig.make(0xA9E7, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0xA9B0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0xA9AF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0xA9BD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0xA9BE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xA9A9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xA9A8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceManager", 
    $sig.make(0xA9EA, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
    $sig.make(0xA9BF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xA9AA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xA9B6, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xA9A7, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Normalization", 
    $sig.make(0xA9C1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OuterReader", 
    $sig.make(0xA9B9, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xA9AB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0xA9B1, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0xA9B4, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0xA9A6, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StandAlone", 
    $sig.make(0xA9E9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_V1ComformanceLevel", 
    $sig.make(0xA9EC, $asm0E.TypeRef("System.Xml.ConformanceLevel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_V1Compat", 
    $sig.make(0xA9EB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xA9AC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_WhitespaceHandling", 
    $sig.make(0xA9C4, $asm0E.TypeRef("System.Xml.WhitespaceHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0xA9B3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0xA9B2, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xAA01, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xAA02, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xAA03, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetChars", 
    $sig.make(0xAA56, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIndexOfAttributeWithoutPrefix", 
    $sig.make(0xAAB8, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIndexOfAttributeWithPrefix", 
    $sig.make(0xAAB9, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
    $sig.make(0xAA1B, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRemainder", 
    $sig.make(0xAA1E, $asm06.TypeRef("System.IO.TextReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
    $sig.make(0xAAC3, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTextNodeType", 
    $sig.make(0xAAA0, $asm0E.TypeRef("System.Xml.XmlNodeType"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetWhitespaceType", 
    $sig.make(0xAA9F, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleEntityEnd", 
    $sig.make(0xAA77, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
    $sig.make(0xAA75, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/EntityType"), [
        $.Boolean, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/EntityExpandType"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleGeneralEntityReference", 
    $sig.make(0xAA76, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/EntityType"), [
        $.String, $.Boolean, 
        $.Boolean, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0xAA17, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncrementalRead", 
    $sig.make(0xAAAB, $.Int32, [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncrementalRead", 
    $sig.make(0xAAAC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitBase64Decoder", 
    $sig.make(0xAAC9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitBinHexDecoder", 
    $sig.make(0xAACA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitFragmentReader", 
    $sig.make(0xAA4B, null, [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $asm0E.TypeRef("System.Xml.XmlParserContext"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitIncrementalRead", 
    $sig.make(0xAAAA, null, [$asm0E.TypeRef("System.Xml.IncrementalReadDecoder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitReadContentAsBinary", 
    $sig.make(0xAABC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitReadElementContentAsBinary", 
    $sig.make(0xAABD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
    $sig.make(0xAA43, null, [$asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
    $sig.make(0xAA44, null, [
        $.String, $asm06.TypeRef("System.IO.Stream"), 
        $asm06.TypeRef("System.Text.Encoding")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
    $sig.make(0xAA45, null, [
        $asm07.TypeRef("System.Uri"), $asm06.TypeRef("System.IO.Stream"), 
        $asm06.TypeRef("System.Text.Encoding")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
    $sig.make(0xAA46, null, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.Text.Encoding")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
    $sig.make(0xAA47, null, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $asm06.TypeRef("System.Text.Encoding")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitStringInput", 
    $sig.make(0xAA4A, null, [
        $.String, $asm06.TypeRef("System.Text.Encoding"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitTextReaderInput", 
    $sig.make(0xAA48, null, [$.String, $asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitTextReaderInput", 
    $sig.make(0xAA49, null, [
        $.String, $asm07.TypeRef("System.Uri"), 
        $asm06.TypeRef("System.IO.TextReader")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InvalidCharRecovery", 
    $sig.make(0xAA57, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0xAA0D, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
    $sig.make(0xAA99, $.String, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
    $sig.make(0xAA1C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveOffEntityReference", 
    $sig.make(0xAA10, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xAA04, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xAA05, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xAA06, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0xAA09, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0xAA07, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0xAA08, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToNextContentNode", 
    $sig.make(0xAABE, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnDefaultNamespaceDecl", 
    $sig.make(0xAA66, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnEof", 
    $sig.make(0xAA98, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnNamespaceDecl", 
    $sig.make(0xAA67, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnNewLine", 
    $sig.make(0xAA97, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnXmlReservedAttribute", 
    $sig.make(0xAA68, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OpenAndPush", 
    $sig.make(0xAAA2, $.Boolean, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OpenUrl", 
    $sig.make(0xAA4D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OpenUrlDelegate", 
    $sig.make(0xAA4E, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAttributes", 
    $sig.make(0xAA62, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAttributeValueChunk", 
    $sig.make(0xAAAF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAttributeValueSlow", 
    $sig.make(0xAA69, null, [
        $.Int32, $.Char, 
        $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseCData", 
    $sig.make(0xAA7E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseCDataOrComment", 
    $sig.make(0xAA7F, null, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseCDataOrComment", 
    $sig.make(0xAA80, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseCharRefInline", 
    $sig.make(0xAA87, $.Int32, [
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/EntityType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseComment", 
    $sig.make(0xAA7D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDoctypeDecl", 
    $sig.make(0xAA81, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDocumentContent", 
    $sig.make(0xAA5B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDtd", 
    $sig.make(0xAA82, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDtdFromParserContext", 
    $sig.make(0xAABB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseElement", 
    $sig.make(0xAA5E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseElementContent", 
    $sig.make(0xAA5C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseEndElement", 
    $sig.make(0xAA60, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseEntityName", 
    $sig.make(0xAA90, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseEntityReference", 
    $sig.make(0xAA74, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseFragmentAttribute", 
    $sig.make(0xAAAE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseName", 
    $sig.make(0xAA8C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseNamedCharRef", 
    $sig.make(0xAA8A, $.Int32, [$.Boolean, $asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseNamedCharRefInline", 
    $sig.make(0xAA8B, $.Int32, [
        $.Int32, $.Boolean, 
        $asm06.TypeRef("System.Text.StringBuilder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseNumericCharRef", 
    $sig.make(0xAA88, $.Int32, [
        $.Boolean, $asm06.TypeRef("System.Text.StringBuilder"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/EntityType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseNumericCharRefInline", 
    $sig.make(0xAA89, $.Int32, [
        $.Int32, $.Boolean, 
        $asm06.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/EntityType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
    $sig.make(0xAA7A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
    $sig.make(0xAA7B, $.Boolean, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePIValue", 
    $sig.make(0xAA7C, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
    $sig.make(0xAA8D, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
    $sig.make(0xAA8E, $.Int32, [
        $.Boolean, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseRootLevelWhitespace", 
    $sig.make(0xAA73, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseText", 
    $sig.make(0xAA6B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseText", 
    $sig.make(0xAA6C, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
    $sig.make(0xAAB5, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
    $sig.make(0xAAB6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseXmlDeclaration", 
    $sig.make(0xAA5A, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseXmlDeclarationFragment", 
    $sig.make(0xAAB0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopElementContext", 
    $sig.make(0xAA96, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopEntity", 
    $sig.make(0xAAA5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopParsingState", 
    $sig.make(0xAAA9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopXmlContext", 
    $sig.make(0xAA9E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessDtdFromParserContext", 
    $sig.make(0xAA4C, null, [$asm0E.TypeRef("System.Xml.XmlParserContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushExternalEntity", 
    $sig.make(0xAAA3, $.Boolean, [$asm0E.TypeRef("System.Xml.IDtdEntityInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushExternalEntityOrSubset", 
    $sig.make(0xAAA1, null, [
        $.String, $.String, 
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Uri")]), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushInternalEntity", 
    $sig.make(0xAAA4, null, [$asm0E.TypeRef("System.Xml.IDtdEntityInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushParsingState", 
    $sig.make(0xAAA8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushXmlContext", 
    $sig.make(0xAA9D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xAA0A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0xAA0E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadBase64", 
    $sig.make(0xAA20, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadBinHex", 
    $sig.make(0xAA21, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadChars", 
    $sig.make(0xAA1F, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0xAA12, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinary", 
    $sig.make(0xAAC7, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0xAA13, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadData", 
    $sig.make(0xAA55, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadDataInName", 
    $sig.make(0xAA8F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0xAA14, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinary", 
    $sig.make(0xAAC8, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0xAA15, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0xAA11, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadValueChunk", 
    $sig.make(0xAA16, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RegisterConsumedCharacters", 
    $sig.make(0xAACC, null, [$.Int64, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RegisterEntity", 
    $sig.make(0xAAA6, null, [$asm0E.TypeRef("System.Xml.IDtdEntityInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResetAttributes", 
    $sig.make(0xAA9B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResetState", 
    $sig.make(0xAA1D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0xAA0F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReThrow", 
    $sig.make(0xAA3A, null, [
        $asm06.TypeRef("System.Exception"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xAA40, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"), $.String, 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xAA41, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DisableUndeclaredEntityCheck", 
    $sig.make(0xA9ED, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DtdParserProxy_CurrentPosition", 
    $sig.make(0xA9D6, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DtdParserProxy_ValidationEventHandling", 
    $sig.make(0xA9DA, null, [$asm0E.TypeRef("System.Xml.IValidationEventHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DtdProcessing", 
    $sig.make(0xA9C7, null, [$asm0E.TypeRef("System.Xml.DtdProcessing")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_EntityHandling", 
    $sig.make(0xA9C9, null, [$asm0E.TypeRef("System.Xml.EntityHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_InternalSchemaType", 
    $sig.make(0xA9E6, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_InternalTypedValue", 
    $sig.make(0xA9E8, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
    $sig.make(0xA9C0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Normalization", 
    $sig.make(0xA9C2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_OnDefaultAttributeUse", 
    $sig.make(0xA9E2, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/OnDefaultAttributeUseDelegate")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_OuterReader", 
    $sig.make(0xA9BA, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ValidationEventHandling", 
    $sig.make(0xA9E1, null, [$asm0E.TypeRef("System.Xml.IValidationEventHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_WhitespaceHandling", 
    $sig.make(0xA9C5, null, [$asm0E.TypeRef("System.Xml.WhitespaceHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0xA9CA, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlValidatingReaderCompatibilityMode", 
    $sig.make(0xA9E3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDtdInfo", 
    $sig.make(0xAAC1, null, [$asm0E.TypeRef("System.Xml.IDtdInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetErrorState", 
    $sig.make(0xAA3F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupEncoding", 
    $sig.make(0xAA50, null, [$asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupEndEntityNodeInAttribute", 
    $sig.make(0xAA79, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupEndEntityNodeInContent", 
    $sig.make(0xAA78, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupFromParserContext", 
    $sig.make(0xAAC0, null, [$asm0E.TypeRef("System.Xml.XmlParserContext"), $asm0E.TypeRef("System.Xml.XmlReaderSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupReadContentAsBinaryState", 
    $sig.make(0xAABF, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ShiftBuffer", 
    $sig.make(0xAA59, null, [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0xAA0C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipDtd", 
    $sig.make(0xAA83, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipPartialTextValue", 
    $sig.make(0xAA6F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipPublicOrSystemIdLiteral", 
    $sig.make(0xAA84, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipUntil", 
    $sig.make(0xAA85, null, [$.Char, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StripSpaces", 
    $sig.make(0xAAD0, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StripSpaces", 
    $sig.make(0xAAD1, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SwitchEncoding", 
    $sig.make(0xAA51, null, [$asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SwitchEncodingToUTF8", 
    $sig.make(0xAA54, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0xAA18, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0xAA19, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0xAA1A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA2F, null, [
        $.Int32, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA30, null, [
        $.Int32, $.String, 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA31, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA32, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA33, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA34, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA35, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA36, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA37, null, [
        $.String, $.String, 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA38, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0xAA39, null, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowExpectingWhitespace", 
    $sig.make(0xAAB7, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
    $sig.make(0xAA3E, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowTagMismatch", 
    $sig.make(0xAA61, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnclosedElements", 
    $sig.make(0xAA5D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0xAAB1, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0xAAB2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0xAAB3, null, [
        $.Int32, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0xAAB4, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
    $sig.make(0xAA3B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
    $sig.make(0xAA3C, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
    $sig.make(0xAA3D, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnDecodeChars", 
    $sig.make(0xAA53, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnregisterEntity", 
    $sig.make(0xAAA7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UriEqual", 
    $sig.make(0xAACB, $.Boolean, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ZeroEndingStream", 
    $sig.make(0xAABA, $.Boolean, [$.Int32], [])
  );

  $.Constant({Static:true , Public:false}, "MaxBytesToMove", 128); 
  $.Constant({Static:true , Public:false}, "ApproxXmlDeclLength", 80); 
  $.Constant({Static:true , Public:false}, "NodesInitialSize", 8); 
  $.Constant({Static:true , Public:false}, "InitialAttributesCount", 4); 
  $.Constant({Static:true , Public:false}, "InitialParsingStateStackSize", 2); 
  $.Constant({Static:true , Public:false}, "InitialParsingStatesDepth", 2); 
  $.Constant({Static:true , Public:false}, "DtdChidrenInitialSize", 2); 
  $.Constant({Static:true , Public:false}, "MaxByteSequenceLen", 6); 
  $.Constant({Static:true , Public:false}, "MaxAttrDuplWalkCount", 250); 
  $.Constant({Static:true , Public:false}, "MinWhitespaceLookahedCount", 4096); 
  $.Constant({Static:true , Public:false}, "XmlDeclarationBegining", "<?xml"); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "ps", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingState")); 
  $.Field({Static:false, Public:false}, "parsingFunction", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")); 
  $.Field({Static:false, Public:false}, "nextParsingFunction", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")); 
  $.Field({Static:false, Public:false}, "nextNextParsingFunction", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")); 
  $.Field({Static:false, Public:false}, "nodes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])); 
  $.Field({Static:false, Public:false}, "curNode", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
  $.Field({Static:false, Public:false}, "curAttrIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "attrHashtable", $.Int32); 
  $.Field({Static:false, Public:false}, "attrDuplWalkCount", $.Int32); 
  $.Field({Static:false, Public:false}, "attrNeedNamespaceLookup", $.Boolean); 
  $.Field({Static:false, Public:false}, "fullAttrCleanup", $.Boolean); 
  $.Field({Static:false, Public:false}, "attrDuplSortingArray", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "nameTableFromSettings", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "url", $.String); 
  $.Field({Static:false, Public:false}, "compressedStack", $asm06.TypeRef("System.Threading.CompressedStack")); 
  $.Field({Static:false, Public:false}, "normalize", $.Boolean); 
  $.Field({Static:false, Public:false}, "supportNamespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "whitespaceHandling", $asm0E.TypeRef("System.Xml.WhitespaceHandling")); 
  $.Field({Static:false, Public:false}, "dtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing")); 
  $.Field({Static:false, Public:false}, "entityHandling", $asm0E.TypeRef("System.Xml.EntityHandling")); 
  $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "lineNumberOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "linePositionOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "closeInput", $.Boolean); 
  $.Field({Static:false, Public:false}, "maxCharactersInDocument", $.Int64); 
  $.Field({Static:false, Public:false}, "maxCharactersFromEntities", $.Int64); 
  $.Field({Static:false, Public:false}, "v1Compat", $.Boolean); 
  $.Field({Static:false, Public:false}, "namespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "lastPrefix", $.String); 
  $.Field({Static:false, Public:false}, "xmlContext", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/XmlContext")); 
  $.Field({Static:false, Public:false}, "parsingStatesStack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingState")])); 
  $.Field({Static:false, Public:false}, "parsingStatesStackTop", $.Int32); 
  $.Field({Static:false, Public:false}, "reportedBaseUri", $.String); 
  $.Field({Static:false, Public:false}, "reportedEncoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "dtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo")); 
  $.Field({Static:false, Public:false}, "fragmentType", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "fragmentParserContext", $asm0E.TypeRef("System.Xml.XmlParserContext")); 
  $.Field({Static:false, Public:false}, "fragment", $.Boolean); 
  $.Field({Static:false, Public:false}, "incReadDecoder", $asm0E.TypeRef("System.Xml.IncrementalReadDecoder")); 
  $.Field({Static:false, Public:false}, "incReadState", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/IncrementalReadState")); 
  $.Field({Static:false, Public:false}, "incReadLineInfo", $asm0E.TypeRef("System.Xml.LineInfo")); 
  $.Field({Static:false, Public:false}, "binHexDecoder", $asm0E.TypeRef("System.Xml.BinHexDecoder")); 
  $.Field({Static:false, Public:false}, "base64Decoder", $asm0E.TypeRef("System.Xml.Base64Decoder")); 
  $.Field({Static:false, Public:false}, "incReadDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "incReadLeftStartPos", $.Int32); 
  $.Field({Static:false, Public:false}, "incReadLeftEndPos", $.Int32); 
  $.Field({Static:false, Public:false}, "readCharsDecoder", $asm0E.TypeRef("System.Xml.IncrementalReadCharsDecoder")); 
  $.Field({Static:false, Public:false}, "attributeValueBaseEntityId", $.Int32); 
  $.Field({Static:false, Public:false}, "emptyEntityInAttributeResolved", $.Boolean); 
  $.Field({Static:false, Public:false}, "validationEventHandling", $asm0E.TypeRef("System.Xml.IValidationEventHandling")); 
  $.Field({Static:false, Public:false}, "onDefaultAttributeUse", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/OnDefaultAttributeUseDelegate")); 
  $.Field({Static:false, Public:false}, "validatingReaderCompatFlag", $.Boolean); 
  $.Field({Static:false, Public:false}, "addDefaultAttributesAndNormalize", $.Boolean); 
  $.Field({Static:false, Public:false}, "stringBuilder", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "rootElementParsed", $.Boolean); 
  $.Field({Static:false, Public:false}, "standalone", $.Boolean); 
  $.Field({Static:false, Public:false}, "nextEntityId", $.Int32); 
  $.Field({Static:false, Public:false}, "parsingMode", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/ParsingMode")); 
  $.Field({Static:false, Public:false}, "readState", $asm0E.TypeRef("System.Xml.ReadState")); 
  $.Field({Static:false, Public:false}, "lastEntity", $asm0E.TypeRef("System.Xml.IDtdEntityInfo")); 
  $.Field({Static:false, Public:false}, "afterResetState", $.Boolean); 
  $.Field({Static:false, Public:false}, "documentStartBytePos", $.Int32); 
  $.Field({Static:false, Public:false}, "readValueOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "charactersInDocument", $.Int64); 
  $.Field({Static:false, Public:false}, "charactersFromEntities", $.Int64); 
  $.Field({Static:false, Public:false}, "currentEntities", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.IDtdEntityInfo"), $asm0E.TypeRef("System.Xml.IDtdEntityInfo")])); 
  $.Field({Static:false, Public:false}, "disableUndeclaredEntityCheck", $.Boolean); 
  $.Field({Static:false, Public:false}, "outerReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "Xml", $.String); 
  $.Field({Static:false, Public:false}, "XmlNs", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:false}, "OuterReader", $asm0E.TypeRef("System.Xml.XmlReader"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "Namespaces", $.Boolean);

  $.Property({Static:false, Public:false}, "Normalization", $.Boolean);

  $.Property({Static:false, Public:false}, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:false}, "WhitespaceHandling", $asm0E.TypeRef("System.Xml.WhitespaceHandling"));

  $.Property({Static:false, Public:false}, "DtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing"));

  $.Property({Static:false, Public:false}, "EntityHandling", $asm0E.TypeRef("System.Xml.EntityHandling"));

  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:false}, "DtdParserProxy_NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false}, "DtdParserProxy_NamespaceResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.Property({Static:false, Public:false}, "DtdParserProxy_DtdValidation", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdParserProxy_Normalization", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdParserProxy_Namespaces", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdParserProxy_V1CompatibilityMode", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdParserProxy_BaseUri", $asm07.TypeRef("System.Uri"));

  $.Property({Static:false, Public:false}, "DtdParserProxy_IsEof", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdParserProxy_ParsingBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

  $.Property({Static:false, Public:false}, "DtdParserProxy_ParsingBufferLength", $.Int32);

  $.Property({Static:false, Public:false}, "DtdParserProxy_CurrentPosition", $.Int32);

  $.Property({Static:false, Public:false}, "DtdParserProxy_EntityStackLength", $.Int32);

  $.Property({Static:false, Public:false}, "DtdParserProxy_IsEntityEolNormalized", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdParserProxy_ValidationEventHandling", $asm0E.TypeRef("System.Xml.IValidationEventHandling"));

  $.Property({Static:false, Public:false}, "DtdParserProxy_LineNo", $.Int32);

  $.Property({Static:false, Public:false}, "DtdParserProxy_LineStartPosition", $.Int32);

  $.Property({Static:false, Public:false}, "InAttributeValueIterator", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdValidation", $.Boolean);

  $.Property({Static:false, Public:false}, "InEntity", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.Property({Static:false, Public:false}, "ValidationEventHandling", $asm0E.TypeRef("System.Xml.IValidationEventHandling"));

  $.Property({Static:false, Public:false}, "OnDefaultAttributeUse", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl/OnDefaultAttributeUseDelegate"));

  $.Property({Static:false, Public:false}, "XmlValidatingReaderCompatibilityMode", $.Boolean);

  $.Property({Static:false, Public:false}, "FragmentType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:false}, "InternalSchemaType", $.Object);

  $.Property({Static:false, Public:false}, "InternalTypedValue", $.Object);

  $.Property({Static:false, Public:false}, "StandAlone", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:false}, "V1Compat", $.Boolean);

  $.Property({Static:false, Public:false}, "V1ComformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel"));

  $.Property({Static:false, Public:false}, "DisableUndeclaredEntityCheck", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/ParsingFunction", false, {
    ElementContent: 0, 
    NoData: 1, 
    OpenUrl: 2, 
    SwitchToInteractive: 3, 
    SwitchToInteractiveXmlDecl: 4, 
    DocumentContent: 5, 
    MoveToElementContent: 6, 
    PopElementContext: 7, 
    PopEmptyElementContext: 8, 
    ResetAttributesRootLevel: 9, 
    Error: 10, 
    Eof: 11, 
    ReaderClosed: 12, 
    EntityReference: 13, 
    InIncrementalRead: 14, 
    FragmentAttribute: 15, 
    ReportEndEntity: 16, 
    AfterResolveEntityInContent: 17, 
    AfterResolveEmptyEntityInContent: 18, 
    XmlDeclarationFragment: 19, 
    GoToEof: 20, 
    PartialTextValue: 21, 
    InReadAttributeValue: 22, 
    InReadValueChunk: 23, 
    InReadContentAsBinary: 24, 
    InReadElementContentAsBinary: 25
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/ParsingMode", false, {
    Full: 0, 
    SkipNode: 1, 
    SkipContent: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/EntityType", false, {
    CharacterDec: 0, 
    CharacterHex: 1, 
    CharacterNamed: 2, 
    Expanded: 3, 
    Skipped: 4, 
    FakeExpanded: 5, 
    Unexpanded: 6, 
    ExpandedInAttribute: 7
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/EntityExpandType", false, {
    All: 0, 
    OnlyGeneral: 1, 
    OnlyCharacter: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/IncrementalReadState", false, {
    Text: 0, 
    StartTag: 1, 
    PI: 2, 
    CDATA: 3, 
    Comment: 4, 
    Attributes: 5, 
    AttributeValue: 6, 
    ReadData: 7, 
    EndElement: 8, 
    End: 9, 
    ReadValueChunk_OnCachedValue: 10, 
    ReadValueChunk_OnPartialValue: 11, 
    ReadContentAsBinary_OnCachedValue: 12, 
    ReadContentAsBinary_OnPartialValue: 13, 
    ReadContentAsBinary_End: 14
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlTextReaderImpl/ParsingState", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0xB2B0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Close", 
    $sig.make(0xB2B1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
    $sig.make(0xB2AE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
    $sig.make(0xB2AF, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "charPos", $.Int32); 
  $.Field({Static:false, Public:false}, "charsUsed", $.Int32); 
  $.Field({Static:false, Public:false}, "encoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "appendMode", $.Boolean); 
  $.Field({Static:false, Public:false}, "stream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "decoder", $asm06.TypeRef("System.Text.Decoder")); 
  $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "bytePos", $.Int32); 
  $.Field({Static:false, Public:false}, "bytesUsed", $.Int32); 
  $.Field({Static:false, Public:false}, "textReader", $asm06.TypeRef("System.IO.TextReader")); 
  $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
  $.Field({Static:false, Public:false}, "lineStartPos", $.Int32); 
  $.Field({Static:false, Public:false}, "baseUriStr", $.String); 
  $.Field({Static:false, Public:false}, "baseUri", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "isEof", $.Boolean); 
  $.Field({Static:false, Public:false}, "isStreamEof", $.Boolean); 
  $.Field({Static:false, Public:false}, "entity", $asm0E.TypeRef("System.Xml.IDtdEntityInfo")); 
  $.Field({Static:false, Public:false}, "entityId", $.Int32); 
  $.Field({Static:false, Public:false}, "eolNormalized", $.Boolean); 
  $.Field({Static:false, Public:false}, "entityResolvedManually", $.Boolean); 
  $.Property({Static:false, Public:false}, "LineNo", $.Int32);

  $.Property({Static:false, Public:false}, "LinePos", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/XmlContext", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB38A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB38B, null, [$.Type], [])
  );

  $.Field({Static:false, Public:false}, "xmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace")); 
  $.Field({Static:false, Public:false}, "xmlLang", $.String); 
  $.Field({Static:false, Public:false}, "defaultNamespace", $.String); 
  $.Field({Static:false, Public:false}, "previousContext", $.Type); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.XmlTextReaderImpl/NoNamespaceManager", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A89E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
    $sig.make(0x2A8A1, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultNamespace", 
    $sig.make(0x2A89D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x2A8A3, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
    $sig.make(0x2A8A4, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasNamespace", 
    $sig.make(0x2A8A9, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x2A8A6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x2A8A7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PopScope", 
    $sig.make(0x2A8A0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PushScope", 
    $sig.make(0x2A89F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveNamespace", 
    $sig.make(0x2A8A2, null, [$.String, $.String], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/DtdParserProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A846, null, [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_BaseUri", 
    $sig.make(0x2A81D, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_CurrentPosition", 
    $sig.make(0x2A83B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_EntityStackLength", 
    $sig.make(0x2A83D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_IsEntityEolNormalized", 
    $sig.make(0x2A83E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_IsEof", 
    $sig.make(0x2A822, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_LineNo", 
    $sig.make(0x2A83F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_LineStartPosition", 
    $sig.make(0x2A840, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_NamespaceResolver", 
    $sig.make(0x2A81C, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_NameTable", 
    $sig.make(0x2A81B, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_ParsingBuffer", 
    $sig.make(0x2A838, $jsilcore.TypeRef("System.Array", [$.Char]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.get_ParsingBufferLength", 
    $sig.make(0x2A83A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.OnNewLine", 
    $sig.make(0x2A847, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.OnPublicId", 
    $sig.make(0x2A853, null, [
        $.String, $asm0E.TypeRef("System.Xml.LineInfo"), 
        $asm0E.TypeRef("System.Xml.LineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.OnSystemId", 
    $sig.make(0x2A852, null, [
        $.String, $asm0E.TypeRef("System.Xml.LineInfo"), 
        $asm0E.TypeRef("System.Xml.LineInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.ParseComment", 
    $sig.make(0x2A84C, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.ParseNamedCharRef", 
    $sig.make(0x2A84A, $.Int32, [$.Boolean, $asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.ParseNumericCharRef", 
    $sig.make(0x2A849, $.Int32, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.ParsePI", 
    $sig.make(0x2A84B, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.PopEntity", 
    $sig.make(0x2A84E, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.IDtdEntityInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.PushEntity", 
    $sig.make(0x2A84D, $.Boolean, [$asm0E.TypeRef("System.Xml.IDtdEntityInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.PushExternalSubset", 
    $sig.make(0x2A84F, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.PushInternalDtd", 
    $sig.make(0x2A850, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.ReadData", 
    $sig.make(0x2A848, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.set_CurrentPosition", 
    $sig.make(0x2A83C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapter.Throw", 
    $sig.make(0x2A851, null, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapterV1.get_Namespaces", 
    $sig.make(0x2A844, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapterV1.get_Normalization", 
    $sig.make(0x2A843, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapterV1.get_V1CompatibilityMode", 
    $sig.make(0x2A845, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapterWithValidation.get_DtdValidation", 
    $sig.make(0x2A841, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParserAdapterWithValidation.get_ValidationEventHandling", 
    $sig.make(0x2A842, $asm0E.TypeRef("System.Xml.IValidationEventHandling"), [], [])
  );

  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.NamespaceResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.BaseUri", $asm07.TypeRef("System.Uri"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.IsEof", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.ParsingBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.ParsingBufferLength", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.CurrentPosition", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.EntityStackLength", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.IsEntityEolNormalized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.LineNo", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapter.LineStartPosition", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapterWithValidation.DtdValidation", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapterWithValidation.ValidationEventHandling", $asm0E.TypeRef("System.Xml.IValidationEventHandling"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapterV1.Normalization", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapterV1.Namespaces", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdParserAdapterV1.V1CompatibilityMode", $.Boolean);

  $.ImplementInterfaces(
      $asm0E.TypeRef("System.Xml.IDtdParserAdapterV1"), $asm0E.TypeRef("System.Xml.IDtdParserAdapterWithValidation"), 
      $asm0E.TypeRef("System.Xml.IDtdParserAdapter")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/NodeData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB28C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AdjustLineInfo", 
    $sig.make(0xB29C, null, [
        $.Int32, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.LineInfo")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0xB28E, null, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearName", 
    $sig.make(0xB28F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
    $sig.make(0xB299, null, [$.Int32, $asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
    $sig.make(0xB29A, $.Int32, [
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyToBinary", 
    $sig.make(0xB29B, $.Int32, [$asm0E.TypeRef("System.Xml.IncrementalReadDecoder"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNameWPrefix", 
    $sig.make(0xB29E, $.String, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultAttribute", 
    $sig.make(0xB288, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
    $sig.make(0xB286, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
    $sig.make(0xB284, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
    $sig.make(0xB285, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_None", 
    $sig.make(0xB283, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StringValue", 
    $sig.make(0xB28B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueBuffered", 
    $sig.make(0xB28A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNameWPrefix", 
    $sig.make(0xB29D, $.String, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnBufferInvalidated", 
    $sig.make(0xB298, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsDefaultAttribute", 
    $sig.make(0xB289, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsEmptyElement", 
    $sig.make(0xB287, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
    $sig.make(0xB290, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetLineInfo2", 
    $sig.make(0xB291, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNamedNode", 
    $sig.make(0xB294, null, [$asm0E.TypeRef("System.Xml.XmlNodeType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNamedNode", 
    $sig.make(0xB295, null, [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetValue", 
    $sig.make(0xB296, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetValue", 
    $sig.make(0xB297, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetValueNode", 
    $sig.make(0xB292, null, [$asm0E.TypeRef("System.Xml.XmlNodeType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetValueNode", 
    $sig.make(0xB293, null, [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $jsilcore.TypeRef("System.Array", [$.Char]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IComparable.CompareTo", 
    $sig.make(0xB29F, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TrimSpacesInValue", 
    $sig.make(0xB28D, null, [], [])
  );

  $.Field({Static:true , Public:false}, "s_None", $.Type); 
  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "nameWPrefix", $.String); 
  $.Field({Static:false, Public:false}, "value", $.String); 
  $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "valueStartPos", $.Int32); 
  $.Field({Static:false, Public:false}, "valueLength", $.Int32); 
  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.LineInfo")); 
  $.Field({Static:false, Public:false}, "lineInfo2", $asm0E.TypeRef("System.Xml.LineInfo")); 
  $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
  $.Field({Static:false, Public:false}, "depth", $.Int32); 
  $.Field({Static:false, Public:false}, "isEmptyOrDefault", $.Boolean); 
  $.Field({Static:false, Public:false}, "entityId", $.Int32); 
  $.Field({Static:false, Public:false}, "xmlContextPushed", $.Boolean); 
  $.Field({Static:false, Public:false}, "nextAttrValueChunk", $.Type); 
  $.Field({Static:false, Public:false}, "schemaType", $.Object); 
  $.Field({Static:false, Public:false}, "typedValue", $.Object); 
  $.Property({Static:true , Public:false}, "None", $.Type);

  $.Property({Static:false, Public:false}, "LineNo", $.Int32);

  $.Property({Static:false, Public:false}, "LinePos", $.Int32);

  $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:false}, "IsDefaultAttribute", $.Boolean);

  $.Property({Static:false, Public:false}, "ValueBuffered", $.Boolean);

  $.Property({Static:false, Public:false}, "StringValue", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.IComparable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/DtdDefaultAttributeInfoToNodeDataComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A8D5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x2A8D4, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
    $sig.make(0x2A8D3, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.Object]), [], [])
  );

  $.Field({Static:true , Public:false}, "s_instance", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.Object])); 
  $.Property({Static:true , Public:false}, "Instance", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.Object]));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.Object]))
});

JSIL.MakeDelegate("System.Xml.XmlTextReaderImpl/OnDefaultAttributeUseDelegate", false, []);

JSIL.MakeEnum(
  "System.Xml.Formatting", true, {
    None: 0, 
    Indented: 1
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlTextWriter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA93A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA93B, null, [$asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA93C, null, [$.String, $asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA93D, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
    $sig.make(0xA962, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToNamespaceHashtable", 
    $sig.make(0xA963, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AutoComplete", 
    $sig.make(0xA95B, null, [$asm0E.TypeRef("System.Xml.XmlTextWriter/Token")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AutoCompleteAll", 
    $sig.make(0xA95C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0xA954, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindPrefix", 
    $sig.make(0xA969, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0xA955, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushEncoders", 
    $sig.make(0xA96F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
    $sig.make(0xA965, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseStream", 
    $sig.make(0xA92C, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Formatting", 
    $sig.make(0xA92F, $asm0E.TypeRef("System.Xml.Formatting"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Indentation", 
    $sig.make(0xA931, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IndentChar", 
    $sig.make(0xA933, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
    $sig.make(0xA92D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0xA935, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteState", 
    $sig.make(0xA937, $asm0E.TypeRef("System.Xml.WriteState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0xA939, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0xA938, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleSpecialAttribute", 
    $sig.make(0xA96C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Indent", 
    $sig.make(0xA960, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalWriteEndElement", 
    $sig.make(0xA95D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalWriteName", 
    $sig.make(0xA96A, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalWriteProcessingInstruction", 
    $sig.make(0xA966, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
    $sig.make(0xA967, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceInCurrentScope", 
    $sig.make(0xA968, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0xA958, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
    $sig.make(0xA964, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
    $sig.make(0xA961, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushStack", 
    $sig.make(0xA96E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Formatting", 
    $sig.make(0xA930, null, [$asm0E.TypeRef("System.Xml.Formatting")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Indentation", 
    $sig.make(0xA932, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IndentChar", 
    $sig.make(0xA934, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
    $sig.make(0xA92E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_QuoteChar", 
    $sig.make(0xA936, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartDocument", 
    $sig.make(0xA95A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateName", 
    $sig.make(0xA96B, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyPrefixXml", 
    $sig.make(0xA96D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0xA952, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBinHex", 
    $sig.make(0xA953, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0xA947, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0xA94B, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0xA94F, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0xA948, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0xA941, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0xA946, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndAttributeQuote", 
    $sig.make(0xA95F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0xA940, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0xA943, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndStartTag", 
    $sig.make(0xA95E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0xA94A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0xA944, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteName", 
    $sig.make(0xA956, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteNmToken", 
    $sig.make(0xA959, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0xA949, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteQualifiedName", 
    $sig.make(0xA957, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0xA950, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0xA951, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0xA945, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0xA93E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0xA93F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0xA942, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0xA94D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0xA94E, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0xA94C, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "NamespaceStackInitialSize", 8); 
  $.Constant({Static:true , Public:false}, "MaxNamespacesWalkCount", 16); 
  $.Field({Static:false, Public:false}, "textWriter", $asm06.TypeRef("System.IO.TextWriter")); 
  $.Field({Static:false, Public:false}, "xmlEncoder", $asm0E.TypeRef("System.Xml.XmlTextEncoder")); 
  $.Field({Static:false, Public:false}, "encoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "formatting", $asm0E.TypeRef("System.Xml.Formatting")); 
  $.Field({Static:false, Public:false}, "indented", $.Boolean); 
  $.Field({Static:false, Public:false}, "indentation", $.Int32); 
  $.Field({Static:false, Public:false}, "indentChar", $.Char); 
  $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextWriter/TagInfo")])); 
  $.Field({Static:false, Public:false}, "top", $.Int32); 
  $.Field({Static:false, Public:false}, "stateTable", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextWriter/State")])); 
  $.Field({Static:false, Public:false}, "currentState", $asm0E.TypeRef("System.Xml.XmlTextWriter/State")); 
  $.Field({Static:false, Public:false}, "lastToken", $asm0E.TypeRef("System.Xml.XmlTextWriter/Token")); 
  $.Field({Static:false, Public:false}, "base64Encoder", $asm0E.TypeRef("System.Xml.XmlTextWriterBase64Encoder")); 
  $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
  $.Field({Static:false, Public:false}, "curQuoteChar", $.Char); 
  $.Field({Static:false, Public:false}, "namespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "specialAttr", $asm0E.TypeRef("System.Xml.XmlTextWriter/SpecialAttr")); 
  $.Field({Static:false, Public:false}, "prefixForXmlNs", $.String); 
  $.Field({Static:false, Public:false}, "flush", $.Boolean); 
  $.Field({Static:false, Public:false}, "nsStack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextWriter/Namespace")])); 
  $.Field({Static:false, Public:false}, "nsTop", $.Int32); 
  $.Field({Static:false, Public:false}, "nsHashtable", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
  $.Field({Static:false, Public:false}, "useNsHashtable", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:true , Public:false}, "stateName", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false}, "tokenName", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "stateTableDefault", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextWriter/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "stateTableDocument", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlTextWriter/State")])); 
  $.Property({Static:false, Public:true }, "BaseStream", $asm06.TypeRef("System.IO.Stream"));

  $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

  $.Property({Static:false, Public:true }, "Formatting", $asm0E.TypeRef("System.Xml.Formatting"));

  $.Property({Static:false, Public:true }, "Indentation", $.Int32);

  $.Property({Static:false, Public:true }, "IndentChar", $.Char);

  $.Property({Static:false, Public:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0E.TypeRef("System.Xml.WriteState"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

});

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/NamespaceState", false, {
    Uninitialized: 0, 
    NotDeclaredButInScope: 1, 
    DeclaredButNotWrittenOut: 2, 
    DeclaredAndWrittenOut: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlTextWriter/TagInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x2A908, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "defaultNs", $.String); 
  $.Field({Static:false, Public:false}, "defaultNsState", $asm0E.TypeRef("System.Xml.XmlTextWriter/NamespaceState")); 
  $.Field({Static:false, Public:false}, "xmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace")); 
  $.Field({Static:false, Public:false}, "xmlLang", $.String); 
  $.Field({Static:false, Public:false}, "prevNsTop", $.Int32); 
  $.Field({Static:false, Public:false}, "prefixCount", $.Int32); 
  $.Field({Static:false, Public:false}, "mixed", $.Boolean); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlTextWriter/Namespace", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "Set", 
    $sig.make(0x2A90F, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "declared", $.Boolean); 
  $.Field({Static:false, Public:false}, "prevNsIndex", $.Int32); 
});

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/SpecialAttr", false, {
    None: 0, 
    XmlSpace: 1, 
    XmlLang: 2, 
    XmlNs: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/State", false, {
    Start: 0, 
    Prolog: 1, 
    PostDTD: 2, 
    Element: 3, 
    Attribute: 4, 
    Content: 5, 
    AttrOnly: 6, 
    Epilog: 7, 
    Error: 8, 
    Closed: 9
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/Token", false, {
    PI: 0, 
    Doctype: 1, 
    Comment: 2, 
    CData: 3, 
    StartElement: 4, 
    EndElement: 5, 
    LongEndElement: 6, 
    StartAttribute: 7, 
    EndAttribute: 8, 
    Content: 9, 
    Base64: 10, 
    RawData: 11, 
    Whitespace: 12, 
    Empty: 13
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlUtf8RawTextWriter"), "System.Xml.XmlUtf8RawTextWriterIndent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x280C2, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x280C1, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x280D6, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnRootElement", 
    $sig.make(0x280C6, null, [$asm0E.TypeRef("System.Xml.ConformanceLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x280C5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x280D5, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x280CA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x280CE, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x280D2, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x280CB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x280C3, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x280C7, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x280CD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x280C8, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
    $sig.make(0x280D7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x280CC, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x280D3, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x280D4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x280C9, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x280C4, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x280D1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x280CF, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x280D0, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
  $.Field({Static:false, Public:false}, "indentChars", $.String); 
  $.Field({Static:false, Public:false}, "mixedContent", $.Boolean); 
  $.Field({Static:false, Public:false}, "mixedContentStack", $asm0E.TypeRef("System.Xml.BitStack")); 
  $.Field({Static:false, Public:false}, "conformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlValidatingReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27E3B, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27E3C, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27E3D, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
    $sig.make(0x27E39, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27E49, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x27E1E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27E17, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x27E23, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0x27E22, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x27E14, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0x27E38, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
    $sig.make(0x27E36, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EntityHandling", 
    $sig.make(0x27E2C, $asm0E.TypeRef("System.Xml.EntityHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x27E1F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x27E0E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Impl", 
    $sig.make(0x27E37, $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x27E1A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27E19, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x27E24, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27E25, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27E02, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x27E01, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
    $sig.make(0x27E32, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x27E03, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x27E21, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27E00, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27E04, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0x27E1B, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
    $sig.make(0x27E27, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x27E20, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
    $sig.make(0x27E2A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0x27E26, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValidationType", 
    $sig.make(0x27E28, $asm0E.TypeRef("System.Xml.ValidationType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27E12, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27E1D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27E1C, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27E3E, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27E3F, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27E40, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0x27E51, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x27E4A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27E41, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27E42, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27E43, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x27E46, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x27E44, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x27E45, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x27E48, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x27E47, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x27E4C, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x27E4E, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x27E4D, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x27E4F, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0x27E50, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadTypedValue", 
    $sig.make(0x27E55, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
    $sig.make(0x27E3A, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x27E4B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EntityHandling", 
    $sig.make(0x27E2E, null, [$asm0E.TypeRef("System.Xml.EntityHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
    $sig.make(0x27E34, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ValidationType", 
    $sig.make(0x27E29, null, [$asm0E.TypeRef("System.Xml.ValidationType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0x27E30, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x27E52, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x27E53, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x27E54, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "impl", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "SchemaType", $.Object);

  $.Property({Static:false, Public:true }, "Reader", $asm0E.TypeRef("System.Xml.XmlReader"));

  $.Property({Static:false, Public:true }, "ValidationType", $asm0E.TypeRef("System.Xml.ValidationType"));

  $.Property({Static:false, Public:true }, "Schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

  $.Property({Static:false, Public:true }, "EntityHandling", $asm0E.TypeRef("System.Xml.EntityHandling"));

  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

  $.Property({Static:false, Public:true }, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:false}, "Impl", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"));

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
})
  .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlValidatingReaderImpl", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB0C1, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB0C2, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB0C3, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB0C4, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "add_ValidationEventHandler", 
    $sig.make(0xB0BF, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
    $sig.make(0xB0E7, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0xB0CF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Close", 
    $sig.make(0xB0E6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0xB0A4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xB09A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0xB0A5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0xB0A6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0xB099, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0xB0BE, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
    $sig.make(0xB0A3, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EntityHandling", 
    $sig.make(0xB0B1, $asm0E.TypeRef("System.Xml.EntityHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0xB0A1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0xB097, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0xB09C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0xB09B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0xB0A9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0xB0AA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xB094, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB093, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceManager", 
    $sig.make(0xB0B8, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
    $sig.make(0xB0B4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xB095, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xB0A2, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xB092, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Normalization", 
    $sig.make(0xB0BD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OuterReader", 
    $sig.make(0xB0A7, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xB096, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0xB09D, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
    $sig.make(0xB0AC, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReaderImpl", 
    $sig.make(0xB0AD, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0xB0A0, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
    $sig.make(0xB0B0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
    $sig.make(0xB0AB, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0xB091, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StandAlone", 
    $sig.make(0xB0B9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypedValueObject", 
    $sig.make(0xB0BB, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidationType", 
    $sig.make(0xB0AE, $asm0E.TypeRef("System.Xml.ValidationType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Validator", 
    $sig.make(0xB0B6, $asm0E.TypeRef("System.Xml.Schema.BaseValidator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xB098, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0xB09F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0xB09E, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xB0C5, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xB0C6, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xB0C7, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
    $sig.make(0xB0DD, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
    $sig.make(0xB0E4, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0xB0D9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0xB0D0, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
    $sig.make(0xB0DE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveOffEntityReference", 
    $sig.make(0xB0D7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xB0C8, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xB0C9, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xB0CA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0xB0CD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0xB0CB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0xB0CC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDtdFromParserContext", 
    $sig.make(0xB0E0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessCoreReaderEvent", 
    $sig.make(0xB0E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xB0CE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0xB0D1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0xB0D2, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0xB0D3, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0xB0D4, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0xB0D5, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0xB0D8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadTypedValue", 
    $sig.make(0xB0DF, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "remove_ValidationEventHandler", 
    $sig.make(0xB0C0, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0xB0D6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResolveEntityInternally", 
    $sig.make(0xB0E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_EntityHandling", 
    $sig.make(0xB0B2, null, [$asm0E.TypeRef("System.Xml.EntityHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
    $sig.make(0xB0B5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_OuterReader", 
    $sig.make(0xB0A8, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaTypeObject", 
    $sig.make(0xB0BA, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TypedValueObject", 
    $sig.make(0xB0BC, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ValidationType", 
    $sig.make(0xB0AF, null, [$asm0E.TypeRef("System.Xml.ValidationType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Validator", 
    $sig.make(0xB0B7, null, [$asm0E.TypeRef("System.Xml.Schema.BaseValidator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0xB0B3, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupValidation", 
    $sig.make(0xB0E3, null, [$asm0E.TypeRef("System.Xml.ValidationType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0xB0DA, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0xB0DB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0xB0DC, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateDefaultAttributeOnUse", 
    $sig.make(0xB0E8, null, [$asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo"), $asm0E.TypeRef("System.Xml.XmlTextReaderImpl")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateDtd", 
    $sig.make(0xB0E1, null, [], [])
  );

  $.Field({Static:false, Public:false}, "coreReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "coreReaderImpl", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl")); 
  $.Field({Static:false, Public:false}, "coreReaderNSResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Field({Static:false, Public:false}, "validationType", $asm0E.TypeRef("System.Xml.ValidationType")); 
  $.Field({Static:false, Public:false}, "validator", $asm0E.TypeRef("System.Xml.Schema.BaseValidator")); 
  $.Field({Static:false, Public:false}, "schemaCollection", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection")); 
  $.Field({Static:false, Public:false}, "processIdentityConstraints", $.Boolean); 
  $.Field({Static:false, Public:false}, "parsingFunction", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl/ParsingFunction")); 
  $.Field({Static:false, Public:false}, "eventHandling", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl/ValidationEventHandling")); 
  $.Field({Static:false, Public:false}, "parserContext", $asm0E.TypeRef("System.Xml.XmlParserContext")); 
  $.Field({Static:false, Public:false}, "readBinaryHelper", $asm0E.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
  $.Field({Static:false, Public:false}, "outerReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false}, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:false}, "OuterReader", $asm0E.TypeRef("System.Xml.XmlReader"));

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "SchemaType", $.Object);

  $.Property({Static:false, Public:false}, "Reader", $asm0E.TypeRef("System.Xml.XmlReader"));

  $.Property({Static:false, Public:false}, "ReaderImpl", $asm0E.TypeRef("System.Xml.XmlTextReaderImpl"));

  $.Property({Static:false, Public:false}, "ValidationType", $asm0E.TypeRef("System.Xml.ValidationType"));

  $.Property({Static:false, Public:false}, "Schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

  $.Property({Static:false, Public:false}, "EntityHandling", $asm0E.TypeRef("System.Xml.EntityHandling"));

  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:false}, "Namespaces", $.Boolean);

  $.Property({Static:false, Public:false}, "Validator", $asm0E.TypeRef("System.Xml.Schema.BaseValidator"));

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:false}, "StandAlone", $.Boolean);

  $.Property({Static:false, Public:false}, "SchemaTypeObject", $.Object);

  $.Property({Static:false, Public:false}, "TypedValueObject", $.Object);

  $.Property({Static:false, Public:false}, "Normalization", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeEnum(
  "System.Xml.XmlValidatingReaderImpl/ParsingFunction", false, {
    Read: 0, 
    Init: 1, 
    ParseDtdFromContext: 2, 
    ResolveEntityInternally: 3, 
    InReadBinaryContent: 4, 
    ReaderClosed: 5, 
    Error: 6, 
    None: 7
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlValidatingReaderImpl/ValidationEventHandling", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB877, null, [$asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
    $sig.make(0xB879, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveHandler", 
    $sig.make(0xB87A, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IValidationEventHandling.get_EventHandler", 
    $sig.make(0xB876, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IValidationEventHandling.SendEvent", 
    $sig.make(0xB878, null, [$asm06.TypeRef("System.Exception"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl")); 
  $.Field({Static:false, Public:false}, "eventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IValidationEventHandling.EventHandler", $.Object);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IValidationEventHandling"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlWellFormedWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27EDA, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0x27F33, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
    $sig.make(0x27F25, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/NamespaceKind")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToAttrHashTable", 
    $sig.make(0x27F34, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToNamespaceHashtable", 
    $sig.make(0x27F26, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AdvanceState", 
    $sig.make(0x27F2A, null, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/Token")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckNCName", 
    $sig.make(0x27F30, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27F06, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DupAttrException", 
    $sig.make(0x27F29, $asm0E.TypeRef("System.Xml.XmlException"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27F07, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
    $sig.make(0x27F2F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InBase64", 
    $sig.make(0x27ED0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InnerWriter", 
    $sig.make(0x27ECC, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsClosedOrErrorState", 
    $sig.make(0x27ED1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_RawWriter", 
    $sig.make(0x27ECD, $asm0E.TypeRef("System.Xml.XmlRawWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SaveAttrValue", 
    $sig.make(0x27ECF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27EC8, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteState", 
    $sig.make(0x27EC6, $asm0E.TypeRef("System.Xml.WriteState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27ECB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27ECA, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetStateName", 
    $sig.make(0x27F2C, $.String, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/State")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidCharsException", 
    $sig.make(0x27F31, $asm06.TypeRef("System.Exception"), [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupLocalNamespace", 
    $sig.make(0x27F2E, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
    $sig.make(0x27F2D, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceIndex", 
    $sig.make(0x27F27, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x27F08, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
    $sig.make(0x27F28, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushNamespaceExplicit", 
    $sig.make(0x27F24, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushNamespaceImplicit", 
    $sig.make(0x27F23, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSpecialAttribute", 
    $sig.make(0x27F20, null, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/SpecialAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27F2B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartFragment", 
    $sig.make(0x27F22, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidStateTransition", 
    $sig.make(0x27F32, null, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/Token"), $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/State")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBase64", 
    $sig.make(0x27F05, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteBinHex", 
    $sig.make(0x27F1F, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27EF5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27EFB, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27F01, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27EF7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27EEE, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27EF4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0x27EE7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x27EF1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27EFA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x27EF2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27EF8, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteQualifiedName", 
    $sig.make(0x27F09, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27F03, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27F04, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27EF3, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x27EDD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x27EE0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartDocumentImpl", 
    $sig.make(0x27F21, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27EF0, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27EFF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27EFC, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F0B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F0C, null, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F0D, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F0F, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F12, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F15, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F18, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F1B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteValue", 
    $sig.make(0x27F1E, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27EFD, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "ElementStackInitialSize", 8); 
  $.Constant({Static:true , Public:false}, "NamespaceStackInitialSize", 8); 
  $.Constant({Static:true , Public:false}, "AttributeArrayInitialSize", 8); 
  $.Constant({Static:true , Public:false}, "MaxAttrDuplWalkCount", 14); 
  $.Constant({Static:true , Public:false}, "MaxNamespacesWalkCount", 16); 
  $.Field({Static:false, Public:false}, "writer", $asm0E.TypeRef("System.Xml.XmlWriter")); 
  $.Field({Static:false, Public:false}, "rawWriter", $asm0E.TypeRef("System.Xml.XmlRawWriter")); 
  $.Field({Static:false, Public:false}, "predefinedNamespaces", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Field({Static:false, Public:false}, "nsStack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/Namespace")])); 
  $.Field({Static:false, Public:false}, "nsTop", $.Int32); 
  $.Field({Static:false, Public:false}, "nsHashtable", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
  $.Field({Static:false, Public:false}, "useNsHashtable", $.Boolean); 
  $.Field({Static:false, Public:false}, "elemScopeStack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/ElementScope")])); 
  $.Field({Static:false, Public:false}, "elemTop", $.Int32); 
  $.Field({Static:false, Public:false}, "attrStack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/AttrName")])); 
  $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "attrHashTable", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
  $.Field({Static:false, Public:false}, "specAttr", $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/SpecialAttribute")); 
  $.Field({Static:false, Public:false}, "attrValueCache", $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/AttributeValueCache")); 
  $.Field({Static:false, Public:false}, "curDeclPrefix", $.String); 
  $.Field({Static:false, Public:false}, "stateTable", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/State")])); 
  $.Field({Static:false, Public:false}, "currentState", $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/State")); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "omitDuplNamespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "conformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel")); 
  $.Field({Static:false, Public:false}, "dtdWritten", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlDeclFollows", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "hasher", $asm0E.TypeRef("System.Xml.SecureStringHasher")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "stateName", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "tokenName", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false}, "state2WriteState", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.WriteState")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "StateTableDocument", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "StateTableAuto", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/State")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm0E.TypeRef("System.Xml.WriteState"));

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:false}, "InnerWriter", $asm0E.TypeRef("System.Xml.XmlWriter"));

  $.Property({Static:false, Public:false}, "RawWriter", $asm0E.TypeRef("System.Xml.XmlRawWriter"));

  $.Property({Static:false, Public:false}, "SaveAttrValue", $.Boolean);

  $.Property({Static:false, Public:false}, "InBase64", $.Boolean);

  $.Property({Static:false, Public:false}, "IsClosedOrErrorState", $.Boolean);

});

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/State", false, {
    Start: 0, 
    TopLevel: 1, 
    Document: 2, 
    Element: 3, 
    Content: 4, 
    B64Content: 5, 
    B64Attribute: 6, 
    AfterRootEle: 7, 
    Attribute: 8, 
    SpecialAttr: 9, 
    EndDocument: 10, 
    RootLevelAttr: 11, 
    RootLevelSpecAttr: 12, 
    RootLevelB64Attr: 13, 
    AfterRootLevelAttr: 14, 
    Closed: 15, 
    Error: 16, 
    StartContent: 101, 
    StartContentEle: 102, 
    StartContentB64: 103, 
    StartDoc: 104, 
    StartDocEle: 106, 
    EndAttrSEle: 107, 
    EndAttrEEle: 108, 
    EndAttrSCont: 109, 
    EndAttrSAttr: 111, 
    PostB64Cont: 112, 
    PostB64Attr: 113, 
    PostB64RootAttr: 114, 
    StartFragEle: 115, 
    StartFragCont: 116, 
    StartFragB64: 117, 
    StartRootLevelAttr: 118
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/Token", false, {
    StartDocument: 0, 
    EndDocument: 1, 
    PI: 2, 
    Comment: 3, 
    Dtd: 4, 
    StartElement: 5, 
    EndElement: 6, 
    StartAttribute: 7, 
    EndAttribute: 8, 
    Text: 9, 
    CData: 10, 
    AtomicValue: 11, 
    Base64: 12, 
    RawData: 13, 
    Whitespace: 14
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlWellFormedWriter/NamespaceResolverProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A881, null, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x2A882, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x2A883, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x2A884, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "wfWriter", $asm0E.TypeRef("System.Xml.XmlWellFormedWriter")); 
  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlWellFormedWriter/ElementScope", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "Set", 
    $sig.make(0x2A88E, null, [
        $.String, $.String, 
        $.String, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x2A88F, null, [$asm0E.TypeRef("System.Xml.XmlRawWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x2A891, null, [$asm0E.TypeRef("System.Xml.XmlRawWriter")], [])
  );

  $.Field({Static:false, Public:false}, "prevNSTop", $.Int32); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "xmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace")); 
  $.Field({Static:false, Public:false}, "xmlLang", $.String); 
});

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/NamespaceKind", false, {
    Written: 0, 
    NeedToWrite: 1, 
    Implied: 2, 
    Special: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlWellFormedWriter/Namespace", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "Set", 
    $sig.make(0x2A8B2, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/NamespaceKind")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteDecl", 
    $sig.make(0x2A8B3, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlRawWriter")], [])
  );

  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "kind", $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/NamespaceKind")); 
  $.Field({Static:false, Public:false}, "prevNsIndex", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlWellFormedWriter/AttrName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "IsDuplicate", 
    $sig.make(0x2A8BF, $.Boolean, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Set", 
    $sig.make(0x2A8BD, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "prev", $.Int32); 
});

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/SpecialAttribute", false, {
    No: 0, 
    DefaultXmlns: 1, 
    PrefixedXmlns: 2, 
    XmlSpace: 3, 
    XmlLang: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlWellFormedWriter/AttributeValueCache", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27FBE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddItem", 
    $sig.make(0x27FBD, null, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0x27FB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StringValue", 
    $sig.make(0x27FA3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Replay", 
    $sig.make(0x27FB6, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartComplexValue", 
    $sig.make(0x27FBB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Trim", 
    $sig.make(0x27FB8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCharEntity", 
    $sig.make(0x27FA7, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteChars", 
    $sig.make(0x27FAC, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEntityRef", 
    $sig.make(0x27FA5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
    $sig.make(0x27FB2, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
    $sig.make(0x27FB3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteString", 
    $sig.make(0x27FAB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateCharEntity", 
    $sig.make(0x27FA8, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
    $sig.make(0x27FB5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteWhitespace", 
    $sig.make(0x27FA9, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "stringValue", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "singleStringValue", $.String); 
  $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/AttributeValueCache/Item")])); 
  $.Field({Static:false, Public:false}, "firstItem", $.Int32); 
  $.Field({Static:false, Public:false}, "lastItem", $.Int32); 
  $.Property({Static:false, Public:false}, "StringValue", $.String);

});

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType", false, {
    EntityRef: 0, 
    CharEntity: 1, 
    SurrogateCharEntity: 2, 
    Whitespace: 3, 
    String: 4, 
    StringChars: 5, 
    Raw: 6, 
    RawChars: 7, 
    ValueString: 8
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlWellFormedWriter/AttributeValueCache/Item", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2AA38, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Set", 
    $sig.make(0x2AA3A, null, [$asm0E.TypeRef("System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType"), $.Object], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType")); 
  $.Field({Static:false, Public:false}, "data", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlWellFormedWriter/AttributeValueCache/BufferChunk", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2AA36, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
});

JSIL.MakeEnum(
  "System.Xml.WriteState", true, {
    Start: 0, 
    Prolog: 1, 
    Element: 2, 
    Attribute: 3, 
    Content: 4, 
    Closed: 5, 
    Error: 6
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlOutputMethod", true, {
    Xml: 0, 
    Html: 1, 
    Text: 2, 
    AutoDetect: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.TriState", false, {
    Unknown: -1, 
    False: 0, 
    True: 1
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlStandalone", false, {
    Omit: 0, 
    Yes: 1, 
    No: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlWriterSettings", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xABC8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xABD3, null, [$asm10.TypeRef("System.Xml.Xsl.Runtime.XmlQueryDataReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddConformanceWrapper", 
    $sig.make(0xABD1, $asm0E.TypeRef("System.Xml.XmlWriter"), [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckReadOnly", 
    $sig.make(0xABCF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xABCA, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWriter", 
    $sig.make(0xABCB, $asm0E.TypeRef("System.Xml.XmlWriter"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWriter", 
    $sig.make(0xABCC, $asm0E.TypeRef("System.Xml.XmlWriter"), [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWriter", 
    $sig.make(0xABCD, $asm0E.TypeRef("System.Xml.XmlWriter"), [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWriter", 
    $sig.make(0xABCE, $asm0E.TypeRef("System.Xml.XmlWriter"), [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AutoXmlDeclaration", 
    $sig.make(0xABC1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CDataSectionElements", 
    $sig.make(0xABB6, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CheckCharacters", 
    $sig.make(0xABB0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CloseOutput", 
    $sig.make(0xABAC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ConformanceLevel", 
    $sig.make(0xABAE, $asm0E.TypeRef("System.Xml.ConformanceLevel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DocTypePublic", 
    $sig.make(0xABBD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DocTypeSystem", 
    $sig.make(0xABBB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
    $sig.make(0xAB9E, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Indent", 
    $sig.make(0xABA6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IndentChars", 
    $sig.make(0xABA8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IndentInternal", 
    $sig.make(0xABC3, $asm0E.TypeRef("System.Xml.TriState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsQuerySpecific", 
    $sig.make(0xABC5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MediaType", 
    $sig.make(0xABB9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MergeCDataSections", 
    $sig.make(0xABB7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceHandling", 
    $sig.make(0xABB2, $asm0E.TypeRef("System.Xml.NamespaceHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewLineChars", 
    $sig.make(0xABA4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewLineHandling", 
    $sig.make(0xABA2, $asm0E.TypeRef("System.Xml.NewLineHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewLineOnAttributes", 
    $sig.make(0xABAA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OmitXmlDeclaration", 
    $sig.make(0xABA0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OutputMethod", 
    $sig.make(0xABB4, $asm0E.TypeRef("System.Xml.XmlOutputMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
    $sig.make(0xABC6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
    $sig.make(0xABBF, $asm0E.TypeRef("System.Xml.XmlStandalone"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
    $sig.make(0xABD2, null, [$asm10.TypeRef("System.Xml.Xsl.Runtime.XmlQueryDataWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xABD0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0xABC9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_AutoXmlDeclaration", 
    $sig.make(0xABC2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CheckCharacters", 
    $sig.make(0xABB1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CloseOutput", 
    $sig.make(0xABAD, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ConformanceLevel", 
    $sig.make(0xABAF, null, [$asm0E.TypeRef("System.Xml.ConformanceLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DocTypePublic", 
    $sig.make(0xABBE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DocTypeSystem", 
    $sig.make(0xABBC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
    $sig.make(0xAB9F, null, [$asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Indent", 
    $sig.make(0xABA7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IndentChars", 
    $sig.make(0xABA9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IndentInternal", 
    $sig.make(0xABC4, null, [$asm0E.TypeRef("System.Xml.TriState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MediaType", 
    $sig.make(0xABBA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MergeCDataSections", 
    $sig.make(0xABB8, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NamespaceHandling", 
    $sig.make(0xABB3, null, [$asm0E.TypeRef("System.Xml.NamespaceHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NewLineChars", 
    $sig.make(0xABA5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NewLineHandling", 
    $sig.make(0xABA3, null, [$asm0E.TypeRef("System.Xml.NewLineHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NewLineOnAttributes", 
    $sig.make(0xABAB, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OmitXmlDeclaration", 
    $sig.make(0xABA1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_OutputMethod", 
    $sig.make(0xABB5, null, [$asm0E.TypeRef("System.Xml.XmlOutputMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
    $sig.make(0xABC7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Standalone", 
    $sig.make(0xABC0, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.Field({Static:false, Public:false}, "encoding", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "omitXmlDecl", $.Boolean); 
  $.Field({Static:false, Public:false}, "newLineHandling", $asm0E.TypeRef("System.Xml.NewLineHandling")); 
  $.Field({Static:false, Public:false}, "newLineChars", $.String); 
  $.Field({Static:false, Public:false}, "indent", $asm0E.TypeRef("System.Xml.TriState")); 
  $.Field({Static:false, Public:false}, "indentChars", $.String); 
  $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
  $.Field({Static:false, Public:false}, "closeOutput", $.Boolean); 
  $.Field({Static:false, Public:false}, "namespaceHandling", $asm0E.TypeRef("System.Xml.NamespaceHandling")); 
  $.Field({Static:false, Public:false}, "conformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel")); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "outputMethod", $asm0E.TypeRef("System.Xml.XmlOutputMethod")); 
  $.Field({Static:false, Public:false}, "cdataSections", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])); 
  $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean); 
  $.Field({Static:false, Public:false}, "mediaType", $.String); 
  $.Field({Static:false, Public:false}, "docTypeSystem", $.String); 
  $.Field({Static:false, Public:false}, "docTypePublic", $.String); 
  $.Field({Static:false, Public:false}, "standalone", $asm0E.TypeRef("System.Xml.XmlStandalone")); 
  $.Field({Static:false, Public:false}, "autoXmlDecl", $.Boolean); 
  $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean); 
  $.Property({Static:false, Public:true }, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:true }, "OmitXmlDeclaration", $.Boolean);

  $.Property({Static:false, Public:true }, "NewLineHandling", $asm0E.TypeRef("System.Xml.NewLineHandling"));

  $.Property({Static:false, Public:true }, "NewLineChars", $.String);

  $.Property({Static:false, Public:true }, "Indent", $.Boolean);

  $.Property({Static:false, Public:true }, "IndentChars", $.String);

  $.Property({Static:false, Public:true }, "NewLineOnAttributes", $.Boolean);

  $.Property({Static:false, Public:true }, "CloseOutput", $.Boolean);

  $.Property({Static:false, Public:true }, "ConformanceLevel", $asm0E.TypeRef("System.Xml.ConformanceLevel"));

  $.Property({Static:false, Public:true }, "CheckCharacters", $.Boolean);

  $.Property({Static:false, Public:true }, "NamespaceHandling", $asm0E.TypeRef("System.Xml.NamespaceHandling"));

  $.Property({Static:false, Public:true }, "OutputMethod", $asm0E.TypeRef("System.Xml.XmlOutputMethod"));

  $.Property({Static:false, Public:false}, "CDataSectionElements", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]));

  $.Property({Static:false, Public:false}, "MergeCDataSections", $.Boolean);

  $.Property({Static:false, Public:false}, "MediaType", $.String);

  $.Property({Static:false, Public:false}, "DocTypeSystem", $.String);

  $.Property({Static:false, Public:false}, "DocTypePublic", $.String);

  $.Property({Static:false, Public:false}, "Standalone", $asm0E.TypeRef("System.Xml.XmlStandalone"));

  $.Property({Static:false, Public:false}, "AutoXmlDeclaration", $.Boolean);

  $.Property({Static:false, Public:false}, "IndentInternal", $asm0E.TypeRef("System.Xml.TriState"));

  $.Property({Static:false, Public:false}, "IsQuerySpecific", $.Boolean);

  $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

});

JSIL.MakeDelegate("System.Xml.CachingEventHandler", false, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.AttributePSVIInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27C52, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x27C53, null, [], [])
  );

  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "typedAttributeValue", $.Object); 
  $.Field({Static:false, Public:false}, "attributeSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
});

JSIL.DeclareNamespace("System.Xml.Schema");
JSIL.MakeInterface(
  "System.Xml.Schema.IXmlSchemaInfo", true, [], function ($) {
    $.Method({}, "get_Validity", $sig.make(0xA91F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], []));
    $.Method({}, "get_IsDefault", $sig.make(0xA920, $.Boolean, [], []));
    $.Method({}, "get_IsNil", $sig.make(0xA921, $.Boolean, [], []));
    $.Method({}, "get_MemberType", $sig.make(0xA922, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], []));
    $.Method({}, "get_SchemaType", $sig.make(0xA923, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], []));
    $.Method({}, "get_SchemaElement", $sig.make(0xA924, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], []));
    $.Method({}, "get_SchemaAttribute", $sig.make(0xA925, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], []));
    $.Property({}, "Validity");
    $.Property({}, "IsDefault");
    $.Property({}, "IsNil");
    $.Property({}, "MemberType");
    $.Property({}, "SchemaType");
    $.Property({}, "SchemaElement");
    $.Property({}, "SchemaAttribute");
  }, []);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XsdValidatingReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28222, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm0E.TypeRef("System.Xml.XmlReaderSettings"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28225, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm0E.TypeRef("System.Xml.XmlReaderSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttributePSVI", 
    $sig.make(0x28286, $asm0E.TypeRef("System.Xml.AttributePSVIInfo"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CachingCallBack", 
    $sig.make(0x282A3, null, [$asm0E.TypeRef("System.Xml.XsdCachingReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearAttributesInfo", 
    $sig.make(0x28276, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x28255, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDummyTextNode", 
    $sig.make(0x282A1, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x281FB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttributeSchemaInfo", 
    $sig.make(0x28220, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttributeXmlType", 
    $sig.make(0x2821D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x281EB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x281FF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x281E9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementXmlType", 
    $sig.make(0x28218, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x281FC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x281E6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x281ED, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x281EC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x28214, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x28216, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x281E3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x281E2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x281E4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x281FE, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x281E1, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x281E5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0x281EE, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x281FD, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x281F4, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x281E0, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x281E7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x281FA, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x281F2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x281F0, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x28242, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x28243, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x28246, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributePSVI", 
    $sig.make(0x28278, $asm0E.TypeRef("System.Xml.AttributePSVIInfo"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributePSVI", 
    $sig.make(0x2827A, $asm0E.TypeRef("System.Xml.AttributePSVIInfo"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetCachingReader", 
    $sig.make(0x2829F, $asm0E.TypeRef("System.Xml.XsdCachingReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
    $sig.make(0x2827C, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
    $sig.make(0x28283, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIsDefault", 
    $sig.make(0x2829A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMemberType", 
    $sig.make(0x2829B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOriginalAtomicValueStringOfElement", 
    $sig.make(0x282A4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringValue", 
    $sig.make(0x2826D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0x28264, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x28226, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
    $sig.make(0x2828C, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
    $sig.make(0x2828E, $.Object, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
    $sig.make(0x28290, $.Object, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
    $sig.make(0x28292, $.Object, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
    $sig.make(0x28294, $.Object, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
    $sig.make(0x28296, $.Object, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")]), $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsXSDRoot", 
    $sig.make(0x28288, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x28259, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x28248, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x2824A, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x2824C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x28252, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x2824E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x28250, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElementEvent", 
    $sig.make(0x28271, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessEndElementEvent", 
    $sig.make(0x28273, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
    $sig.make(0x2828A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessReaderEvent", 
    $sig.make(0x2826F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x28253, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadAheadForMemberType", 
    $sig.make(0x28299, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x2825D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAs", 
    $sig.make(0x28235, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x2825F, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x28260, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBoolean", 
    $sig.make(0x28229, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDateTime", 
    $sig.make(0x2822A, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDecimal", 
    $sig.make(0x2822F, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDouble", 
    $sig.make(0x2822B, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsFloat", 
    $sig.make(0x2822D, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsInt", 
    $sig.make(0x28231, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsLong", 
    $sig.make(0x28233, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsObject", 
    $sig.make(0x28228, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsString", 
    $sig.make(0x28234, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAs", 
    $sig.make(0x28240, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x28261, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x28262, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
    $sig.make(0x28237, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDateTime", 
    $sig.make(0x28238, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDecimal", 
    $sig.make(0x2823C, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
    $sig.make(0x2823A, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsFloat", 
    $sig.make(0x2823B, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
    $sig.make(0x2823D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
    $sig.make(0x2823E, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsObject", 
    $sig.make(0x28236, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
    $sig.make(0x2823F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadTillEndElement", 
    $sig.make(0x28297, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x2825B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReturnBoxedValue", 
    $sig.make(0x2829D, $.Object, [
        $.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupValidator", 
    $sig.make(0x28227, null, [
        $asm0E.TypeRef("System.Xml.XmlReaderSettings"), $asm0E.TypeRef("System.Xml.XmlReader"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x28257, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SwitchReader", 
    $sig.make(0x28298, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x28266, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x28268, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x2826B, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_IsDefault", 
    $sig.make(0x28200, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_IsNil", 
    $sig.make(0x28205, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_MemberType", 
    $sig.make(0x28208, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_SchemaAttribute", 
    $sig.make(0x2820F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_SchemaElement", 
    $sig.make(0x2820A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_SchemaType", 
    $sig.make(0x28209, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlSchemaInfo.get_Validity", 
    $sig.make(0x28206, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateAttributes", 
    $sig.make(0x28275, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "InitialAttributeCount", 8); 
  $.Field({Static:false, Public:false}, "coreReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "coreReaderNSResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Field({Static:false, Public:false}, "thisNSResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Field({Static:false, Public:false}, "validator", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidator")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "validationEvent", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "validationState", $asm0E.TypeRef("System.Xml.XsdValidatingReader/ValidatingReaderState")); 
  $.Field({Static:false, Public:false}, "valueGetter", $asm0E.TypeRef("System.Xml.Schema.XmlValueGetter")); 
  $.Field({Static:false, Public:false}, "nsManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "manageNamespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "processInlineSchema", $.Boolean); 
  $.Field({Static:false, Public:false}, "replayCache", $.Boolean); 
  $.Field({Static:false, Public:false}, "cachedNode", $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData")); 
  $.Field({Static:false, Public:false}, "attributePSVI", $asm0E.TypeRef("System.Xml.AttributePSVIInfo")); 
  $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
  $.Field({Static:false, Public:false}, "coreReaderAttributeCount", $.Int32); 
  $.Field({Static:false, Public:false}, "currentAttrIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "attributePSVINodes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.AttributePSVIInfo")])); 
  $.Field({Static:false, Public:false}, "defaultAttributes", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm0E.TypeRef("System.Xml.Schema.Parser")); 
  $.Field({Static:false, Public:false}, "atomicValue", $.Object); 
  $.Field({Static:false, Public:false}, "xmlSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
  $.Field({Static:false, Public:false}, "originalAtomicValueString", $.String); 
  $.Field({Static:false, Public:false}, "coreReaderNameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "cachingReader", $asm0E.TypeRef("System.Xml.XsdCachingReader")); 
  $.Field({Static:false, Public:false}, "textNode", $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData")); 
  $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
  $.Field({Static:false, Public:false}, "NsXs", $.String); 
  $.Field({Static:false, Public:false}, "NsXsi", $.String); 
  $.Field({Static:false, Public:false}, "XsiType", $.String); 
  $.Field({Static:false, Public:false}, "XsiNil", $.String); 
  $.Field({Static:false, Public:false}, "XsdSchema", $.String); 
  $.Field({Static:false, Public:false}, "XsiSchemaLocation", $.String); 
  $.Field({Static:false, Public:false}, "XsiNoNamespaceSchemaLocation", $.String); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "readBinaryHelper", $asm0E.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
  $.Field({Static:false, Public:false}, "savedState", $asm0E.TypeRef("System.Xml.XsdValidatingReader/ValidatingReaderState")); 
  $.Field({Static:true , Public:false}, "TypeOfString", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.IsDefault", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.IsNil", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.Validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.MemberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.SchemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"));

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlSchemaInfo.SchemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "ElementXmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false}, "AttributeXmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false}, "AttributeSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo"));

  $.ImplementInterfaces(
      $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"), 
      $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
  )
});

JSIL.MakeEnum(
  "System.Xml.XsdValidatingReader/ValidatingReaderState", false, {
    OnReadAttributeValue: -2, 
    OnDefaultAttribute: -1, 
    None: 0, 
    Init: 1, 
    Read: 2, 
    OnAttribute: 3, 
    ClearAttributes: 4, 
    ParseInlineSchema: 5, 
    ReadAhead: 6, 
    OnReadBinaryContent: 7, 
    ReaderClosed: 8, 
    EOF: 9, 
    Error: 10
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XsdCachingReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28143, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"), 
        $asm0E.TypeRef("System.Xml.CachingEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0x2816A, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddContent", 
    $sig.make(0x2816B, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearAttributesInfo", 
    $sig.make(0x28169, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x2815F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDummyTextNode", 
    $sig.make(0x2816F, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x2812C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x28124, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x28122, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x28130, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x2811E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x28128, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x28126, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2812D, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2812E, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2812F, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x28115, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x28113, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x28117, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x28136, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x28111, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x2811C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0x28129, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x28131, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x28110, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x28120, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x2812B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x2812A, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x2814A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x2814B, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x2814E, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeIndexWithoutPrefix", 
    $sig.make(0x2816D, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeIndexWithPrefix", 
    $sig.make(0x2816E, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetCoreReader", 
    $sig.make(0x28167, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLineInfo", 
    $sig.make(0x28168, $asm0E.TypeRef("System.Xml.IXmlLineInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x28145, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x28162, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x28150, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x28151, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x28152, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x28155, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x28153, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x28154, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x28156, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x28164, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadOriginalContentAsString", 
    $sig.make(0x2815D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecordAttributes", 
    $sig.make(0x2816C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecordEndElementNode", 
    $sig.make(0x2815B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecordTextNode", 
    $sig.make(0x28158, $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData"), [
        $.String, $.String, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x28146, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x28163, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetToReplayMode", 
    $sig.make(0x28166, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x28160, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SwitchTextNodeAndEndElement", 
    $sig.make(0x2815A, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.get_LineNumber", 
    $sig.make(0x28140, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.get_LinePosition", 
    $sig.make(0x28142, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.HasLineInfo", 
    $sig.make(0x28165, $.Boolean, [], [])
  );

  $.Constant({Static:true , Public:false}, "InitialAttributeCount", 8); 
  $.Constant({Static:true , Public:false}, "InitialContentCount", 4); 
  $.Field({Static:false, Public:false}, "coreReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "coreReaderNameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "contentEvents", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.ValidatingReaderNodeData")])); 
  $.Field({Static:false, Public:false}, "attributeEvents", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.ValidatingReaderNodeData")])); 
  $.Field({Static:false, Public:false}, "cachedNode", $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData")); 
  $.Field({Static:false, Public:false}, "cacheState", $asm0E.TypeRef("System.Xml.XsdCachingReader/CachingReaderState")); 
  $.Field({Static:false, Public:false}, "contentIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
  $.Field({Static:false, Public:false}, "returnOriginalStringValues", $.Boolean); 
  $.Field({Static:false, Public:false}, "cacheHandler", $asm0E.TypeRef("System.Xml.CachingEventHandler")); 
  $.Field({Static:false, Public:false}, "currentAttrIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "currentContentIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "readAhead", $.Boolean); 
  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "textNode", $asm0E.TypeRef("System.Xml.ValidatingReaderNodeData")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlLineInfo.LineNumber", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlLineInfo.LinePosition", $.Int32);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeEnum(
  "System.Xml.XsdCachingReader/CachingReaderState", false, {
    None: 0, 
    Init: 1, 
    Record: 2, 
    Replay: 3, 
    ReaderClosed: 4, 
    Error: 5
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DocumentXmlWriterType", false, {
    InsertSiblingAfter: 0, 
    InsertSiblingBefore: 1, 
    PrependChild: 2, 
    AppendChild: 3, 
    AppendAttribute: 4, 
    ReplaceToFollowingSibling: 5
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.DocumentXmlWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x283C9, null, [
        $asm0E.TypeRef("System.Xml.DocumentXmlWriterType"), $asm0E.TypeRef("System.Xml.XmlNode"), 
        $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0x28403, null, [$asm0E.TypeRef("System.Xml.XmlAttribute"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddChild", 
    $sig.make(0x28404, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x283FA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Close", 
    $sig.make(0x283FB, null, [$asm0E.TypeRef("System.Xml.WriteState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CloseWithAppendAttribute", 
    $sig.make(0x283FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CloseWithReplaceToFollowingSibling", 
    $sig.make(0x283FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x283FE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x283B7, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportsNamespaceDeclarationInChunks", 
    $sig.make(0x283C3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EndNode", 
    $sig.make(0x283C0, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NamespaceManager", 
    $sig.make(0x283B4, null, [$asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Navigator", 
    $sig.make(0x283BC, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSettings", 
    $sig.make(0x283CB, null, [$asm0E.TypeRef("System.Xml.XmlWriterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x283E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartState", 
    $sig.make(0x28405, $asm0E.TypeRef("System.Xml.DocumentXmlWriter/State"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x28400, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x28401, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x28402, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyState", 
    $sig.make(0x28407, null, [$asm0E.TypeRef("System.Xml.DocumentXmlWriter/Method")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x283E7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x283EE, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x283F4, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x283E9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x283DB, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x283E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndDocument", 
    $sig.make(0x283DA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x283DD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x283DE, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndNamespaceDeclaration", 
    $sig.make(0x283E6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x283EC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x283DF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x283E0, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x283E4, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x283EA, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x283F6, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x283F9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x283E2, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x283D8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartDocument", 
    $sig.make(0x283D9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x283DC, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartNamespaceDeclaration", 
    $sig.make(0x283E5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x283F1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x283F3, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x283F0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x283D4, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x283D7, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.DocumentXmlWriterType")); 
  $.Field({Static:false, Public:false}, "start", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "document", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "namespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "state", $asm0E.TypeRef("System.Xml.DocumentXmlWriter/State")); 
  $.Field({Static:false, Public:false}, "write", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "fragment", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XmlNode")])); 
  $.Field({Static:false, Public:false}, "settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings")); 
  $.Field({Static:false, Public:false}, "navigator", $asm0E.TypeRef("System.Xml.DocumentXPathNavigator")); 
  $.Field({Static:false, Public:false}, "end", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:true , Public:false}, "changeState", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.DocumentXmlWriter/State")])); 
  $.Property({Static:false, Public:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:true }, "Navigator", $asm0E.TypeRef("System.Xml.DocumentXPathNavigator"));

  $.Property({Static:false, Public:true }, "EndNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:false, Virtual:true }, "SupportsNamespaceDeclarationInChunks", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeEnum(
  "System.Xml.DocumentXmlWriter/State", false, {
    Error: 0, 
    Attribute: 1, 
    Prolog: 2, 
    Fragment: 3, 
    Content: 4, 
    Last: 5
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DocumentXmlWriter/Method", false, {
    WriteXmlDeclaration: 0, 
    WriteStartDocument: 1, 
    WriteEndDocument: 2, 
    WriteDocType: 3, 
    WriteStartElement: 4, 
    WriteEndElement: 5, 
    WriteFullEndElement: 6, 
    WriteStartAttribute: 7, 
    WriteEndAttribute: 8, 
    WriteStartNamespaceDeclaration: 9, 
    WriteEndNamespaceDeclaration: 10, 
    WriteCData: 11, 
    WriteComment: 12, 
    WriteProcessingInstruction: 13, 
    WriteEntityRef: 14, 
    WriteWhitespace: 15, 
    WriteString: 16
  }, false
);

JSIL.DeclareNamespace("System.Xml.XPath");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathItem", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xABE6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNode", 
    $sig.make(0xABDA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypedValue", 
    $sig.make(0xABDD, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xABDC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsBoolean", 
    $sig.make(0xABDF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsDateTime", 
    $sig.make(0xABE0, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsDouble", 
    $sig.make(0xABE1, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsInt", 
    $sig.make(0xABE2, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsLong", 
    $sig.make(0xABE3, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0xABDE, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
    $sig.make(0xABDB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValueAs", 
    $sig.make(0xABE4, $.Object, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValueAs", 
    $sig.make(0xABE5, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm06.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

});

JSIL.MakeInterface(
  "System.Xml.XPath.IXPathNavigable", true, [], function ($) {
    $.Method({}, "CreateNavigator", $sig.make(0xABED, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], []));
  }, []);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathItem"), "System.Xml.XPath.XPathNavigator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xAC76, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0xAC4C, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0xAC54, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0xAC55, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0xAC56, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChildElement", 
    $sig.make(0xAC63, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildSubtree", 
    $sig.make(0xAC75, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CheckValidity", 
    $sig.make(0xAC36, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xAC16, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComparePosition", 
    $sig.make(0xAC35, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompareSiblings", 
    $sig.make(0xAC6C, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0xAC38, $asm0E.TypeRef("System.Xml.XPath.XPathExpression"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CompileMatchPattern", 
    $sig.make(0xAC6A, $asm0E.TypeRef("System.Xml.XPath.XPathExpression"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
    $sig.make(0xAC66, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateAttributes", 
    $sig.make(0xAC4F, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateContextReader", 
    $sig.make(0xAC74, $asm0E.TypeRef("System.Xml.XmlReader"), [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNavigator", 
    $sig.make(0xAC12, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
    $sig.make(0xAC73, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeleteRange", 
    $sig.make(0xAC60, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeleteSelf", 
    $sig.make(0xAC61, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0xAC3F, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0xAC40, $.Object, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0xAC41, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0xAC42, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathExpression"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xABFE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanEdit", 
    $sig.make(0xAC05, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
    $sig.make(0xAC0C, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0xAC02, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasChildren", 
    $sig.make(0xAC03, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IndexInParent", 
    $sig.make(0xAC0A, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0xAC08, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0xABFF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNode", 
    $sig.make(0xABEE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xABFA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xABFB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xABFC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xABF7, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_NavigatorComparer", 
    $sig.make(0xABF8, $asm06.TypeRef("System.Collections.IEqualityComparer"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xABF9, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OuterXml", 
    $sig.make(0xAC06, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xABFD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0xAC04, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypedValue", 
    $sig.make(0xABF0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingObject", 
    $sig.make(0xAC01, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_UniqueId", 
    $sig.make(0xAC0B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsBoolean", 
    $sig.make(0xABF2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsDateTime", 
    $sig.make(0xABF3, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsDouble", 
    $sig.make(0xABF4, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsInt", 
    $sig.make(0xABF5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsLong", 
    $sig.make(0xABF6, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0xABF1, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0xAC00, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
    $sig.make(0xABEF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xAC19, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetContentKindMask", 
    $sig.make(0xAC6E, $.Int32, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDepth", 
    $sig.make(0xAC6B, $.Int32, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetKindMask", 
    $sig.make(0xAC6F, $.Int32, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespace", 
    $sig.make(0xAC1D, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNamespaces", 
    $sig.make(0xAC6D, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
    $sig.make(0xAC15, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValidatingReader", 
    $sig.make(0xAC37, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xAC4D, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xAC5D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xAC5E, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xAC5F, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xAC4E, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xAC5A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xAC5B, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xAC5C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertElementAfter", 
    $sig.make(0xAC65, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertElementBefore", 
    $sig.make(0xAC64, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDescendant", 
    $sig.make(0xAC34, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsSamePosition", 
    $sig.make(0xAC33, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsText", 
    $sig.make(0xAC70, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xAC71, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidSiblingType", 
    $sig.make(0xAC72, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0xAC13, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0xAC14, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Matches", 
    $sig.make(0xAC43, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Matches", 
    $sig.make(0xAC44, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveTo", 
    $sig.make(0xAC29, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0xAC1A, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToChild", 
    $sig.make(0xAC2B, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToChild", 
    $sig.make(0xAC2C, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirst", 
    $sig.make(0xAC25, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0xAC1B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
    $sig.make(0xAC26, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
    $sig.make(0xAC1F, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
    $sig.make(0xAC21, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0xAC2D, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0xAC2E, $.Boolean, [
        $.String, $.String, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0xAC2F, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0xAC30, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToId", 
    $sig.make(0xAC2A, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNamespace", 
    $sig.make(0xAC1E, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0xAC23, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0xAC31, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0xAC32, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0xAC1C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
    $sig.make(0xAC20, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
    $sig.make(0xAC22, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToNonDescendant", 
    $sig.make(0xAC69, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
    $sig.make(0xAC27, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToPrevious", 
    $sig.make(0xAC24, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToPrevious", 
    $sig.make(0xAC67, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToPrevious", 
    $sig.make(0xAC68, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToRoot", 
    $sig.make(0xAC28, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0xAC4B, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0xAC57, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0xAC58, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0xAC59, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChildElement", 
    $sig.make(0xAC62, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadSubtree", 
    $sig.make(0xAC17, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceRange", 
    $sig.make(0xAC50, $asm0E.TypeRef("System.Xml.XmlWriter"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceSelf", 
    $sig.make(0xAC51, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceSelf", 
    $sig.make(0xAC52, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceSelf", 
    $sig.make(0xAC53, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0xAC3C, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0xAC3D, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0xAC3E, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectAncestors", 
    $sig.make(0xAC47, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectAncestors", 
    $sig.make(0xAC48, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectChildren", 
    $sig.make(0xAC45, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectChildren", 
    $sig.make(0xAC46, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectDescendants", 
    $sig.make(0xAC49, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectDescendants", 
    $sig.make(0xAC4A, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
    $sig.make(0xAC39, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
    $sig.make(0xAC3A, $.Type, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
    $sig.make(0xAC3B, $.Type, [$asm0E.TypeRef("System.Xml.XPath.XPathExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xAC09, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OuterXml", 
    $sig.make(0xAC07, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetTypedValue", 
    $sig.make(0xAC0F, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetValue", 
    $sig.make(0xAC0E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICloneable.Clone", 
    $sig.make(0xAC11, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xAC0D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValueAs", 
    $sig.make(0xAC10, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSubtree", 
    $sig.make(0xAC18, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Constant({Static:true , Public:false}, "AllMask", 2147483647); 
  $.Constant({Static:true , Public:false}, "NoAttrNmspMask", 2147483635); 
  $.Constant({Static:true , Public:false}, "TextMask", 112); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "comparer", $asm0E.TypeRef("System.Xml.XPath.XPathNavigatorKeyComparer")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NodeTypeLetter", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "UniqueIdTbl", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ContentKindMasks", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm06.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:true , Public:true }, "NavigatorComparer", $asm06.TypeRef("System.Collections.IEqualityComparer"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanEdit", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:false}, "IndexInParent", $.UInt32);

  $.Property({Static:false, Public:false, Virtual:true }, "UniqueId", $.String);

  $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.ICloneable"), $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), 
      $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
  )
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathNavigator/CheckValidityHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A983, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.XPath.XPathNavigatorReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValid", 
    $sig.make(0x2A981, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidationCallback", 
    $sig.make(0x2A984, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.Field({Static:false, Public:false}, "isValid", $.Boolean); 
  $.Field({Static:false, Public:false}, "nextEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XPath.XPathNavigatorReader")); 
  $.Property({Static:false, Public:false}, "IsValid", $.Boolean);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XPath.XPathNavigator/DebuggerDisplayProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A9B0, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x2A9B1, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), "System.Xml.DocumentXPathNavigator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27FDA, null, [$asm0E.TypeRef("System.Xml.XmlDocument"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27FDB, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0x28005, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CalibrateText", 
    $sig.make(0x28012, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckAttributePosition", 
    $sig.make(0x28011, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlAttribute"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlAttributeCollection")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CheckValidity", 
    $sig.make(0x27FFC, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x27FDC, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x27FFF, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComparePosition", 
    $sig.make(0x28000, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateAttributes", 
    $sig.make(0x28008, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DeleteAttribute", 
    $sig.make(0x2800C, null, [$asm0E.TypeRef("System.Xml.XmlAttribute"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeleteRange", 
    $sig.make(0x2800A, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeleteSelf", 
    $sig.make(0x2800B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DeleteToFollowingSibling", 
    $sig.make(0x2800D, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FirstChild", 
    $sig.make(0x28015, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FirstChildTail", 
    $sig.make(0x28016, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27FD2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanEdit", 
    $sig.make(0x27FD9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x27FD6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasChildren", 
    $sig.make(0x27FD7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27FD3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27FCB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x27FCD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x27FCC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x27FC9, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27FCA, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27FCE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x27FD8, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingObject", 
    $sig.make(0x27FD5, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27FCF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueDocument", 
    $sig.make(0x27FD0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueText", 
    $sig.make(0x27FD1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27FD4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x27FDE, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDepth", 
    $sig.make(0x27FFE, $.Int32, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespace", 
    $sig.make(0x27FE2, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNamespaceManager", 
    $sig.make(0x2800E, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0x28006, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0x28007, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDescendant", 
    $sig.make(0x27FFB, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsDescendant", 
    $sig.make(0x2801E, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsFollowingSibling", 
    $sig.make(0x2801D, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsSamePosition", 
    $sig.make(0x27FFA, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsValidChild", 
    $sig.make(0x2801F, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x27FEB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveTo", 
    $sig.make(0x27FF2, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27FDF, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToChild", 
    $sig.make(0x27FF4, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToChild", 
    $sig.make(0x27FF5, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirst", 
    $sig.make(0x27FEE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x27FE0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
    $sig.make(0x27FEF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
    $sig.make(0x27FE4, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MoveToFirstNamespaceGlobal", 
    $sig.make(0x27FE6, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlAttributeCollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MoveToFirstNamespaceLocal", 
    $sig.make(0x27FE5, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlAttributeCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0x27FF6, $.Boolean, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0x27FF7, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToId", 
    $sig.make(0x27FF3, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNamespace", 
    $sig.make(0x27FE3, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x27FEC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x27FF8, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x27FF9, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x27FE1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
    $sig.make(0x27FE7, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MoveToNextNamespaceGlobal", 
    $sig.make(0x27FE9, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlAttributeCollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MoveToNextNamespaceLocal", 
    $sig.make(0x27FE8, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlAttributeCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
    $sig.make(0x27FF0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToPrevious", 
    $sig.make(0x27FED, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToRoot", 
    $sig.make(0x27FF1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextSibling", 
    $sig.make(0x28017, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextSiblingTail", 
    $sig.make(0x28018, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OwnerNode", 
    $sig.make(0x27FFD, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParentNode", 
    $sig.make(0x28013, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParentNodeTail", 
    $sig.make(0x28014, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PathHasDuplicateNamespace", 
    $sig.make(0x27FEA, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlElement"), $asm0E.TypeRef("System.Xml.XmlElement"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0x28004, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreviousSibling", 
    $sig.make(0x28019, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreviousSiblingTail", 
    $sig.make(0x2801A, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreviousText", 
    $sig.make(0x2801B, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreviousTextTail", 
    $sig.make(0x2801C, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceRange", 
    $sig.make(0x28009, $asm0E.TypeRef("System.Xml.XmlWriter"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ResetAttributePosition", 
    $sig.make(0x28010, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlAttribute"), $asm0E.TypeRef("System.Xml.XmlAttributeCollection"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResetPosition", 
    $sig.make(0x2800F, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectDescendants", 
    $sig.make(0x28002, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectDescendants", 
    $sig.make(0x28003, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetValue", 
    $sig.make(0x27FDD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IHasXmlNode.GetNode", 
    $sig.make(0x28001, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TextEnd", 
    $sig.make(0x28021, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TextStart", 
    $sig.make(0x28020, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.Field({Static:false, Public:false}, "document", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "source", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "attributeIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "namespaceParent", $asm0E.TypeRef("System.Xml.XmlElement")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:false}, "ValueDocument", $.String);

  $.Property({Static:false, Public:false}, "ValueText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanEdit", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IHasXmlNode"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathNodeIterator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB4E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xB4DE, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB4DB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0xB4D9, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0xB4DA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
    $sig.make(0xB4DC, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xB4E0, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xB4DF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICloneable.Clone", 
    $sig.make(0xB4DD, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Position={CurrentPosition}, Current={debuggerDisplayProxy}"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathNodeIterator/Enumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A9E4, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x2A9E3, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x2A9E5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2A9E6, null, [], [])
  );

  $.Field({Static:false, Public:false}, "original", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
  $.Field({Static:false, Public:false}, "current", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
  $.Field({Static:false, Public:false}, "iterationStarted", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XPath.XPathNodeIterator/DebuggerDisplayProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2AA03, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x2AA04, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "nodeIterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), "System.Xml.DocumentXPathNodeIterator_Empty", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28470, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28472, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28474, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2846F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x2846D, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x2846E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28475, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), "System.Xml.DocumentXPathNodeIterator_ElemDescendants", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x284AE, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x284B3, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x284A6, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x284AC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x284B4, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x284B6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetPosition", 
    $sig.make(0x284B5, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.DocumentXPathNavigator")); 
  $.Field({Static:false, Public:false}, "level", $.Int32); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), "System.Xml.DocumentXPathNodeIterator_AllElemChildren", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285D7, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285D8, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x285D9, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x285DA, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.DocumentXPathNodeIterator_AllElemChildren"), "System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28686, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28687, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28688, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28689, $.Boolean, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), "System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28690, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28691, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28692, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x28693, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.Field({Static:false, Public:false}, "nsAtom", $.String); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName"), "System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2871B, null, [$asm0E.TypeRef("System.Xml.DocumentXPathNavigator"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2871C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2871D, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x2871E, $.Boolean, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), "System.Xml.DocumentXPathNodeIterator_ElemChildren", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28760, null, [
        $asm0E.TypeRef("System.Xml.DocumentXPathNavigator"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28761, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28762, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x28763, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.Field({Static:false, Public:false}, "localNameAtom", $.String); 
  $.Field({Static:false, Public:false}, "nsAtom", $.String); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemChildren"), "System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x287B6, null, [
        $asm0E.TypeRef("System.Xml.DocumentXPathNavigator"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x287B7, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x287B8, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x287B9, $.Boolean, [], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.DomNameTable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBB82, null, [$asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddName", 
    $sig.make(0xBB84, $asm0E.TypeRef("System.Xml.XmlName"), [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetName", 
    $sig.make(0xBB83, $asm0E.TypeRef("System.Xml.XmlName"), [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Grow", 
    $sig.make(0xBB85, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "InitialSize", 64); 
  $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlName")])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "mask", $.Int32); 
  $.Field({Static:false, Public:false}, "ownerDocument", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNode", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xACFD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xACFE, null, [$asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AfterEvent", 
    $sig.make(0xAD28, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AncestorNode", 
    $sig.make(0xAD04, $.Boolean, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0xAD0B, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AppendChildForLoad", 
    $sig.make(0xAD0C, $.Type, [$.Type, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AppendChildText", 
    $sig.make(0xAD1A, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BeforeEvent", 
    $sig.make(0xAD27, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanInsertAfter", 
    $sig.make(0xAD0F, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanInsertBefore", 
    $sig.make(0xAD0E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xAD16, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xAD10, $.Type, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyChildren", 
    $sig.make(0xAD11, null, [
        $asm0E.TypeRef("System.Xml.XmlDocument"), $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNavigator", 
    $sig.make(0xACFF, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindChild", 
    $sig.make(0xAD25, $.Type, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0xACDF, $asm0E.TypeRef("System.Xml.XmlAttributeCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xACF2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ChildNodes", 
    $sig.make(0xACDC, $asm0E.TypeRef("System.Xml.XmlNodeList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
    $sig.make(0xACFC, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Document", 
    $sig.make(0xACF3, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FirstChild", 
    $sig.make(0xACE1, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_HasChildNodes", 
    $sig.make(0xACE6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerText", 
    $sig.make(0xACEC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0xACEF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xACE3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xACEB, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
    $sig.make(0xACFA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xACF4, $asm0E.TypeRef("System.Xml.XmlElement"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xACF5, $asm0E.TypeRef("System.Xml.XmlElement"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LastChild", 
    $sig.make(0xACE2, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xACE4, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xACEA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xACD7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xACE7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextSibling", 
    $sig.make(0xACDE, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xACDA, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OuterXml", 
    $sig.make(0xACEE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
    $sig.make(0xACE0, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xACDB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xACE8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreviousSibling", 
    $sig.make(0xACDD, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PreviousText", 
    $sig.make(0xACFB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0xACF1, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xACD8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlLang", 
    $sig.make(0xACF7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlSpace", 
    $sig.make(0xACF6, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPLocalName", 
    $sig.make(0xACF9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xACF8, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xAD19, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEventArgs", 
    $sig.make(0xAD26, $asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [
        $.Type, $.Type, 
        $.Type, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeChangedAction")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespaceOfPrefix", 
    $sig.make(0xAD1E, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNamespaceOfPrefixStrict", 
    $sig.make(0xAD1F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPrefixOfNamespace", 
    $sig.make(0xAD20, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPrefixOfNamespaceStrict", 
    $sig.make(0xAD21, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXPAttribute", 
    $sig.make(0xAD29, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasReadOnlyParent", 
    $sig.make(0xAD15, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xAD07, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xAD06, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsConnected", 
    $sig.make(0xAD05, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xAD0D, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NestTextNodes", 
    $sig.make(0xAD2A, null, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0xAD12, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NormalizeWinner", 
    $sig.make(0xAD13, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0xAD0A, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAll", 
    $sig.make(0xAD1D, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "RemoveChild", 
    $sig.make(0xAD09, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceChild", 
    $sig.make(0xAD08, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectNodes", 
    $sig.make(0xAD02, $asm0E.TypeRef("System.Xml.XmlNodeList"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectNodes", 
    $sig.make(0xAD03, $asm0E.TypeRef("System.Xml.XmlNodeList"), [$.String, $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
    $sig.make(0xAD00, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
    $sig.make(0xAD01, $.Type, [$.String, $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xACED, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xACF0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xACE5, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
    $sig.make(0xACE9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xACD9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0xAD22, null, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "SetParentForLoad", 
    $sig.make(0xAD23, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SplitName", 
    $sig.make(0xAD24, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Supports", 
    $sig.make(0xAD14, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xAD18, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICloneable.Clone", 
    $sig.make(0xAD17, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnnestTextNodes", 
    $sig.make(0xAD2B, null, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xAD1C, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xAD1B, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "parentNode", $.Type); 
  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "ChildNodes", $asm0E.TypeRef("System.Xml.XmlNodeList"));

  $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm0E.TypeRef("System.Xml.XmlAttributeCollection"));

  $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:true , Virtual:true }, "FirstChild", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "LastChild", $.Type);

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "HasChildNodes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:false}, "Document", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0E.TypeRef("System.Xml.XmlElement"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0E.TypeRef("System.Xml.XmlElement"));

  $.Property({Static:false, Public:false, Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $.Type);

  $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBAEE, null, [$asm0E.TypeRef("System.Xml.XmlName"), $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBAEF, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0xBAFA, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AppendChildForLoad", 
    $sig.make(0xBAF3, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBAF0, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xBAE8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xBAE2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNamespace", 
    $sig.make(0xBAED, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xBAE3, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBAD8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LocalNameHash", 
    $sig.make(0xBAD3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBAD7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xBAD9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBADC, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
    $sig.make(0xBADD, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerElement", 
    $sig.make(0xBAE6, $asm0E.TypeRef("System.Xml.XmlElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xBAD6, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xBADA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0xBAE0, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Specified", 
    $sig.make(0xBAE5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBADE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlLang", 
    $sig.make(0xBAEA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
    $sig.make(0xBAD4, $asm0E.TypeRef("System.Xml.XmlName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlSpace", 
    $sig.make(0xBAE9, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPLocalName", 
    $sig.make(0xBAEC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBAEB, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xBAF6, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xBAF5, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xBAF4, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "PrepareOwnerElementInElementIdAttrMap", 
    $sig.make(0xBAF1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrependChild", 
    $sig.make(0xBAF9, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveChild", 
    $sig.make(0xBAF8, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceChild", 
    $sig.make(0xBAF7, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResetOwnerElementInElementIdAttrMap", 
    $sig.make(0xBAF2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xBAE1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xBAE7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xBAE4, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
    $sig.make(0xBADB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBADF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
    $sig.make(0xBAD5, null, [$asm0E.TypeRef("System.Xml.XmlName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0xBAFD, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBAFC, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBAFB, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlName")); 
  $.Field({Static:false, Public:false}, "lastChild", $asm0E.TypeRef("System.Xml.XmlLinkedNode")); 
  $.Property({Static:false, Public:false}, "LocalNameHash", $.Int32);

  $.Property({Static:false, Public:false}, "XmlName", $asm0E.TypeRef("System.Xml.XmlName"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Specified", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "OwnerElement", $asm0E.TypeRef("System.Xml.XmlElement"));

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

  $.Property({Static:false, Public:false}, "IsNamespace", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNamedNodeMap", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB5FD, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNode", 
    $sig.make(0xB607, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNodeForLoad", 
    $sig.make(0xB608, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
    $sig.make(0xB605, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
    $sig.make(0xB606, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB5FB, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "get_Nodes", 
    $sig.make(0xB5FC, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xB604, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamedItem", 
    $sig.make(0xB5FE, $asm0E.TypeRef("System.Xml.XmlNode"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamedItem", 
    $sig.make(0xB602, $asm0E.TypeRef("System.Xml.XmlNode"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InsertNodeAt", 
    $sig.make(0xB60B, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Item", 
    $sig.make(0xB601, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveNamedItem", 
    $sig.make(0xB600, $asm0E.TypeRef("System.Xml.XmlNode"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveNamedItem", 
    $sig.make(0xB603, $asm0E.TypeRef("System.Xml.XmlNode"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveNodeAt", 
    $sig.make(0xB609, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReplaceNodeAt", 
    $sig.make(0xB60A, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetNamedItem", 
    $sig.make(0xB5FF, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.Field({Static:false, Public:false}, "parent", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "nodes", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false}, "Nodes", $asm06.TypeRef("System.Collections.ArrayList"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNamedNodeMap"), "System.Xml.XmlAttributeCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB618, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNode", 
    $sig.make(0xB625, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Append", 
    $sig.make(0xB61D, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xB624, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Detach", 
    $sig.make(0xB628, null, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
    $sig.make(0xB619, $.Int32, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindNodeOffsetNS", 
    $sig.make(0xB61A, $.Int32, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
    $sig.make(0xB612, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
    $sig.make(0xB613, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
    $sig.make(0xB614, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0xB61F, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute"), $asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0xB61E, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute"), $asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InsertNodeAt", 
    $sig.make(0xB626, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InsertParentIntoElementIdAttrMap", 
    $sig.make(0xB629, null, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAppendAttribute", 
    $sig.make(0xB62E, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "PrepareParentInElementIdAttrMap", 
    $sig.make(0xB62C, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Prepend", 
    $sig.make(0xB61C, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0xB620, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAll", 
    $sig.make(0xB622, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xB621, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveDuplicateAttribute", 
    $sig.make(0xB62B, $.Int32, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveNodeAt", 
    $sig.make(0xB627, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveParentFromElementIdAttrMap", 
    $sig.make(0xB62A, null, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResetParentInElementIdAttrMap", 
    $sig.make(0xB62D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetNamedItem", 
    $sig.make(0xB61B, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0xB623, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_Count", 
    $sig.make(0xB617, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0xB615, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0xB616, $.Object, [], [])
  );

  $.Property({Static:false, Public:true }, "ItemOf", $asm0E.TypeRef("System.Xml.XmlAttribute"));

  $.Property({Static:false, Public:true }, "ItemOf", $asm0E.TypeRef("System.Xml.XmlAttribute"));

  $.Property({Static:false, Public:true }, "ItemOf", $asm0E.TypeRef("System.Xml.XmlAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.Count", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["ItemOf"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlLinkedNode", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB5A6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB5A7, null, [$asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextSibling", 
    $sig.make(0xB5A5, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreviousSibling", 
    $sig.make(0xB5A4, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.Field({Static:false, Public:false}, "next", $.Type); 
  $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm0E.TypeRef("System.Xml.XmlNode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlCharacterData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB0B, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendData", 
    $sig.make(0xBB0D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckOnData", 
    $sig.make(0xBB11, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DecideXPNodeTypeForTextNodes", 
    $sig.make(0xBB12, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeleteData", 
    $sig.make(0xBB0F, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Data", 
    $sig.make(0xBB08, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_InnerText", 
    $sig.make(0xBB06, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0xBB0A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBB04, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertData", 
    $sig.make(0xBB0E, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceData", 
    $sig.make(0xBB10, null, [
        $.Int32, $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Data", 
    $sig.make(0xBB09, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xBB07, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBB05, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Substring", 
    $sig.make(0xBB0C, $.String, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "data", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Data", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlCDataSection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBBC8, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBBC9, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
    $sig.make(0xBBC6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBBC2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBBC1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBBC3, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xBBC4, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PreviousText", 
    $sig.make(0xBBC7, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBBC5, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBBCB, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBBCA, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm0E.TypeRef("System.Xml.XmlNode"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlChildEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x280F8, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Current", 
    $sig.make(0x280F7, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x280FA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x280F6, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x280F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x280FB, null, [], [])
  );

  $.Field({Static:false, Public:false}, "container", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "child", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "isFirst", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.Property({Static:false, Public:false}, "Current", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNodeList", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB5F4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB5F0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
    $sig.make(0xB5F1, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xB5F3, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Item", 
    $sig.make(0xB5F2, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "ItemOf", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["ItemOf"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNodeList"), "System.Xml.XmlChildNodes", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2818B, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2818A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x2818D, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Item", 
    $sig.make(0x2818C, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "container", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlComment", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB78, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBB79, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBB75, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBB74, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBB76, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBB77, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBB7B, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBB7A, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlDeclaration", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBA99, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBA9A, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
    $sig.make(0xBA8E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerText", 
    $sig.make(0xBA94, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBA97, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBA96, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBA98, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Standalone", 
    $sig.make(0xBA90, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBA92, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0xBA8C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidXmlVersion", 
    $sig.make(0xBA9D, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
    $sig.make(0xBA8F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xBA95, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Standalone", 
    $sig.make(0xBA91, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBA93, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Version", 
    $sig.make(0xBA8D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBA9C, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBA9B, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Constant({Static:true , Public:false}, "YES", "yes"); 
  $.Constant({Static:true , Public:false}, "NO", "no"); 
  $.Field({Static:false, Public:false}, "version", $.String); 
  $.Field({Static:false, Public:false}, "encoding", $.String); 
  $.Field({Static:false, Public:false}, "standalone", $.String); 
  $.Property({Static:false, Public:true }, "Version", $.String);

  $.Property({Static:false, Public:true }, "Encoding", $.String);

  $.Property({Static:false, Public:true }, "Standalone", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlDocument", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB541, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB542, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB543, null, [$asm0E.TypeRef("System.Xml.XmlImplementation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_NodeChanged", 
    $sig.make(0xB53F, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_NodeChanging", 
    $sig.make(0xB53D, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_NodeInserted", 
    $sig.make(0xB537, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_NodeInserting", 
    $sig.make(0xB535, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_NodeRemoved", 
    $sig.make(0xB53B, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_NodeRemoving", 
    $sig.make(0xB539, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttrXmlName", 
    $sig.make(0xB547, $asm0E.TypeRef("System.Xml.XmlName"), [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributes", 
    $sig.make(0xB55C, null, [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddElementWithId", 
    $sig.make(0xB54C, null, [$.String, $asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddIdInfo", 
    $sig.make(0xB548, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlName"), $asm0E.TypeRef("System.Xml.XmlName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddXmlName", 
    $sig.make(0xB545, $asm0E.TypeRef("System.Xml.XmlName"), [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AfterEvent", 
    $sig.make(0xB58B, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AppendChildForLoad", 
    $sig.make(0xB58F, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BeforeEvent", 
    $sig.make(0xB58A, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanInsertAfter", 
    $sig.make(0xB554, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanInsertBefore", 
    $sig.make(0xB553, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckName", 
    $sig.make(0xB544, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xB54E, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConvertToNodeType", 
    $sig.make(0xB579, $asm0E.TypeRef("System.Xml.XmlNodeType"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
    $sig.make(0xB555, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
    $sig.make(0xB56A, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
    $sig.make(0xB572, $asm0E.TypeRef("System.Xml.XmlAttribute"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateCDataSection", 
    $sig.make(0xB557, $asm0E.TypeRef("System.Xml.XmlCDataSection"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateComment", 
    $sig.make(0xB558, $asm0E.TypeRef("System.Xml.XmlComment"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDefaultAttribute", 
    $sig.make(0xB573, $asm0E.TypeRef("System.Xml.XmlAttribute"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateDocumentFragment", 
    $sig.make(0xB55A, $asm0E.TypeRef("System.Xml.XmlDocumentFragment"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateDocumentType", 
    $sig.make(0xB559, $asm0E.TypeRef("System.Xml.XmlDocumentType"), [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
    $sig.make(0xB55B, $asm0E.TypeRef("System.Xml.XmlElement"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
    $sig.make(0xB56B, $asm0E.TypeRef("System.Xml.XmlElement"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
    $sig.make(0xB574, $asm0E.TypeRef("System.Xml.XmlElement"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateEntityReference", 
    $sig.make(0xB55F, $asm0E.TypeRef("System.Xml.XmlEntityReference"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNavigator", 
    $sig.make(0xB564, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNavigator", 
    $sig.make(0xB565, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNode", 
    $sig.make(0xB575, $asm0E.TypeRef("System.Xml.XmlNode"), [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNode", 
    $sig.make(0xB576, $asm0E.TypeRef("System.Xml.XmlNode"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNode", 
    $sig.make(0xB577, $asm0E.TypeRef("System.Xml.XmlNode"), [
        $asm0E.TypeRef("System.Xml.XmlNodeType"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateProcessingInstruction", 
    $sig.make(0xB560, $asm0E.TypeRef("System.Xml.XmlProcessingInstruction"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSignificantWhitespace", 
    $sig.make(0xB563, $asm0E.TypeRef("System.Xml.XmlSignificantWhitespace"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateTextNode", 
    $sig.make(0xB562, $asm0E.TypeRef("System.Xml.XmlText"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateWhitespace", 
    $sig.make(0xB568, $asm0E.TypeRef("System.Xml.XmlWhitespace"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateXmlDeclaration", 
    $sig.make(0xB561, $asm0E.TypeRef("System.Xml.XmlDeclaration"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ActualLoadingStatus", 
    $sig.make(0xB527, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xB531, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanReportValidity", 
    $sig.make(0xB51C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Declaration", 
    $sig.make(0xB511, $asm0E.TypeRef("System.Xml.XmlDeclaration"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocumentElement", 
    $sig.make(0xB515, $asm0E.TypeRef("System.Xml.XmlElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocumentType", 
    $sig.make(0xB510, $asm0E.TypeRef("System.Xml.XmlDocumentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
    $sig.make(0xB50C, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
    $sig.make(0xB52E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Entities", 
    $sig.make(0xB523, $asm0E.TypeRef("System.Xml.XmlNamedNodeMap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasEntityReferences", 
    $sig.make(0xB533, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasSetResolver", 
    $sig.make(0xB51D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Implementation", 
    $sig.make(0xB512, $asm0E.TypeRef("System.Xml.XmlImplementation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0xB52B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xB516, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsLoading", 
    $sig.make(0xB525, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xB522, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xB517, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xB514, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB513, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceXml", 
    $sig.make(0xB534, $asm0E.TypeRef("System.Xml.XmlAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xB51F, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xB50E, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
    $sig.make(0xB519, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xB50F, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0xB520, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0xB530, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
    $sig.make(0xB51A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
    $sig.make(0xB52F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TextEncoding", 
    $sig.make(0xB529, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Version", 
    $sig.make(0xB52D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xB532, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
    $sig.make(0xB58C, $asm0E.TypeRef("System.Xml.XmlAttribute"), [
        $asm0E.TypeRef("System.Xml.XmlElement"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0xB54B, $asm06.TypeRef("System.WeakReference"), [$asm06.TypeRef("System.Collections.ArrayList"), $asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetElementById", 
    $sig.make(0xB56D, $asm0E.TypeRef("System.Xml.XmlElement"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetElementsByTagName", 
    $sig.make(0xB569, $asm0E.TypeRef("System.Xml.XmlNodeList"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetElementsByTagName", 
    $sig.make(0xB56C, $asm0E.TypeRef("System.Xml.XmlNodeList"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEntityNode", 
    $sig.make(0xB58D, $asm0E.TypeRef("System.Xml.XmlEntity"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEventArgs", 
    $sig.make(0xB588, $asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [
        $asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode"), 
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeChangedAction")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIDInfoByElement", 
    $sig.make(0xB54A, $asm0E.TypeRef("System.Xml.XmlName"), [$asm0E.TypeRef("System.Xml.XmlName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIDInfoByElement_", 
    $sig.make(0xB549, $asm0E.TypeRef("System.Xml.XmlName"), [$asm0E.TypeRef("System.Xml.XmlName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInsertEventArgsForLoad", 
    $sig.make(0xB589, $asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
    $sig.make(0xB54F, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaElementDecl", 
    $sig.make(0xB55D, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXmlName", 
    $sig.make(0xB546, $asm0E.TypeRef("System.Xml.XmlName"), [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HasNodeTypeInNextSiblings", 
    $sig.make(0xB552, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HasNodeTypeInPrevSiblings", 
    $sig.make(0xB551, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAttributes", 
    $sig.make(0xB570, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportChildren", 
    $sig.make(0xB571, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportNode", 
    $sig.make(0xB56E, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportNodeInternal", 
    $sig.make(0xB56F, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsTextNode", 
    $sig.make(0xB566, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xB550, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0xB57B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0xB57C, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0xB57D, null, [$asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0xB57E, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LoadXml", 
    $sig.make(0xB57F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NormalizeText", 
    $sig.make(0xB567, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareDefaultAttribute", 
    $sig.make(0xB55E, $asm0E.TypeRef("System.Xml.XmlAttribute"), [
        $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadNode", 
    $sig.make(0xB578, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_NodeChanged", 
    $sig.make(0xB540, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_NodeChanging", 
    $sig.make(0xB53E, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_NodeInserted", 
    $sig.make(0xB538, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_NodeInserting", 
    $sig.make(0xB536, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_NodeRemoved", 
    $sig.make(0xB53C, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_NodeRemoving", 
    $sig.make(0xB53A, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveElementWithId", 
    $sig.make(0xB54D, null, [$.String, $asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0xB580, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0xB581, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0xB582, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0xB583, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ActualLoadingStatus", 
    $sig.make(0xB528, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
    $sig.make(0xB50D, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Entities", 
    $sig.make(0xB524, null, [$asm0E.TypeRef("System.Xml.XmlNamedNodeMap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xB52A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xB52C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsLoading", 
    $sig.make(0xB526, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xB518, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PreserveWhitespace", 
    $sig.make(0xB521, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schemas", 
    $sig.make(0xB51B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0xB51E, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBaseURI", 
    $sig.make(0xB58E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDefaultNamespace", 
    $sig.make(0xB556, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupReader", 
    $sig.make(0xB57A, $asm0E.TypeRef("System.Xml.XmlTextReader"), [$asm0E.TypeRef("System.Xml.XmlTextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0xB586, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0xB587, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xB585, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xB584, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "implementation", $asm0E.TypeRef("System.Xml.XmlImplementation")); 
  $.Field({Static:false, Public:false}, "domNameTable", $asm0E.TypeRef("System.Xml.DomNameTable")); 
  $.Field({Static:false, Public:false}, "lastChild", $asm0E.TypeRef("System.Xml.XmlLinkedNode")); 
  $.Field({Static:false, Public:false}, "entities", $asm0E.TypeRef("System.Xml.XmlNamedNodeMap")); 
  $.Field({Static:false, Public:false}, "htElementIdMap", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "htElementIDAttrDecl", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "reportValidity", $.Boolean); 
  $.Field({Static:false, Public:false}, "actualLoadingStatus", $.Boolean); 
  $.Field({Static:false, Public:false}, "onNodeInsertingDelegate", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
  $.Field({Static:false, Public:false}, "onNodeInsertedDelegate", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
  $.Field({Static:false, Public:false}, "onNodeRemovingDelegate", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
  $.Field({Static:false, Public:false}, "onNodeRemovedDelegate", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
  $.Field({Static:false, Public:false}, "onNodeChangingDelegate", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
  $.Field({Static:false, Public:false}, "onNodeChangedDelegate", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
  $.Field({Static:false, Public:false}, "fEntRefNodesPresent", $.Boolean); 
  $.Field({Static:false, Public:false}, "fCDataNodesPresent", $.Boolean); 
  $.Field({Static:false, Public:false}, "preserveWhitespace", $.Boolean); 
  $.Field({Static:false, Public:false}, "isLoading", $.Boolean); 
  $.Field({Static:false, Public:false}, "strDocumentName", $.String); 
  $.Field({Static:false, Public:false}, "strDocumentFragmentName", $.String); 
  $.Field({Static:false, Public:false}, "strCommentName", $.String); 
  $.Field({Static:false, Public:false}, "strTextName", $.String); 
  $.Field({Static:false, Public:false}, "strCDataSectionName", $.String); 
  $.Field({Static:false, Public:false}, "strEntityName", $.String); 
  $.Field({Static:false, Public:false}, "strID", $.String); 
  $.Field({Static:false, Public:false}, "strXmlns", $.String); 
  $.Field({Static:false, Public:false}, "strXml", $.String); 
  $.Field({Static:false, Public:false}, "strSpace", $.String); 
  $.Field({Static:false, Public:false}, "strLang", $.String); 
  $.Field({Static:false, Public:false}, "strEmpty", $.String); 
  $.Field({Static:false, Public:false}, "strNonSignificantWhitespaceName", $.String); 
  $.Field({Static:false, Public:false}, "strSignificantWhitespaceName", $.String); 
  $.Field({Static:false, Public:false}, "strReservedXmlns", $.String); 
  $.Field({Static:false, Public:false}, "strReservedXml", $.String); 
  $.Field({Static:false, Public:false}, "baseURI", $.String); 
  $.Field({Static:false, Public:false}, "resolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "bSetResolver", $.Boolean); 
  $.Field({Static:false, Public:false}, "objLock", $.Object); 
  $.Field({Static:false, Public:false}, "namespaceXml", $asm0E.TypeRef("System.Xml.XmlAttribute")); 
  $.Field({Static:true , Public:false}, "EmptyEnumerator", $asm0E.TypeRef("System.Xml.EmptyEnumerator")); 
  $.Field({Static:true , Public:false}, "NotKnownSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
  $.Field({Static:true , Public:false}, "ValidSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
  $.Field({Static:true , Public:false}, "InvalidSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
  $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm0E.TypeRef("System.Xml.XmlDocumentType"));

  $.Property({Static:false, Public:false, Virtual:true }, "Declaration", $asm0E.TypeRef("System.Xml.XmlDeclaration"));

  $.Property({Static:false, Public:true }, "Implementation", $asm0E.TypeRef("System.Xml.XmlImplementation"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true }, "DocumentElement", $asm0E.TypeRef("System.Xml.XmlElement"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $.Type);

  $.Property({Static:false, Public:true }, "Schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"));

  $.Property({Static:false, Public:false}, "CanReportValidity", $.Boolean);

  $.Property({Static:false, Public:false}, "HasSetResolver", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true }, "PreserveWhitespace", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:false}, "Entities", $asm0E.TypeRef("System.Xml.XmlNamedNodeMap"));

  $.Property({Static:false, Public:false}, "IsLoading", $.Boolean);

  $.Property({Static:false, Public:false}, "ActualLoadingStatus", $.Boolean);

  $.Property({Static:false, Public:false}, "TextEncoding", $asm06.TypeRef("System.Text.Encoding"));

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:false}, "Version", $.String);

  $.Property({Static:false, Public:false}, "Encoding", $.String);

  $.Property({Static:false, Public:false}, "Standalone", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false}, "HasEntityReferences", $.Boolean);

  $.Property({Static:false, Public:false}, "NamespaceXml", $asm0E.TypeRef("System.Xml.XmlAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlDocumentFragment", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBBB4, null, [$asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanInsertAfter", 
    $sig.make(0xBBB7, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanInsertBefore", 
    $sig.make(0xBBB8, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBBB5, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0xBBAE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xBBB0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xBBB1, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBBAA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBBA9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBBAB, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
    $sig.make(0xBBAD, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xBBAC, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBBB3, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xBBB6, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xBBAF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xBBB2, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBBBA, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBBB9, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "lastChild", $asm0E.TypeRef("System.Xml.XmlLinkedNode")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlDocumentType", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB39, null, [
        $.String, $.String, 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBB3A, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
    $sig.make(0xBB37, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Entities", 
    $sig.make(0xBB30, $asm0E.TypeRef("System.Xml.XmlNamedNodeMap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InternalSubset", 
    $sig.make(0xBB34, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xBB2F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBB2D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBB2C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBB2E, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
    $sig.make(0xBB31, $asm0E.TypeRef("System.Xml.XmlNamedNodeMap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParseWithNamespaces", 
    $sig.make(0xBB35, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
    $sig.make(0xBB32, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
    $sig.make(0xBB33, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
    $sig.make(0xBB38, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ParseWithNamespaces", 
    $sig.make(0xBB36, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBB3C, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBB3B, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "internalSubset", $.String); 
  $.Field({Static:false, Public:false}, "namespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "entities", $asm0E.TypeRef("System.Xml.XmlNamedNodeMap")); 
  $.Field({Static:false, Public:false}, "notations", $asm0E.TypeRef("System.Xml.XmlNamedNodeMap")); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true }, "Entities", $asm0E.TypeRef("System.Xml.XmlNamedNodeMap"));

  $.Property({Static:false, Public:true }, "Notations", $asm0E.TypeRef("System.Xml.XmlNamedNodeMap"));

  $.Property({Static:false, Public:true }, "PublicId", $.String);

  $.Property({Static:false, Public:true }, "SystemId", $.String);

  $.Property({Static:false, Public:true }, "InternalSubset", $.String);

  $.Property({Static:false, Public:false}, "ParseWithNamespaces", $.Boolean);

  $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.DocumentSchemaValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x281C3, null, [
        $asm0E.TypeRef("System.Xml.XmlDocument"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AncestorTypeHasWildcard", 
    $sig.make(0x281D3, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckNodeSequenceCapacity", 
    $sig.make(0x281D0, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateTypeFinderValidator", 
    $sig.make(0x281D7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidator"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValidator", 
    $sig.make(0x281C8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindSchemaInfo", 
    $sig.make(0x281CF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindSchemaInfo", 
    $sig.make(0x281D1, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceResolver", 
    $sig.make(0x281C2, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PsviAugmentation", 
    $sig.make(0x281C0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
    $sig.make(0x281D4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultPrefix", 
    $sig.make(0x281CD, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
    $sig.make(0x281C5, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNodeValue", 
    $sig.make(0x281CE, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeFromAncestors", 
    $sig.make(0x281D2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [
        $asm0E.TypeRef("System.Xml.XmlElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallBack", 
    $sig.make(0x281D9, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x281C6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x281C7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PsviAugmentation", 
    $sig.make(0x281C1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDefaultAttributeSchemaInfo", 
    $sig.make(0x281CC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TypeFinderCallBack", 
    $sig.make(0x281D8, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0x281C4, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateAttributes", 
    $sig.make(0x281CB, null, [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateChildrenTillNextAncestor", 
    $sig.make(0x281D6, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
    $sig.make(0x281CA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateNode", 
    $sig.make(0x281C9, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateSingleElement", 
    $sig.make(0x281D5, null, [
        $asm0E.TypeRef("System.Xml.XmlElement"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")
      ], [])
  );

  $.Field({Static:false, Public:false}, "validator", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidator")); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "nsManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "defaultAttributes", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "nodeValueGetter", $asm0E.TypeRef("System.Xml.Schema.XmlValueGetter")); 
  $.Field({Static:false, Public:false}, "attributeSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
  $.Field({Static:false, Public:false}, "eventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "internalEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "startNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "currentNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "document", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "nodeSequenceToValidate", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])); 
  $.Field({Static:false, Public:false}, "isPartialTreeValid", $.Boolean); 
  $.Field({Static:false, Public:false}, "psviAugmentation", $.Boolean); 
  $.Field({Static:false, Public:false}, "isValid", $.Boolean); 
  $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
  $.Field({Static:false, Public:false}, "NsXsi", $.String); 
  $.Field({Static:false, Public:false}, "XsiType", $.String); 
  $.Field({Static:false, Public:false}, "XsiNil", $.String); 
  $.Property({Static:false, Public:true }, "PsviAugmentation", $.Boolean);

  $.Property({Static:false, Public:false}, "NamespaceResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlTextWriter"), "System.Xml.XmlDOMTextWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x284FE, null, [$asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x284FF, null, [$.String, $asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28500, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x28502, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x28501, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlElement", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB5C7, null, [
        $asm0E.TypeRef("System.Xml.XmlName"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB5C8, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AppendChildForLoad", 
    $sig.make(0xB5CA, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xB5C9, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0xB5BD, $asm0E.TypeRef("System.Xml.XmlAttributeCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0xB5BE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerText", 
    $sig.make(0xB5C2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0xB5C0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xB5B8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0xB5B9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xB5BB, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xB5B1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB5B0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xB5B2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextSibling", 
    $sig.make(0xB5C4, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xB5B5, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
    $sig.make(0xB5B7, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xB5B6, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xB5B3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0xB5BF, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
    $sig.make(0xB5AE, $asm0E.TypeRef("System.Xml.XmlName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPLocalName", 
    $sig.make(0xB5C6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xB5C5, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xB5CC, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0xB5D3, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttributeNode", 
    $sig.make(0xB5CF, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttributeNode", 
    $sig.make(0xB5D6, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetElementsByTagName", 
    $sig.make(0xB5D2, $asm0E.TypeRef("System.Xml.XmlNodeList"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetElementsByTagName", 
    $sig.make(0xB5D9, $asm0E.TypeRef("System.Xml.XmlNodeList"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXPAttribute", 
    $sig.make(0xB5E3, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasAttribute", 
    $sig.make(0xB5DA, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasAttribute", 
    $sig.make(0xB5DB, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xB5CB, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAll", 
    $sig.make(0xB5E0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAllAttributes", 
    $sig.make(0xB5DF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveAllChildren", 
    $sig.make(0xB5E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAttribute", 
    $sig.make(0xB5CE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAttribute", 
    $sig.make(0xB5D5, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAttributeAt", 
    $sig.make(0xB5DE, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAttributeNode", 
    $sig.make(0xB5D1, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAttributeNode", 
    $sig.make(0xB5D8, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xB5C3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xB5C1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsEmpty", 
    $sig.make(0xB5BA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xB5BC, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
    $sig.make(0xB5B4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
    $sig.make(0xB5AF, null, [$asm0E.TypeRef("System.Xml.XmlName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAttribute", 
    $sig.make(0xB5CD, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAttribute", 
    $sig.make(0xB5D4, $.String, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAttributeNode", 
    $sig.make(0xB5D0, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAttributeNode", 
    $sig.make(0xB5D7, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0xB5E2, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xB5DD, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xB5DC, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlName")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.XmlAttributeCollection")); 
  $.Field({Static:false, Public:false}, "lastChild", $asm0E.TypeRef("System.Xml.XmlLinkedNode")); 
  $.Property({Static:false, Public:false}, "XmlName", $asm0E.TypeRef("System.Xml.XmlName"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm0E.TypeRef("System.Xml.XmlAttributeCollection"));

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNodeList"), "System.Xml.XmlElementList", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2857A, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2857D, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2857E, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConcurrencyCheck", 
    $sig.make(0x2857C, null, [$asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x2857B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChangeCount", 
    $sig.make(0x28578, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28579, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x28586, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMatchingNode", 
    $sig.make(0x28582, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNextNode", 
    $sig.make(0x28584, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNthMatchingNode", 
    $sig.make(0x28583, $asm0E.TypeRef("System.Xml.XmlNode"), [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.Boolean, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsMatch", 
    $sig.make(0x28581, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Item", 
    $sig.make(0x28585, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextElemInPreOrder", 
    $sig.make(0x2857F, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrevElemInPreOrder", 
    $sig.make(0x28580, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.Field({Static:false, Public:false}, "asterisk", $.String); 
  $.Field({Static:false, Public:false}, "changeCount", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceURI", $.String); 
  $.Field({Static:false, Public:false}, "rootNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "curInd", $.Int32); 
  $.Field({Static:false, Public:false}, "curElem", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "empty", $.Boolean); 
  $.Field({Static:false, Public:false}, "atomized", $.Boolean); 
  $.Field({Static:false, Public:false}, "matchCount", $.Int32); 
  $.Field({Static:false, Public:false}, "listener", $asm0E.TypeRef("System.Xml.XmlElementListListener")); 
  $.Property({Static:false, Public:false}, "ChangeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlElementListEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x284EA, null, [$asm0E.TypeRef("System.Xml.XmlElementList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x284E7, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x284EC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x284EE, null, [], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm0E.TypeRef("System.Xml.XmlElementList")); 
  $.Field({Static:false, Public:false}, "curElem", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "changeCount", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlEmptyElementListEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285E2, null, [$asm0E.TypeRef("System.Xml.XmlElementList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x285E1, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x285E3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x285E4, null, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlElementListListener", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285A1, null, [$asm0E.TypeRef("System.Xml.XmlDocument"), $asm0E.TypeRef("System.Xml.XmlElementList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnListChanged", 
    $sig.make(0x285A2, null, [$.Object, $asm0E.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Unregister", 
    $sig.make(0x285A3, null, [], [])
  );

  $.Field({Static:false, Public:false}, "elemList", $asm06.TypeRef("System.WeakReference")); 
  $.Field({Static:false, Public:false}, "doc", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "nodeChangeHandler", $asm0E.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlEntity", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB68, null, [
        $.String, $.String, 
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBB69, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xBB67, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerText", 
    $sig.make(0xBB5B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0xBB65, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xBB5D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xBB58, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xBB5E, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBB5A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBB59, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBB60, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NotationName", 
    $sig.make(0xBB63, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OuterXml", 
    $sig.make(0xBB64, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
    $sig.make(0xBB61, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
    $sig.make(0xBB62, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xBB6A, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xBB5C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0xBB66, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xBB5F, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBaseURI", 
    $sig.make(0xBB6D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBB6C, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBB6B, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "notationName", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "unparsedReplacementStr", $.String); 
  $.Field({Static:false, Public:false}, "baseURI", $.String); 
  $.Field({Static:false, Public:false}, "lastChild", $asm0E.TypeRef("System.Xml.XmlLinkedNode")); 
  $.Field({Static:false, Public:false}, "childrenFoliating", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true }, "PublicId", $.String);

  $.Property({Static:false, Public:true }, "SystemId", $.String);

  $.Property({Static:false, Public:true }, "NotationName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlEntityReference", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBAAF, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBAB0, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConstructBaseURI", 
    $sig.make(0xBAB6, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0xBAAD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChildBaseURI", 
    $sig.make(0xBAAE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
    $sig.make(0xBAAA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xBAA9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LastNode", 
    $sig.make(0xBAAB, $asm0E.TypeRef("System.Xml.XmlLinkedNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBAA5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBAA4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBAA8, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBAA6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
    $sig.make(0xBAB3, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LastNode", 
    $sig.make(0xBAAC, null, [$asm0E.TypeRef("System.Xml.XmlLinkedNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBAA7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0xBAB1, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParentForLoad", 
    $sig.make(0xBAB2, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBAB5, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBAB4, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "lastChild", $asm0E.TypeRef("System.Xml.XmlLinkedNode")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm0E.TypeRef("System.Xml.XmlLinkedNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:false}, "ChildBaseURI", $.String);

});

JSIL.MakeEnum(
  "System.Xml.XmlNodeChangedAction", true, {
    Insert: 0, 
    Remove: 1, 
    Change: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlImplementation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA61, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA62, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateDocument", 
    $sig.make(0xBA64, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
    $sig.make(0xBA60, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasFeature", 
    $sig.make(0xBA63, $.Boolean, [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Property({Static:false, Public:false}, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlLoader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285F4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInnerXmlReader", 
    $sig.make(0x28622, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeType"), 
        $asm0E.TypeRef("System.Xml.XmlParserContext"), $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EntitizeName", 
    $sig.make(0x2861C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExpandEntity", 
    $sig.make(0x2861D, null, [$asm0E.TypeRef("System.Xml.XmlEntity")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExpandEntityReference", 
    $sig.make(0x28620, null, [$asm0E.TypeRef("System.Xml.XmlEntityReference")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetContext", 
    $sig.make(0x2860D, $asm0E.TypeRef("System.Xml.XmlParserContext"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Load", 
    $sig.make(0x285F6, null, [
        $asm0E.TypeRef("System.Xml.XmlDocument"), $asm0E.TypeRef("System.Xml.XmlReader"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNode", 
    $sig.make(0x285FD, $asm0E.TypeRef("System.Xml.XmlAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNodeDirect", 
    $sig.make(0x28605, $asm0E.TypeRef("System.Xml.XmlAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadAttributeValue", 
    $sig.make(0x285FF, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadDeclarationNode", 
    $sig.make(0x28601, $asm0E.TypeRef("System.Xml.XmlDeclaration"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadDefaultAttribute", 
    $sig.make(0x285FE, $asm0E.TypeRef("System.Xml.XmlAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadDocSequence", 
    $sig.make(0x285F8, null, [$asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadDocumentType", 
    $sig.make(0x2860B, null, [$asm0E.TypeRef("System.Xml.IDtdInfo"), $asm0E.TypeRef("System.Xml.XmlDocumentType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadDocumentTypeNode", 
    $sig.make(0x28602, $asm0E.TypeRef("System.Xml.XmlDocumentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadEntityReferenceNode", 
    $sig.make(0x28600, $asm0E.TypeRef("System.Xml.XmlEntityReference"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadInnerXmlAttribute", 
    $sig.make(0x28619, null, [$asm0E.TypeRef("System.Xml.XmlAttribute"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadInnerXmlElement", 
    $sig.make(0x28617, null, [$asm0E.TypeRef("System.Xml.XmlElement"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadNode", 
    $sig.make(0x285FC, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadNodeDirect", 
    $sig.make(0x28604, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDocumentType", 
    $sig.make(0x28607, null, [$asm0E.TypeRef("System.Xml.XmlDocumentType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDocumentType", 
    $sig.make(0x28609, null, [
        $asm0E.TypeRef("System.Xml.XmlDocumentType"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePartialContent", 
    $sig.make(0x28615, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $asm0E.TypeRef("System.Xml.XmlNodeType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseXmlDeclarationValue", 
    $sig.make(0x28626, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadCurrentNode", 
    $sig.make(0x285FA, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlDocument"), $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveDuplicateNamespace", 
    $sig.make(0x2861A, null, [
        $asm0E.TypeRef("System.Xml.XmlElement"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnexpectedNodeType", 
    $sig.make(0x28628, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.Field({Static:false, Public:false}, "doc", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "preserveWhitespace", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBA83, null, [
        $.String, $.String, 
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.XmlDocument"), $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0xBA82, $.Type, [
        $.String, $.String, 
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.XmlDocument"), $.Type, 
        $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xBA84, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HashCode", 
    $sig.make(0xBA78, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0xBA7C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNil", 
    $sig.make(0xBA7D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBA75, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
    $sig.make(0xBA7E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBA7A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0xBA76, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
    $sig.make(0xBA79, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0xBA77, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaAttribute", 
    $sig.make(0xBA81, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaElement", 
    $sig.make(0xBA80, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0xBA7F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Validity", 
    $sig.make(0xBA7B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetHashCode", 
    $sig.make(0xBA85, $.Int32, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "ownerDoc", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
  $.Property({Static:false, Public:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "HashCode", $.Int32);

  $.Property({Static:false, Public:true }, "OwnerDocument", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlName"), "System.Xml.XmlNameEx", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2866B, null, [
        $.String, $.String, 
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.XmlDocument"), $asm0E.TypeRef("System.Xml.XmlName"), 
        $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x28673, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x28663, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNil", 
    $sig.make(0x28665, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
    $sig.make(0x28666, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaAttribute", 
    $sig.make(0x28669, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaElement", 
    $sig.make(0x28668, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0x28667, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Validity", 
    $sig.make(0x28660, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetIsDefault", 
    $sig.make(0x2866F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetIsNil", 
    $sig.make(0x28671, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetValidity", 
    $sig.make(0x2866D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity")], [])
  );

  $.Constant({Static:true , Public:false}, "ValidityMask", 3); 
  $.Constant({Static:true , Public:false}, "IsDefaultBit", 4); 
  $.Constant({Static:true , Public:false}, "IsNilBit", 8); 
  $.Field({Static:false, Public:false}, "flags", $.Byte); 
  $.Field({Static:false, Public:false}, "memberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "schemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "decl", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.DebuggerDisplayXmlNodeProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x286DF, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x286E0, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "node", $asm0E.TypeRef("System.Xml.XmlNode")); 
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.XmlNodeChangedEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB59D, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode"), 
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlNodeChangedAction")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Action", 
    $sig.make(0xB597, $asm0E.TypeRef("System.Xml.XmlNodeChangedAction"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewParent", 
    $sig.make(0xB59A, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewValue", 
    $sig.make(0xB59C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Node", 
    $sig.make(0xB598, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OldParent", 
    $sig.make(0xB599, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OldValue", 
    $sig.make(0xB59B, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "action", $asm0E.TypeRef("System.Xml.XmlNodeChangedAction")); 
  $.Field({Static:false, Public:false}, "node", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "oldParent", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "newParent", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "oldValue", $.String); 
  $.Field({Static:false, Public:false}, "newValue", $.String); 
  $.Property({Static:false, Public:true }, "Action", $asm0E.TypeRef("System.Xml.XmlNodeChangedAction"));

  $.Property({Static:false, Public:true }, "Node", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true }, "OldParent", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true }, "NewParent", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true }, "OldValue", $.String);

  $.Property({Static:false, Public:true }, "NewValue", $.String);

});

JSIL.MakeDelegate("System.Xml.XmlNodeChangedEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNodeReaderNavigator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x271A4, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckIndexCondition", 
    $sig.make(0x271A8, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DefaultLookupNamespace", 
    $sig.make(0x271C7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x2719D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27191, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CreatedOnAttribute", 
    $sig.make(0x2718C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Document", 
    $sig.make(0x271A2, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x2718F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x27198, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27197, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsOnAttrVal", 
    $sig.make(0x27184, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsOnDeclOrDocType", 
    $sig.make(0x2719F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x2717F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2717E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x2717C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x2719B, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27170, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OwnerElementNode", 
    $sig.make(0x2718A, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x2718E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x27199, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27190, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x27195, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27192, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x271B4, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x271B6, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x271B7, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeFromElement", 
    $sig.make(0x271B3, $.String, [$asm0E.TypeRef("System.Xml.XmlElement"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeFromElement", 
    $sig.make(0x271B5, $.String, [
        $asm0E.TypeRef("System.Xml.XmlElement"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDecAttrInd", 
    $sig.make(0x271AE, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDeclarationAttr", 
    $sig.make(0x271AC, $.String, [$asm0E.TypeRef("System.Xml.XmlDeclaration"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDeclarationAttr", 
    $sig.make(0x271AD, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDocTypeAttrInd", 
    $sig.make(0x271B2, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDocumentTypeAttr", 
    $sig.make(0x271B0, $.String, [$asm0E.TypeRef("System.Xml.XmlDocumentType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDocumentTypeAttr", 
    $sig.make(0x271B1, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
    $sig.make(0x271C9, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitDecAttr", 
    $sig.make(0x271AA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitDocTypeAttr", 
    $sig.make(0x271AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsLocalNameEmpty", 
    $sig.make(0x271A6, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LogMove", 
    $sig.make(0x271B8, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x271C6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
    $sig.make(0x271C8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x271BC, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x271BE, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x271BF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToAttributeFromElement", 
    $sig.make(0x271BD, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlElement"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x271C5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
    $sig.make(0x271C2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x271C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x271C0, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToNextSibling", 
    $sig.make(0x271C3, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
    $sig.make(0x271C1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x271CA, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlNodeType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetMove", 
    $sig.make(0x271BB, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlNodeType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetToAttribute", 
    $sig.make(0x271BA, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RollBackMove", 
    $sig.make(0x271B9, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Constant({Static:true , Public:false}, "strPublicID", "PUBLIC"); 
  $.Constant({Static:true , Public:false}, "strSystemID", "SYSTEM"); 
  $.Constant({Static:true , Public:false}, "strVersion", "version"); 
  $.Constant({Static:true , Public:false}, "strStandalone", "standalone"); 
  $.Constant({Static:true , Public:false}, "strEncoding", "encoding"); 
  $.Field({Static:false, Public:false}, "curNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "elemNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "logNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "attrIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "logAttrIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "doc", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "nAttrInd", $.Int32); 
  $.Field({Static:false, Public:false}, "nDeclarationAttrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "nDocTypeAttrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "nLogLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "nLogAttrInd", $.Int32); 
  $.Field({Static:false, Public:false}, "bLogOnAttrVal", $.Boolean); 
  $.Field({Static:false, Public:false}, "bCreatedOnAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "decNodeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNodeReaderNavigator/VirtualAttribute")])); 
  $.Field({Static:false, Public:false}, "docTypeNodeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNodeReaderNavigator/VirtualAttribute")])); 
  $.Field({Static:false, Public:false}, "bOnAttrVal", $.Boolean); 
  $.Property({Static:false, Public:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "LocalName", $.String);

  $.Property({Static:false, Public:false}, "IsOnAttrVal", $.Boolean);

  $.Property({Static:false, Public:false}, "OwnerElementNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:false}, "CreatedOnAttribute", $.Boolean);

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true }, "Value", $.String);

  $.Property({Static:false, Public:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:false}, "IsOnDeclOrDocType", $.Boolean);

  $.Property({Static:false, Public:true }, "Document", $asm0E.TypeRef("System.Xml.XmlDocument"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlNodeReaderNavigator/VirtualAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A86E, null, [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "value", $.String); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlNodeReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2729A, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x272B2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishReadBinary", 
    $sig.make(0x272BC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x27283, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27276, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x27297, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0x27278, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x27274, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DtdInfo", 
    $sig.make(0x27299, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x27287, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x2728C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x27271, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x2727A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27279, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x2726B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2726A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x2726C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x27295, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27269, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x2726E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x27289, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x27281, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27273, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x2727F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x2727B, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x272A0, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x272A1, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x272A4, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsInReadingStates", 
    $sig.make(0x2729B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x272B5, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x272A5, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x272A6, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x272A7, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x272AA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x272A8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x272A9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x272AB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0x272AC, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x272B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadAtZeroLevel", 
    $sig.make(0x272AF, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x272B8, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x272B9, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x272BA, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x272BB, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadForward", 
    $sig.make(0x272B0, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadNextNode", 
    $sig.make(0x272AD, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0x272B4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReSetReadingMarks", 
    $sig.make(0x272B1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x272B6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetEndOfFile", 
    $sig.make(0x272AE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x272B3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x272BD, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x272BF, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x272BE, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "readerNav", $asm0E.TypeRef("System.Xml.XmlNodeReaderNavigator")); 
  $.Field({Static:false, Public:false}, "nodeType", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "curDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "readState", $asm0E.TypeRef("System.Xml.ReadState")); 
  $.Field({Static:false, Public:false}, "fEOF", $.Boolean); 
  $.Field({Static:false, Public:false}, "bResolveEntity", $.Boolean); 
  $.Field({Static:false, Public:false}, "bStartFromDocument", $.Boolean); 
  $.Field({Static:false, Public:false}, "bInReadBinary", $.Boolean); 
  $.Field({Static:false, Public:false}, "readBinaryHelper", $asm0E.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlNotation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x272FF, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0x27300, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerXml", 
    $sig.make(0x272FD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x272F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x272F7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x272F6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x272F8, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OuterXml", 
    $sig.make(0x272FC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
    $sig.make(0x272FA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
    $sig.make(0x272FB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerXml", 
    $sig.make(0x272FE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0x27304, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0x27303, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true }, "PublicId", $.String);

  $.Property({Static:false, Public:true }, "SystemId", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlProcessingInstruction", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBAC9, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBACA, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Data", 
    $sig.make(0xBAC2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InnerText", 
    $sig.make(0xBAC4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBABE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBABD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBAC6, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Target", 
    $sig.make(0xBAC1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBABF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPLocalName", 
    $sig.make(0xBAC7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBAC8, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Data", 
    $sig.make(0xBAC3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0xBAC5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBAC0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBACC, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBACB, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "target", $.String); 
  $.Field({Static:false, Public:false}, "data", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true }, "Target", $.String);

  $.Property({Static:false, Public:true }, "Data", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlSignificantWhitespace", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB22, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBB23, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
    $sig.make(0xBB20, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBB1A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBB19, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBB1B, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xBB1C, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PreviousText", 
    $sig.make(0xBB21, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBB1D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBB1F, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBB1E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBB25, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBB24, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm0E.TypeRef("System.Xml.XmlNode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlText", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB4C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB4D, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBB4E, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
    $sig.make(0xBB4A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBB44, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBB43, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBB45, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xBB46, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PreviousText", 
    $sig.make(0xBB4B, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBB47, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBB49, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBB48, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SplitText", 
    $sig.make(0xBB4F, $.Type, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBB51, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBB50, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm0E.TypeRef("System.Xml.XmlNode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlAttribute"), "System.Xml.XmlUnspecifiedAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2731B, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlDocument")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AppendChild", 
    $sig.make(0x27321, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0x2731C, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Specified", 
    $sig.make(0x27319, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
    $sig.make(0x2731E, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
    $sig.make(0x2731D, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveChild", 
    $sig.make(0x27320, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReplaceChild", 
    $sig.make(0x2731F, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XmlNode"), $asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InnerText", 
    $sig.make(0x2731A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSpecified", 
    $sig.make(0x27323, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0x27322, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "fSpecified", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Specified", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlWhitespace", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBB95, null, [$.String, $asm0E.TypeRef("System.Xml.XmlDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloneNode", 
    $sig.make(0xBB96, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
    $sig.make(0xBB93, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0xBB8D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xBB8C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0xBB8E, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentNode", 
    $sig.make(0xBB8F, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PreviousText", 
    $sig.make(0xBB94, $asm0E.TypeRef("System.Xml.XmlNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xBB90, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XPNodeType", 
    $sig.make(0xBB92, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xBB91, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteContentTo", 
    $sig.make(0xBB98, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
    $sig.make(0xBB97, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm0E.TypeRef("System.Xml.XmlNode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm0E.TypeRef("System.Xml.XmlNode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNodeList"), "System.Xml.XPathNodeList", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x273CC, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x273CB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x273D0, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNode", 
    $sig.make(0x273CD, $asm0E.TypeRef("System.Xml.XmlNode"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Item", 
    $sig.make(0x273CF, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadUntil", 
    $sig.make(0x273CE, $.Int32, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XmlNode")])); 
  $.Field({Static:false, Public:false}, "nodeIterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
  $.Field({Static:false, Public:false}, "done", $.Boolean); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "nullparams", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
      return JSIL.Array.New($asm06.System.Object, 0);
    }); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlNodeListEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27470, null, [$asm0E.TypeRef("System.Xml.XPathNodeList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x2746F, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x27472, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x27471, null, [], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm0E.TypeRef("System.Xml.XPathNodeList")); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
  $.Field({Static:false, Public:false}, "valid", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeEnum(
  "System.Xml.BinXmlToken", false, {
    NotImpl: -2, 
    EOF: -1, 
    Error: 0, 
    SQL_SMALLINT: 1, 
    SQL_INT: 2, 
    SQL_REAL: 3, 
    SQL_FLOAT: 4, 
    SQL_MONEY: 5, 
    SQL_BIT: 6, 
    SQL_TINYINT: 7, 
    SQL_BIGINT: 8, 
    SQL_UUID: 9, 
    SQL_DECIMAL: 10, 
    SQL_NUMERIC: 11, 
    SQL_BINARY: 12, 
    SQL_CHAR: 13, 
    SQL_NCHAR: 14, 
    SQL_VARBINARY: 15, 
    SQL_VARCHAR: 16, 
    SQL_NVARCHAR: 17, 
    SQL_DATETIME: 18, 
    SQL_SMALLDATETIME: 19, 
    SQL_SMALLMONEY: 20, 
    SQL_TEXT: 22, 
    SQL_IMAGE: 23, 
    SQL_NTEXT: 24, 
    SQL_UDT: 27, 
    XSD_KATMAI_TIMEOFFSET: 122, 
    XSD_KATMAI_DATETIMEOFFSET: 123, 
    XSD_KATMAI_DATEOFFSET: 124, 
    XSD_KATMAI_TIME: 125, 
    XSD_KATMAI_DATETIME: 126, 
    XSD_KATMAI_DATE: 127, 
    XSD_TIME: 129, 
    XSD_DATETIME: 130, 
    XSD_DATE: 131, 
    XSD_BINHEX: 132, 
    XSD_BASE64: 133, 
    XSD_BOOLEAN: 134, 
    XSD_DECIMAL: 135, 
    XSD_BYTE: 136, 
    XSD_UNSIGNEDSHORT: 137, 
    XSD_UNSIGNEDINT: 138, 
    XSD_UNSIGNEDLONG: 139, 
    XSD_QNAME: 140, 
    NmFlush: 233, 
    Extn: 234, 
    EndNest: 235, 
    Nest: 236, 
    XmlText: 237, 
    QName: 239, 
    Name: 240, 
    EndCData: 241, 
    CData: 242, 
    Comment: 243, 
    PI: 244, 
    EndAttrs: 245, 
    Attr: 246, 
    EndElem: 247, 
    Element: 248, 
    Subset: 249, 
    Public: 250, 
    System: 251, 
    DocType: 252, 
    Encoding: 253, 
    XmlDecl: 254
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.BinXmlSqlDecimal", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27527, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddULong", 
    $sig.make(0x27538, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AdjustScale", 
    $sig.make(0x27536, null, [$.Int32, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
    $sig.make(0x27543, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:false}, "ChFromDigit", 
    $sig.make(0x2753F, $.Char, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CLenFromPrec", 
    $sig.make(0x2753D, $.Byte, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DivByULong", 
    $sig.make(0x2753C, $.UInt32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FGt10_38", 
    $sig.make(0x27531, $.Boolean, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FZero", 
    $sig.make(0x2752F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsPositive", 
    $sig.make(0x27524, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MpDiv1", 
    $sig.make(0x27533, null, [
        $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MpNormalize", 
    $sig.make(0x27535, null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MultByULong", 
    $sig.make(0x2753A, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StoreFromWorkingArray", 
    $sig.make(0x27530, null, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x27540, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x27542, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TrimTrailingZeros", 
    $sig.make(0x27541, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UIntFromByteArray", 
    $sig.make(0x2752D, $.UInt32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x27529, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteUI4", 
    $sig.make(0x2752B, null, [$.UInt32, $asm06.TypeRef("System.IO.Stream")], [])
  );

  $.Field({Static:false, Public:false}, "m_bLen", $.Byte); 
  $.Field({Static:false, Public:false}, "m_bPrec", $.Byte); 
  $.Field({Static:false, Public:false}, "m_bScale", $.Byte); 
  $.Field({Static:false, Public:false}, "m_bSign", $.Byte); 
  $.Field({Static:false, Public:false}, "m_data1", $.UInt32); 
  $.Field({Static:false, Public:false}, "m_data2", $.UInt32); 
  $.Field({Static:false, Public:false}, "m_data3", $.UInt32); 
  $.Field({Static:false, Public:false}, "m_data4", $.UInt32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NUMERIC_MAX_PRECISION", $.Byte, 38); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MaxPrecision", $.Byte, function ($pi) {
      return $pi.NUMERIC_MAX_PRECISION;
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MaxScale", $.Byte, function ($pi) {
      return $pi.NUMERIC_MAX_PRECISION;
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "x_cNumeMax", $.Int32, 4); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "x_lInt32Base", $.Int64, 4294967296); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "x_ulInt32Base", $.UInt64, 4294967296); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "x_ulInt32BaseForMod", $.UInt64, function ($pi) {
      return ($pi.x_ulInt32Base - ($asm06.System.Int64.FromNumber(1)).ToUInt64());
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "x_llMax", $.UInt64, 9223372036854775807); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE", $.Double, function ($pi) {
      return $pi.x_lInt32Base.ToNumber();
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE2", $.Double, function ($pi) {
      return ($pi.DUINT_BASE * $pi.DUINT_BASE);
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE3", $.Double, function ($pi) {
      return ($pi.DUINT_BASE2 * $pi.DUINT_BASE);
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "x_rgulShiftBase", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "rgCLenFromPrec", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "IsPositive", $.Boolean);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.BinXmlSqlMoney", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27564, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2756B, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2756C, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x27570, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "data", $.Int64); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.BinXmlDateTime", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x275F2, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdDate", 
    $sig.make(0x275CF, null, [
        $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdDateTime", 
    $sig.make(0x275CE, null, [
        $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdTime", 
    $sig.make(0x275D0, null, [
        $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetFractions", 
    $sig.make(0x275F0, $.Int32, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetFractions", 
    $sig.make(0x275F1, $.Int32, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetKatmaiDateTicks", 
    $sig.make(0x275ED, $.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetKatmaiTimeTicks", 
    $sig.make(0x275EE, $.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetKatmaiTimeZoneTicks", 
    $sig.make(0x275EF, $.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SqlDateTimeToDateTime", 
    $sig.make(0x275D8, $asm06.TypeRef("System.DateTime"), [$.Int32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SqlDateTimeToString", 
    $sig.make(0x275D7, $.String, [$.Int32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SqlSmallDateTimeToDateTime", 
    $sig.make(0x275DA, $asm06.TypeRef("System.DateTime"), [$.Int16, $.UInt16], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SqlSmallDateTimeToString", 
    $sig.make(0x275D9, $.String, [$.Int16, $.UInt16], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Write2Dig", 
    $sig.make(0x275C6, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Write3Dec", 
    $sig.make(0x275C8, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Write4DigNeg", 
    $sig.make(0x275C7, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteDate", 
    $sig.make(0x275C9, null, [
        $asm06.TypeRef("System.Text.StringBuilder"), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteTime", 
    $sig.make(0x275CA, null, [
        $asm06.TypeRef("System.Text.StringBuilder"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteTimeFullPrecision", 
    $sig.make(0x275CB, null, [
        $asm06.TypeRef("System.Text.StringBuilder"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteTimeZone", 
    $sig.make(0x275CC, null, [$asm06.TypeRef("System.Text.StringBuilder"), $asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteTimeZone", 
    $sig.make(0x275CD, null, [
        $asm06.TypeRef("System.Text.StringBuilder"), $.Boolean, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdDateTimeToDateTime", 
    $sig.make(0x275D2, $asm06.TypeRef("System.DateTime"), [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdDateTimeToString", 
    $sig.make(0x275D1, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdDateToDateTime", 
    $sig.make(0x275D4, $asm06.TypeRef("System.DateTime"), [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdDateToString", 
    $sig.make(0x275D3, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToDateTime", 
    $sig.make(0x275DE, $asm06.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToDateTimeOffset", 
    $sig.make(0x275E4, $asm06.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToString", 
    $sig.make(0x275EA, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToDateTime", 
    $sig.make(0x275DF, $asm06.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToDateTimeOffset", 
    $sig.make(0x275E5, $asm06.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToString", 
    $sig.make(0x275EB, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToDateTime", 
    $sig.make(0x275DC, $asm06.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToDateTimeOffset", 
    $sig.make(0x275E2, $asm06.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToString", 
    $sig.make(0x275E8, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToDateTime", 
    $sig.make(0x275DB, $asm06.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToDateTimeOffset", 
    $sig.make(0x275E1, $asm06.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToString", 
    $sig.make(0x275E7, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToDateTime", 
    $sig.make(0x275E0, $asm06.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToDateTimeOffset", 
    $sig.make(0x275E6, $asm06.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToString", 
    $sig.make(0x275EC, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToDateTime", 
    $sig.make(0x275DD, $asm06.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToDateTimeOffset", 
    $sig.make(0x275E3, $asm06.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToString", 
    $sig.make(0x275E9, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdTimeToDateTime", 
    $sig.make(0x275D6, $asm06.TypeRef("System.DateTime"), [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "XsdTimeToString", 
    $sig.make(0x275D5, $.String, [$.Int64], [])
  );

  $.Constant({Static:true , Public:false}, "MaxFractionDigits", 7); 
  $.Field({Static:true , Public:false}, "KatmaiTimeScaleMultiplicator", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerMillisecond", $.Double, 0.3); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerSecond", $.Int32, 300); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerMinute", $.Int32, function ($pi) {
      return (($pi.SQLTicksPerSecond * 60) | 0);
    }); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerHour", $.Int32, function ($pi) {
      return (($pi.SQLTicksPerMinute * 60) | 0);
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerDay", $.Int32, function ($pi) {
      return (($pi.SQLTicksPerHour * 24) | 0);
    }); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlSqlBinaryReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x276A2, null, [
        $asm06.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.String, 
        $.Boolean, $asm0E.TypeRef("System.Xml.XmlReaderSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddInitNamespace", 
    $sig.make(0x276CD, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddName", 
    $sig.make(0x276CE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddQName", 
    $sig.make(0x276D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CDATAValue", 
    $sig.make(0x276FB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckAllowContent", 
    $sig.make(0x27729, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckText", 
    $sig.make(0x2772F, $asm0E.TypeRef("System.Xml.XmlNodeType"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckTextIsWS", 
    $sig.make(0x27730, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueTokenBounds", 
    $sig.make(0x27731, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearAttributes", 
    $sig.make(0x276F2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x276AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Fill", 
    $sig.make(0x276DA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Fill_", 
    $sig.make(0x276D9, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FillAllowEOF", 
    $sig.make(0x276D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishCDATA", 
    $sig.make(0x276FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishContentAsXXX", 
    $sig.make(0x276B6, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishEndElement", 
    $sig.make(0x2770D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateImpliedXmlnsAttrs", 
    $sig.make(0x276F5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateTokenTypeMap", 
    $sig.make(0x2772A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x2769E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27693, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x27691, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x2769F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x27686, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27696, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27679, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x2767B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x276A0, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27677, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27682, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x276A1, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x27674, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x2768E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x2769D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x2769A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x27698, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x276A3, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x276A4, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x276A5, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeText", 
    $sig.make(0x276EC, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
    $sig.make(0x2774A, $.Double, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInt16", 
    $sig.make(0x27743, $.Int16, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInt32", 
    $sig.make(0x27745, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInt64", 
    $sig.make(0x27747, $.Int64, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSingle", 
    $sig.make(0x27749, $.Single, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetString", 
    $sig.make(0x276EA, $.String, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringAligned", 
    $sig.make(0x276EB, $.String, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetUInt16", 
    $sig.make(0x27744, $.UInt16, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetUInt32", 
    $sig.make(0x27746, $.UInt32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetUInt64", 
    $sig.make(0x27748, $.UInt64, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValueConverter", 
    $sig.make(0x27741, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValueType", 
    $sig.make(0x2772B, $asm06.TypeRef("System.Type"), [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXsdKatmaiTokenLength", 
    $sig.make(0x27733, $.Int32, [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GrowAttributes", 
    $sig.make(0x276F1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GrowElements", 
    $sig.make(0x276F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HashCheckForDuplicateAttributes", 
    $sig.make(0x276F9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadCDATA", 
    $sig.make(0x27720, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadComment", 
    $sig.make(0x2771F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadData", 
    $sig.make(0x27718, null, [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadDoctype", 
    $sig.make(0x2771D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadElement", 
    $sig.make(0x2771B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadEndElement", 
    $sig.make(0x2771C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadEndNest", 
    $sig.make(0x27722, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadNest", 
    $sig.make(0x27721, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadPI", 
    $sig.make(0x2771E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImplReadXmlText", 
    $sig.make(0x27724, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LocateAttribute", 
    $sig.make(0x276ED, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LocateAttribute", 
    $sig.make(0x276EE, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x276B0, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x276A7, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x276A8, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x276AA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x276AD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x276AB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x276AC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NameFlush", 
    $sig.make(0x276D1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextToken", 
    $sig.make(0x276E5, $asm0E.TypeRef("System.Xml.BinXmlToken"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextToken1", 
    $sig.make(0x276E4, $asm0E.TypeRef("System.Xml.BinXmlToken"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextToken2", 
    $sig.make(0x276E3, $asm0E.TypeRef("System.Xml.BinXmlToken"), [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseMB32", 
    $sig.make(0x276DD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseMB32", 
    $sig.make(0x276DF, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseMB32_", 
    $sig.make(0x276DE, $.Int32, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseMB64", 
    $sig.make(0x276E0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseText", 
    $sig.make(0x276E8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PeekNextToken", 
    $sig.make(0x276E6, $asm0E.TypeRef("System.Xml.BinXmlToken"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PeekToken", 
    $sig.make(0x276E1, $asm0E.TypeRef("System.Xml.BinXmlToken"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
    $sig.make(0x276F4, null, [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PositionOnAttribute", 
    $sig.make(0x276EF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
    $sig.make(0x276F3, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x276B3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x276AE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadByte", 
    $sig.make(0x276DB, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAs", 
    $sig.make(0x276C4, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBoolean", 
    $sig.make(0x276B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDateTime", 
    $sig.make(0x276B8, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDecimal", 
    $sig.make(0x276BB, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDouble", 
    $sig.make(0x276B9, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsFloat", 
    $sig.make(0x276BA, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsInt", 
    $sig.make(0x276BD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsLong", 
    $sig.make(0x276BE, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsObject", 
    $sig.make(0x276BF, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadDoc", 
    $sig.make(0x2770F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadInit", 
    $sig.make(0x276F6, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadNameRef", 
    $sig.make(0x276D6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadQNameRef", 
    $sig.make(0x276D5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadToken", 
    $sig.make(0x276E2, $asm0E.TypeRef("System.Xml.BinXmlToken"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadUShort", 
    $sig.make(0x276DC, $.UInt16, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RescanNextToken", 
    $sig.make(0x276E7, $asm0E.TypeRef("System.Xml.BinXmlToken"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReScanOverValue", 
    $sig.make(0x2772C, null, [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x276B1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttributes", 
    $sig.make(0x276F7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanOverAnyValue", 
    $sig.make(0x2772E, $asm0E.TypeRef("System.Xml.XmlNodeType"), [
        $asm0E.TypeRef("System.Xml.BinXmlToken"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanOverValue", 
    $sig.make(0x2772D, $asm0E.TypeRef("System.Xml.XmlNodeType"), [
        $asm0E.TypeRef("System.Xml.BinXmlToken"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanText", 
    $sig.make(0x276E9, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupContentAsXXX", 
    $sig.make(0x276B4, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SimpleCheckForDuplicateAttributes", 
    $sig.make(0x276F8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipExtn", 
    $sig.make(0x276D3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x276C7, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x276C9, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowNotSupported", 
    $sig.make(0x2774E, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0x2774B, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowXmlException", 
    $sig.make(0x2774C, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowXmlException", 
    $sig.make(0x2774D, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateFromTextReader", 
    $sig.make(0x27725, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateFromTextReader", 
    $sig.make(0x27727, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAs", 
    $sig.make(0x27742, $.Object, [
        $asm0E.TypeRef("System.Xml.BinXmlToken"), $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTime", 
    $sig.make(0x2773B, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTimeOffset", 
    $sig.make(0x2773C, $asm06.TypeRef("System.DateTimeOffset"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTimeString", 
    $sig.make(0x2773D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsDecimal", 
    $sig.make(0x27739, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsDouble", 
    $sig.make(0x2773A, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsLong", 
    $sig.make(0x27736, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsObject", 
    $sig.make(0x27740, $.Object, [$asm0E.TypeRef("System.Xml.BinXmlToken"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsString", 
    $sig.make(0x2773E, $.String, [$asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValueAsULong", 
    $sig.make(0x27738, $.UInt64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyVersion", 
    $sig.make(0x276CB, null, [$.Int32, $asm0E.TypeRef("System.Xml.BinXmlToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XmlDeclValue", 
    $sig.make(0x276FA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XsdKatmaiTimeScaleToValueLength", 
    $sig.make(0x27734, $.Int32, [$.Byte], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "TypeOfObject", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TypeOfString", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false}, "TokenTypeMap", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), null); 
  $.Field({Static:true , Public:false}, "XsdKatmaiTimeScaleToValueLengthMap", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "ScanState2ReadState", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.ReadState")])); 
  $.Field({Static:false, Public:false}, "inStrm", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "pos", $.Int32); 
  $.Field({Static:false, Public:false}, "mark", $.Int32); 
  $.Field({Static:false, Public:false}, "end", $.Int32); 
  $.Field({Static:false, Public:false}, "offset", $.Int64); 
  $.Field({Static:false, Public:false}, "eof", $.Boolean); 
  $.Field({Static:false, Public:false}, "sniffed", $.Boolean); 
  $.Field({Static:false, Public:false}, "isEmpty", $.Boolean); 
  $.Field({Static:false, Public:false}, "docState", $.Int32); 
  $.Field({Static:false, Public:false}, "symbolTables", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/SymbolTables")); 
  $.Field({Static:false, Public:false}, "xnt", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "xntFromSettings", $.Boolean); 
  $.Field({Static:false, Public:false}, "xml", $.String); 
  $.Field({Static:false, Public:false}, "xmlns", $.String); 
  $.Field({Static:false, Public:false}, "nsxmlns", $.String); 
  $.Field({Static:false, Public:false}, "baseUri", $.String); 
  $.Field({Static:false, Public:false}, "state", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/ScanState")); 
  $.Field({Static:false, Public:false}, "nodetype", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "token", $asm0E.TypeRef("System.Xml.BinXmlToken")); 
  $.Field({Static:false, Public:false}, "attrIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "qnameOther", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
  $.Field({Static:false, Public:false}, "qnameElement", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
  $.Field({Static:false, Public:false}, "parentNodeType", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "elementStack", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/ElemInfo")])); 
  $.Field({Static:false, Public:false}, "elemDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/AttrInfo")])); 
  $.Field({Static:false, Public:false}, "attrHashTbl", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "posAfterAttrs", $.Int32); 
  $.Field({Static:false, Public:false}, "xmlspacePreserve", $.Boolean); 
  $.Field({Static:false, Public:false}, "tokLen", $.Int32); 
  $.Field({Static:false, Public:false}, "tokDataPos", $.Int32); 
  $.Field({Static:false, Public:false}, "hasTypedValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "valueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "stringValue", $.String); 
  $.Field({Static:false, Public:false}, "namespaces", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl")])); 
  $.Field({Static:false, Public:false}, "prevNameInfo", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/NestedBinXml")); 
  $.Field({Static:false, Public:false}, "textXmlReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "closeInput", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean); 
  $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
  $.Field({Static:false, Public:false}, "dtdProcessing", $asm0E.TypeRef("System.Xml.DtdProcessing")); 
  $.Field({Static:false, Public:false}, "hasher", $asm0E.TypeRef("System.Xml.SecureStringHasher")); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "unicode", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "version", $.Byte); 
  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeEnum(
  "System.Xml.XmlSqlBinaryReader/ScanState", false, {
    Doc: 0, 
    XmlText: 1, 
    Attr: 2, 
    AttrVal: 3, 
    AttrValPseudoValue: 4, 
    Init: 5, 
    Error: 6, 
    EOF: 7, 
    Closed: 8
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/QName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x277E0, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CheckPrefixNS", 
    $sig.make(0x277EE, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x277E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x277F4, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x277F0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNSHashCode", 
    $sig.make(0x277F1, $.Int32, [$asm0E.TypeRef("System.Xml.SecureStringHasher")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNs", 
    $sig.make(0x277EA, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchPrefix", 
    $sig.make(0x277EC, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x277F7, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x277F8, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x277E1, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x277F6, $.String, [], [])
  );

  $.Field({Static:false, Public:true }, "prefix", $.String); 
  $.Field({Static:false, Public:true }, "localname", $.String); 
  $.Field({Static:false, Public:true }, "namespaceUri", $.String); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/ElemInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x2A87A, $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x2A879, null, [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName"), $.Boolean], [])
  );

  $.Field({Static:false, Public:true }, "$name", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
  $.Field({Static:false, Public:true }, "xmlLang", $.String); 
  $.Field({Static:false, Public:true }, "xmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace")); 
  $.Field({Static:false, Public:true }, "xmlspacePreserve", $.Boolean); 
  $.Field({Static:false, Public:true }, "nsdecls", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/AttrInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "AdjustPosition", 
    $sig.make(0x2A896, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLocalnameAndNamespaceUri", 
    $sig.make(0x2A88D, null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLocalnameAndNamespaceUriAndHash", 
    $sig.make(0x2A890, $.Int32, [
        $asm0E.TypeRef("System.Xml.SecureStringHasher"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchHashNS", 
    $sig.make(0x2A893, $.Boolean, [
        $.Int32, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNS", 
    $sig.make(0x2A892, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x2A88B, null, [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x2A88C, null, [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName"), $.Int32], [])
  );

  $.Field({Static:false, Public:true }, "$name", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
  $.Field({Static:false, Public:true }, "val", $.String); 
  $.Field({Static:false, Public:true }, "contentPos", $.Int32); 
  $.Field({Static:false, Public:true }, "hashCode", $.Int32); 
  $.Field({Static:false, Public:true }, "prevHash", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlSqlBinaryReader/NamespaceDecl", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27859, null, [
        $.String, $.String, 
        $.Type, $.Type, 
        $.Int32, $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:true }, "prefix", $.String); 
  $.Field({Static:false, Public:true }, "uri", $.String); 
  $.Field({Static:false, Public:true }, "scopeLink", $.Type); 
  $.Field({Static:false, Public:true }, "prevLink", $.Type); 
  $.Field({Static:false, Public:true }, "scope", $.Int32); 
  $.Field({Static:false, Public:true }, "implied", $.Boolean); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/SymbolTables", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "Init", 
    $sig.make(0x2782B, null, [], [])
  );

  $.Field({Static:false, Public:true }, "symtable", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:true }, "symCount", $.Int32); 
  $.Field({Static:false, Public:true }, "qnametable", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/QName")])); 
  $.Field({Static:false, Public:true }, "qnameCount", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XmlSqlBinaryReader/NestedBinXml", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x279BA, null, [
        $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/SymbolTables"), $.Int32, 
        $.Type
      ], [])
  );

  $.Field({Static:false, Public:true }, "symbolTables", $asm0E.TypeRef("System.Xml.XmlSqlBinaryReader/SymbolTables")); 
  $.Field({Static:false, Public:true }, "docState", $.Int32); 
  $.Field({Static:false, Public:true }, "next", $.Type); 
});

JSIL.DeclareNamespace("MS");
JSIL.DeclareNamespace("MS.Internal");
JSIL.DeclareNamespace("MS.Internal.Xml");
JSIL.DeclareNamespace("MS.Internal.Xml.Cache");
JSIL.MakeEnum(
  "MS.Internal.Xml.Cache.TextBlockType", false, {
    None: 0, 
    Text: 4, 
    SignificantWhitespace: 5, 
    Whitespace: 6
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlRawWriter"), "MS.Internal.Xml.Cache.XPathDocumentBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A3A, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"), 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathDocument/LoadFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSibling", 
    $sig.make(0x27A78, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.String, 
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CachedTextNode", 
    $sig.make(0x27A7A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x27A6A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputeLineInfo", 
    $sig.make(0x27A77, null, [
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateIdTables", 
    $sig.make(0x27A70, null, [$asm0E.TypeRef("System.Xml.IDtdInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x27A6B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x27A3B, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"), 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathDocument/LoadFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LinkSimilarElements", 
    $sig.make(0x27A71, $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef"), [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NewNamespaceNode", 
    $sig.make(0x27A72, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $.String, 
        $.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NewNode", 
    $sig.make(0x27A75, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
    $sig.make(0x27A6E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCData", 
    $sig.make(0x27A4D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
    $sig.make(0x27A68, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteChars", 
    $sig.make(0x27A5F, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
    $sig.make(0x27A4F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteDocType", 
    $sig.make(0x27A3C, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
    $sig.make(0x27A4C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x27A40, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x27A43, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
    $sig.make(0x27A48, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEntityRef", 
    $sig.make(0x27A66, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteFullEndElement", 
    $sig.make(0x27A41, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
    $sig.make(0x27A46, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclaration", 
    $sig.make(0x27A6F, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27A52, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
    $sig.make(0x27A53, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27A61, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteRaw", 
    $sig.make(0x27A62, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
    $sig.make(0x27A4A, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27A3D, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
    $sig.make(0x27A3E, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27A59, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteString", 
    $sig.make(0x27A64, null, [$.String, $asm0E.TypeRef("MS.Internal.Xml.Cache.TextBlockType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteSurrogateCharEntity", 
    $sig.make(0x27A69, null, [$.Char, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteWhitespace", 
    $sig.make(0x27A57, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27A6C, null, [$asm0E.TypeRef("System.Xml.XmlStandalone")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlDeclaration", 
    $sig.make(0x27A6D, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "ElementIndexSize", 64); 
  $.Field({Static:false, Public:false}, "nodePageFact", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder/NodePageFactory")); 
  $.Field({Static:false, Public:false}, "nmspPageFact", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder/NodePageFactory")); 
  $.Field({Static:false, Public:false}, "textBldr", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder/TextBlockBuilder")); 
  $.Field({Static:false, Public:false}, "stkNmsp", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
  $.Field({Static:false, Public:false}, "infoTable", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable")); 
  $.Field({Static:false, Public:false}, "doc", $asm0E.TypeRef("System.Xml.XPath.XPathDocument")); 
  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "atomizeNames", $.Boolean); 
  $.Field({Static:false, Public:false}, "pageNmsp", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "idxNmsp", $.Int32); 
  $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "idxParent", $.Int32); 
  $.Field({Static:false, Public:false}, "pageSibling", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "idxSibling", $.Int32); 
  $.Field({Static:false, Public:false}, "lineNumBase", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosBase", $.Int32); 
  $.Field({Static:false, Public:false}, "idAttrName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "elemIdMap", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "elemNameIndex", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathDocumentBuilder/NodePageFactory", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "AllocateSlot", 
    $sig.make(0x27CC3, null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextNodeIndex", 
    $sig.make(0x27CC1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextNodePage", 
    $sig.make(0x27CC0, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Init", 
    $sig.make(0x27CC2, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "page", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageInfo", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")); 
  $.Field({Static:false, Public:false}, "pageSize", $.Int32); 
  $.Property({Static:false, Public:true }, "NextNodePage", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

  $.Property({Static:false, Public:true }, "NextNodeIndex", $.Int32);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathDocumentBuilder/TextBlockBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "get_HasText", 
    $sig.make(0x27C9E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x27C9F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27CA0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TextType", 
    $sig.make(0x27C9D, $asm0E.TypeRef("MS.Internal.Xml.Cache.TextBlockType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x27CA1, null, [$asm0E.TypeRef("System.Xml.IXmlLineInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadText", 
    $sig.make(0x27CB6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTextBlock", 
    $sig.make(0x27CA2, null, [$.String, $asm0E.TypeRef("MS.Internal.Xml.Cache.TextBlockType")], [])
  );

  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "textType", $asm0E.TypeRef("MS.Internal.Xml.Cache.TextBlockType")); 
  $.Field({Static:false, Public:false}, "text", $.String); 
  $.Field({Static:false, Public:false}, "lineNum", $.Int32); 
  $.Field({Static:false, Public:false}, "linePos", $.Int32); 
  $.Property({Static:false, Public:true }, "TextType", $asm0E.TypeRef("MS.Internal.Xml.Cache.TextBlockType"));

  $.Property({Static:false, Public:true }, "HasText", $.Boolean);

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.Cache.XPathDocumentBaseIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27E7F, null, [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27E82, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x27E7A, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x27E7C, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "ctxt", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")); 
  $.Field({Static:false, Public:false}, "pos", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentElementChildIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27F76, null, [
        $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27F78, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x27F79, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x27F7B, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentKindChildIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x280EC, null, [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x280ED, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x280EE, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x280EF, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "typ", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28194, null, [
        $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28195, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28196, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28199, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "end", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")); 
  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x281E8, null, [
        $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x281EA, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x281EF, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x281F1, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "end", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")); 
  $.Field({Static:false, Public:false}, "typ", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")); 
  $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), "MS.Internal.Xml.Cache.XPathDocumentNavigator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27EA7, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27EA8, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x27EA9, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComparePosition", 
    $sig.make(0x27EC9, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x27E9E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x27EA1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasChildren", 
    $sig.make(0x27EA2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x27E9F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x27EA5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x27EA6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27E9A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x27E9C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x27E9B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x27EA0, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x27E99, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27E9D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingObject", 
    $sig.make(0x27EA4, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_UniqueId", 
    $sig.make(0x27EA3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x27E98, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFollowingEnd", 
    $sig.make(0x27EE5, $.Int32, [
        $.Type, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPositionHashCode", 
    $sig.make(0x27ED7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPrimaryLocation", 
    $sig.make(0x27ED2, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSecondaryLocation", 
    $sig.make(0x27ED4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasLineInfo", 
    $sig.make(0x27ED6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsContentKindMatch", 
    $sig.make(0x27EDC, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDescendant", 
    $sig.make(0x27ECE, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsElementMatch", 
    $sig.make(0x27ED8, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsKindMatch", 
    $sig.make(0x27EDE, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsSamePosition", 
    $sig.make(0x27EBB, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveTo", 
    $sig.make(0x27EB8, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x27EAE, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToChild", 
    $sig.make(0x27EBD, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToChild", 
    $sig.make(0x27EBF, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x27EAB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
    $sig.make(0x27EB6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
    $sig.make(0x27EB0, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0x27EC1, $.Boolean, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFollowing", 
    $sig.make(0x27EC2, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToId", 
    $sig.make(0x27EBA, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x27EB3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x27EBE, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x27EC0, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x27EAC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
    $sig.make(0x27EB1, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
    $sig.make(0x27EB7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToPrevious", 
    $sig.make(0x27EB5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToRoot", 
    $sig.make(0x27EBC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectChildren", 
    $sig.make(0x27EC3, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectChildren", 
    $sig.make(0x27EC4, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectDescendants", 
    $sig.make(0x27EC5, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectDescendants", 
    $sig.make(0x27EC7, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "pageCurrent", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "idxCurrent", $.Int32); 
  $.Field({Static:false, Public:false}, "idxParent", $.Int32); 
  $.Field({Static:false, Public:false}, "atomizedLocalName", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "UniqueId", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlLineInfo"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "Create", 
    $sig.make(0x28355, null, [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Create", 
    $sig.make(0x28356, null, [
        $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ElementMatch", 
    $sig.make(0x28354, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AllowShortcutTag", 
    $sig.make(0x2834C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
    $sig.make(0x2833C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CollapsedLinePosition", 
    $sig.make(0x28340, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Document", 
    $sig.make(0x2833A, $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttribute", 
    $sig.make(0x28345, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasCollapsedText", 
    $sig.make(0x28344, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasContentChild", 
    $sig.make(0x28346, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasElementChild", 
    $sig.make(0x28347, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasNamespaceDecls", 
    $sig.make(0x2834A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasSibling", 
    $sig.make(0x28343, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsAttrNmsp", 
    $sig.make(0x28348, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsText", 
    $sig.make(0x28349, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsXmlNamespaceNode", 
    $sig.make(0x28342, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x2833E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x2833F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x28331, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalNameHashCode", 
    $sig.make(0x2834D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x28333, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
    $sig.make(0x28335, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x28326, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageInfo", 
    $sig.make(0x28341, $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x2832A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x2834E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetParent", 
    $sig.make(0x28350, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetRoot", 
    $sig.make(0x2834F, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSibling", 
    $sig.make(0x28351, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSimilarElement", 
    $sig.make(0x28352, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NameMatch", 
    $sig.make(0x28353, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HasNamespaceDecls", 
    $sig.make(0x2834B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetCollapsedLineInfoOffset", 
    $sig.make(0x28358, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetCollapsedValue", 
    $sig.make(0x2835B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetEmptyValue", 
    $sig.make(0x2835A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetLineInfoOffsets", 
    $sig.make(0x28357, null, [$.Int32, $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "SetParentProperties", 
    $sig.make(0x2835C, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSibling", 
    $sig.make(0x2835D, null, [
        $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSimilarElement", 
    $sig.make(0x2835E, null, [
        $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetValue", 
    $sig.make(0x28359, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "NodeTypeMask", 15); 
  $.Constant({Static:true , Public:false}, "HasAttributeBit", 16); 
  $.Constant({Static:true , Public:false}, "HasContentChildBit", 32); 
  $.Constant({Static:true , Public:false}, "HasElementChildBit", 64); 
  $.Constant({Static:true , Public:false}, "HasCollapsedTextBit", 128); 
  $.Constant({Static:true , Public:false}, "AllowShortcutTagBit", 256); 
  $.Constant({Static:true , Public:false}, "HasNmspDeclsBit", 512); 
  $.Constant({Static:true , Public:false}, "LineNumberMask", 16776192); 
  $.Constant({Static:true , Public:false}, "LineNumberShift", 10); 
  $.Constant({Static:true , Public:false}, "CollapsedPositionShift", 24); 
  $.Constant({Static:true , Public:true }, "MaxLineNumberOffset", 16383); 
  $.Constant({Static:true , Public:true }, "MaxLinePositionOffset", 65535); 
  $.Constant({Static:true , Public:true }, "MaxCollapsedPositionOffset", 255); 
  $.Field({Static:false, Public:false}, "info", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")); 
  $.Field({Static:false, Public:false}, "idxSibling", $.UInt16); 
  $.Field({Static:false, Public:false}, "idxParent", $.UInt16); 
  $.Field({Static:false, Public:false}, "idxSimilar", $.UInt16); 
  $.Field({Static:false, Public:false}, "posOffset", $.UInt16); 
  $.Field({Static:false, Public:false}, "props", $.UInt32); 
  $.Field({Static:false, Public:false}, "value", $.String); 
  $.Property({Static:false, Public:true }, "NodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

  $.Property({Static:false, Public:true }, "Document", $asm0E.TypeRef("System.Xml.XPath.XPathDocument"));

  $.Property({Static:false, Public:true }, "BaseUri", $.String);

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "CollapsedLinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "PageInfo", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

  $.Property({Static:false, Public:true }, "IsXmlNamespaceNode", $.Boolean);

  $.Property({Static:false, Public:true }, "HasSibling", $.Boolean);

  $.Property({Static:false, Public:true }, "HasCollapsedText", $.Boolean);

  $.Property({Static:false, Public:true }, "HasAttribute", $.Boolean);

  $.Property({Static:false, Public:true }, "HasContentChild", $.Boolean);

  $.Property({Static:false, Public:true }, "HasElementChild", $.Boolean);

  $.Property({Static:false, Public:true }, "IsAttrNmsp", $.Boolean);

  $.Property({Static:false, Public:true }, "IsText", $.Boolean);

  $.Property({Static:false, Public:true }, "HasNamespaceDecls", $.Boolean);

  $.Property({Static:false, Public:true }, "AllowShortcutTag", $.Boolean);

  $.Property({Static:false, Public:true }, "LocalNameHashCode", $.Int32);

  $.Property({Static:false, Public:true }, "Value", $.String);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathNodeRef", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D5C, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Index", 
    $sig.make(0x27D5A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNull", 
    $sig.make(0x27D56, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Null", 
    $sig.make(0x27D54, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Page", 
    $sig.make(0x27D58, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x27D5E, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "page", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "idx", $.Int32); 
  $.Property({Static:true , Public:true }, "Null", $.Type);

  $.Property({Static:false, Public:true }, "IsNull", $.Boolean);

  $.Property({Static:false, Public:true }, "Page", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

  $.Property({Static:false, Public:true }, "Index", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodeHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x283C7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetAttribute", 
    $sig.make(0x283B6, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetChild", 
    $sig.make(0x283C5, null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetContentChild", 
    $sig.make(0x28396, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetContentChild", 
    $sig.make(0x2839D, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetContentFollowing", 
    $sig.make(0x283BD, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetContentSibling", 
    $sig.make(0x28397, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetContentSibling", 
    $sig.make(0x283A6, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetElementChild", 
    $sig.make(0x2839B, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetElementFollowing", 
    $sig.make(0x283BA, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetElementSibling", 
    $sig.make(0x2839C, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetFirstAttribute", 
    $sig.make(0x28393, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetFollowing", 
    $sig.make(0x283B8, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetInScopeNamespaces", 
    $sig.make(0x28391, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetLocalNamespaces", 
    $sig.make(0x28390, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetLocation", 
    $sig.make(0x2839A, $.Int32, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetNextAttribute", 
    $sig.make(0x28394, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetNonDescendant", 
    $sig.make(0x283C1, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetParent", 
    $sig.make(0x28399, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetPreviousContentSibling", 
    $sig.make(0x283AB, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetPreviousContentSibling", 
    $sig.make(0x283AF, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetPreviousElementSibling", 
    $sig.make(0x283AD, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextFollowing", 
    $sig.make(0x283BE, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodePageInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DC4, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextPage", 
    $sig.make(0x27DC2, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeCount", 
    $sig.make(0x27DBF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageNumber", 
    $sig.make(0x27DBE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreviousPage", 
    $sig.make(0x27DC1, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NextPage", 
    $sig.make(0x27DC3, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NodeCount", 
    $sig.make(0x27DC0, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "pageNum", $.Int32); 
  $.Field({Static:false, Public:false}, "nodeCount", $.Int32); 
  $.Field({Static:false, Public:false}, "pagePrev", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageNext", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Property({Static:false, Public:true }, "PageNumber", $.Int32);

  $.Property({Static:false, Public:true }, "NodeCount", $.Int32);

  $.Property({Static:false, Public:true }, "PreviousPage", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

  $.Property({Static:false, Public:true }, "NextPage", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodeInfoAtom", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DF7, null, [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DFA, null, [
        $.String, $.String, 
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x27E08, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
    $sig.make(0x27DE7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Document", 
    $sig.make(0x27DEB, $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumberBase", 
    $sig.make(0x27DED, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePositionBase", 
    $sig.make(0x27DF1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x27DE4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalNameHashCode", 
    $sig.make(0x27DF2, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
    $sig.make(0x27DE5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Next", 
    $sig.make(0x27DF3, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageInfo", 
    $sig.make(0x27DE3, $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentPage", 
    $sig.make(0x27DEA, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x27DE6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SiblingPage", 
    $sig.make(0x27DE8, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SimilarElementPage", 
    $sig.make(0x27DE9, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x27E06, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Init", 
    $sig.make(0x27DFB, null, [
        $.String, $.String, 
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Next", 
    $sig.make(0x27DF4, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x27E0B, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "localName", $.String); 
  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "baseUri", $.String); 
  $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageSibling", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageSimilar", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "doc", $asm0E.TypeRef("System.Xml.XPath.XPathDocument")); 
  $.Field({Static:false, Public:false}, "lineNumBase", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosBase", $.Int32); 
  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "localNameHash", $.Int32); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
  $.Field({Static:false, Public:false}, "pageInfo", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")); 
  $.Property({Static:false, Public:true }, "PageInfo", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

  $.Property({Static:false, Public:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "BaseUri", $.String);

  $.Property({Static:false, Public:true }, "SiblingPage", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

  $.Property({Static:false, Public:true }, "SimilarElementPage", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

  $.Property({Static:false, Public:true }, "ParentPage", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

  $.Property({Static:false, Public:true }, "Document", $asm0E.TypeRef("System.Xml.XPath.XPathDocument"));

  $.Property({Static:false, Public:true }, "LineNumberBase", $.Int32);

  $.Property({Static:false, Public:true }, "LinePositionBase", $.Int32);

  $.Property({Static:false, Public:true }, "LocalNameHashCode", $.Int32);

  $.Property({Static:false, Public:true }, "Next", $.Type);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodeInfoTable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D00, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddInfo", 
    $sig.make(0x27D03, null, [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Atomize", 
    $sig.make(0x27D02, $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Create", 
    $sig.make(0x27D01, $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), [
        $.String, $.String, 
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm0E.TypeRef("System.Xml.XPath.XPathDocument"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x27D04, $.String, [], [])
  );

  $.Constant({Static:true , Public:false}, "DefaultTableSize", 32); 
  $.Field({Static:false, Public:false}, "hashTable", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")])); 
  $.Field({Static:false, Public:false}, "sizeTable", $.Int32); 
  $.Field({Static:false, Public:false}, "infoCached", $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")); 
});

JSIL.DeclareNamespace("System.Xml.Resolvers");
JSIL.MakeEnum(
  "System.Xml.Resolvers.XmlKnownDtds", true, {
    None: 0, 
    Xhtml10: 1, 
    Rss091: 2, 
    All: 65535
  }, true
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlResolver"), "System.Xml.Resolvers.XmlPreloadedResolver", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28454, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28455, null, [$asm0E.TypeRef("System.Xml.Resolvers.XmlKnownDtds")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28456, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28457, null, [$asm0E.TypeRef("System.Xml.XmlResolver"), $asm0E.TypeRef("System.Xml.Resolvers.XmlKnownDtds")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28458, null, [
        $asm0E.TypeRef("System.Xml.XmlResolver"), $asm0E.TypeRef("System.Xml.Resolvers.XmlKnownDtds"), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Uri")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x2845F, null, [$asm07.TypeRef("System.Uri"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x28460, null, [
        $asm07.TypeRef("System.Uri"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x28461, null, [$asm07.TypeRef("System.Uri"), $asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x28462, null, [$asm07.TypeRef("System.Uri"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x28465, null, [$asm07.TypeRef("System.Uri"), $asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/PreloadedData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddKnownDtd", 
    $sig.make(0x28467, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/XmlKnownDtdData")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreloadedUris", 
    $sig.make(0x28453, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Uri")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEntity", 
    $sig.make(0x2845C, $.Object, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x28463, null, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveUri", 
    $sig.make(0x2845A, $asm07.TypeRef("System.Uri"), [$asm07.TypeRef("System.Uri"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
    $sig.make(0x28452, null, [$asm07.TypeRef("System.Net.ICredentials")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SupportsType", 
    $sig.make(0x2845E, $.Boolean, [$asm07.TypeRef("System.Uri"), $asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "fallbackResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "mappings", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Uri"), $asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/PreloadedData")])); 
  $.Field({Static:false, Public:false}, "preloadedDtds", $asm0E.TypeRef("System.Xml.Resolvers.XmlKnownDtds")); 
  $.Field({Static:true , Public:false}, "Xhtml10_Dtd", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/XmlKnownDtdData")])); 
  $.Field({Static:true , Public:false}, "Rss091_Dtd", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/XmlKnownDtdData")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm07.TypeRef("System.Net.ICredentials"));

  $.Property({Static:false, Public:true }, "PreloadedUris", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Uri")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Resolvers.XmlPreloadedResolver/PreloadedData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2859A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsStream", 
    $sig.make(0x28597, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsTextReader", 
    $sig.make(0x28598, $asm06.TypeRef("System.IO.TextReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SupportsType", 
    $sig.make(0x28599, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/PreloadedData"), "System.Xml.Resolvers.XmlPreloadedResolver/XmlKnownDtdData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A973, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsStream", 
    $sig.make(0x2A975, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "resourceName", $.String); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/PreloadedData"), "System.Xml.Resolvers.XmlPreloadedResolver/ByteArrayChunk", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A98B, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A98C, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsStream", 
    $sig.make(0x2A98D, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "offset", $.Int32); 
  $.Field({Static:false, Public:false}, "$length", $.Int32); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Resolvers.XmlPreloadedResolver/PreloadedData"), "System.Xml.Resolvers.XmlPreloadedResolver/StringData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A99C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsStream", 
    $sig.make(0x2A99D, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsTextReader", 
    $sig.make(0x2A99E, $asm06.TypeRef("System.IO.TextReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SupportsType", 
    $sig.make(0x2A99F, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "str", $.String); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathDocument", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27B62, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27B63, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B64, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B66, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlSpace")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B69, null, [$asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B6D, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B71, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27B74, null, [$.String, $asm0E.TypeRef("System.Xml.XmlSpace")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddIdElement", 
    $sig.make(0x27B8A, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
    $sig.make(0x27B88, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateNavigator", 
    $sig.make(0x27B7A, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasLineInfo", 
    $sig.make(0x27B61, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
    $sig.make(0x27B5F, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetCollapsedTextNode", 
    $sig.make(0x27B7C, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRootNode", 
    $sig.make(0x27B7F, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXmlNamespaceNode", 
    $sig.make(0x27B86, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadFromReader", 
    $sig.make(0x27B78, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlSpace")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadFromWriter", 
    $sig.make(0x27B76, $asm0E.TypeRef("System.Xml.XmlRawWriter"), [$asm0E.TypeRef("System.Xml.XPath.XPathDocument/LoadFlags"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupIdElement", 
    $sig.make(0x27B8B, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupNamespaces", 
    $sig.make(0x27B89, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetCollapsedTextNode", 
    $sig.make(0x27B7D, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetRootNode", 
    $sig.make(0x27B84, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetupReader", 
    $sig.make(0x27B8C, $asm0E.TypeRef("System.Xml.XmlTextReaderImpl"), [$asm0E.TypeRef("System.Xml.XmlTextReaderImpl")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetXmlNamespaceNode", 
    $sig.make(0x27B87, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "pageText", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageRoot", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "pageXmlNmsp", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
  $.Field({Static:false, Public:false}, "idxText", $.Int32); 
  $.Field({Static:false, Public:false}, "idxRoot", $.Int32); 
  $.Field({Static:false, Public:false}, "idxXmlNmsp", $.Int32); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "hasLineInfo", $.Boolean); 
  $.Field({Static:false, Public:false}, "mapNmsp", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef"), $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
  $.Field({Static:false, Public:false}, "idValueMap", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0E.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
  $.Property({Static:false, Public:false}, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false}, "HasLineInfo", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"))
});

JSIL.MakeEnum(
  "System.Xml.XPath.XPathDocument/LoadFlags", false, {
    None: 0, 
    AtomizeNames: 1, 
    Fragment: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.SystemException"), "System.Xml.XPath.XPathException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285C5, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285C7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285C8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285C9, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285CE, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285CF, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x285CA, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x285CB, $.Type, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x285CC, $.Type, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x285CD, $.Type, [
        $.String, $.String, 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
    $sig.make(0x285D0, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0x285C4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x285C6, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.Field({Static:false, Public:false}, "res", $.String); 
  $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:false}, "message", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

});

JSIL.MakeEnum(
  "System.Xml.XPath.XmlSortOrder", true, {
    Ascending: 1, 
    Descending: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XPath.XmlCaseOrder", true, {
    None: 0, 
    UpperFirst: 1, 
    LowerFirst: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XPath.XmlDataType", true, {
    Text: 1, 
    Number: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XPath.XPathResultType", true, {
    Number: 0, 
    String: 1, 
    Navigator: 1, 
    Boolean: 2, 
    NodeSet: 3, 
    Any: 5, 
    Error: 6
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB4C1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSort", 
    $sig.make(0xB4C2, null, [$.Object, $asm06.TypeRef("System.Collections.IComparer")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSort", 
    $sig.make(0xB4C3, null, [
        $.Object, $asm0E.TypeRef("System.Xml.XPath.XmlSortOrder"), 
        $asm0E.TypeRef("System.Xml.XPath.XmlCaseOrder"), $.String, 
        $asm0E.TypeRef("System.Xml.XPath.XmlDataType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xB4C4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Compile", 
    $sig.make(0xB4C7, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Compile", 
    $sig.make(0xB4C8, $.Type, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0xB4BF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0xB4C0, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrintQuery", 
    $sig.make(0xB4C9, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetContext", 
    $sig.make(0xB4C5, null, [$asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetContext", 
    $sig.make(0xB4C6, null, [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Expression", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeEnum(
  "System.Xml.XPath.XPathNamespaceScope", true, {
    All: 0, 
    ExcludeXml: 1, 
    Local: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.XPath.XPathNavigatorKeyComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB4D2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEqualityComparer.Equals", 
    $sig.make(0xB4D0, $.Boolean, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEqualityComparer.GetHashCode", 
    $sig.make(0xB4D1, $.Int32, [$.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEqualityComparer"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.XPath.XPathNavigatorReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x286B8, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"), 
        $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x286D0, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x286B7, $.Type, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x286B1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x286AB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x286B4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x286B5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x286B2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x286AF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x286AC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReading", 
    $sig.make(0x286A1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x286A9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceManager", 
    $sig.make(0x286A2, $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x286A8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x286A3, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x286A7, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x286AA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x286B3, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x286A5, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x286A4, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingObject", 
    $sig.make(0x286A0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x286B0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x286A6, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x286AE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x286AD, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x286BF, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x286C0, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x286C2, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElemNav", 
    $sig.make(0x286BC, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElemNav", 
    $sig.make(0x286BD, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNamespaceByIndex", 
    $sig.make(0x286C1, $.String, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x286CE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToAttr", 
    $sig.make(0x286BE, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x286C3, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x286C6, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x286C7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x286C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x286C5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x286CF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x286C9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x286CA, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x286CB, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x286CC, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x286CD, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x286C8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetEOF", 
    $sig.make(0x286D1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.GetNamespacesInScope", 
    $sig.make(0x286B9, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupNamespace", 
    $sig.make(0x286BA, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlNamespaceResolver.LookupPrefix", 
    $sig.make(0x286BB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNodeType", 
    $sig.make(0x286B6, $asm0E.TypeRef("System.Xml.XmlNodeType"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.Constant({Static:true , Public:false}, "space", "space"); 
  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "navToRead", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "depth", $.Int32); 
  $.Field({Static:false, Public:false}, "state", $asm0E.TypeRef("System.Xml.XPath.XPathNavigatorReader/State")); 
  $.Field({Static:false, Public:false}, "nodeType", $asm0E.TypeRef("System.Xml.XmlNodeType")); 
  $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
  $.Field({Static:false, Public:false}, "readEntireDocument", $.Boolean); 
  $.Field({Static:false, Public:false}, "lineInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
  $.Field({Static:false, Public:false}, "readBinaryHelper", $asm0E.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
  $.Field({Static:false, Public:false}, "savedState", $asm0E.TypeRef("System.Xml.XPath.XPathNavigatorReader/State")); 
  $.Field({Static:true , Public:false}, "convertFromXPathNodeType", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNodeType")])); 
  $.Property({Static:false, Public:false}, "UnderlyingObject", $.Object);

  $.Property({Static:false, Public:false}, "IsReading", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeEnum(
  "System.Xml.XPath.XPathNavigatorReader/State", false, {
    Initial: 0, 
    Content: 1, 
    EndElement: 2, 
    Attribute: 3, 
    AttrVal: 4, 
    InReadBinary: 5, 
    EOF: 6, 
    Closed: 7, 
    Error: 8
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNavigatorReader"), "System.Xml.XPath.XPathNavigatorReaderWithSI", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2872C, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"), 
        $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x28726, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNil", 
    $sig.make(0x28727, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
    $sig.make(0x28728, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaAttribute", 
    $sig.make(0x2872B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaElement", 
    $sig.make(0x2872A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0x28729, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Validity", 
    $sig.make(0x28725, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), "System.Xml.XPath.XmlEmptyNavigator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28740, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28753, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComparePosition", 
    $sig.make(0x28751, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x28739, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x2873D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasChildren", 
    $sig.make(0x2873E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x2873B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x28736, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x28737, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x28735, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x2873F, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x28734, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x28738, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Singleton", 
    $sig.make(0x28733, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x2873A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x2873C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x28749, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespace", 
    $sig.make(0x2874B, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsSamePosition", 
    $sig.make(0x28752, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveTo", 
    $sig.make(0x28750, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x2874A, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirst", 
    $sig.make(0x28745, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x28746, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
    $sig.make(0x28741, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
    $sig.make(0x2874D, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToId", 
    $sig.make(0x28748, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNamespace", 
    $sig.make(0x2874C, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
    $sig.make(0x28743, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x28747, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
    $sig.make(0x2874E, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
    $sig.make(0x2874F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToPrevious", 
    $sig.make(0x28744, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToRoot", 
    $sig.make(0x28742, null, [], [])
  );

  $.Field({Static:true , Public:false}, "singleton", $.Type); 
  $.Property({Static:true , Public:true }, "Singleton", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

});

JSIL.MakeEnum(
  "System.Xml.XPath.XPathNodeType", true, {
    Root: 0, 
    Element: 1, 
    Attribute: 2, 
    Namespace: 3, 
    Text: 4, 
    SignificantWhitespace: 5, 
    Whitespace: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    All: 9
  }, false
);

JSIL.DeclareNamespace("MS.Internal.Xml.XPath");
JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.XPath.ResetableIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285AB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285AC, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x285AA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToPosition", 
    $sig.make(0x285AF, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x285AE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResetCount", 
    $sig.make(0x285AD, null, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.Query", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285F7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x285F9, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28608, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AssertDOD", 
    $sig.make(0x28623, null, [
        $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")]), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertQuery", 
    $sig.make(0x2862E, null, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "Clone", 
    $sig.make(0x2860C, $.Type, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:false}, "Clone", 
    $sig.make(0x2860E, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Clone", 
    $sig.make(0x2860F, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CompareNodes", 
    $sig.make(0x2861F, $asm0E.TypeRef("System.Xml.XmlNodeOrder"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28606, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x285EB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x285F5, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x285F3, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XsltDefaultPriority", 
    $sig.make(0x285EC, $.Double, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMedian", 
    $sig.make(0x28613, $.Int32, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXPathType", 
    $sig.make(0x28631, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x28610, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")]), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x2860A, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x285FB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28632, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28603, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Constant({Static:true , Public:true }, "XPathResultType_Navigator", 4); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "XsltDefaultPriority", $.Double);

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.ContextQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2877E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2877F, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28782, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28784, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28781, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2877C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28779, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x2877B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x2877D, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x2877A, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28783, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28780, null, [], [])
  );

  $.Field({Static:false, Public:false}, "contextNode", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ContextQuery"), "MS.Internal.Xml.XPath.AbsoluteQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x287CC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x287CD, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x287D0, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x287CE, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x287CF, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.AstNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2861B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28618, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x28616, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.AstNode/AstType", false, {
    Axis: 0, 
    Operator: 1, 
    Filter: 2, 
    ConstantOperand: 3, 
    Function: 4, 
    Group: 5, 
    Root: 6, 
    Variable: 7, 
    Error: 8
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.BaseAxisQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2879C, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2879D, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2879E, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x287A2, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28799, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28798, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x28793, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
    $sig.make(0x28795, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameTest", 
    $sig.make(0x28796, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
    $sig.make(0x28794, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x2879B, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeTest", 
    $sig.make(0x28797, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XsltDefaultPriority", 
    $sig.make(0x2879A, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "matches", 
    $sig.make(0x287A1, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x287A3, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2879F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x287A0, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "qyInput", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "nameTest", $.Boolean); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "nsUri", $.String); 
  $.Field({Static:false, Public:false}, "typeTest", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")); 
  $.Field({Static:false, Public:false}, "currentNode", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "Prefix", $.String);

  $.Property({Static:false, Public:false}, "Namespace", $.String);

  $.Property({Static:false, Public:false}, "NameTest", $.Boolean);

  $.Property({Static:false, Public:false}, "TypeTest", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "XsltDefaultPriority", $.Double);

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.AttributeQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28823, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28824, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28826, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28828, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28827, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28825, null, [], [])
  );

  $.Field({Static:false, Public:false}, "onAttribute", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Axis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28651, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28652, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AbbrAxis", 
    $sig.make(0x2864E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Input", 
    $sig.make(0x28648, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2864B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x2864C, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x2864A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28647, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x28646, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeOfAxis", 
    $sig.make(0x2864D, $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Urn", 
    $sig.make(0x2864F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Input", 
    $sig.make(0x28649, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Urn", 
    $sig.make(0x28650, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "axisType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType")); 
  $.Field({Static:false, Public:false}, "input", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "nodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")); 
  $.Field({Static:false, Public:false}, "abbrAxis", $.Boolean); 
  $.Field({Static:false, Public:false}, "urn", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "Input", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"));

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"));

  $.Property({Static:false, Public:true }, "TypeOfAxis", $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"));

  $.Property({Static:false, Public:true }, "AbbrAxis", $.Boolean);

  $.Property({Static:false, Public:true }, "Urn", $.String);

});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.Axis/AxisType", false, {
    Ancestor: 0, 
    AncestorOrSelf: 1, 
    Attribute: 2, 
    Child: 3, 
    Descendant: 4, 
    DescendantOrSelf: 5, 
    Following: 6, 
    FollowingSibling: 7, 
    Namespace: 8, 
    Parent: 9, 
    Preceding: 10, 
    PrecedingSibling: 11, 
    Self: 12, 
    None: 13
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.ValueQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28852, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28855, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28859, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28850, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28847, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x2884D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28857, null, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.BooleanExpr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2888B, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), 
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2888C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28890, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x2888F, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x2888A, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28892, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x2888D, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "opnd1", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "opnd2", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "isOr", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.BooleanFunctions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2893C, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2893D, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28945, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x2893F, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x2893B, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Lang", 
    $sig.make(0x28944, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Not", 
    $sig.make(0x28943, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28946, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x2893E, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "toBoolean", 
    $sig.make(0x28940, $.Boolean, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "toBoolean", 
    $sig.make(0x28941, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "toBoolean", 
    $sig.make(0x28942, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.Field({Static:false, Public:false}, "arg", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "funcType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.CacheAxisQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A06, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28A09, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28A15, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28A13, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28A01, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x289FE, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28A00, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28A03, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28A11, null, [], [])
  );

  $.Field({Static:false, Public:false}, "outputBuffer", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.ChildrenQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A76, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28A77, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28A79, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28A7B, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28A7A, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28A78, null, [], [])
  );

  $.Field({Static:false, Public:false}, "iterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ChildrenQuery"), "MS.Internal.Xml.XPath.CacheChildrenQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28AB8, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AB9, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28ABB, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28ABE, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DecideNextNode", 
    $sig.make(0x28ABC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNextInput", 
    $sig.make(0x28ABD, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28ABA, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nextInput", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "elementStk", $asm0E.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])); 
  $.Field({Static:false, Public:false}, "positionStk", $asm0E.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "needInput", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.CacheOutputQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28846, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28848, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28856, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28854, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28844, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28841, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28843, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28845, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28842, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28858, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28849, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x2884B, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "input", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "outputBuffer", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")]), "MS.Internal.Xml.XPath.ClonableStack`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B01, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B03, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B07, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28B18, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Peek", 
    $sig.make(0x28B17, new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Pop", 
    $sig.make(0x28B0C, new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Push", 
    $sig.make(0x28B09, null, [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathExpression"), "MS.Internal.Xml.XPath.CompiledXpathExpr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B38, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSort", 
    $sig.make(0x28B3A, null, [$.Object, $asm06.TypeRef("System.Collections.IComparer")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSort", 
    $sig.make(0x28B3B, null, [
        $.Object, $asm0E.TypeRef("System.Xml.XPath.XmlSortOrder"), 
        $asm0E.TypeRef("System.Xml.XPath.XmlCaseOrder"), $.String, 
        $asm0E.TypeRef("System.Xml.XPath.XmlDataType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CheckErrors", 
    $sig.make(0x28B39, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28B3C, $asm0E.TypeRef("System.Xml.XPath.XPathExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x28B36, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_QueryTree", 
    $sig.make(0x28B35, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28B37, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetContext", 
    $sig.make(0x28B3D, null, [$asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetContext", 
    $sig.make(0x28B3E, null, [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.Field({Static:false, Public:false}, "query", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "expr", $.String); 
  $.Field({Static:false, Public:false}, "needContext", $.Boolean); 
  $.Property({Static:false, Public:false}, "QueryTree", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"));

  $.Property({Static:false, Public:true , Virtual:true }, "Expression", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.DeclareNamespace("System.Xml.Xsl");
JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Xsl.XsltContext", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x286F2, null, [$asm0E.TypeRef("System.Xml.NameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x286F4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x286FF, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareDocument", 
    $sig.make(0x2870A, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Whitespace", 
    $sig.make(0x286EF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PreserveWhitespace", 
    $sig.make(0x28708, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveFunction", 
    $sig.make(0x28705, $asm0E.TypeRef("System.Xml.Xsl.IXsltContextFunction"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveVariable", 
    $sig.make(0x28702, $asm0E.TypeRef("System.Xml.Xsl.IXsltContextVariable"), [$.String, $.String], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Whitespace", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Xsl.XsltContext"), "MS.Internal.Xml.XPath.CompiledXpathExpr/UndefinedXsltContext", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A96A, null, [$asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareDocument", 
    $sig.make(0x2A974, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultNamespace", 
    $sig.make(0x2A966, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Whitespace", 
    $sig.make(0x2A967, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x2A96F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PreserveWhitespace", 
    $sig.make(0x2A972, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveFunction", 
    $sig.make(0x2A971, $asm0E.TypeRef("System.Xml.Xsl.IXsltContextFunction"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveVariable", 
    $sig.make(0x2A970, $asm0E.TypeRef("System.Xml.Xsl.IXsltContextVariable"), [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "nsResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Whitespace", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathComparerHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2878B, null, [
        $asm0E.TypeRef("System.Xml.XPath.XmlSortOrder"), $asm0E.TypeRef("System.Xml.XPath.XmlCaseOrder"), 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XmlDataType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x2878C, $.Int32, [$.Object, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "order", $asm0E.TypeRef("System.Xml.XPath.XmlSortOrder")); 
  $.Field({Static:false, Public:false}, "caseOrder", $asm0E.TypeRef("System.Xml.XPath.XmlCaseOrder")); 
  $.Field({Static:false, Public:false}, "cinfo", $asm06.TypeRef("System.Globalization.CultureInfo")); 
  $.Field({Static:false, Public:false}, "dataType", $asm0E.TypeRef("System.Xml.XPath.XmlDataType")); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.DescendantBaseQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2880B, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2880C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x2880D, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x2880E, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
  $.Field({Static:false, Public:false}, "abbrAxis", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.DescendantBaseQuery"), "MS.Internal.Xml.XPath.DescendantQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2884A, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2884C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x2884F, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28851, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2884E, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nodeIterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.DescendantBaseQuery"), "MS.Internal.Xml.XPath.DescendantOverDescendantQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2888E, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.Boolean, 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28891, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28894, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28899, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToFirstChild", 
    $sig.make(0x28896, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveUpUntillNext", 
    $sig.make(0x28897, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28893, null, [], [])
  );

  $.Field({Static:false, Public:false}, "level", $.Int32); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.DocumentOrderQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28930, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28931, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28934, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28932, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28933, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.EmptyQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28961, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28955, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28956, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28958, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28950, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28954, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x2894F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28952, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28953, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2895A, null, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.ExtensionQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A0E, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28A17, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28A1C, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28A0A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x289FF, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28A04, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_QName", 
    $sig.make(0x28A07, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28A0C, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessResult", 
    $sig.make(0x28A1E, $.Object, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28A1A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "xsltContext", $asm0E.TypeRef("System.Xml.Xsl.XsltContext")); 
  $.Field({Static:false, Public:false}, "queryIterator", $asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:false}, "QName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ExtensionQuery"), "MS.Internal.Xml.XPath.FunctionQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28AC3, null, [
        $.String, $.String, 
        $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AC4, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28ACA, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28AC7, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28AC2, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28AC9, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28ACC, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28AC6, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "args", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")])); 
  $.Field({Static:false, Public:false}, "$function", $asm0E.TypeRef("System.Xml.Xsl.IXsltContextFunction")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Filter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A6D, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Condition", 
    $sig.make(0x28A6B, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Input", 
    $sig.make(0x28A69, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28A68, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x28A67, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.Field({Static:false, Public:false}, "input", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
  $.Field({Static:false, Public:false}, "condition", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "Input", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"));

  $.Property({Static:false, Public:true }, "Condition", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.FilterQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B66, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B67, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28B6C, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28B71, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EvaluatePredicate", 
    $sig.make(0x28B6E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Condition", 
    $sig.make(0x28B64, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28B65, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28B6F, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28B73, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28B69, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28B6B, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "cond", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "noPosition", $.Boolean); 
  $.Property({Static:false, Public:true }, "Condition", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"));

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.FollowingQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C74, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28C75, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28C77, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28C78, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28C76, null, [], [])
  );

  $.Field({Static:false, Public:false}, "input", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "iterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.FollSiblingQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28CDC, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28CDE, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28CE3, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28CE4, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FetchInput", 
    $sig.make(0x28CE2, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28CE0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Visited", 
    $sig.make(0x28CE1, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.Field({Static:false, Public:false}, "elementStk", $asm0E.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])); 
  $.Field({Static:false, Public:false}, "parentStk", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])); 
  $.Field({Static:false, Public:false}, "nextInput", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.ForwardPositionQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28AE4, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AE5, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28AE8, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28AE6, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28AE7, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Function", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28963, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28966, null, [
        $.String, $.String, 
        $asm06.TypeRef("System.Collections.ArrayList")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28968, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2896A, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ArgumentList", 
    $sig.make(0x28957, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2895C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x28959, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x2894E, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x2894D, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeOfFunction", 
    $sig.make(0x28951, $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), [], [])
  );

  $.Field({Static:false, Public:false}, "functionType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
  $.Field({Static:false, Public:false}, "argumentList", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:true , Public:false}, "ReturnTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "TypeOfFunction", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"));

  $.Property({Static:false, Public:true }, "ArgumentList", $asm06.TypeRef("System.Collections.ArrayList"));

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.Function/FunctionType", false, {
    FuncLast: 0, 
    FuncPosition: 1, 
    FuncCount: 2, 
    FuncID: 3, 
    FuncLocalName: 4, 
    FuncNameSpaceUri: 5, 
    FuncName: 6, 
    FuncString: 7, 
    FuncBoolean: 8, 
    FuncNumber: 9, 
    FuncTrue: 10, 
    FuncFalse: 11, 
    FuncNot: 12, 
    FuncConcat: 13, 
    FuncStartsWith: 14, 
    FuncContains: 15, 
    FuncSubstringBefore: 16, 
    FuncSubstringAfter: 17, 
    FuncSubstring: 18, 
    FuncStringLength: 19, 
    FuncNormalize: 20, 
    FuncTranslate: 21, 
    FuncLang: 22, 
    FuncSum: 23, 
    FuncFloor: 24, 
    FuncCeiling: 25, 
    FuncRound: 26, 
    FuncUserDefined: 27
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Group", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D2D, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GroupNode", 
    $sig.make(0x28D2C, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28D2B, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x28D2A, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.Field({Static:false, Public:false}, "groupNode", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "GroupNode", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.GroupQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28817, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28818, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28819, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2881B, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x2881A, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28816, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28815, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.IDQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28900, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28901, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28905, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28902, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28904, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessIds", 
    $sig.make(0x28903, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.String], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.XPath.IteratorFilter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2895E, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2895F, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28960, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x2895B, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x2895D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28962, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "innerIterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.QueryProps", false, {
    None: 0, 
    Position: 1, 
    Count: 2, 
    Cached: 4, 
    Reverse: 8, 
    Merge: 16
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.LogicalExpr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x289B5, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), 
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x289B6, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x289DC, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolE", 
    $sig.make(0x289C2, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolE", 
    $sig.make(0x289C3, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolO", 
    $sig.make(0x289C4, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolNumberE", 
    $sig.make(0x289C5, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolNumberO", 
    $sig.make(0x289C6, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolStringE", 
    $sig.make(0x289C7, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpBoolStringO", 
    $sig.make(0x289CA, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumber", 
    $sig.make(0x289CD, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Double, 
        $.Double
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumber", 
    $sig.make(0x289D1, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumberO", 
    $sig.make(0x289CF, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Double, 
        $.Double
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryBoolE", 
    $sig.make(0x289C0, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryBoolO", 
    $sig.make(0x289C1, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryNumber", 
    $sig.make(0x289BB, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryQueryE", 
    $sig.make(0x289B9, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryQueryO", 
    $sig.make(0x289BA, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryStringE", 
    $sig.make(0x289BC, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpQueryStringO", 
    $sig.make(0x289BD, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfBoolE", 
    $sig.make(0x289C8, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfBoolO", 
    $sig.make(0x289CC, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfNumber", 
    $sig.make(0x289D3, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfQueryE", 
    $sig.make(0x289BE, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfQueryO", 
    $sig.make(0x289BF, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfRtfE", 
    $sig.make(0x289D7, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfRtfO", 
    $sig.make(0x289DB, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfStringE", 
    $sig.make(0x289D6, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpRtfStringO", 
    $sig.make(0x289D9, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpStringNumber", 
    $sig.make(0x289D2, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpStringStringE", 
    $sig.make(0x289D4, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpStringStringE", 
    $sig.make(0x289D5, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "cmpStringStringO", 
    $sig.make(0x289D8, $.Boolean, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x289B8, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x289B4, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x289DF, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Rtf", 
    $sig.make(0x289DD, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x289B7, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "op", $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op")); 
  $.Field({Static:false, Public:false}, "opnd1", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "opnd2", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CompXsltE", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.XPath.LogicalExpr/cmpXslt")])])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CompXsltO", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.XPath.LogicalExpr/cmpXslt")])])); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeDelegate("MS.Internal.Xml.XPath.LogicalExpr/cmpXslt", false, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "MS.Internal.Xml.XPath.LogicalExpr/NodeSet", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A820, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x2A81F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x2A823, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2A824, null, [], [])
  );

  $.Field({Static:false, Public:false}, "opnd", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Property({Static:false, Public:true }, "Value", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.MergeFilterQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A82, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28A83, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28A88, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28A85, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28A87, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28A8A, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28A84, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "child", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.NamespaceQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28AD3, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AD4, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28AD7, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28ADB, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "matches", 
    $sig.make(0x28AD9, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28AD5, null, [], [])
  );

  $.Field({Static:false, Public:false}, "onNamespace", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.NodeFunctions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B22, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28B26, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28B25, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EvaluateArg", 
    $sig.make(0x28B24, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28B21, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28B27, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28B23, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "arg", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "funcType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
  $.Field({Static:false, Public:false}, "xsltContext", $asm0E.TypeRef("System.Xml.Xsl.XsltContext")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.NumberFunctions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B46, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B47, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Ceiling", 
    $sig.make(0x28B4F, $.Double, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28B51, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28B4B, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Floor", 
    $sig.make(0x28B4E, $.Double, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28B45, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Number", 
    $sig.make(0x28B49, $.Double, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Number", 
    $sig.make(0x28B4A, $.Double, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Number", 
    $sig.make(0x28B4C, $.Double, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28B52, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Round", 
    $sig.make(0x28B50, $.Double, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28B48, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Sum", 
    $sig.make(0x28B4D, $.Double, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.Field({Static:false, Public:false}, "arg", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "ftype", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.NumericExpr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B9C, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), 
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B9F, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28BA7, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28BA3, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28B9A, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetValue", 
    $sig.make(0x28BA5, $.Double, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Double, 
        $.Double
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28BA9, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28BA1, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "op", $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op")); 
  $.Field({Static:false, Public:false}, "opnd1", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "opnd2", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Operand", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C23, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C25, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C29, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OperandValue", 
    $sig.make(0x28C22, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28C21, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x28C1F, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.XPath.XPathResultType")); 
  $.Field({Static:false, Public:false}, "val", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "OperandValue", $.Object);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.OperandQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D20, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28D22, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28D21, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28D1F, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28D23, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "val", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Operator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x288C8, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
        $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Operand1", 
    $sig.make(0x288C5, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Operand2", 
    $sig.make(0x288C6, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OperatorType", 
    $sig.make(0x288C4, $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x288C3, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x288C2, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "InvertOperator", 
    $sig.make(0x288C7, $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op")], [])
  );

  $.Field({Static:true , Public:false}, "invertOp", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op")])); 
  $.Field({Static:false, Public:false}, "opType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op")); 
  $.Field({Static:false, Public:false}, "opnd1", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
  $.Field({Static:false, Public:false}, "opnd2", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "OperatorType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Operator/Op"));

  $.Property({Static:false, Public:true }, "Operand1", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"));

  $.Property({Static:false, Public:true }, "Operand2", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"));

});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.Operator/Op", false, {
    INVALID: 0, 
    OR: 1, 
    AND: 2, 
    EQ: 3, 
    NE: 4, 
    LT: 5, 
    LE: 6, 
    GT: 7, 
    GE: 8, 
    PLUS: 9, 
    MINUS: 10, 
    MUL: 11, 
    DIV: 12, 
    MOD: 13, 
    UNION: 14
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), "MS.Internal.Xml.XPath.ParentQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D3F, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28D41, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28D44, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28D42, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.PrecedingQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28DCB, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28DCC, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28DCE, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28DCF, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28DCA, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28DCD, null, [], [])
  );

  $.Field({Static:false, Public:false}, "workIterator", $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
  $.Field({Static:false, Public:false}, "ancestorStk", $asm0E.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), "MS.Internal.Xml.XPath.PreSiblingQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28E21, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E24, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28E35, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28E34, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28E1E, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NotVisited", 
    $sig.make(0x28E32, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")])], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.QueryBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28883, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Build", 
    $sig.make(0x2887E, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Build", 
    $sig.make(0x2887F, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Build", 
    $sig.make(0x28880, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildPatternQuery", 
    $sig.make(0x28881, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildPatternQuery", 
    $sig.make(0x28882, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanBeNumber", 
    $sig.make(0x28877, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessArguments", 
    $sig.make(0x2887C, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")]), [$asm06.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAxis", 
    $sig.make(0x28876, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis"), $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Flags"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessFilter", 
    $sig.make(0x28878, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Filter"), $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Flags"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessFunction", 
    $sig.make(0x2887B, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessNode", 
    $sig.make(0x2887D, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Flags"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessOperator", 
    $sig.make(0x28879, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.Operator"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessVariable", 
    $sig.make(0x2887A, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.Variable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x28875, null, [], [])
  );

  $.Field({Static:false, Public:false}, "query", $.String); 
  $.Field({Static:false, Public:false}, "allowVar", $.Boolean); 
  $.Field({Static:false, Public:false}, "allowKey", $.Boolean); 
  $.Field({Static:false, Public:false}, "allowCurrent", $.Boolean); 
  $.Field({Static:false, Public:false}, "needContext", $.Boolean); 
  $.Field({Static:false, Public:false}, "firstInput", $asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery")); 
});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.QueryBuilder/Flags", false, {
    None: 0, 
    SmartDesc: 1, 
    PosFilter: 2, 
    Filter: 4
  }, false
);

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.QueryBuilder/Props", false, {
    None: 0, 
    PosFilter: 1, 
    HasPosition: 2, 
    HasLast: 4, 
    NonFlat: 8
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.UnionExpr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28AA2, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AA4, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28AAE, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28AB0, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28AA9, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28A9E, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28AA0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28A9D, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MatchNode", 
    $sig.make(0x28AAF, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28AB1, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAfterPosition", 
    $sig.make(0x28AAD, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessBeforePosition", 
    $sig.make(0x28AAC, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessSamePosition", 
    $sig.make(0x28AAB, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28AA6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28AA8, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "qy1", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "qy2", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "advance1", $.Boolean); 
  $.Field({Static:false, Public:false}, "advance2", $.Boolean); 
  $.Field({Static:false, Public:false}, "currentNode", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "nextNode", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ForwardPositionQuery"), "MS.Internal.Xml.XPath.ReversePositionQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B04, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B05, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28B06, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28AFD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28B02, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Root", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C07, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x28C06, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x28C05, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.SortQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C42, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28C43, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSort", 
    $sig.make(0x28C4A, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $asm06.TypeRef("System.Collections.IComparer")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28C49, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildResultsList", 
    $sig.make(0x28C47, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28C4B, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28C48, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28C40, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28C3C, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28C3F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x28C41, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28C3E, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28C4C, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28C45, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28C46, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "results", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.SortKey")])); 
  $.Field({Static:false, Public:false}, "comparer", $asm0E.TypeRef("MS.Internal.Xml.XPath.XPathSortComparer")); 
  $.Field({Static:false, Public:false}, "qyInput", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.SortKey", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D57, null, [
        $.Int32, $.Int32, 
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x28D52, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Node", 
    $sig.make(0x28D56, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NumKeys", 
    $sig.make(0x28D54, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OriginalPosition", 
    $sig.make(0x28D55, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x28D53, null, [$.Int32, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "numKeys", $.Int32); 
  $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false}, "originalPosition", $.Int32); 
  $.Field({Static:false, Public:false}, "node", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Property({Static:false, Public:true }, "Item", $.Object);

  $.Property({Static:false, Public:true }, "NumKeys", $.Int32);

  $.Property({Static:false, Public:true }, "OriginalPosition", $.Int32);

  $.Property({Static:false, Public:true }, "Node", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathSortComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28CDA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28CDB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSort", 
    $sig.make(0x28CDD, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $asm06.TypeRef("System.Collections.IComparer")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x28CE7, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Expression", 
    $sig.make(0x28CDF, $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NumSorts", 
    $sig.make(0x28CD9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IComparer`1.Compare", 
    $sig.make(0x28CE6, $.Int32, [$asm0E.TypeRef("MS.Internal.Xml.XPath.SortKey"), $asm0E.TypeRef("MS.Internal.Xml.XPath.SortKey")], [])
  );

  $.Constant({Static:true , Public:false}, "minSize", 3); 
  $.Field({Static:false, Public:false}, "expressions", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")])); 
  $.Field({Static:false, Public:false}, "comparers", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Collections.IComparer")])); 
  $.Field({Static:false, Public:false}, "numSorts", $.Int32); 
  $.Property({Static:false, Public:true }, "NumSorts", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IComparer`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.SortKey")]))
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.StringFunctions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28EAE, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28EAF, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28EBE, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Concat", 
    $sig.make(0x28EB5, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Contains", 
    $sig.make(0x28EB7, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28EB1, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28EAD, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Normalize", 
    $sig.make(0x28EBC, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28EBF, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28EB0, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartsWith", 
    $sig.make(0x28EB6, $.Boolean, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StringLength", 
    $sig.make(0x28EBB, $.Double, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Substring", 
    $sig.make(0x28EBA, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SubstringAfter", 
    $sig.make(0x28EB9, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SubstringBefore", 
    $sig.make(0x28EB8, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "toString", 
    $sig.make(0x28EB2, $.String, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "toString", 
    $sig.make(0x28EB3, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "toString", 
    $sig.make(0x28EB4, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Translate", 
    $sig.make(0x28EBD, $.String, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.Field({Static:false, Public:false}, "funcType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
  $.Field({Static:false, Public:false}, "argList", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm0E.TypeRef("MS.Internal.Xml.XPath.Query")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "compareInfo", $asm06.TypeRef("System.Globalization.CompareInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Variable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x288D4, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Localname", 
    $sig.make(0x288D2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x288D3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x288D0, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x288CE, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
  );

  $.Field({Static:false, Public:false}, "localname", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

  $.Property({Static:false, Public:true }, "Localname", $.String);

  $.Property({Static:false, Public:true }, "Prefix", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ExtensionQuery"), "MS.Internal.Xml.XPath.VariableQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F35, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28F36, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28F39, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x28F38, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StaticType", 
    $sig.make(0x28F34, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x28F3A, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetXsltContext", 
    $sig.make(0x28F37, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], [])
  );

  $.Field({Static:false, Public:false}, "variable", $asm0E.TypeRef("System.Xml.Xsl.IXsltContextVariable")); 
  $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm0E.TypeRef("System.Xml.XPath.XPathResultType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.XPath.XPathAxisIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28FF8, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28FF9, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28FFA, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28FFB, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28FF5, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28FF6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Matches", 
    $sig.make(0x28FF7, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "uri", $.String); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
  $.Field({Static:false, Public:false}, "first", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "Matches", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), "MS.Internal.Xml.XPath.XPathAncestorIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29024, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29028, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2902A, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2902D, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x2902C, $.Boolean, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), "MS.Internal.Xml.XPath.XPathAncestorQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x290AA, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x290AB, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x290AD, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0x290AC, $.Object, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x290A8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x290A9, $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PrintQuery", 
    $sig.make(0x290AE, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm0E.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathArrayIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29150, null, [$asm06.TypeRef("System.Collections.IList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29151, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29152, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x29153, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AsList", 
    $sig.make(0x2914B, $asm06.TypeRef("System.Collections.IList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2914E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x2914C, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x2914D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
    $sig.make(0x2914F, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x29156, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x29154, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x29155, null, [], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm06.TypeRef("System.Collections.IList")); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
  $.Property({Static:false, Public:true }, "AsList", $asm06.TypeRef("System.Collections.IList"));

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Position={CurrentPosition}, Current={debuggerDisplayProxy, nq}"]; });

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), "MS.Internal.Xml.XPath.XPathChildIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291F2, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291F3, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291F4, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x291F5, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x291F6, $.Boolean, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), "MS.Internal.Xml.XPath.XPathDescendantIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2921F, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XPath.XPathNodeType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29220, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29221, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x29222, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x29223, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "level", $.Int32); 
});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathEmptyIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28BF9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28BFA, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28BF8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28BF6, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28BF7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28BFB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28BFC, null, [], [])
  );

  $.Field({Static:true , Public:true }, "Instance", $.Type); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathMultyIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C64, null, [$asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C69, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Advance", 
    $sig.make(0x28C66, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28C6A, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28C62, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28C63, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x28C65, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28C6B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28C68, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SiftItem", 
    $sig.make(0x28C67, $.Boolean, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "arr", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator")])); 
  $.Field({Static:false, Public:false}, "firstNotEmpty", $.Int32); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathParser", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28CF3, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckNodeSet", 
    $sig.make(0x28D14, null, [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckToken", 
    $sig.make(0x28D10, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateAxesTable", 
    $sig.make(0x28D16, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateFunctionTable", 
    $sig.make(0x28D15, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAxis", 
    $sig.make(0x28D17, $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNodeType", 
    $sig.make(0x28CFF, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsPrimaryExpr", 
    $sig.make(0x28D08, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsStep", 
    $sig.make(0x28D05, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextLex", 
    $sig.make(0x28D12, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAdditiveExpr", 
    $sig.make(0x28CFB, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAndExpr", 
    $sig.make(0x28CF8, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseEqualityExpr", 
    $sig.make(0x28CF9, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseExpresion", 
    $sig.make(0x28CF6, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseFilterExpr", 
    $sig.make(0x28D01, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseIdKeyPattern", 
    $sig.make(0x28D0D, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseLocationPath", 
    $sig.make(0x28D03, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseLocationPathPattern", 
    $sig.make(0x28D0C, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseMethod", 
    $sig.make(0x28D0A, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseMultiplicativeExpr", 
    $sig.make(0x28CFC, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseNodeTest", 
    $sig.make(0x28D07, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), 
        $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseOrExpr", 
    $sig.make(0x28CF7, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePathExpr", 
    $sig.make(0x28D00, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePattern", 
    $sig.make(0x28D0B, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePredicate", 
    $sig.make(0x28D02, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePrimaryExpr", 
    $sig.make(0x28D09, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseRelationalExpr", 
    $sig.make(0x28CFA, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseRelativeLocationPath", 
    $sig.make(0x28D04, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseRelativePathPattern", 
    $sig.make(0x28D0E, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseStep", 
    $sig.make(0x28D06, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseStepPattern", 
    $sig.make(0x28D0F, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseUnaryExpr", 
    $sig.make(0x28CFD, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseUnionExpr", 
    $sig.make(0x28CFE, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ParseXPathExpresion", 
    $sig.make(0x28CF4, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ParseXPathPattern", 
    $sig.make(0x28CF5, $asm0E.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PassToken", 
    $sig.make(0x28D11, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TestOp", 
    $sig.make(0x28D13, $.Boolean, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "scanner", $asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray1", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")]), function ($pi) {
      return JSIL.Array.New($asm0E.System.Xml.XPath.XPathResultType, 0);
    }); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray2", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray3", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray4", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray5", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray6", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray7", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray8", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "temparray9", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Field({Static:true , Public:false}, "functionTable", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "AxesTable", $asm06.TypeRef("System.Collections.Hashtable")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathParser/ParamInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A9C3, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ArgTypes", 
    $sig.make(0x2A9C2, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FType", 
    $sig.make(0x2A9BF, $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Maxargs", 
    $sig.make(0x2A9C1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Minargs", 
    $sig.make(0x2A9C0, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "ftype", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
  $.Field({Static:false, Public:false}, "minargs", $.Int32); 
  $.Field({Static:false, Public:false}, "maxargs", $.Int32); 
  $.Field({Static:false, Public:false}, "argTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")])); 
  $.Property({Static:false, Public:true }, "FType", $asm0E.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"));

  $.Property({Static:false, Public:true }, "Minargs", $.Int32);

  $.Property({Static:false, Public:true }, "Maxargs", $.Int32);

  $.Property({Static:false, Public:true }, "ArgTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathScanner", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28DDE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanBeFunction", 
    $sig.make(0x28DDD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurerntChar", 
    $sig.make(0x28DD7, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x28DD8, $asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x28DD9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NumberValue", 
    $sig.make(0x28DDC, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x28DDA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceText", 
    $sig.make(0x28DD6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StringValue", 
    $sig.make(0x28DDB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextChar", 
    $sig.make(0x28DDF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextLex", 
    $sig.make(0x28DE1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanFraction", 
    $sig.make(0x28DE3, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanName", 
    $sig.make(0x28DE5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanNumber", 
    $sig.make(0x28DE2, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanString", 
    $sig.make(0x28DE4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SkipSpace", 
    $sig.make(0x28DE0, null, [], [])
  );

  $.Field({Static:false, Public:false}, "xpathExpr", $.String); 
  $.Field({Static:false, Public:false}, "xpathExprIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "kind", $asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")); 
  $.Field({Static:false, Public:false}, "currentChar", $.Char); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "stringValue", $.String); 
  $.Field({Static:false, Public:false}, "numberValue", $.Double); 
  $.Field({Static:false, Public:false}, "canBeFunction", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Property({Static:false, Public:true }, "SourceText", $.String);

  $.Property({Static:false, Public:false}, "CurerntChar", $.Char);

  $.Property({Static:false, Public:true }, "Kind", $asm0E.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true }, "StringValue", $.String);

  $.Property({Static:false, Public:true }, "NumberValue", $.Double);

  $.Property({Static:false, Public:true }, "CanBeFunction", $.Boolean);

});

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.XPathScanner/LexKind", false, {
    Bang: 33, 
    Quote: 34, 
    Dollar: 36, 
    Apos: 39, 
    LParens: 40, 
    RParens: 41, 
    Star: 42, 
    Plus: 43, 
    Comma: 44, 
    Minus: 45, 
    Dot: 46, 
    Slash: 47, 
    Lt: 60, 
    Eq: 61, 
    Gt: 62, 
    At: 64, 
    And: 65, 
    DotDot: 68, 
    Eof: 69, 
    Ge: 71, 
    Le: 76, 
    Ne: 78, 
    Or: 79, 
    SlashSlash: 83, 
    LBracket: 91, 
    RBracket: 93, 
    Axe: 97, 
    Number: 100, 
    Name: 110, 
    String: 115, 
    Union: 124
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathSelectionIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E38, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E3C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28E45, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28E26, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28E2A, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28E36, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28E42, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28E3E, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "query", $asm0E.TypeRef("MS.Internal.Xml.XPath.Query")); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.XPathSelfQuery", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28EFE, null, [
        $asm0E.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XPath.XPathNodeType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28EFF, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Advance", 
    $sig.make(0x28F00, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28F01, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathSingletonIterator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F0B, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F0C, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F0D, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28F0F, $asm0E.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28F0A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x28F08, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentPosition", 
    $sig.make(0x28F09, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x28F11, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x28F12, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nav", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")); 
  $.Field({Static:false, Public:false}, "position", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"));

  $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Xsl.XslCompiledTransform", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29053, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29054, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckArguments", 
    $sig.make(0x29072, null, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckArguments", 
    $sig.make(0x29073, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckCommand", 
    $sig.make(0x29074, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileQilToMsil", 
    $sig.make(0x2905F, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltSettings")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CompileToType", 
    $sig.make(0x29060, $asm07.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"), [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver"), $.Boolean, 
        $asm06.TypeRef("System.Reflection.Emit.TypeBuilder"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileXsltToQil", 
    $sig.make(0x2905D, null, [
        $.Object, $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
    $sig.make(0x2904F, $asm07.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OutputSettings", 
    $sig.make(0x29050, $asm0E.TypeRef("System.Xml.XmlWriterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TemporaryFiles", 
    $sig.make(0x29051, $asm07.TypeRef("System.CodeDom.Compiler.TempFileCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFirstError", 
    $sig.make(0x2905E, $asm07.TypeRef("System.CodeDom.Compiler.CompilerError"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x29056, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x29057, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x29058, null, [$asm0E.TypeRef("System.Xml.XPath.IXPathNavigable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x29059, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2905A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2905B, null, [
        $.String, $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x29061, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x29062, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadInternal", 
    $sig.make(0x2905C, $asm07.TypeRef("System.CodeDom.Compiler.CompilerResults"), [
        $.Object, $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PrintQil", 
    $sig.make(0x29078, null, [
        $.Object, $asm0E.TypeRef("System.Xml.XmlWriter"), 
        $.Boolean, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x29055, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TestCompile", 
    $sig.make(0x29075, $asm10.TypeRef("System.Xml.Xsl.Qil.QilExpression"), [
        $.Object, $asm0E.TypeRef("System.Xml.Xsl.XsltSettings"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TestGenerate", 
    $sig.make(0x29076, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29063, null, [$asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29064, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29065, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29066, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29067, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29068, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29069, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2906A, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2906B, null, [$.String, $asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2906C, null, [
        $.String, $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2906D, null, [
        $.String, $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2906E, null, [
        $.String, $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2906F, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29070, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x29071, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Transform", 
    $sig.make(0x29077, null, [
        $.String, $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ReaderSettings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"), null); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MemberAccessPermissionSet", $asm06.TypeRef("System.Security.PermissionSet")); 
  $.Field({Static:false, Public:false}, "enableDebug", $.Boolean); 
  $.Field({Static:false, Public:false}, "compilerResults", $asm07.TypeRef("System.CodeDom.Compiler.CompilerResults")); 
  $.Field({Static:false, Public:false}, "outputSettings", $asm0E.TypeRef("System.Xml.XmlWriterSettings")); 
  $.Field({Static:false, Public:false}, "qil", $asm10.TypeRef("System.Xml.Xsl.Qil.QilExpression")); 
  $.Field({Static:false, Public:false}, "command", $asm10.TypeRef("System.Xml.Xsl.XmlILCommand")); 
  $.Field({Static:true , Public:false}, "GeneratedCodeCtor", $asm06.TypeRef("System.Reflection.ConstructorInfo")); 
  $.Property({Static:false, Public:false}, "Errors", $asm07.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"));

  $.Property({Static:false, Public:true }, "OutputSettings", $asm0E.TypeRef("System.Xml.XmlWriterSettings"));

  $.Property({Static:false, Public:true }, "TemporaryFiles", $asm07.TypeRef("System.CodeDom.Compiler.TempFileCollection"));

});

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.Xsl.XsltMessageEncounteredEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F4F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0x29F4C, $.String, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

});

JSIL.MakeDelegate("System.Xml.Xsl.XsltMessageEncounteredEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Xsl.XsltArgumentList", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291A2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_XsltMessageEncountered", 
    $sig.make(0x291A0, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddExtensionObject", 
    $sig.make(0x291A6, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddParam", 
    $sig.make(0x291A5, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckArgumentNull", 
    $sig.make(0x291AA, null, [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x291A9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetExtensionObject", 
    $sig.make(0x291A4, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetParam", 
    $sig.make(0x291A3, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_XsltMessageEncountered", 
    $sig.make(0x291A1, null, [$asm0E.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveExtensionObject", 
    $sig.make(0x291A8, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveParam", 
    $sig.make(0x291A7, $.Object, [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "parameters", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "extensions", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "xsltMessageEncountered", $asm0E.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler")); 
});

JSIL.MakeInterface(
  "System.Xml.Xsl.IXsltContextFunction", true, [], function ($) {
    $.Method({}, "get_Minargs", $sig.make(0x2876A, $.Int32, [], []));
    $.Method({}, "get_Maxargs", $sig.make(0x2876B, $.Int32, [], []));
    $.Method({}, "get_ReturnType", $sig.make(0x2876C, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], []));
    $.Method({}, "get_ArgTypes", $sig.make(0x2876D, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XPath.XPathResultType")]), [], []));
    $.Method({}, "Invoke", $sig.make(0x2876E, $.Object, [
          $asm0E.TypeRef("System.Xml.Xsl.XsltContext"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm0E.TypeRef("System.Xml.XPath.XPathNavigator")
        ], []));
    $.Property({}, "Minargs");
    $.Property({}, "Maxargs");
    $.Property({}, "ReturnType");
    $.Property({}, "ArgTypes");
  }, []);

JSIL.MakeInterface(
  "System.Xml.Xsl.IXsltContextVariable", true, [], function ($) {
    $.Method({}, "get_IsLocal", $sig.make(0x28771, $.Boolean, [], []));
    $.Method({}, "get_IsParam", $sig.make(0x28774, $.Boolean, [], []));
    $.Method({}, "get_VariableType", $sig.make(0x28776, $asm0E.TypeRef("System.Xml.XPath.XPathResultType"), [], []));
    $.Method({}, "Evaluate", $sig.make(0x28778, $.Object, [$asm0E.TypeRef("System.Xml.Xsl.XsltContext")], []));
    $.Property({}, "IsLocal");
    $.Property({}, "IsParam");
    $.Property({}, "VariableType");
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.SystemException"), "System.Xml.Xsl.XsltException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A301, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A303, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A304, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A305, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A308, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x2A306, $.Type, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x2A307, $.Type, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
    $sig.make(0x2A309, $.String, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FormatMessage", 
    $sig.make(0x2A30A, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x2A2FE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x2A2FF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0x2A300, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
    $sig.make(0x2A2FD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x2A302, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.Field({Static:false, Public:false}, "res", $.String); 
  $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:false}, "sourceUri", $.String); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Field({Static:false, Public:false}, "message", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "SourceUri", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Xsl.XsltException"), "System.Xml.Xsl.XsltCompileException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A311, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A313, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A314, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A315, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A316, null, [
        $asm06.TypeRef("System.Exception"), $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x2A312, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Xsl.XslTransform", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A31F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A33F, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckCommand", 
    $sig.make(0x2A32B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compile", 
    $sig.make(0x2A33E, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Debugger", 
    $sig.make(0x2A31E, $asm10.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A320, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A321, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A322, null, [$asm0E.TypeRef("System.Xml.XPath.IXPathNavigable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A323, null, [$asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A324, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A325, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A326, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A327, null, [$.String, $asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A328, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A329, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x2A32A, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0x2A31D, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A32C, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A32D, $asm0E.TypeRef("System.Xml.XmlReader"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A32E, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A32F, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A330, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A331, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A332, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A333, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A334, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A335, $asm0E.TypeRef("System.Xml.XmlReader"), [$asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A336, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A337, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.TextWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A338, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A339, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm06.TypeRef("System.IO.Stream")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A33A, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A33B, null, [
        $asm0E.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm0E.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
        $asm0E.TypeRef("System.Xml.XmlWriter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A33C, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x2A33D, null, [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "_XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "_CompiledStylesheet", $asm10.TypeRef("System.Xml.Xsl.XsltOld.Stylesheet")); 
  $.Field({Static:false, Public:false}, "_QueryStore", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm10.TypeRef("System.Xml.Xsl.XsltOld.TheQuery")])); 
  $.Field({Static:false, Public:false}, "_RootAction", $asm10.TypeRef("System.Xml.Xsl.XsltOld.RootAction")); 
  $.Field({Static:false, Public:false}, "$debugger", $asm10.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger")); 
  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:false}, "Debugger", $asm10.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"));

})
  .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Xsl.XslTransform/DebuggerAddapter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A85A, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBuiltInTemplatesUri", 
    $sig.make(0x2A85B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnInstructionCompile", 
    $sig.make(0x2A85C, null, [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnInstructionExecute", 
    $sig.make(0x2A85D, null, [$asm10.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor")], [])
  );

  $.Field({Static:false, Public:false}, "unknownDebugger", $.Object); 
  $.Field({Static:false, Public:false}, "getBltIn", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "onCompile", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "onExecute", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.ImplementInterfaces($asm10.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Xsl.XsltSettings", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D7A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D7C, null, [$.Boolean, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CheckOnly", 
    $sig.make(0x28D66, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Default", 
    $sig.make(0x28D58, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EnableDocumentFunction", 
    $sig.make(0x28D5E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EnableScript", 
    $sig.make(0x28D62, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IncludeDebugInformation", 
    $sig.make(0x28D6A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TempFiles", 
    $sig.make(0x28D76, $asm07.TypeRef("System.CodeDom.Compiler.TempFileCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TreatWarningsAsErrors", 
    $sig.make(0x28D72, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_TrustedXslt", 
    $sig.make(0x28D59, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_WarningLevel", 
    $sig.make(0x28D6E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CheckOnly", 
    $sig.make(0x28D68, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EnableDocumentFunction", 
    $sig.make(0x28D60, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EnableScript", 
    $sig.make(0x28D64, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IncludeDebugInformation", 
    $sig.make(0x28D6D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TempFiles", 
    $sig.make(0x28D77, null, [$asm07.TypeRef("System.CodeDom.Compiler.TempFileCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TreatWarningsAsErrors", 
    $sig.make(0x28D74, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_WarningLevel", 
    $sig.make(0x28D70, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "enableDocumentFunction", $.Boolean); 
  $.Field({Static:false, Public:false}, "enableScript", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkOnly", $.Boolean); 
  $.Field({Static:false, Public:false}, "includeDebugInformation", $.Boolean); 
  $.Field({Static:false, Public:false}, "warningLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "treatWarningsAsErrors", $.Boolean); 
  $.Field({Static:false, Public:false}, "tempFiles", $asm07.TypeRef("System.CodeDom.Compiler.TempFileCollection")); 
  $.Property({Static:true , Public:true }, "Default", $.Type);

  $.Property({Static:true , Public:true }, "TrustedXslt", $.Type);

  $.Property({Static:false, Public:true }, "EnableDocumentFunction", $.Boolean);

  $.Property({Static:false, Public:true }, "EnableScript", $.Boolean);

  $.Property({Static:false, Public:false}, "CheckOnly", $.Boolean);

  $.Property({Static:false, Public:false}, "IncludeDebugInformation", $.Boolean);

  $.Property({Static:false, Public:false}, "WarningLevel", $.Int32);

  $.Property({Static:false, Public:false}, "TreatWarningsAsErrors", $.Boolean);

  $.Property({Static:false, Public:false}, "TempFiles", $asm07.TypeRef("System.CodeDom.Compiler.TempFileCollection"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.AxisElement", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28DED, null, [$asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurNode", 
    $sig.make(0x28DEC, $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToChild", 
    $sig.make(0x28DF0, $.Boolean, [
        $.String, $.String, 
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.ForwardAxis")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
    $sig.make(0x28DEF, null, [$.Int32, $asm0E.TypeRef("System.Xml.Schema.ForwardAxis")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDepth", 
    $sig.make(0x28DEE, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "curNode", $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis")); 
  $.Field({Static:false, Public:false}, "rootDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "curDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "isMatch", $.Boolean); 
  $.Property({Static:false, Public:false}, "CurNode", $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.AxisStack", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F62, null, [$asm0E.TypeRef("System.Xml.Schema.ForwardAxis"), $asm0E.TypeRef("System.Xml.Schema.ActiveAxis")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Equal", 
    $sig.make(0x28F67, $.Boolean, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Length", 
    $sig.make(0x28F61, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Subtree", 
    $sig.make(0x28F60, $asm0E.TypeRef("System.Xml.Schema.ForwardAxis"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
    $sig.make(0x28F6C, $.Boolean, [
        $.String, $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToChild", 
    $sig.make(0x28F6A, $.Boolean, [
        $.String, $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
    $sig.make(0x28F68, null, [
        $.String, $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x28F65, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x28F63, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "stack", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "subtree", $asm0E.TypeRef("System.Xml.Schema.ForwardAxis")); 
  $.Field({Static:false, Public:false}, "parent", $asm0E.TypeRef("System.Xml.Schema.ActiveAxis")); 
  $.Property({Static:false, Public:false}, "Subtree", $asm0E.TypeRef("System.Xml.Schema.ForwardAxis"));

  $.Property({Static:false, Public:false}, "Length", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.ActiveAxis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28EA3, null, [$asm0E.TypeRef("System.Xml.Schema.Asttree")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndElement", 
    $sig.make(0x28EA5, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentDepth", 
    $sig.make(0x28EA1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x28EA6, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToStartElement", 
    $sig.make(0x28EA4, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reactivate", 
    $sig.make(0x28EA2, null, [], [])
  );

  $.Field({Static:false, Public:false}, "currentDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "isActive", $.Boolean); 
  $.Field({Static:false, Public:false}, "axisTree", $asm0E.TypeRef("System.Xml.Schema.Asttree")); 
  $.Field({Static:false, Public:false}, "axisStack", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Property({Static:false, Public:true }, "CurrentDepth", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("MS.Internal.Xml.XPath.Axis"), "System.Xml.Schema.DoubleLinkAxis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28EC9, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertTree", 
    $sig.make(0x28ECA, $.Type, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Next", 
    $sig.make(0x28EC7, $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Next", 
    $sig.make(0x28EC8, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
  );

  $.Field({Static:false, Public:false}, "next", $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")); 
  $.Property({Static:false, Public:false}, "Next", $asm0E.TypeRef("MS.Internal.Xml.XPath.Axis"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.ForwardAxis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28EE8, null, [$asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAttribute", 
    $sig.make(0x28EDF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsDss", 
    $sig.make(0x28EE0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSelfAxis", 
    $sig.make(0x28EE1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_RootNode", 
    $sig.make(0x28EDD, $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TopNode", 
    $sig.make(0x28EDE, $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"), [], [])
  );

  $.Field({Static:false, Public:false}, "topNode", $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis")); 
  $.Field({Static:false, Public:false}, "rootNode", $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis")); 
  $.Field({Static:false, Public:false}, "isAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "isDss", $.Boolean); 
  $.Field({Static:false, Public:false}, "isSelfAxis", $.Boolean); 
  $.Property({Static:false, Public:false}, "RootNode", $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

  $.Property({Static:false, Public:false}, "TopNode", $asm0E.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

  $.Property({Static:false, Public:false}, "IsAttribute", $.Boolean);

  $.Property({Static:false, Public:false}, "IsDss", $.Boolean);

  $.Property({Static:false, Public:false}, "IsSelfAxis", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.Asttree", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x285B7, null, [
        $.String, $.Boolean, 
        $asm0E.TypeRef("System.Xml.XmlNamespaceManager")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompileXPath", 
    $sig.make(0x285BC, null, [
        $.String, $.Boolean, 
        $asm0E.TypeRef("System.Xml.XmlNamespaceManager")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SubtreeArray", 
    $sig.make(0x285B6, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsAttribute", 
    $sig.make(0x285B9, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsDescendantOrSelf", 
    $sig.make(0x285BA, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNameTest", 
    $sig.make(0x285B8, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSelf", 
    $sig.make(0x285BB, $.Boolean, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetURN", 
    $sig.make(0x285BD, null, [$asm0E.TypeRef("MS.Internal.Xml.XPath.Axis"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.Field({Static:false, Public:false}, "fAxisArray", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "xpathexpr", $.String); 
  $.Field({Static:false, Public:false}, "isField", $.Boolean); 
  $.Field({Static:false, Public:false}, "nsmgr", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Property({Static:false, Public:false}, "SubtreeArray", $asm06.TypeRef("System.Collections.ArrayList"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.BaseValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB842, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB843, null, [
        $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
        $asm0E.TypeRef("System.Xml.IValidationEventHandling")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0xB845, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
    $sig.make(0xB854, $.Type, [
        $asm0E.TypeRef("System.Xml.ValidationType"), $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), $asm0E.TypeRef("System.Xml.IValidationEventHandling"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FindId", 
    $sig.make(0xB846, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
    $sig.make(0xB83A, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DtdInfo", 
    $sig.make(0xB83F, $asm0E.TypeRef("System.Xml.IDtdInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EventHandler", 
    $sig.make(0xB83C, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xB835, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PositionInfo", 
    $sig.make(0xB837, $asm0E.TypeRef("System.Xml.PositionInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0xB841, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
    $sig.make(0xB833, $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaCollection", 
    $sig.make(0xB834, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0xB83D, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaNames", 
    $sig.make(0xB836, $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlResolver", 
    $sig.make(0xB838, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ProcessEntity", 
    $sig.make(0xB852, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
        $.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ProcessEntity", 
    $sig.make(0xB853, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
        $asm0E.TypeRef("System.Xml.IValidationEventHandling"), $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SaveTextValue", 
    $sig.make(0xB849, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB84A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB84B, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB84C, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB84D, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB84E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB84F, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB850, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB851, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseUri", 
    $sig.make(0xB83B, null, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DtdInfo", 
    $sig.make(0xB840, null, [$asm0E.TypeRef("System.Xml.IDtdInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaInfo", 
    $sig.make(0xB83E, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0xB839, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0xB844, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
    $sig.make(0xB847, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
    $sig.make(0xB848, null, [], [])
  );

  $.Field({Static:false, Public:false}, "schemaCollection", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection")); 
  $.Field({Static:false, Public:false}, "eventHandling", $asm0E.TypeRef("System.Xml.IValidationEventHandling")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "positionInfo", $asm0E.TypeRef("System.Xml.PositionInfo")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "baseUri", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl")); 
  $.Field({Static:false, Public:false}, "elementName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "context", $asm0E.TypeRef("System.Xml.Schema.ValidationState")); 
  $.Field({Static:false, Public:false}, "textValue", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "textString", $.String); 
  $.Field({Static:false, Public:false}, "hasSibling", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkDatatype", $.Boolean); 
  $.Property({Static:false, Public:true }, "Reader", $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"));

  $.Property({Static:false, Public:true }, "SchemaCollection", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true }, "SchemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames"));

  $.Property({Static:false, Public:true }, "PositionInfo", $asm0E.TypeRef("System.Xml.PositionInfo"));

  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "BaseUri", $asm07.TypeRef("System.Uri"));

  $.Property({Static:false, Public:true }, "EventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"));

  $.Property({Static:false, Public:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"));

  $.Property({Static:false, Public:true }, "DtdInfo", $asm0E.TypeRef("System.Xml.IDtdInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.AutoValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28FEA, null, [
        $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
        $asm0E.TypeRef("System.Xml.IValidationEventHandling")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x28FEC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DetectValidationType", 
    $sig.make(0x28FEE, $asm0E.TypeRef("System.Xml.ValidationType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FindId", 
    $sig.make(0x28FED, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0x28FE9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0x28FEB, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "x_schema", "x-schema"); 
  $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.BaseProcessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C0D, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C0E, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToTable", 
    $sig.make(0x28C10, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CompilationSettings", 
    $sig.make(0x28C0B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EventHandler", 
    $sig.make(0x28C0A, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
    $sig.make(0x28C0C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
    $sig.make(0x28C04, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaNames", 
    $sig.make(0x28C08, $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidAttributeGroupRedefine", 
    $sig.make(0x28C12, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidGroupRedefine", 
    $sig.make(0x28C14, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidTypeRedefine", 
    $sig.make(0x28C15, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C17, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C19, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C1A, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C1B, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C1C, null, [
        $.String, $.String, 
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C1D, null, [
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C1E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C20, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28C26, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEventNoThrow", 
    $sig.make(0x28C28, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "eventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "compilationSettings", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")); 
  $.Field({Static:false, Public:false}, "errorCount", $.Int32); 
  $.Field({Static:false, Public:false}, "NsXml", $.String); 
  $.Property({Static:false, Public:false}, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false}, "SchemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames"));

  $.Property({Static:false, Public:false}, "EventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"));

  $.Property({Static:false, Public:false}, "CompilationSettings", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

  $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.BitSet", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBDBC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBDBD, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "And", 
    $sig.make(0xBDC3, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0xBDBE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0xBDBF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xBDC7, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureLength", 
    $sig.make(0xBDCA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xBDC6, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Get", 
    $sig.make(0xBDC1, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xBDB9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0xBDBB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xBDBA, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xBDC5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0xBDC8, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextSet", 
    $sig.make(0xBDC2, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Or", 
    $sig.make(0xBDC4, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0xBDC0, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Subscript", 
    $sig.make(0xBDC9, $.Int32, [$.Int32], [])
  );

  $.Constant({Static:true , Public:false}, "bitSlotShift", 5); 
  $.Constant({Static:true , Public:false}, "bitSlotMask", 31); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "bits", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "Item", $.Boolean);

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.ChameleonKey", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x290A0, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x290A2, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x290A1, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "targetNS", $.String); 
  $.Field({Static:false, Public:false}, "chameleonLocation", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "originalSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.CompiledIdentityConstraint", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28485, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28487, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Fields", 
    $sig.make(0x28483, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.Asttree")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Role", 
    $sig.make(0x2847F, $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Selector", 
    $sig.make(0x28481, $asm0E.TypeRef("System.Xml.Schema.Asttree"), [], [])
  );

  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "role", $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole")); 
  $.Field({Static:false, Public:false}, "selector", $asm0E.TypeRef("System.Xml.Schema.Asttree")); 
  $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.Asttree")])); 
  $.Field({Static:false, Public:false}, "refer", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Property({Static:false, Public:true }, "Role", $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole"));

  $.Property({Static:false, Public:true }, "Selector", $asm0E.TypeRef("System.Xml.Schema.Asttree"));

  $.Property({Static:false, Public:true }, "Fields", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.Asttree")]));

});

JSIL.MakeEnum(
  "System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole", false, {
    Unique: 0, 
    Key: 1, 
    Keyref: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.Compiler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x290DC, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildParticleContentModel", 
    $sig.make(0x29125, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CalculateEffectiveTotalRange", 
    $sig.make(0x29117, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeAll", 
    $sig.make(0x29105, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeChoice", 
    $sig.make(0x29106, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeElement", 
    $sig.make(0x29103, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeGroupRef", 
    $sig.make(0x29104, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeParticle", 
    $sig.make(0x29102, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizePointlessRoot", 
    $sig.make(0x29108, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeSequence", 
    $sig.make(0x29107, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckAtrributeGroupRestriction", 
    $sig.make(0x2911C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
    $sig.make(0x290FF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
    $sig.make(0x29100, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckUnionType", 
    $sig.make(0x290F8, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupAttribute", 
    $sig.make(0x290E3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupAttributeGroup", 
    $sig.make(0x290E4, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupAttributes", 
    $sig.make(0x290EB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupComplexType", 
    $sig.make(0x290E5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupElement", 
    $sig.make(0x290E9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupGroup", 
    $sig.make(0x290EC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupParticle", 
    $sig.make(0x290EE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupSimpleType", 
    $sig.make(0x290E7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compile", 
    $sig.make(0x290E2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeIntersection", 
    $sig.make(0x2911F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeUnion", 
    $sig.make(0x2911E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAttribute", 
    $sig.make(0x29120, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAttributeGroup", 
    $sig.make(0x2911A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileBaseMemberTypes", 
    $sig.make(0x290F7, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexContent", 
    $sig.make(0x29124, $asm0E.TypeRef("System.Xml.Schema.ContentValidator"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentExtension", 
    $sig.make(0x290FD, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentRestriction", 
    $sig.make(0x290FE, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexType", 
    $sig.make(0x290FA, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexTypeElements", 
    $sig.make(0x29128, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileContentTypeParticle", 
    $sig.make(0x29101, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileElement", 
    $sig.make(0x29123, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileGroup", 
    $sig.make(0x290F5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileIdentityConstraint", 
    $sig.make(0x29122, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileLocalAttributes", 
    $sig.make(0x2911B, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
    $sig.make(0x29126, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
    $sig.make(0x29127, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentExtension", 
    $sig.make(0x290FB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentRestriction", 
    $sig.make(0x290FC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSimpleType", 
    $sig.make(0x290F6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSubstitutionGroup", 
    $sig.make(0x290F2, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyPosition", 
    $sig.make(0x2912C, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Execute", 
    $sig.make(0x290DD, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAnySchemaType", 
    $sig.make(0x2912B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
    $sig.make(0x2912A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMappingParticle", 
    $sig.make(0x29115, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaContentType", 
    $sig.make(0x29119, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSimpleType", 
    $sig.make(0x29129, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAllCompiledSchemas", 
    $sig.make(0x290E1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsAnyFromAny", 
    $sig.make(0x2910C, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsChoiceFromChoiceSubstGroup", 
    $sig.make(0x2910F, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsElementFromAny", 
    $sig.make(0x2910B, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsElementFromElement", 
    $sig.make(0x2910A, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsElementFromGroupBase", 
    $sig.make(0x2910E, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsFixedEqual", 
    $sig.make(0x2912D, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase"), $asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromAny", 
    $sig.make(0x2910D, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromGroupBase", 
    $sig.make(0x29110, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsParticleEmptiable", 
    $sig.make(0x29116, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsProcessContentsRestricted", 
    $sig.make(0x2911D, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromAll", 
    $sig.make(0x29111, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromChoice", 
    $sig.make(0x29112, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
    $sig.make(0x29113, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
    $sig.make(0x29114, $.Boolean, [
        $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal"), 
        $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidRestriction", 
    $sig.make(0x29109, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Output", 
    $sig.make(0x290E0, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Prepare", 
    $sig.make(0x290DE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessSubstitutionGroups", 
    $sig.make(0x290F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushComplexType", 
    $sig.make(0x29118, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecursivelyCheckRedefinedAttributeGroups", 
    $sig.make(0x290F4, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecursivelyCheckRedefinedGroups", 
    $sig.make(0x290F3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDefaultFixed", 
    $sig.make(0x29121, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateSForSSimpleTypes", 
    $sig.make(0x290DF, null, [], [])
  );

  $.Field({Static:false, Public:false}, "restrictionErrorMsg", $.String); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "attributeGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "elements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "schemaTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "groups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "notations", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "examplars", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "identityConstraints", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "complexTypeStack", $asm06.TypeRef("System.Collections.Stack")); 
  $.Field({Static:false, Public:false}, "schemasToCompile", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "importedSchemas", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "schemaForSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.ConstraintStruct", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28FE2, null, [$asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TableDim", 
    $sig.make(0x28FE1, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "constraint", $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")); 
  $.Field({Static:false, Public:false}, "axisSelector", $asm0E.TypeRef("System.Xml.Schema.SelectorActiveAxis")); 
  $.Field({Static:false, Public:false}, "axisFields", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "qualifiedTable", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "keyrefTable", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "tableDim", $.Int32); 
  $.Property({Static:false, Public:false}, "TableDim", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ActiveAxis"), "System.Xml.Schema.LocatedActiveAxis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29198, null, [
        $asm0E.TypeRef("System.Xml.Schema.Asttree"), $asm0E.TypeRef("System.Xml.Schema.KeySequence"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Column", 
    $sig.make(0x29197, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reactivate", 
    $sig.make(0x29199, null, [$asm0E.TypeRef("System.Xml.Schema.KeySequence")], [])
  );

  $.Field({Static:false, Public:false}, "column", $.Int32); 
  $.Field({Static:false, Public:false}, "isMatched", $.Boolean); 
  $.Field({Static:false, Public:false}, "Ks", $asm0E.TypeRef("System.Xml.Schema.KeySequence")); 
  $.Property({Static:false, Public:false}, "Column", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ActiveAxis"), "System.Xml.Schema.SelectorActiveAxis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28ED3, null, [$asm0E.TypeRef("System.Xml.Schema.Asttree"), $asm0E.TypeRef("System.Xml.Schema.ConstraintStruct")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndElement", 
    $sig.make(0x28ED4, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EmptyStack", 
    $sig.make(0x28ED1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_lastDepth", 
    $sig.make(0x28ED2, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PopKS", 
    $sig.make(0x28ED6, $asm0E.TypeRef("System.Xml.Schema.KeySequence"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PushKS", 
    $sig.make(0x28ED5, $.Int32, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "cs", $asm0E.TypeRef("System.Xml.Schema.ConstraintStruct")); 
  $.Field({Static:false, Public:false}, "KSs", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "KSpointer", $.Int32); 
  $.Property({Static:false, Public:true }, "EmptyStack", $.Boolean);

  $.Property({Static:false, Public:true }, "lastDepth", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.KSStruct", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x290D5, null, [$asm0E.TypeRef("System.Xml.Schema.KeySequence"), $.Int32], [])
  );

  $.Field({Static:false, Public:true }, "depth", $.Int32); 
  $.Field({Static:false, Public:true }, "ks", $asm0E.TypeRef("System.Xml.Schema.KeySequence")); 
  $.Field({Static:false, Public:true }, "fields", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.LocatedActiveAxis")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.TypedObject", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2916A, null, [
        $.Object, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x29172, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Dim", 
    $sig.make(0x2915D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Dvalue", 
    $sig.make(0x29160, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Decimal")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDecimal", 
    $sig.make(0x2915F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsList", 
    $sig.make(0x2915E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x29166, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x29162, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ListDValueEquals", 
    $sig.make(0x2916F, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x29167, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0x29164, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetDecimal", 
    $sig.make(0x2916E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x2916C, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "dstruct", $asm0E.TypeRef("System.Xml.Schema.TypedObject/DecimalStruct")); 
  $.Field({Static:false, Public:false}, "ovalue", $.Object); 
  $.Field({Static:false, Public:false}, "svalue", $.String); 
  $.Field({Static:false, Public:false}, "xsdtype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "dim", $.Int32); 
  $.Field({Static:false, Public:false}, "isList", $.Boolean); 
  $.Property({Static:false, Public:true }, "Dim", $.Int32);

  $.Property({Static:false, Public:true }, "IsList", $.Boolean);

  $.Property({Static:false, Public:true }, "IsDecimal", $.Boolean);

  $.Property({Static:false, Public:true }, "Dvalue", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Decimal")]));

  $.Property({Static:false, Public:true }, "Value", $.Object);

  $.Property({Static:false, Public:true }, "Type", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.TypedObject/DecimalStruct", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291BE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291BF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Dvalue", 
    $sig.make(0x291BD, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Decimal")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDecimal", 
    $sig.make(0x291BA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsDecimal", 
    $sig.make(0x291BC, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "isDecimal", $.Boolean); 
  $.Field({Static:false, Public:false}, "dvalue", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Decimal")])); 
  $.Property({Static:false, Public:true }, "IsDecimal", $.Boolean);

  $.Property({Static:false, Public:true }, "Dvalue", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Decimal")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.KeySequence", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29015, null, [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29016, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.TypedObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x29019, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x29013, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PosCol", 
    $sig.make(0x29012, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PosLine", 
    $sig.make(0x29011, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x29018, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsQualified", 
    $sig.make(0x29017, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x29014, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x2901A, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "ks", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.TypedObject")])); 
  $.Field({Static:false, Public:false}, "dim", $.Int32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "posline", $.Int32); 
  $.Field({Static:false, Public:false}, "poscol", $.Int32); 
  $.Property({Static:false, Public:true }, "PosLine", $.Int32);

  $.Property({Static:false, Public:true }, "PosCol", $.Int32);

  $.Property({Static:false, Public:true }, "Item", $.Object);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Exception"), "System.Xml.Schema.UpaException", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291EB, null, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle1", 
    $sig.make(0x291E9, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle2", 
    $sig.make(0x291EA, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "particle1", $.Object); 
  $.Field({Static:false, Public:false}, "particle2", $.Object); 
  $.Property({Static:false, Public:true }, "Particle1", $.Object);

  $.Property({Static:false, Public:true }, "Particle2", $.Object);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SymbolsDictionary", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28833, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddName", 
    $sig.make(0x28834, $.Int32, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddNamespaceList", 
    $sig.make(0x28835, null, [
        $asm0E.TypeRef("System.Xml.Schema.NamespaceList"), $.Object, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddWildcard", 
    $sig.make(0x28836, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Exists", 
    $sig.make(0x28838, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x28822, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CountOfNames", 
    $sig.make(0x2882F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsUpaEnforced", 
    $sig.make(0x28830, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x28832, $.Int32, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespaceListSymbols", 
    $sig.make(0x28837, $asm06.TypeRef("System.Collections.ICollection"), [$asm0E.TypeRef("System.Xml.Schema.NamespaceList")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetParticle", 
    $sig.make(0x28839, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NameOf", 
    $sig.make(0x2883A, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsUpaEnforced", 
    $sig.make(0x28831, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "last", $.Int32); 
  $.Field({Static:false, Public:false}, "names", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "wildcards", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "particles", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "particleLast", $.Object); 
  $.Field({Static:false, Public:false}, "isUpaEnforced", $.Boolean); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "CountOfNames", $.Int32);

  $.Property({Static:false, Public:true }, "IsUpaEnforced", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $.Int32);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.Position", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x288A4, null, [$.Int32, $.Object], [])
  );

  $.Field({Static:false, Public:true }, "symbol", $.Int32); 
  $.Field({Static:false, Public:true }, "particle", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.Positions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2886E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x2886D, $.Int32, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2886C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2886B, $asm0E.TypeRef("System.Xml.Schema.Position"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "positions", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.Position"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SyntaxTreeNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x287C5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x287C3, $.Type, [$asm0E.TypeRef("System.Xml.Schema.Positions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x287C4, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpandTree", 
    $sig.make(0x287C2, null, [
        $asm0E.TypeRef("System.Xml.Schema.InteriorNode"), $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
        $asm0E.TypeRef("System.Xml.Schema.Positions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x287C0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsRangeNode", 
    $sig.make(0x287C1, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsRangeNode", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), "System.Xml.Schema.LeafNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2920A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2920C, $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm0E.TypeRef("System.Xml.Schema.Positions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x2920D, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpandTree", 
    $sig.make(0x2920B, null, [
        $asm0E.TypeRef("System.Xml.Schema.InteriorNode"), $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
        $asm0E.TypeRef("System.Xml.Schema.Positions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x29209, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Pos", 
    $sig.make(0x29207, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Pos", 
    $sig.make(0x29208, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "pos", $.Int32); 
  $.Property({Static:false, Public:true }, "Pos", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), "System.Xml.Schema.NamespaceListNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29264, null, [$asm0E.TypeRef("System.Xml.Schema.NamespaceList"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x29265, $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm0E.TypeRef("System.Xml.Schema.Positions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x29269, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpandTree", 
    $sig.make(0x29268, null, [
        $asm0E.TypeRef("System.Xml.Schema.InteriorNode"), $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
        $asm0E.TypeRef("System.Xml.Schema.Positions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x2925E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetResolvedSymbols", 
    $sig.make(0x29267, $asm06.TypeRef("System.Collections.ICollection"), [$asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary")], [])
  );

  $.Field({Static:false, Public:false}, "namespaceList", $asm0E.TypeRef("System.Xml.Schema.NamespaceList")); 
  $.Field({Static:false, Public:false}, "particle", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), "System.Xml.Schema.InteriorNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28804, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x28802, $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm0E.TypeRef("System.Xml.Schema.Positions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpandTree", 
    $sig.make(0x28803, null, [
        $.Type, $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
        $asm0E.TypeRef("System.Xml.Schema.Positions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LeftChild", 
    $sig.make(0x287FE, $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RightChild", 
    $sig.make(0x28800, $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LeftChild", 
    $sig.make(0x287FF, null, [$asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RightChild", 
    $sig.make(0x28801, null, [$asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode")], [])
  );

  $.Field({Static:false, Public:false}, "leftChild", $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode")); 
  $.Field({Static:false, Public:false}, "rightChild", $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode")); 
  $.Property({Static:false, Public:true }, "LeftChild", $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

  $.Property({Static:false, Public:true }, "RightChild", $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.SequenceNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2931B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x2931A, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x29319, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.ChoiceNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29406, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x29405, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x29404, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.PlusNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29424, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x29423, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x29422, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.QmarkNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2956D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x2956C, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x2956B, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.StarNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291C8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConstructPos", 
    $sig.make(0x291C7, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x291C5, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.LeafNode"), "System.Xml.Schema.LeafRangeNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2925B, null, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2925C, null, [
        $.Int32, $asm06.TypeRef("System.Decimal"), 
        $asm06.TypeRef("System.Decimal")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x2925D, $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm0E.TypeRef("System.Xml.Schema.Positions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsRangeNode", 
    $sig.make(0x2925A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Max", 
    $sig.make(0x29256, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Min", 
    $sig.make(0x29257, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NextIteration", 
    $sig.make(0x29258, $asm0E.TypeRef("System.Xml.Schema.BitSet"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NextIteration", 
    $sig.make(0x29259, null, [$asm0E.TypeRef("System.Xml.Schema.BitSet")], [])
  );

  $.Field({Static:false, Public:false}, "min", $asm06.TypeRef("System.Decimal")); 
  $.Field({Static:false, Public:false}, "max", $asm06.TypeRef("System.Decimal")); 
  $.Field({Static:false, Public:false}, "nextIteration", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Property({Static:false, Public:true }, "Max", $asm06.TypeRef("System.Decimal"));

  $.Property({Static:false, Public:true }, "Min", $asm06.TypeRef("System.Decimal"));

  $.Property({Static:false, Public:true }, "NextIteration", $asm0E.TypeRef("System.Xml.Schema.BitSet"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsRangeNode", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.ContentValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBCEC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBCED, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddParticleToExpected", 
    $sig.make(0xBCF3, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
        $asm06.TypeRef("System.Collections.ArrayList")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddParticleToExpected", 
    $sig.make(0xBCF4, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
        $asm06.TypeRef("System.Collections.ArrayList"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0xBCF0, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedElements", 
    $sig.make(0xBCF1, $asm06.TypeRef("System.Collections.ArrayList"), [$asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedParticles", 
    $sig.make(0xBCF2, $asm06.TypeRef("System.Collections.ArrayList"), [
        $asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
    $sig.make(0xBCE7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptiable", 
    $sig.make(0xBCE9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsOpen", 
    $sig.make(0xBCEA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0xBCE8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitValidation", 
    $sig.make(0xBCEE, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsOpen", 
    $sig.make(0xBCEB, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0xBCEF, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.Field({Static:false, Public:false}, "contentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")); 
  $.Field({Static:false, Public:false}, "isOpen", $.Boolean); 
  $.Field({Static:false, Public:false}, "isEmptiable", $.Boolean); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "TextOnly", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Mixed", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Any", $.Type); 
  $.Property({Static:false, Public:true }, "ContentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

  $.Property({Static:false, Public:true }, "PreserveWhitespace", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptiable", $.Boolean);

  $.Property({Static:false, Public:true }, "IsOpen", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.ParticleContentValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x286E6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x286E7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddChoice", 
    $sig.make(0x286F5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddLeafNode", 
    $sig.make(0x286F3, null, [$asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLeafRange", 
    $sig.make(0x286FA, null, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddName", 
    $sig.make(0x286F0, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddNamespaceList", 
    $sig.make(0x286F1, null, [$asm0E.TypeRef("System.Xml.Schema.NamespaceList"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPlus", 
    $sig.make(0x286F8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddQMark", 
    $sig.make(0x286F9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSequence", 
    $sig.make(0x286F6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddStar", 
    $sig.make(0x286F7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildTransitionTable", 
    $sig.make(0x2870C, $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CalculateTotalFollowposForRangeNodes", 
    $sig.make(0x28701, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")]), [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckCMUPAWithLeafRangeNodes", 
    $sig.make(0x28704, null, [$asm0E.TypeRef("System.Xml.Schema.BitSet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckUniqueParticleAttribution", 
    $sig.make(0x28709, null, [$asm0E.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckUniqueParticleAttribution", 
    $sig.make(0x2870B, null, [$asm0E.TypeRef("System.Xml.Schema.BitSet")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloseGroup", 
    $sig.make(0x286ED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Closure", 
    $sig.make(0x286FB, null, [$asm0E.TypeRef("System.Xml.Schema.InteriorNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x286EA, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Exists", 
    $sig.make(0x286EE, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Finish", 
    $sig.make(0x286FC, $asm0E.TypeRef("System.Xml.Schema.ContentValidator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Finish", 
    $sig.make(0x286FE, $asm0E.TypeRef("System.Xml.Schema.ContentValidator"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetApplicableMinMaxFollowPos", 
    $sig.make(0x28707, $asm0E.TypeRef("System.Xml.Schema.BitSet"), [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitValidation", 
    $sig.make(0x286E8, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OpenGroup", 
    $sig.make(0x286EC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Start", 
    $sig.make(0x286EB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x286E9, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.Field({Static:false, Public:false}, "symbols", $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
  $.Field({Static:false, Public:false}, "positions", $asm0E.TypeRef("System.Xml.Schema.Positions")); 
  $.Field({Static:false, Public:false}, "stack", $asm06.TypeRef("System.Collections.Stack")); 
  $.Field({Static:false, Public:false}, "contentNode", $asm0E.TypeRef("System.Xml.Schema.SyntaxTreeNode")); 
  $.Field({Static:false, Public:false}, "isPartial", $.Boolean); 
  $.Field({Static:false, Public:false}, "minMaxNodesCount", $.Int32); 
  $.Field({Static:false, Public:false}, "enableUpaCheck", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.DfaContentValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2932C, null, [
        $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x2932F, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedElements", 
    $sig.make(0x29331, $asm06.TypeRef("System.Collections.ArrayList"), [$asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedParticles", 
    $sig.make(0x29332, $asm06.TypeRef("System.Collections.ArrayList"), [
        $asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitValidation", 
    $sig.make(0x2932D, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x2932E, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.Field({Static:false, Public:false}, "transitionTable", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])])); 
  $.Field({Static:false, Public:false}, "symbols", $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.NfaContentValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29379, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")]), 
        $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), $asm0E.TypeRef("System.Xml.Schema.Positions"), 
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x29383, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedElements", 
    $sig.make(0x29385, $asm06.TypeRef("System.Collections.ArrayList"), [$asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedParticles", 
    $sig.make(0x29388, $asm06.TypeRef("System.Collections.ArrayList"), [
        $asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitValidation", 
    $sig.make(0x2937B, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x29381, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.Field({Static:false, Public:false}, "firstpos", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Field({Static:false, Public:false}, "followpos", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])); 
  $.Field({Static:false, Public:false}, "symbols", $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
  $.Field({Static:false, Public:false}, "positions", $asm0E.TypeRef("System.Xml.Schema.Positions")); 
  $.Field({Static:false, Public:false}, "endMarkerPos", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.RangePositionInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "curpos", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Field({Static:false, Public:true }, "rangeCounters", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Decimal")])); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.RangeContentValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x294E2, null, [
        $asm0E.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")]), 
        $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary"), $asm0E.TypeRef("System.Xml.Schema.Positions"), 
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), 
        $.Boolean, $asm0E.TypeRef("System.Xml.Schema.BitSet"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x294E6, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedElements", 
    $sig.make(0x294E8, $asm06.TypeRef("System.Collections.ArrayList"), [$asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedParticles", 
    $sig.make(0x294EE, $asm06.TypeRef("System.Collections.ArrayList"), [
        $asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitValidation", 
    $sig.make(0x294E3, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x294E4, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.Field({Static:false, Public:false}, "firstpos", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Field({Static:false, Public:false}, "followpos", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])); 
  $.Field({Static:false, Public:false}, "positionsWithRangeTerminals", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Field({Static:false, Public:false}, "symbols", $asm0E.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
  $.Field({Static:false, Public:false}, "positions", $asm0E.TypeRef("System.Xml.Schema.Positions")); 
  $.Field({Static:false, Public:false}, "minMaxNodesCount", $.Int32); 
  $.Field({Static:false, Public:false}, "endMarkerPos", $.Int32); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.AllElementsContentValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29621, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddElement", 
    $sig.make(0x29622, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Object, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x29625, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedElements", 
    $sig.make(0x29626, $asm06.TypeRef("System.Collections.ArrayList"), [$asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExpectedParticles", 
    $sig.make(0x29627, $asm06.TypeRef("System.Collections.ArrayList"), [
        $asm0E.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptiable", 
    $sig.make(0x29620, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InitValidation", 
    $sig.make(0x29623, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x29624, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.Field({Static:false, Public:false}, "elements", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "particles", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false}, "isRequired", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Field({Static:false, Public:false}, "countRequired", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptiable", $.Boolean);

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaDatatypeVariety", true, {
    Atomic: 0, 
    List: 1, 
    Union: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XsdSimpleValue", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2965A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypedValue", 
    $sig.make(0x29659, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
    $sig.make(0x29658, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.Field({Static:false, Public:false}, "xmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "typedValue", $.Object); 
  $.Property({Static:false, Public:true }, "XmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:true }, "TypedValue", $.Object);

});

JSIL.MakeEnum(
  "System.Xml.Schema.RestrictionFlags", false, {
    Length: 1, 
    MinLength: 2, 
    MaxLength: 4, 
    Pattern: 8, 
    Enumeration: 16, 
    WhiteSpace: 32, 
    MaxInclusive: 64, 
    MaxExclusive: 128, 
    MinInclusive: 256, 
    MinExclusive: 512, 
    TotalDigits: 1024, 
    FractionDigits: 2048
  }, true
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaWhiteSpace", false, {
    Preserve: 0, 
    Replace: 1, 
    Collapse: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.RestrictionFacets", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBCBA, null, [], [])
  );

  $.Field({Static:false, Public:false}, "Length", $.Int32); 
  $.Field({Static:false, Public:false}, "MinLength", $.Int32); 
  $.Field({Static:false, Public:false}, "MaxLength", $.Int32); 
  $.Field({Static:false, Public:false}, "Patterns", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "Enumeration", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "WhiteSpace", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace")); 
  $.Field({Static:false, Public:false}, "MaxInclusive", $.Object); 
  $.Field({Static:false, Public:false}, "MaxExclusive", $.Object); 
  $.Field({Static:false, Public:false}, "MinInclusive", $.Object); 
  $.Field({Static:false, Public:false}, "MinExclusive", $.Object); 
  $.Field({Static:false, Public:false}, "TotalDigits", $.Int32); 
  $.Field({Static:false, Public:false}, "FractionDigits", $.Int32); 
  $.Field({Static:false, Public:false}, "Flags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")); 
  $.Field({Static:false, Public:false}, "FixedFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaDatatype", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB90A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB8F6, $.Object, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB8F7, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0xB8F9, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConcatenatedToString", 
    $sig.make(0xB904, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeriveByList", 
    $sig.make(0xB8FF, $.Type, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeriveByRestriction", 
    $sig.make(0xB8FE, $.Type, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DeriveByUnion", 
    $sig.make(0xB908, $.Type, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXdrName", 
    $sig.make(0xB907, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedType", 
    $sig.make(0xB905, $.Type, [$asm0E.TypeRef("System.Xml.XmlTokenizedType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedTypeXsd", 
    $sig.make(0xB906, $.Type, [$asm0E.TypeRef("System.Xml.XmlTokenizedType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0xB8F3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0xB8F2, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasLexicalFacets", 
    $sig.make(0xB8ED, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0xB8EE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Restriction", 
    $sig.make(0xB8F0, $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0xB8EA, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0xB8EC, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeCodeString", 
    $sig.make(0xB8F4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueConverter", 
    $sig.make(0xB8EF, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0xB8E9, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variety", 
    $sig.make(0xB8EB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsComparable", 
    $sig.make(0xB902, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDerivedFrom", 
    $sig.make(0xB8F8, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsEqual", 
    $sig.make(0xB901, $.Boolean, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0xB8F5, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
    $sig.make(0xB8FA, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
    $sig.make(0xB8FB, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Restriction", 
    $sig.make(0xB8F1, null, [$asm0E.TypeRef("System.Xml.Schema.RestrictionFacets")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0xB8FC, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0xB8FD, $asm06.TypeRef("System.Exception"), [
        $.Object, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TypeCodeToString", 
    $sig.make(0xB903, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifySchemaValid", 
    $sig.make(0xB900, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XdrCanonizeUri", 
    $sig.make(0xB909, $.String, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames")
      ], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Variety", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasLexicalFacets", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ValueConverter", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"));

  $.Property({Static:false, Public:false, Virtual:true }, "Restriction", $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets"));

  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false}, "TypeCodeString", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), "System.Xml.Schema.DatatypeImplementation", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBE0C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0xBE0B, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateBuiltinTypes", 
    $sig.make(0xBDF6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0xBE05, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeriveByList", 
    $sig.make(0xBDFE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeriveByList", 
    $sig.make(0xBDFF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeriveByRestriction", 
    $sig.make(0xBDFD, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DeriveByUnion", 
    $sig.make(0xBE00, $.Type, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FinishBuiltinType", 
    $sig.make(0xBDF5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromTypeName", 
    $sig.make(0xBDF3, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXdrName", 
    $sig.make(0xBDF2, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedType", 
    $sig.make(0xBDF0, $.Type, [$asm0E.TypeRef("System.Xml.XmlTokenizedType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedTypeXsd", 
    $sig.make(0xBDF1, $.Type, [$asm0E.TypeRef("System.Xml.XmlTokenizedType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AnyAtomicType", 
    $sig.make(0xBDDD, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AnySimpleType", 
    $sig.make(0xBDDC, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Base", 
    $sig.make(0xBDEB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0xBDEE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DayTimeDurationType", 
    $sig.make(0xBDE0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0xBDE1, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasLexicalFacets", 
    $sig.make(0xBDE9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0xBDEA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0xBDEC, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Restriction", 
    $sig.make(0xBDE7, $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0xBDE3, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0xBDE6, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UntypedAtomicType", 
    $sig.make(0xBDDE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0xBDED, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueConverter", 
    $sig.make(0xBDE2, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0xBDE4, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variety", 
    $sig.make(0xBDE5, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_YearMonthDurationType", 
    $sig.make(0xBDDF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetBuiltInTypes", 
    $sig.make(0xBDFB, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNormalizedStringTypeV1Compat", 
    $sig.make(0xBDF9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveTypeCode", 
    $sig.make(0xBDFC, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSimpleTypeFromTypeCode", 
    $sig.make(0xBDF7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSimpleTypeFromXsdType", 
    $sig.make(0xBDF8, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTokenTypeV1Compat", 
    $sig.make(0xBDFA, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
    $sig.make(0xBE0A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsComparable", 
    $sig.make(0xBE04, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDerivedFrom", 
    $sig.make(0xBE02, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsEqual", 
    $sig.make(0xBE03, $.Boolean, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
    $sig.make(0xBE06, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0xBE07, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
    $sig.make(0xBE08, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Restriction", 
    $sig.make(0xBDE8, null, [$asm0E.TypeRef("System.Xml.Schema.RestrictionFacets")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StartBuiltinType", 
    $sig.make(0xBDF4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0xBE09, $asm06.TypeRef("System.Exception"), [
        $.Object, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifySchemaValid", 
    $sig.make(0xBE01, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Constant({Static:true , Public:false}, "anySimpleTypeIndex", 11); 
  $.Field({Static:false, Public:false}, "variety", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety")); 
  $.Field({Static:false, Public:false}, "restriction", $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets")); 
  $.Field({Static:false, Public:false}, "baseType", $.Type); 
  $.Field({Static:false, Public:false}, "valueConverter", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
  $.Field({Static:false, Public:false}, "parentSchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:true , Public:false}, "builtinTypes", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "enumToTypeCode", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), function ($pi) {
      return JSIL.Array.New($asm0E.System.Xml.Schema.XmlSchemaSimpleType, 55);
    }); 
  $.Field({Static:true , Public:false}, "anySimpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "anyAtomicType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "untypedAtomicType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "yearMonthDurationType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "dayTimeDurationType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "normalizedStringTypeV1Compat", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "tokenTypeV1Compat", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:true , Public:false}, "QnAnySimpleType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "QnAnyType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "stringFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "miscFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "numeric2FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "binaryFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "dateTimeFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "durationFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "listFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "qnameFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false}, "unionFacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_anySimpleType", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_anyURI", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_base64Binary", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_boolean", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_byte", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_char", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_date", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTime", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTimeNoTz", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTimeTz", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_day", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_decimal", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_double", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_doubleXdr", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_duration", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENTITY", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENTITIES", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENUMERATION", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_fixed", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_float", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_floatXdr", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_hexBinary", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_ID", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_IDREF", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_IDREFS", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_int", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_integer", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_language", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_long", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_month", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_monthDay", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_Name", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_NCName", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_negativeInteger", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_NMTOKEN", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_NMTOKENS", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_nonNegativeInteger", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_nonPositiveInteger", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_normalizedString", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_NOTATION", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_positiveInteger", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_QName", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_QNameXdr", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_short", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_string", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_time", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_timeNoTz", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_timeTz", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_token", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedByte", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedInt", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedLong", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedShort", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_uuid", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_year", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_yearMonth", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_normalizedStringV1Compat", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenV1Compat", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_anyAtomicType", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_dayTimeDuration", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_untypedAtomicType", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_yearMonthDuration", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenizedTypes", $jsilcore.TypeRef("System.Array", [$.Type])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenizedTypesXsd", $jsilcore.TypeRef("System.Array", [$.Type])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_XdrTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation/SchemaDatatypeMap")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_XsdTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation/SchemaDatatypeMap")])); 
  $.Property({Static:true , Public:false}, "AnySimpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:true , Public:false}, "AnyAtomicType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:true , Public:false}, "UntypedAtomicType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:true , Public:false}, "YearMonthDurationType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:true , Public:false}, "DayTimeDurationType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValueConverter", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "Variety", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "Restriction", $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasLexicalFacets", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

  $.Property({Static:false, Public:false}, "Base", $.Type);

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.DatatypeImplementation/SchemaDatatypeMap", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A8F2, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A8F3, null, [
        $.String, $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x2A8F7, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2A8EE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentIndex", 
    $sig.make(0x2A8F1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x2A8F4, $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), [$.Type], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation")); 
  $.Field({Static:false, Public:false}, "parentIndex", $.Int32); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "ParentIndex", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.IComparable"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), "System.Xml.Schema.Datatype_anySimpleType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2716F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x2716D, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x2716C, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x2716B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x27165, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x27168, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27169, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27167, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x2716A, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27166, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x2716E, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_List", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2928A, null, [$asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2928B, null, [$asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x2928D, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x29289, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x29280, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
    $sig.make(0x29284, $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x2927F, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x2927E, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x29281, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x29282, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x2927D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x2928E, $asm06.TypeRef("System.Exception"), [
        $.Object, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x29290, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:false, Public:false}, "itemType", $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation")); 
  $.Field({Static:false, Public:false}, "minListSize", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

  $.Property({Static:false, Public:false}, "ItemType", $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_union", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29350, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x29351, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x2934F, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseMemberTypes", 
    $sig.make(0x2934E, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x2934B, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x2934C, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2934A, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x2934D, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x29349, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HasAtomicMembers", 
    $sig.make(0x29352, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsUnionBaseOf", 
    $sig.make(0x29353, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x29354, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x29355, $asm06.TypeRef("System.Exception"), [
        $.Object, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

  $.Property({Static:false, Public:false}, "BaseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_anyAtomicType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29360, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x2935F, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x2935D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2935E, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anyAtomicType"), "System.Xml.Schema.Datatype_untypedAtomicType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2938C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x2938A, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x29382, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x29386, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_string", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A0B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27A05, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x279FB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x279FD, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27A01, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x279FF, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27A03, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27A07, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_boolean", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27189, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x27187, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27186, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27182, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x27178, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x27180, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27179, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27185, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x2717D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27188, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_float", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x271DA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x271D8, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x271D7, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x271D5, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x271D1, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x271D4, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x271D2, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x271D6, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x271D3, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x271D9, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_double", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2722A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x27228, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27227, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27225, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x27221, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x27224, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27222, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27226, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27223, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27229, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_decimal", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2725E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x27259, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27257, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27253, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x2724B, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x27250, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2724C, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27255, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x2724E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x2725B, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_duration", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27296, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x27293, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27292, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x2728E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x27280, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x2728B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27282, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27290, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27284, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27294, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_duration"), "System.Xml.Schema.Datatype_yearMonthDuration", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x272CA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x272C7, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x272C9, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_duration"), "System.Xml.Schema.Datatype_dayTimeDuration", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27393, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27391, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27392, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_dateTimeBase", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27400, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27403, null, [$asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x27405, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x273FB, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x273F9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x273EF, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x273F8, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x273F0, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x273FA, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x273F1, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27407, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "dateTimeFlags", $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_dateTimeNoTimeZone", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27634, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_dateTimeTimeZone", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2776D, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_dateTime", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x277A1, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_timeNoTimeZone", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x277C4, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_timeTimeZone", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27806, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_time", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2784D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2784B, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_date", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27869, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27868, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_yearMonth", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27879, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27877, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_year", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x278A8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x278A6, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_monthDay", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x278E0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x278DF, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_day", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x278F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x278EE, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_month", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27915, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27912, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_hexBinary", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27952, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x2794B, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27948, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27945, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x2793B, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x27943, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2793D, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27946, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27941, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x2794E, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_base64Binary", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27980, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x2797E, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x2797D, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x2797B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x27977, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x2797A, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27978, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x2797C, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27979, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x2797F, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_anyURI", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x279A9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x279A7, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x279A6, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x279A4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x2799F, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0x279A2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x279A3, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x279A0, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x279A5, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x279A1, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x279A8, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_QName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x279D2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x279D0, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x279CF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x279C9, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x279CE, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x279CB, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x279CA, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x279CC, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x279CD, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x279D1, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_string"), "System.Xml.Schema.Datatype_normalizedString", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A55, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27A44, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0x27A51, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27A3F, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_string"), "System.Xml.Schema.Datatype_normalizedStringV1Compat", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A76, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0x27A74, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27A73, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_normalizedString"), "System.Xml.Schema.Datatype_token", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27A88, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27A87, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27A86, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_normalizedStringV1Compat"), "System.Xml.Schema.Datatype_tokenV1Compat", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27BB6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27BB5, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_token"), "System.Xml.Schema.Datatype_language", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27BDB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27BDA, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_token"), "System.Xml.Schema.Datatype_NMTOKEN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27BE4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27BE3, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27BE2, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_token"), "System.Xml.Schema.Datatype_Name", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C0C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27C09, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_Name"), "System.Xml.Schema.Datatype_NCName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C4B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27C49, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27C4A, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_NCName"), "System.Xml.Schema.Datatype_ID", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C5F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27C5E, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27C5D, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_NCName"), "System.Xml.Schema.Datatype_IDREF", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C87, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27C86, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27C85, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_NCName"), "System.Xml.Schema.Datatype_ENTITY", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C92, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27C91, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27C90, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_NOTATION", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D1E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateValueConverter", 
    $sig.make(0x27D1B, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BuiltInWhitespaceFacet", 
    $sig.make(0x27D1A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x27D11, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x27D19, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x27D15, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27D13, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x27D17, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x27D18, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27D1C, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifySchemaValid", 
    $sig.make(0x27D1D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_decimal"), "System.Xml.Schema.Datatype_integer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27E09, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x27E05, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x27E07, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_integer"), "System.Xml.Schema.Datatype_nonPositiveInteger", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2802B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28028, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0x2802A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x28029, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_nonPositiveInteger"), "System.Xml.Schema.Datatype_negativeInteger", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2803F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x2803D, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2803E, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_integer"), "System.Xml.Schema.Datatype_long", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28069, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x28065, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x2805E, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0x2805F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x28063, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x28060, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x28061, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x28067, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_long"), "System.Xml.Schema.Datatype_int", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28095, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x28091, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28087, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x2808F, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2808B, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x2808D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x28094, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_int"), "System.Xml.Schema.Datatype_short", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x280E4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x280E2, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x280DE, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x280E1, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x280DF, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x280E0, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x280E3, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_short"), "System.Xml.Schema.Datatype_byte", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28139, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x28137, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28132, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x28135, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x28133, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x28134, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x28138, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_integer"), "System.Xml.Schema.Datatype_nonNegativeInteger", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28179, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28174, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasValueFacets", 
    $sig.make(0x28178, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x28176, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_nonNegativeInteger"), "System.Xml.Schema.Datatype_unsignedLong", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x281A2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x2819E, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28197, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x2819C, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x28198, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x2819A, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x281A0, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_unsignedLong"), "System.Xml.Schema.Datatype_unsignedInt", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x281B8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x281B6, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x281B2, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x281B5, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x281B3, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x281B4, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x281B7, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_unsignedInt"), "System.Xml.Schema.Datatype_unsignedShort", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x282DF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x282DD, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x282D9, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x282DC, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x282DA, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x282DB, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x282DE, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_unsignedShort"), "System.Xml.Schema.Datatype_unsignedByte", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2837A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x28376, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28367, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x28371, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x2836A, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x28370, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x28378, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_nonNegativeInteger"), "System.Xml.Schema.Datatype_positiveInteger", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28398, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetsChecker", 
    $sig.make(0x28392, $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x28395, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker")); 
  $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm0E.TypeRef("System.Xml.Schema.FacetsChecker"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_double"), "System.Xml.Schema.Datatype_doubleXdr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x283B2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0x283B1, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_float"), "System.Xml.Schema.Datatype_floatXdr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x283EB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0x283E8, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_QNameXdr", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2841B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x28419, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x28417, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x28418, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0x2841A, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_NMTOKEN"), "System.Xml.Schema.Datatype_ENUMERATION", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28437, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TokenizedType", 
    $sig.make(0x28436, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_char", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x284AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x284AA, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x284A8, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x284A9, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x284A7, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0x284AB, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x284AD, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_decimal"), "System.Xml.Schema.Datatype_fixed", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x284CF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0x284CD, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x284CE, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_uuid", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x284E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compare", 
    $sig.make(0x284DF, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ListValueType", 
    $sig.make(0x284DD, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidRestrictionFlags", 
    $sig.make(0x284DE, $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x284DB, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
    $sig.make(0x284E0, $.Object, [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryParseValue", 
    $sig.make(0x284E1, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.DtdParser", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28513, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddUndeclaredNotation", 
    $sig.make(0x28528, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x28514, $asm0E.TypeRef("System.Xml.IDtdParser"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EatPublicKeyword", 
    $sig.make(0x28554, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EatSystemKeyword", 
    $sig.make(0x28555, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseUriStr", 
    $sig.make(0x28511, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IgnoreEntityReferences", 
    $sig.make(0x2850A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
    $sig.make(0x2850F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
    $sig.make(0x28510, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Normalize", 
    $sig.make(0x2850E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParsingInternalSubset", 
    $sig.make(0x28509, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParsingTopLevelMarkup", 
    $sig.make(0x2850C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SaveInternalSubsetValue", 
    $sig.make(0x2850B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SupportNamespaces", 
    $sig.make(0x2850D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNameQualified", 
    $sig.make(0x28556, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNameString", 
    $sig.make(0x28557, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNmtokenString", 
    $sig.make(0x28558, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetToken", 
    $sig.make(0x2852D, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValue", 
    $sig.make(0x28559, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValueWithStrippedSpaces", 
    $sig.make(0x2855A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleEntityEnd", 
    $sig.make(0x28561, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
    $sig.make(0x2855F, $.Boolean, [
        $.Boolean, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
    $sig.make(0x28560, $.Boolean, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0x28515, null, [$asm0E.TypeRef("System.Xml.IDtdParserAdapter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeFreeFloatingDtd", 
    $sig.make(0x28516, null, [
        $.String, $.String, 
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.IDtdParserAdapter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsAttributeValueType", 
    $sig.make(0x28566, $.Boolean, [$asm0E.TypeRef("System.Xml.DtdParser/Token")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadParsingBuffer", 
    $sig.make(0x2855C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnUnexpectedError", 
    $sig.make(0x28567, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Parse", 
    $sig.make(0x28519, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAttlistDecl", 
    $sig.make(0x2851F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAttlistDefault", 
    $sig.make(0x28521, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseAttlistType", 
    $sig.make(0x28520, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseComment", 
    $sig.make(0x28529, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseCondSection", 
    $sig.make(0x2852B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseElementDecl", 
    $sig.make(0x28522, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseElementMixedContent", 
    $sig.make(0x28525, null, [$asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseElementOnlyContent", 
    $sig.make(0x28523, null, [$asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseEntityDecl", 
    $sig.make(0x28526, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseExternalId", 
    $sig.make(0x2852C, null, [
        $asm0E.TypeRef("System.Xml.DtdParser/Token"), $asm0E.TypeRef("System.Xml.DtdParser/Token"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseExternalSubset", 
    $sig.make(0x2851D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseFreeFloatingDtd", 
    $sig.make(0x2851B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseHowMany", 
    $sig.make(0x28524, null, [$asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseInDocumentDtd", 
    $sig.make(0x2851A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseInternalSubset", 
    $sig.make(0x2851C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseNotationDecl", 
    $sig.make(0x28527, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
    $sig.make(0x2852A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseSubset", 
    $sig.make(0x2851E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
    $sig.make(0x28570, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadData", 
    $sig.make(0x2855B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadDataInName", 
    $sig.make(0x28552, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SaveParsingBuffer", 
    $sig.make(0x2855D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SaveParsingBuffer", 
    $sig.make(0x2855E, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist1", 
    $sig.make(0x2853C, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist2", 
    $sig.make(0x2853D, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist3", 
    $sig.make(0x2853E, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist4", 
    $sig.make(0x2853F, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist5", 
    $sig.make(0x28540, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist6", 
    $sig.make(0x28541, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanAttlist7", 
    $sig.make(0x28542, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanClosingTag", 
    $sig.make(0x28534, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanCondSection1", 
    $sig.make(0x2854C, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanCondSection2", 
    $sig.make(0x2854D, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanCondSection3", 
    $sig.make(0x2854E, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanDoctype1", 
    $sig.make(0x28532, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanDoctype2", 
    $sig.make(0x28533, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement1", 
    $sig.make(0x28535, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement2", 
    $sig.make(0x28536, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement3", 
    $sig.make(0x28537, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement4", 
    $sig.make(0x28538, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement5", 
    $sig.make(0x28539, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement6", 
    $sig.make(0x2853A, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanElement7", 
    $sig.make(0x2853B, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanEntity1", 
    $sig.make(0x28547, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanEntity2", 
    $sig.make(0x28548, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanEntity3", 
    $sig.make(0x28549, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanEntityName", 
    $sig.make(0x28544, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanLiteral", 
    $sig.make(0x28543, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [$asm0E.TypeRef("System.Xml.DtdParser/LiteralType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanName", 
    $sig.make(0x2854F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanNameExpected", 
    $sig.make(0x2852F, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanNmtoken", 
    $sig.make(0x28553, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanNmtokenExpected", 
    $sig.make(0x28531, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanNotation1", 
    $sig.make(0x28545, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanPublicId1", 
    $sig.make(0x2854A, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanPublicId2", 
    $sig.make(0x2854B, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanQName", 
    $sig.make(0x28550, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanQName", 
    $sig.make(0x28551, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanQNameExpected", 
    $sig.make(0x28530, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanSubsetContent", 
    $sig.make(0x2852E, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ScanSystemId", 
    $sig.make(0x28546, $asm0E.TypeRef("System.Xml.DtdParser/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28563, null, [
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28564, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28565, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StripSpaces", 
    $sig.make(0x28571, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParser.ParseFreeFloatingDtd", 
    $sig.make(0x28518, $asm0E.TypeRef("System.Xml.IDtdInfo"), [
        $.String, $.String, 
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.IDtdParserAdapter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdParser.ParseInternalDtd", 
    $sig.make(0x28517, $asm0E.TypeRef("System.Xml.IDtdInfo"), [$asm0E.TypeRef("System.Xml.IDtdParserAdapter"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0x28568, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0x28569, null, [
        $.Int32, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0x2856A, null, [
        $.Int32, $.String, 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Throw", 
    $sig.make(0x2856B, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
    $sig.make(0x2856C, null, [
        $.Int32, $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
    $sig.make(0x2856D, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0x2856E, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
    $sig.make(0x2856F, null, [
        $.Int32, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyEntityReference", 
    $sig.make(0x28562, $asm0E.TypeRef("System.Xml.Schema.SchemaEntity"), [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.Constant({Static:true , Public:false}, "CondSectionEntityIdsInitialSize", 2); 
  $.Field({Static:false, Public:false}, "readerAdapter", $asm0E.TypeRef("System.Xml.IDtdParserAdapter")); 
  $.Field({Static:false, Public:false}, "readerAdapterWithValidation", $asm0E.TypeRef("System.Xml.IDtdParserAdapterWithValidation")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "normalize", $.Boolean); 
  $.Field({Static:false, Public:false}, "validate", $.Boolean); 
  $.Field({Static:false, Public:false}, "supportNamespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "v1Compat", $.Boolean); 
  $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "charsUsed", $.Int32); 
  $.Field({Static:false, Public:false}, "curPos", $.Int32); 
  $.Field({Static:false, Public:false}, "scanningFunction", $asm0E.TypeRef("System.Xml.DtdParser/ScanningFunction")); 
  $.Field({Static:false, Public:false}, "nextScaningFunction", $asm0E.TypeRef("System.Xml.DtdParser/ScanningFunction")); 
  $.Field({Static:false, Public:false}, "savedScanningFunction", $asm0E.TypeRef("System.Xml.DtdParser/ScanningFunction")); 
  $.Field({Static:false, Public:false}, "whitespaceSeen", $.Boolean); 
  $.Field({Static:false, Public:false}, "tokenStartPos", $.Int32); 
  $.Field({Static:false, Public:false}, "colonPos", $.Int32); 
  $.Field({Static:false, Public:false}, "internalSubsetValueSb", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "externalEntitiesDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "currentEntityId", $.Int32); 
  $.Field({Static:false, Public:false}, "freeFloatingDtd", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasFreeFloatingInternalSubset", $.Boolean); 
  $.Field({Static:false, Public:false}, "stringBuilder", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "condSectionDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "literalLineInfo", $asm0E.TypeRef("System.Xml.LineInfo")); 
  $.Field({Static:false, Public:false}, "literalQuoteChar", $.Char); 
  $.Field({Static:false, Public:false}, "documentBaseUri", $.String); 
  $.Field({Static:false, Public:false}, "externalDtdBaseUri", $.String); 
  $.Field({Static:false, Public:false}, "undeclaredNotations", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0E.TypeRef("System.Xml.DtdParser/UndeclaredNotation")])); 
  $.Field({Static:false, Public:false}, "condSectionEntityIds", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Property({Static:false, Public:false}, "ParsingInternalSubset", $.Boolean);

  $.Property({Static:false, Public:false}, "IgnoreEntityReferences", $.Boolean);

  $.Property({Static:false, Public:false}, "SaveInternalSubsetValue", $.Boolean);

  $.Property({Static:false, Public:false}, "ParsingTopLevelMarkup", $.Boolean);

  $.Property({Static:false, Public:false}, "SupportNamespaces", $.Boolean);

  $.Property({Static:false, Public:false}, "Normalize", $.Boolean);

  $.Property({Static:false, Public:false}, "LineNo", $.Int32);

  $.Property({Static:false, Public:false}, "LinePos", $.Int32);

  $.Property({Static:false, Public:false}, "BaseUriStr", $.String);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IDtdParser"))
});

JSIL.MakeEnum(
  "System.Xml.DtdParser/Token", false, {
    CDATA: 0, 
    ID: 1, 
    IDREF: 2, 
    IDREFS: 3, 
    ENTITY: 4, 
    ENTITIES: 5, 
    NMTOKEN: 6, 
    NMTOKENS: 7, 
    NOTATION: 8, 
    None: 9, 
    PERef: 10, 
    AttlistDecl: 11, 
    ElementDecl: 12, 
    EntityDecl: 13, 
    NotationDecl: 14, 
    Comment: 15, 
    PI: 16, 
    CondSectionStart: 17, 
    CondSectionEnd: 18, 
    Eof: 19, 
    REQUIRED: 20, 
    IMPLIED: 21, 
    FIXED: 22, 
    QName: 23, 
    Name: 24, 
    Nmtoken: 25, 
    Quote: 26, 
    LeftParen: 27, 
    RightParen: 28, 
    GreaterThan: 29, 
    Or: 30, 
    LeftBracket: 31, 
    RightBracket: 32, 
    PUBLIC: 33, 
    SYSTEM: 34, 
    Literal: 35, 
    DOCTYPE: 36, 
    NData: 37, 
    Percent: 38, 
    Star: 39, 
    QMark: 40, 
    Plus: 41, 
    PCDATA: 42, 
    Comma: 43, 
    ANY: 44, 
    EMPTY: 45, 
    IGNORE: 46, 
    INCLUDE: 47
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DtdParser/ScanningFunction", false, {
    SubsetContent: 0, 
    Name: 1, 
    QName: 2, 
    Nmtoken: 3, 
    Doctype1: 4, 
    Doctype2: 5, 
    Element1: 6, 
    Element2: 7, 
    Element3: 8, 
    Element4: 9, 
    Element5: 10, 
    Element6: 11, 
    Element7: 12, 
    Attlist1: 13, 
    Attlist2: 14, 
    Attlist3: 15, 
    Attlist4: 16, 
    Attlist5: 17, 
    Attlist6: 18, 
    Attlist7: 19, 
    Entity1: 20, 
    Entity2: 21, 
    Entity3: 22, 
    Notation1: 23, 
    CondSection1: 24, 
    CondSection2: 25, 
    CondSection3: 26, 
    Literal: 27, 
    SystemId: 28, 
    PublicId1: 29, 
    PublicId2: 30, 
    ClosingTag: 31, 
    ParamEntitySpace: 32, 
    None: 33
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DtdParser/LiteralType", false, {
    AttributeValue: 0, 
    EntityReplText: 1, 
    SystemOrPublicID: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.DtdParser/UndeclaredNotation", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2AA20, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
  $.Field({Static:false, Public:false}, "linePos", $.Int32); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.DtdParser/ParseElementOnlyContent_LocalFrame", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2AA2F, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:true }, "startParenEntityId", $.Int32); 
  $.Field({Static:false, Public:true }, "parsingSchema", $asm0E.TypeRef("System.Xml.DtdParser/Token")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.DtdValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x288E2, null, [
        $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm0E.TypeRef("System.Xml.IValidationEventHandling"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddID", 
    $sig.make(0x288F0, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CheckDefaultValue", 
    $sig.make(0x288F8, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), 
        $asm0E.TypeRef("System.Xml.IValidationEventHandling"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
    $sig.make(0x288F4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
    $sig.make(0x288EF, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x288EC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FindId", 
    $sig.make(0x288F1, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenEntity", 
    $sig.make(0x288F2, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0x288E1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEntity", 
    $sig.make(0x288F3, $asm0E.TypeRef("System.Xml.Schema.SchemaEntity"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x288E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MeetsStandAloneConstraint", 
    $sig.make(0x288E5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x288F6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
    $sig.make(0x288EB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
    $sig.make(0x288EE, null, [$asm0E.TypeRef("System.Xml.XmlTokenizedType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x288F5, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetDefaultTypedValue", 
    $sig.make(0x288F7, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm0E.TypeRef("System.Xml.IDtdParserAdapter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0x288E4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
    $sig.make(0x288E8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
    $sig.make(0x288E7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
    $sig.make(0x288ED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
    $sig.make(0x288EA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidatePIComment", 
    $sig.make(0x288E6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
    $sig.make(0x288E9, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
  $.Field({Static:true , Public:false}, "namespaceManager", $asm0E.TypeRef("System.Xml.Schema.DtdValidator/NamespaceManager")); 
  $.Field({Static:false, Public:false}, "validationStack", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "attPresence", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "IDs", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "idRefListHead", $asm0E.TypeRef("System.Xml.Schema.IdRefNode")); 
  $.Field({Static:false, Public:false}, "processIdentityConstraints", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Schema.DtdValidator/NamespaceManager", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28981, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x28980, $.String, [$.String], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.FacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBCDA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckLexicalFacets", 
    $sig.make(0xBCC7, $asm06.TypeRef("System.Exception"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckPatternFacets", 
    $sig.make(0xBCD6, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.Schema.RestrictionFacets"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCC8, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCC9, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Decimal"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCCA, $asm06.TypeRef("System.Exception"), [$.Int64, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCCB, $asm06.TypeRef("System.Exception"), [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCCC, $asm06.TypeRef("System.Exception"), [$.Int16, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCCD, $asm06.TypeRef("System.Exception"), [$.Byte, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCCE, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.DateTime"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCCF, $asm06.TypeRef("System.Exception"), [$.Double, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCD0, $asm06.TypeRef("System.Exception"), [$.Single, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCD1, $asm06.TypeRef("System.Exception"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCD2, $asm06.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCD3, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.TimeSpan"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0xBCD4, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckWhitespaceFacets", 
    $sig.make(0xBCD5, null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConstructRestriction", 
    $sig.make(0xBCD8, $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets"), [
        $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0xBCD7, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Power", 
    $sig.make(0xBCD9, $asm06.TypeRef("System.Decimal"), [$.Int32, $.Int32], [])
  );

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.FacetsChecker/FacetsCompiler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A92F, null, [$asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation"), $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckDupFlag", 
    $sig.make(0x2A943, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckProhibitedFlag", 
    $sig.make(0x2A942, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
    $sig.make(0x2A93D, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileEnumerationFacet", 
    $sig.make(0x2A934, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileFacetCombinations", 
    $sig.make(0x2A93E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileFractionDigitsFacet", 
    $sig.make(0x2A93B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileLengthFacet", 
    $sig.make(0x2A930, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileMaxExclusiveFacet", 
    $sig.make(0x2A937, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileMaxInclusiveFacet", 
    $sig.make(0x2A936, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileMaxLengthFacet", 
    $sig.make(0x2A932, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileMinExclusiveFacet", 
    $sig.make(0x2A939, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileMinInclusiveFacet", 
    $sig.make(0x2A938, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileMinLengthFacet", 
    $sig.make(0x2A931, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompilePatternFacet", 
    $sig.make(0x2A933, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileTotalDigitsFacet", 
    $sig.make(0x2A93A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileWhitespaceFacet", 
    $sig.make(0x2A935, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyFacetsFromBaseType", 
    $sig.make(0x2A93F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FinishFacetCompile", 
    $sig.make(0x2A93C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseFacetValue", 
    $sig.make(0x2A940, $.Object, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
        $.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Preprocess", 
    $sig.make(0x2A941, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
    $sig.make(0x2A944, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
    $sig.make(0x2A945, null, [$asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")], [])
  );

  $.Field({Static:false, Public:false}, "datatype", $asm0E.TypeRef("System.Xml.Schema.DatatypeImplementation")); 
  $.Field({Static:false, Public:false}, "derivedRestriction", $asm0E.TypeRef("System.Xml.Schema.RestrictionFacets")); 
  $.Field({Static:false, Public:false}, "baseFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")); 
  $.Field({Static:false, Public:false}, "baseFixedFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")); 
  $.Field({Static:false, Public:false}, "validRestrictionFlags", $asm0E.TypeRef("System.Xml.Schema.RestrictionFlags")); 
  $.Field({Static:false, Public:false}, "nonNegativeInt", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "builtInType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "builtInEnum", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")); 
  $.Field({Static:false, Public:false}, "firstPattern", $.Boolean); 
  $.Field({Static:false, Public:false}, "regStr", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "pattern_facet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "c_map", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.FacetsChecker/FacetsCompiler/Map")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.FacetsChecker/FacetsCompiler/Map", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2AA45, null, [$.Char, $.String], [])
  );

  $.Field({Static:false, Public:false}, "match", $.Char); 
  $.Field({Static:false, Public:false}, "replacement", $.String); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.Numeric10FacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x289C9, null, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckTotalAndFractionDigits", 
    $sig.make(0x289E7, $asm06.TypeRef("System.Exception"), [
        $asm06.TypeRef("System.Decimal"), $.Int32, 
        $.Int32, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x289CB, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x289CE, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Decimal"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x289D0, $asm06.TypeRef("System.Exception"), [$.Int64, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x289DA, $asm06.TypeRef("System.Exception"), [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x289DE, $asm06.TypeRef("System.Exception"), [$.Int16, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x289E1, $asm06.TypeRef("System.Exception"), [$.Byte, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x289E3, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x289E5, $.Boolean, [
        $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")
      ], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "signs", $jsilcore.TypeRef("System.Array", [$.Char])); 
  $.Field({Static:false, Public:false}, "maxValue", $asm06.TypeRef("System.Decimal")); 
  $.Field({Static:false, Public:false}, "minValue", $asm06.TypeRef("System.Decimal")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.Numeric2FacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A0F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A02, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A05, $asm06.TypeRef("System.Exception"), [$.Double, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A08, $asm06.TypeRef("System.Exception"), [$.Single, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A0B, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A0D, $.Boolean, [
        $.Double, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.DurationFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A41, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A38, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A3B, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.TimeSpan"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A3D, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A3F, $.Boolean, [$asm06.TypeRef("System.TimeSpan"), $asm06.TypeRef("System.Collections.ArrayList")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.DateTimeFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A64, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A60, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A61, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.DateTime"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A62, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A63, $.Boolean, [
        $asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.StringFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A95, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckBuiltInFacets", 
    $sig.make(0x28A93, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A89, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A8B, $asm06.TypeRef("System.Exception"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28A8D, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LanguagePattern", 
    $sig.make(0x28A86, $asm07.TypeRef("System.Text.RegularExpressions.Regex"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A8F, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28A91, $.Boolean, [
        $.String, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.Field({Static:true , Public:false}, "languagePattern", $asm07.TypeRef("System.Text.RegularExpressions.Regex")); 
  $.Property({Static:true , Public:false}, "LanguagePattern", $asm07.TypeRef("System.Text.RegularExpressions.Regex"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.QNameFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B08, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28AFC, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28AFE, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28AFF, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28B00, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Collections.ArrayList")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.MiscFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B2E, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.BinaryFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B5D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28B59, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28B5A, $asm06.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28B5B, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28B5C, $.Boolean, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.ListFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B6D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28B68, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28B6A, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.UnionFacetsChecker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28B8F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
    $sig.make(0x28B86, $asm06.TypeRef("System.Exception"), [$.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
    $sig.make(0x28B88, $.Boolean, [
        $.Object, $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.NamespaceList", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBE16, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBE17, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Allows", 
    $sig.make(0xBE19, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Allows", 
    $sig.make(0xBE1A, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xBE18, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompareSetToOther", 
    $sig.make(0xBE1E, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Enumerate", 
    $sig.make(0xBE15, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Excluded", 
    $sig.make(0xBE14, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0xBE13, $asm0E.TypeRef("System.Xml.Schema.NamespaceList/ListType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Intersection", 
    $sig.make(0xBE1F, $.Type, [
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmpty", 
    $sig.make(0xBE21, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsSubset", 
    $sig.make(0xBE1C, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveNamespace", 
    $sig.make(0xBE20, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xBE1B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0xBE1D, $.Type, [
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.Schema.NamespaceList/ListType")); 
  $.Field({Static:false, Public:false}, "set", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "targetNamespace", $.String); 
  $.Property({Static:false, Public:true }, "Type", $asm0E.TypeRef("System.Xml.Schema.NamespaceList/ListType"));

  $.Property({Static:false, Public:true }, "Excluded", $.String);

  $.Property({Static:false, Public:true }, "Enumerate", $asm06.TypeRef("System.Collections.ICollection"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.NamespaceList/ListType", false, {
    Any: 0, 
    Other: 1, 
    Set: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.NamespaceList"), "System.Xml.Schema.NamespaceListV1Compat", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28BB8, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Allows", 
    $sig.make(0x28BB9, $.Boolean, [$.String], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.Parser", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28314, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaType"), $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSchemaRoot", 
    $sig.make(0x28317, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.SchemaType"), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateXmlNsAttribute", 
    $sig.make(0x28321, $asm0E.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FinishParsing", 
    $sig.make(0x28318, $asm0E.TypeRef("System.Xml.Schema.SchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XdrSchema", 
    $sig.make(0x28313, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSchema", 
    $sig.make(0x28311, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNode", 
    $sig.make(0x28322, $asm0E.TypeRef("System.Xml.XmlAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadElementNode", 
    $sig.make(0x2831F, $asm0E.TypeRef("System.Xml.XmlElement"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadEntityReferenceInAttribute", 
    $sig.make(0x28323, $asm0E.TypeRef("System.Xml.XmlEntityReference"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Parse", 
    $sig.make(0x28315, $asm0E.TypeRef("System.Xml.Schema.SchemaType"), [$asm0E.TypeRef("System.Xml.XmlReader"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ParseReaderNode", 
    $sig.make(0x2831A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAppInfoDocMarkup", 
    $sig.make(0x2831E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0x28312, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "StartParsing", 
    $sig.make(0x28316, null, [$asm0E.TypeRef("System.Xml.XmlReader"), $.String], [])
  );

  $.Field({Static:false, Public:false}, "schemaType", $asm0E.TypeRef("System.Xml.Schema.SchemaType")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "eventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "namespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "positionInfo", $asm0E.TypeRef("System.Xml.PositionInfo")); 
  $.Field({Static:false, Public:false}, "isProcessNamespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "schemaXmlDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "markupDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "builder", $asm0E.TypeRef("System.Xml.Schema.SchemaBuilder")); 
  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "xdrSchema", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "dummyDocument", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "processMarkup", $.Boolean); 
  $.Field({Static:false, Public:false}, "parentNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "annotationNSManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "xmlns", $.String); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Property({Static:false, Public:true }, "XmlSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "XdrSchema", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.Compositor", false, {
    Root: 0, 
    Include: 1, 
    Import: 2, 
    Redefine: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.RedefineEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28BEF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaRedefine"), $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.Field({Static:false, Public:false}, "redefine", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaRedefine")); 
  $.Field({Static:false, Public:false}, "schemaToUpdate", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.Preprocessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C87, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28C88, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildRefNamespaces", 
    $sig.make(0x28C91, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildSchemaList", 
    $sig.make(0x28C8D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedAttributeGroup", 
    $sig.make(0x28C9C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedComplexType", 
    $sig.make(0x28C9F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedGroup", 
    $sig.make(0x28C9B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedSimpleType", 
    $sig.make(0x28C9D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
    $sig.make(0x28C8A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CleanupRedefine", 
    $sig.make(0x28C8B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaExternal")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyIncludedComponents", 
    $sig.make(0x28C94, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CountGroupSelfReference", 
    $sig.make(0x28C9A, $.Int32, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Execute", 
    $sig.make(0x28C89, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReaderSettings", 
    $sig.make(0x28C80, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_RootSchema", 
    $sig.make(0x28C85, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetBuildInSchema", 
    $sig.make(0x28C90, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetChameleonSchema", 
    $sig.make(0x28CBD, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIncludedSet", 
    $sig.make(0x28C96, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetParentSchema", 
    $sig.make(0x28C98, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaEntity", 
    $sig.make(0x28CBB, $.Object, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadExternals", 
    $sig.make(0x28C8E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseUri", 
    $sig.make(0x28C92, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Preprocess", 
    $sig.make(0x28C93, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
        $asm06.TypeRef("System.Collections.ArrayList")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
    $sig.make(0x28CC0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
    $sig.make(0x28CC3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttribute", 
    $sig.make(0x28CA0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeContent", 
    $sig.make(0x28CA6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeGroup", 
    $sig.make(0x28CA7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
    $sig.make(0x28CB4, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessComplexType", 
    $sig.make(0x28CAF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessElement", 
    $sig.make(0x28CA8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessElementContent", 
    $sig.make(0x28CAA, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessGroup", 
    $sig.make(0x28CB1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessIdentityConstraint", 
    $sig.make(0x28CAC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalAttribute", 
    $sig.make(0x28CA5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalElement", 
    $sig.make(0x28CA9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessNotation", 
    $sig.make(0x28CB2, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaNotation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessParticle", 
    $sig.make(0x28CB3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessRedefine", 
    $sig.make(0x28C95, null, [$asm0E.TypeRef("System.Xml.Schema.RedefineEntry")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessSimpleType", 
    $sig.make(0x28CAD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResolveSchemaLocationUri", 
    $sig.make(0x28CB9, $asm07.TypeRef("System.Uri"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ChameleonSchemas", 
    $sig.make(0x28C83, null, [$asm06.TypeRef("System.Collections.Hashtable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ReaderSettings", 
    $sig.make(0x28C81, null, [$asm0E.TypeRef("System.Xml.XmlReaderSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaLocations", 
    $sig.make(0x28C82, null, [$asm06.TypeRef("System.Collections.Hashtable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0x28C7F, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0x28CBF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSchemaDefaults", 
    $sig.make(0x28C99, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateIdAttribute", 
    $sig.make(0x28CB5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateNameAttribute", 
    $sig.make(0x28CB6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateQNameAttribute", 
    $sig.make(0x28CB7, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.Constant({Static:true , Public:false}, "schemaBlockDefaultAllowed", 7); 
  $.Constant({Static:true , Public:false}, "schemaFinalDefaultAllowed", 30); 
  $.Constant({Static:true , Public:false}, "elementBlockAllowed", 7); 
  $.Constant({Static:true , Public:false}, "elementFinalAllowed", 6); 
  $.Constant({Static:true , Public:false}, "simpleTypeFinalAllowed", 30); 
  $.Constant({Static:true , Public:false}, "complexTypeBlockAllowed", 6); 
  $.Constant({Static:true , Public:false}, "complexTypeFinalAllowed", 6); 
  $.Field({Static:false, Public:false}, "Xmlns", $.String); 
  $.Field({Static:false, Public:false}, "NsXsi", $.String); 
  $.Field({Static:false, Public:false}, "targetNamespace", $.String); 
  $.Field({Static:false, Public:false}, "rootSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "currentSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "elementFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "attributeFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "blockDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "finalDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "schemaLocations", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "chameleonSchemas", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "referenceNamespaces", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "processedExternals", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "lockList", $asm06.TypeRef("System.Collections.SortedList")); 
  $.Field({Static:false, Public:false}, "readerSettings", $asm0E.TypeRef("System.Xml.XmlReaderSettings")); 
  $.Field({Static:false, Public:false}, "rootSchemaForRedefine", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "redefinedList", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:true , Public:false}, "builtInSchemaForXmlNS", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:false}, "ReaderSettings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:false}, "SchemaLocations", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "ChameleonSchemas", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "RootSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaDeclBase", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB346, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB347, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddValue", 
    $sig.make(0xB348, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckEnumeration", 
    $sig.make(0xB349, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
    $sig.make(0xB34A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Datatype", 
    $sig.make(0xB33E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueRaw", 
    $sig.make(0xB342, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueTyped", 
    $sig.make(0xB344, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsDeclaredInExternal", 
    $sig.make(0xB334, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MaxLength", 
    $sig.make(0xB338, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MinLength", 
    $sig.make(0xB33A, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0xB330, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
    $sig.make(0xB332, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Presence", 
    $sig.make(0xB336, $asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase/Use"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
    $sig.make(0xB33C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Values", 
    $sig.make(0xB340, $asm06.TypeRef("System.Collections.Generic.List`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Datatype", 
    $sig.make(0xB33F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DefaultValueRaw", 
    $sig.make(0xB343, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DefaultValueTyped", 
    $sig.make(0xB345, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsDeclaredInExternal", 
    $sig.make(0xB335, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MaxLength", 
    $sig.make(0xB339, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MinLength", 
    $sig.make(0xB33B, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Name", 
    $sig.make(0xB331, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Prefix", 
    $sig.make(0xB333, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Presence", 
    $sig.make(0xB337, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase/Use")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaType", 
    $sig.make(0xB33D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Values", 
    $sig.make(0xB341, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$.String])], [])
  );

  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "prefix", $.String); 
  $.Field({Static:false, Public:false}, "isDeclaredInExternal", $.Boolean); 
  $.Field({Static:false, Public:false}, "presence", $asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase/Use")); 
  $.Field({Static:false, Public:false}, "schemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "datatype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "defaultValueRaw", $.String); 
  $.Field({Static:false, Public:false}, "defaultValueTyped", $.Object); 
  $.Field({Static:false, Public:false}, "maxLength", $.Int64); 
  $.Field({Static:false, Public:false}, "minLength", $.Int64); 
  $.Field({Static:false, Public:false}, "values", $asm06.TypeRef("System.Collections.Generic.List`1", [$.String])); 
  $.Property({Static:false, Public:false}, "Name", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false}, "Prefix", $.String);

  $.Property({Static:false, Public:false}, "IsDeclaredInExternal", $.Boolean);

  $.Property({Static:false, Public:false}, "Presence", $asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase/Use"));

  $.Property({Static:false, Public:false}, "MaxLength", $.Int64);

  $.Property({Static:false, Public:false}, "MinLength", $.Int64);

  $.Property({Static:false, Public:false}, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false}, "Datatype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

  $.Property({Static:false, Public:false}, "Values", $asm06.TypeRef("System.Collections.Generic.List`1", [$.String]));

  $.Property({Static:false, Public:false}, "DefaultValueRaw", $.String);

  $.Property({Static:false, Public:false}, "DefaultValueTyped", $.Object);

});

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaDeclBase/Use", false, {
    Default: 0, 
    Required: 1, 
    Implied: 2, 
    Fixed: 3, 
    RequiredFixed: 4
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase"), "System.Xml.Schema.SchemaAttDef", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB36F, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB370, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB371, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckXmlSpace", 
    $sig.make(0xB372, null, [$asm0E.TypeRef("System.Xml.IValidationEventHandling")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB373, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueChecked", 
    $sig.make(0xB36A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueExpanded", 
    $sig.make(0xB364, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasEntityRef", 
    $sig.make(0xB36B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
    $sig.make(0xB35E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
    $sig.make(0xB35C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Reserved", 
    $sig.make(0xB368, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaAttribute", 
    $sig.make(0xB36D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TokenizedType", 
    $sig.make(0xB366, $asm0E.TypeRef("System.Xml.XmlTokenizedType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueLineNumber", 
    $sig.make(0xB362, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueLinePosition", 
    $sig.make(0xB360, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DefaultValueExpanded", 
    $sig.make(0xB365, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_HasEntityRef", 
    $sig.make(0xB36C, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LineNumber", 
    $sig.make(0xB35F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_LinePosition", 
    $sig.make(0xB35D, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Reserved", 
    $sig.make(0xB369, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaAttribute", 
    $sig.make(0xB36E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TokenizedType", 
    $sig.make(0xB367, null, [$asm0E.TypeRef("System.Xml.XmlTokenizedType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ValueLineNumber", 
    $sig.make(0xB363, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ValueLinePosition", 
    $sig.make(0xB361, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_IsDeclaredInExternal", 
    $sig.make(0xB356, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_IsNonCDataType", 
    $sig.make(0xB355, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_IsXmlAttribute", 
    $sig.make(0xB357, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_LineNumber", 
    $sig.make(0xB353, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_LinePosition", 
    $sig.make(0xB354, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_LocalName", 
    $sig.make(0xB352, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeInfo.get_Prefix", 
    $sig.make(0xB351, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdDefaultAttributeInfo.get_DefaultValueExpanded", 
    $sig.make(0xB358, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdDefaultAttributeInfo.get_DefaultValueTyped", 
    $sig.make(0xB359, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdDefaultAttributeInfo.get_ValueLineNumber", 
    $sig.make(0xB35A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdDefaultAttributeInfo.get_ValueLinePosition", 
    $sig.make(0xB35B, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "defExpanded", $.String); 
  $.Field({Static:false, Public:false}, "lineNum", $.Int32); 
  $.Field({Static:false, Public:false}, "linePos", $.Int32); 
  $.Field({Static:false, Public:false}, "valueLineNum", $.Int32); 
  $.Field({Static:false, Public:false}, "valueLinePos", $.Int32); 
  $.Field({Static:false, Public:false}, "reserved", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve")); 
  $.Field({Static:false, Public:false}, "defaultValueChecked", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasEntityRef", $.Boolean); 
  $.Field({Static:false, Public:false}, "schemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.Prefix", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.LocalName", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.LineNumber", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.LinePosition", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.IsNonCDataType", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.IsDeclaredInExternal", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeInfo.IsXmlAttribute", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdDefaultAttributeInfo.DefaultValueExpanded", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdDefaultAttributeInfo.DefaultValueTyped", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdDefaultAttributeInfo.ValueLineNumber", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdDefaultAttributeInfo.ValueLinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

  $.Property({Static:false, Public:false}, "ValueLinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "ValueLineNumber", $.Int32);

  $.Property({Static:false, Public:false}, "DefaultValueExpanded", $.String);

  $.Property({Static:false, Public:false}, "TokenizedType", $asm0E.TypeRef("System.Xml.XmlTokenizedType"));

  $.Property({Static:false, Public:false}, "Reserved", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve"));

  $.Property({Static:false, Public:false}, "DefaultValueChecked", $.Boolean);

  $.Property({Static:false, Public:false}, "HasEntityRef", $.Boolean);

  $.Property({Static:false, Public:false}, "SchemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo"), $asm0E.TypeRef("System.Xml.IDtdAttributeInfo"))
});

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaAttDef/Reserve", false, {
    None: 0, 
    XmlSpace: 1, 
    XmlLang: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27A50, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndChildren", 
    $sig.make(0x27A4E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsContentParsed", 
    $sig.make(0x27A45, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAttribute", 
    $sig.make(0x27A42, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessCData", 
    $sig.make(0x27A49, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
    $sig.make(0x27A39, $.Boolean, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessMarkup", 
    $sig.make(0x27A47, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartChildren", 
    $sig.make(0x27A4B, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.SchemaCollectionCompiler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D83, null, [$asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildParticleContentModel", 
    $sig.make(0x28DBE, null, [$asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CalculateEffectiveTotalRange", 
    $sig.make(0x28DB3, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CalculateSequenceRange", 
    $sig.make(0x28DAE, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeAll", 
    $sig.make(0x28DA2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeChoice", 
    $sig.make(0x28DA3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeElement", 
    $sig.make(0x28DA0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeGroupRef", 
    $sig.make(0x28DA1, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeParticle", 
    $sig.make(0x28D9F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CannonicalizeSequence", 
    $sig.make(0x28DA4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
    $sig.make(0x28D9D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSubstitutionGroup", 
    $sig.make(0x28D93, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckUnionType", 
    $sig.make(0x28D97, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
    $sig.make(0x28D86, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Cleanup", 
    $sig.make(0x28D87, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupAttribute", 
    $sig.make(0x28D8A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupAttributeGroup", 
    $sig.make(0x28D8B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupAttributes", 
    $sig.make(0x28D8F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupComplexType", 
    $sig.make(0x28D8C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupElement", 
    $sig.make(0x28D8E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupGroup", 
    $sig.make(0x28D90, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupParticle", 
    $sig.make(0x28D91, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanupSimpleType", 
    $sig.make(0x28D8D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compile", 
    $sig.make(0x28D88, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeIntersection", 
    $sig.make(0x28DB9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeUnion", 
    $sig.make(0x28DB8, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAttribute", 
    $sig.make(0x28DBA, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileAttributeGroup", 
    $sig.make(0x28DB6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileBaseMemberTypes", 
    $sig.make(0x28D96, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileCompexTypeElements", 
    $sig.make(0x28DC0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexContent", 
    $sig.make(0x28DBD, $asm0E.TypeRef("System.Xml.Schema.ContentValidator"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentExtension", 
    $sig.make(0x28D9B, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentRestriction", 
    $sig.make(0x28D9C, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileComplexType", 
    $sig.make(0x28D98, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileContentTypeParticle", 
    $sig.make(0x28D9E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileElement", 
    $sig.make(0x28DBC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileGroup", 
    $sig.make(0x28D94, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileIdentityConstraint", 
    $sig.make(0x28DBB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileLocalAttributes", 
    $sig.make(0x28DB7, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
    $sig.make(0x28DBF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentExtension", 
    $sig.make(0x28D99, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentRestriction", 
    $sig.make(0x28D9A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSimpleType", 
    $sig.make(0x28D95, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSubstitutionGroup", 
    $sig.make(0x28D92, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Execute", 
    $sig.make(0x28D84, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAnySchemaType", 
    $sig.make(0x28DC3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
    $sig.make(0x28DC2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMappingParticle", 
    $sig.make(0x28DB1, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaContentType", 
    $sig.make(0x28DB5, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSimpleType", 
    $sig.make(0x28DC1, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsAnyFromAny", 
    $sig.make(0x28DA8, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsElementFromAny", 
    $sig.make(0x28DA7, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsElementFromElement", 
    $sig.make(0x28DA6, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsElementFromGroupBase", 
    $sig.make(0x28DAA, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromAny", 
    $sig.make(0x28DA9, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromGroupBase", 
    $sig.make(0x28DAB, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsParticleEmptiable", 
    $sig.make(0x28DB2, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromAll", 
    $sig.make(0x28DAC, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromChoice", 
    $sig.make(0x28DAD, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
    $sig.make(0x28DAF, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
    $sig.make(0x28DB0, $.Boolean, [
        $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal"), 
        $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsValidRestriction", 
    $sig.make(0x28DA5, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Output", 
    $sig.make(0x28D89, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Prepare", 
    $sig.make(0x28D85, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushComplexType", 
    $sig.make(0x28DB4, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.Field({Static:false, Public:false}, "compileContentModel", $.Boolean); 
  $.Field({Static:false, Public:false}, "examplars", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "complexTypeStack", $asm06.TypeRef("System.Collections.Stack")); 
  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.SchemaCollectionPreprocessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28E1C, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildRefNamespaces", 
    $sig.make(0x28E29, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedAttributeGroup", 
    $sig.make(0x28E3A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedComplexType", 
    $sig.make(0x28E41, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedGroup", 
    $sig.make(0x28E30, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRefinedSimpleType", 
    $sig.make(0x28E3D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
    $sig.make(0x28E23, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CountGroupSelfReference", 
    $sig.make(0x28E2F, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Execute", 
    $sig.make(0x28E1D, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaEntity", 
    $sig.make(0x28E71, $asm06.TypeRef("System.IO.Stream"), [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadExternals", 
    $sig.make(0x28E27, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Preprocess", 
    $sig.make(0x28E2B, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
        $asm0E.TypeRef("System.Xml.Schema.SchemaCollectionPreprocessor/Compositor")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
    $sig.make(0x28E6E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttribute", 
    $sig.make(0x28E43, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeContent", 
    $sig.make(0x28E49, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeGroup", 
    $sig.make(0x28E4B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
    $sig.make(0x28E5F, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessComplexType", 
    $sig.make(0x28E59, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessElement", 
    $sig.make(0x28E4C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessElementContent", 
    $sig.make(0x28E4E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessGroup", 
    $sig.make(0x28E5B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessIdentityConstraint", 
    $sig.make(0x28E4F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalAttribute", 
    $sig.make(0x28E47, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalElement", 
    $sig.make(0x28E4D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessNotation", 
    $sig.make(0x28E5C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaNotation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessParticle", 
    $sig.make(0x28E5D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessRedefine", 
    $sig.make(0x28E2D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaRedefine")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessSimpleType", 
    $sig.make(0x28E51, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResolveSchemaLocationUri", 
    $sig.make(0x28E6F, $asm07.TypeRef("System.Uri"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0x28E1B, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0x28E6C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateIdAttribute", 
    $sig.make(0x28E60, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateNameAttribute", 
    $sig.make(0x28E65, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateQNameAttribute", 
    $sig.make(0x28E67, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.Constant({Static:true , Public:false}, "schemaBlockDefaultAllowed", 7); 
  $.Constant({Static:true , Public:false}, "schemaFinalDefaultAllowed", 30); 
  $.Constant({Static:true , Public:false}, "elementBlockAllowed", 7); 
  $.Constant({Static:true , Public:false}, "elementFinalAllowed", 6); 
  $.Constant({Static:true , Public:false}, "simpleTypeFinalAllowed", 28); 
  $.Constant({Static:true , Public:false}, "complexTypeBlockAllowed", 6); 
  $.Constant({Static:true , Public:false}, "complexTypeFinalAllowed", 6); 
  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "targetNamespace", $.String); 
  $.Field({Static:false, Public:false}, "buildinIncluded", $.Boolean); 
  $.Field({Static:false, Public:false}, "elementFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "attributeFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "blockDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "finalDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "schemaLocations", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "referenceNamespaces", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "Xmlns", $.String); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaCollectionPreprocessor/Compositor", false, {
    Root: 0, 
    Include: 1, 
    Import: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase"), "System.Xml.Schema.SchemaElementDecl", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB92E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB92F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB930, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttDef", 
    $sig.make(0xB936, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckAttributes", 
    $sig.make(0xB938, null, [$asm06.TypeRef("System.Collections.Hashtable"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB935, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateAnyTypeElementDecl", 
    $sig.make(0xB931, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AnyAttribute", 
    $sig.make(0xB925, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttDefs", 
    $sig.make(0xB92C, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Block", 
    $sig.make(0xB91C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Constraints", 
    $sig.make(0xB927, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ContentValidator", 
    $sig.make(0xB923, $asm0E.TypeRef("System.Xml.Schema.ContentValidator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultAttDefs", 
    $sig.make(0xB92B, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultAttribute", 
    $sig.make(0xB920, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasNonCDataAttribute", 
    $sig.make(0xB916, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasRequiredAttribute", 
    $sig.make(0xB921, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAbstract", 
    $sig.make(0xB918, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIdDeclared", 
    $sig.make(0xB914, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNillable", 
    $sig.make(0xB91A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNotationDeclared", 
    $sig.make(0xB91E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProhibitedAttributes", 
    $sig.make(0xB92D, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaElement", 
    $sig.make(0xB929, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttDef", 
    $sig.make(0xB937, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_AnyAttribute", 
    $sig.make(0xB926, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Block", 
    $sig.make(0xB91D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Constraints", 
    $sig.make(0xB928, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ContentValidator", 
    $sig.make(0xB924, null, [$asm0E.TypeRef("System.Xml.Schema.ContentValidator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_HasNonCDataAttribute", 
    $sig.make(0xB917, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_HasRequiredAttribute", 
    $sig.make(0xB922, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsAbstract", 
    $sig.make(0xB919, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsIdDeclared", 
    $sig.make(0xB915, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsNillable", 
    $sig.make(0xB91B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsNotationDeclared", 
    $sig.make(0xB91F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaElement", 
    $sig.make(0xB92A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeListInfo.get_HasNonCDataAttributes", 
    $sig.make(0xB913, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeListInfo.get_LocalName", 
    $sig.make(0xB912, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeListInfo.get_Prefix", 
    $sig.make(0xB911, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeListInfo.LookupAttribute", 
    $sig.make(0xB932, $asm0E.TypeRef("System.Xml.IDtdAttributeInfo"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeListInfo.LookupDefaultAttributes", 
    $sig.make(0xB933, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdAttributeListInfo.LookupIdAttribute", 
    $sig.make(0xB934, $asm0E.TypeRef("System.Xml.IDtdAttributeInfo"), [], [])
  );

  $.Field({Static:false, Public:false}, "attdefs", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")])); 
  $.Field({Static:false, Public:false}, "defaultAttdefs", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo")])); 
  $.Field({Static:false, Public:false}, "isIdDeclared", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasNonCDataAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "isAbstract", $.Boolean); 
  $.Field({Static:false, Public:false}, "isNillable", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasRequiredAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "isNotationDeclared", $.Boolean); 
  $.Field({Static:false, Public:false}, "prohibitedAttributes", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")])); 
  $.Field({Static:false, Public:false}, "contentValidator", $asm0E.TypeRef("System.Xml.Schema.ContentValidator")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "block", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "constraints", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")])); 
  $.Field({Static:false, Public:false}, "schemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type); 
  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeListInfo.Prefix", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeListInfo.LocalName", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdAttributeListInfo.HasNonCDataAttributes", $.Boolean);

  $.Property({Static:false, Public:false}, "IsIdDeclared", $.Boolean);

  $.Property({Static:false, Public:false}, "HasNonCDataAttribute", $.Boolean);

  $.Property({Static:false, Public:false}, "IsAbstract", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNillable", $.Boolean);

  $.Property({Static:false, Public:false}, "Block", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

  $.Property({Static:false, Public:false}, "IsNotationDeclared", $.Boolean);

  $.Property({Static:false, Public:false}, "HasDefaultAttribute", $.Boolean);

  $.Property({Static:false, Public:false}, "HasRequiredAttribute", $.Boolean);

  $.Property({Static:false, Public:false}, "ContentValidator", $asm0E.TypeRef("System.Xml.Schema.ContentValidator"));

  $.Property({Static:false, Public:false}, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

  $.Property({Static:false, Public:false}, "Constraints", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]));

  $.Property({Static:false, Public:false}, "SchemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"));

  $.Property({Static:false, Public:false}, "DefaultAttDefs", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm0E.TypeRef("System.Xml.IDtdDefaultAttributeInfo")]));

  $.Property({Static:false, Public:false}, "AttDefs", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")]));

  $.Property({Static:false, Public:false}, "ProhibitedAttributes", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")]));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IDtdAttributeListInfo"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaEntity", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28678, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseURI", 
    $sig.make(0x28670, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DeclaredInExternal", 
    $sig.make(0x2865C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DeclaredURI", 
    $sig.make(0x28676, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsExternal", 
    $sig.make(0x28658, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Line", 
    $sig.make(0x28664, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x28641, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NData", 
    $sig.make(0x2865E, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParsingInProgress", 
    $sig.make(0x28674, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Pos", 
    $sig.make(0x2866C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Pubid", 
    $sig.make(0x28645, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Text", 
    $sig.make(0x28661, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Url", 
    $sig.make(0x28642, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsPredefinedEntity", 
    $sig.make(0x2867A, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_BaseURI", 
    $sig.make(0x28672, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DeclaredInExternal", 
    $sig.make(0x2865D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DeclaredURI", 
    $sig.make(0x28677, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsExternal", 
    $sig.make(0x2865A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Line", 
    $sig.make(0x2866A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NData", 
    $sig.make(0x2865F, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ParsingInProgress", 
    $sig.make(0x28675, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Pos", 
    $sig.make(0x2866E, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Pubid", 
    $sig.make(0x28656, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Text", 
    $sig.make(0x28662, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Url", 
    $sig.make(0x28643, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_BaseUriString", 
    $sig.make(0x28634, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_DeclaredUriString", 
    $sig.make(0x28636, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_IsDeclaredInExternal", 
    $sig.make(0x28614, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_IsExternal", 
    $sig.make(0x28612, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_IsParameterEntity", 
    $sig.make(0x2862F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_IsUnparsedEntity", 
    $sig.make(0x28624, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_LineNumber", 
    $sig.make(0x2863E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_LinePosition", 
    $sig.make(0x28640, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_Name", 
    $sig.make(0x28611, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_PublicId", 
    $sig.make(0x28639, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_SystemId", 
    $sig.make(0x28637, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdEntityInfo.get_Text", 
    $sig.make(0x2863B, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "qname", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "url", $.String); 
  $.Field({Static:false, Public:false}, "pubid", $.String); 
  $.Field({Static:false, Public:false}, "text", $.String); 
  $.Field({Static:false, Public:false}, "ndata", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Field({Static:false, Public:false}, "isParameter", $.Boolean); 
  $.Field({Static:false, Public:false}, "isExternal", $.Boolean); 
  $.Field({Static:false, Public:false}, "parsingInProgress", $.Boolean); 
  $.Field({Static:false, Public:false}, "isDeclaredInExternal", $.Boolean); 
  $.Field({Static:false, Public:false}, "baseURI", $.String); 
  $.Field({Static:false, Public:false}, "declaredURI", $.String); 
  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.Name", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.IsExternal", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.IsDeclaredInExternal", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.IsUnparsedEntity", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.IsParameterEntity", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.BaseUriString", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.DeclaredUriString", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.SystemId", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.PublicId", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.Text", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.LineNumber", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdEntityInfo.LinePosition", $.Int32);

  $.Property({Static:false, Public:false}, "Name", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false}, "Url", $.String);

  $.Property({Static:false, Public:false}, "Pubid", $.String);

  $.Property({Static:false, Public:false}, "IsExternal", $.Boolean);

  $.Property({Static:false, Public:false}, "DeclaredInExternal", $.Boolean);

  $.Property({Static:false, Public:false}, "NData", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false}, "Text", $.String);

  $.Property({Static:false, Public:false}, "Line", $.Int32);

  $.Property({Static:false, Public:false}, "Pos", $.Int32);

  $.Property({Static:false, Public:false}, "BaseURI", $.String);

  $.Property({Static:false, Public:false}, "ParsingInProgress", $.Boolean);

  $.Property({Static:false, Public:false}, "DeclaredURI", $.String);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IDtdEntityInfo"))
});

JSIL.MakeEnum(
  "System.Xml.Schema.AttributeMatchState", false, {
    AttributeFound: 0, 
    AnyIdAttributeFound: 1, 
    UndeclaredElementAndAttribute: 2, 
    UndeclaredAttribute: 3, 
    AnyAttributeLax: 4, 
    AnyAttributeSkip: 5, 
    ProhibitedAnyAttribute: 6, 
    ProhibitedAttribute: 7, 
    AttributeNameMismatch: 8, 
    ValidateAttributeInvalidCall: 9
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB747, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xB752, null, [$.Type, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Contains", 
    $sig.make(0xB74E, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finish", 
    $sig.make(0xB753, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttributeDecls", 
    $sig.make(0xB73F, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocTypeName", 
    $sig.make(0xB733, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementDecls", 
    $sig.make(0xB737, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementDeclsByType", 
    $sig.make(0xB73E, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ErrorCount", 
    $sig.make(0xB741, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GeneralEntities", 
    $sig.make(0xB739, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaEntity")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalDtdSubset", 
    $sig.make(0xB735, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Notations", 
    $sig.make(0xB740, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0E.TypeRef("System.Xml.Schema.SchemaNotation")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParameterEntities", 
    $sig.make(0xB73A, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaEntity")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
    $sig.make(0xB73B, $asm0E.TypeRef("System.Xml.Schema.SchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TargetNamespaces", 
    $sig.make(0xB73D, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_UndeclaredElementDecls", 
    $sig.make(0xB738, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
    $sig.make(0xB74B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeXdr", 
    $sig.make(0xB74F, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeXsd", 
    $sig.make(0xB750, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), [
        $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.AttributeMatchState")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributeXsd", 
    $sig.make(0xB751, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), [
        $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0xB74A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElementDecl", 
    $sig.make(0xB748, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetType", 
    $sig.make(0xB74C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDecl", 
    $sig.make(0xB749, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HasSchema", 
    $sig.make(0xB74D, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DocTypeName", 
    $sig.make(0xB734, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ErrorCount", 
    $sig.make(0xB742, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_InternalDtdSubset", 
    $sig.make(0xB736, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaType", 
    $sig.make(0xB73C, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.get_HasDefaultAttributes", 
    $sig.make(0xB743, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.get_HasNonCDataAttributes", 
    $sig.make(0xB744, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.get_InternalDtdSubset", 
    $sig.make(0xB746, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.get_Name", 
    $sig.make(0xB745, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.GetAttributeLists", 
    $sig.make(0xB755, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.LookupAttributeList", 
    $sig.make(0xB754, $asm0E.TypeRef("System.Xml.IDtdAttributeListInfo"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDtdInfo.LookupEntity", 
    $sig.make(0xB756, $asm0E.TypeRef("System.Xml.IDtdEntityInfo"), [$.String], [])
  );

  $.Field({Static:false, Public:false}, "elementDecls", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")])); 
  $.Field({Static:false, Public:false}, "undeclaredElementDecls", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")])); 
  $.Field({Static:false, Public:false}, "generalEntities", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaEntity")])); 
  $.Field({Static:false, Public:false}, "parameterEntities", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaEntity")])); 
  $.Field({Static:false, Public:false}, "docTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "internalDtdSubset", $.String); 
  $.Field({Static:false, Public:false}, "hasNonCDataAttributes", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasDefaultAttributes", $.Boolean); 
  $.Field({Static:false, Public:false}, "targetNamespaces", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean])); 
  $.Field({Static:false, Public:false}, "attributeDecls", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")])); 
  $.Field({Static:false, Public:false}, "errorCount", $.Int32); 
  $.Field({Static:false, Public:false}, "schemaType", $asm0E.TypeRef("System.Xml.Schema.SchemaType")); 
  $.Field({Static:false, Public:false}, "elementDeclsByType", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")])); 
  $.Field({Static:false, Public:false}, "notations", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0E.TypeRef("System.Xml.Schema.SchemaNotation")])); 
  $.Property({Static:false, Public:true }, "DocTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false}, "InternalDtdSubset", $.String);

  $.Property({Static:false, Public:false}, "ElementDecls", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")]));

  $.Property({Static:false, Public:false}, "UndeclaredElementDecls", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")]));

  $.Property({Static:false, Public:false}, "GeneralEntities", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaEntity")]));

  $.Property({Static:false, Public:false}, "ParameterEntities", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaEntity")]));

  $.Property({Static:false, Public:false}, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.SchemaType"));

  $.Property({Static:false, Public:false}, "TargetNamespaces", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean]));

  $.Property({Static:false, Public:false}, "ElementDeclsByType", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")]));

  $.Property({Static:false, Public:false}, "AttributeDecls", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")]));

  $.Property({Static:false, Public:false}, "Notations", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0E.TypeRef("System.Xml.Schema.SchemaNotation")]));

  $.Property({Static:false, Public:false}, "ErrorCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdInfo.HasDefaultAttributes", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdInfo.HasNonCDataAttributes", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdInfo.Name", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDtdInfo.InternalDtdSubset", $.String);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IDtdInfo"))
});

JSIL.DeclareNamespace("$lSystem");
JSIL.DeclareNamespace("$lSystem.Xml");
JSIL.DeclareNamespace("$lSystem.Xml.IDtdInfo");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaInfo/GetAttributeLists>d__0", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A8EF, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
    $sig.make(0x2A8F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x2A8EB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x2A8E9, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x2A8E7, $asm0E.TypeRef("System.Xml.IDtdAttributeListInfo"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x2A8EA, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x2A8E8, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x2A8EC, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x2A8ED, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:true }, "elemDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Field({Static:false, Public:true }, "eleDeclAsAttList", $asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")); 
  $.Field({Static:false, Public:true }, "$wrap3", $asm06.TypeRef("System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $asm0E.TypeRef("System.Xml.IDtdAttributeListInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Xml.IDtdAttributeListInfo")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaNames", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB769, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateTokenToQNameTable", 
    $sig.make(0xB76A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xB768, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetName", 
    $sig.make(0xB76E, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsXDRRoot", 
    $sig.make(0xB76D, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsXSDRoot", 
    $sig.make(0xB76C, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SchemaTypeFromRoot", 
    $sig.make(0xB76B, $asm0E.TypeRef("System.Xml.Schema.SchemaType"), [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:true }, "NsDataType", $.String); 
  $.Field({Static:false, Public:true }, "NsDataTypeAlias", $.String); 
  $.Field({Static:false, Public:true }, "NsDataTypeOld", $.String); 
  $.Field({Static:false, Public:true }, "NsXml", $.String); 
  $.Field({Static:false, Public:true }, "NsXmlNs", $.String); 
  $.Field({Static:false, Public:true }, "NsXdr", $.String); 
  $.Field({Static:false, Public:true }, "NsXdrAlias", $.String); 
  $.Field({Static:false, Public:true }, "NsXs", $.String); 
  $.Field({Static:false, Public:true }, "NsXsi", $.String); 
  $.Field({Static:false, Public:true }, "XsiType", $.String); 
  $.Field({Static:false, Public:true }, "XsiNil", $.String); 
  $.Field({Static:false, Public:true }, "XsiSchemaLocation", $.String); 
  $.Field({Static:false, Public:true }, "XsiNoNamespaceSchemaLocation", $.String); 
  $.Field({Static:false, Public:true }, "XsdSchema", $.String); 
  $.Field({Static:false, Public:true }, "XdrSchema", $.String); 
  $.Field({Static:false, Public:true }, "QnPCData", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXml", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXmlNs", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtDt", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXmlLang", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnMaxOccurs", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnMinOccurs", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnInfinite", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnModel", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnOpen", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnClosed", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnContent", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnMixed", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnEmpty", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnEltOnly", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnTextOnly", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnOrder", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnSeq", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnOne", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnMany", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnRequired", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnYes", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnNo", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnString", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnID", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnIDRef", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnIDRefs", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnEntity", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnEntities", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnNmToken", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnNmTokens", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnEnumeration", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDefault", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrSchema", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrElementType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrElement", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrGroup", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrAttributeType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrAttribute", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrDataType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrDescription", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrExtends", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXdrAliasSchema", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtValues", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtMaxLength", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtMinLength", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtMax", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtMin", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtMinExclusive", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDtMaxExclusive", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnTargetNamespace", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnVersion", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnFinalDefault", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnBlockDefault", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnFixed", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnAbstract", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnBlock", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnSubstitutionGroup", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnFinal", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnNillable", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnRef", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnBase", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnDerivedBy", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnNamespace", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnProcessContents", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnRefer", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnPublic", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnSystem", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnSchemaLocation", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnValue", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnUse", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnForm", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnElementFormDefault", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnAttributeFormDefault", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnItemType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnMemberTypes", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXPath", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdSchema", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAnnotation", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdInclude", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdImport", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdElement", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAttribute", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAttributeGroup", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAnyAttribute", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdGroup", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAll", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdChoice", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdSequence", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAny", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdNotation", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdSimpleType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdComplexType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdUnique", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdKey", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdKeyRef", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdSelector", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdField", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdMinExclusive", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdMinInclusive", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdMaxInclusive", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdMaxExclusive", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdTotalDigits", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdFractionDigits", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdLength", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdMinLength", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdMaxLength", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdEnumeration", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdPattern", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdDocumentation", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAppinfo", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnSource", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdComplexContent", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdSimpleContent", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdRestriction", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdExtension", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdUnion", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdList", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdWhiteSpace", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdRedefine", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:true }, "QnXsdAnyType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "TokenToQName", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])); 
  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaNames/Token", false, {
    Empty: 0, 
    SchemaName: 1, 
    SchemaType: 2, 
    SchemaMaxOccurs: 3, 
    SchemaMinOccurs: 4, 
    SchemaInfinite: 5, 
    SchemaModel: 6, 
    SchemaOpen: 7, 
    SchemaClosed: 8, 
    SchemaContent: 9, 
    SchemaMixed: 10, 
    SchemaEmpty: 11, 
    SchemaElementOnly: 12, 
    SchemaTextOnly: 13, 
    SchemaOrder: 14, 
    SchemaSeq: 15, 
    SchemaOne: 16, 
    SchemaMany: 17, 
    SchemaRequired: 18, 
    SchemaYes: 19, 
    SchemaNo: 20, 
    SchemaString: 21, 
    SchemaId: 22, 
    SchemaIdref: 23, 
    SchemaIdrefs: 24, 
    SchemaEntity: 25, 
    SchemaEntities: 26, 
    SchemaNmtoken: 27, 
    SchemaNmtokens: 28, 
    SchemaEnumeration: 29, 
    SchemaDefault: 30, 
    XdrRoot: 31, 
    XdrElementType: 32, 
    XdrElement: 33, 
    XdrGroup: 34, 
    XdrAttributeType: 35, 
    XdrAttribute: 36, 
    XdrDatatype: 37, 
    XdrDescription: 38, 
    XdrExtends: 39, 
    SchemaXdrRootAlias: 40, 
    SchemaDtType: 41, 
    SchemaDtValues: 42, 
    SchemaDtMaxLength: 43, 
    SchemaDtMinLength: 44, 
    SchemaDtMax: 45, 
    SchemaDtMin: 46, 
    SchemaDtMinExclusive: 47, 
    SchemaDtMaxExclusive: 48, 
    SchemaTargetNamespace: 49, 
    SchemaVersion: 50, 
    SchemaFinalDefault: 51, 
    SchemaBlockDefault: 52, 
    SchemaFixed: 53, 
    SchemaAbstract: 54, 
    SchemaBlock: 55, 
    SchemaSubstitutionGroup: 56, 
    SchemaFinal: 57, 
    SchemaNillable: 58, 
    SchemaRef: 59, 
    SchemaBase: 60, 
    SchemaDerivedBy: 61, 
    SchemaNamespace: 62, 
    SchemaProcessContents: 63, 
    SchemaRefer: 64, 
    SchemaPublic: 65, 
    SchemaSystem: 66, 
    SchemaSchemaLocation: 67, 
    SchemaValue: 68, 
    SchemaSource: 69, 
    SchemaAttributeFormDefault: 70, 
    SchemaElementFormDefault: 71, 
    SchemaUse: 72, 
    SchemaForm: 73, 
    XsdSchema: 74, 
    XsdAnnotation: 75, 
    XsdInclude: 76, 
    XsdImport: 77, 
    XsdElement: 78, 
    XsdAttribute: 79, 
    xsdAttributeGroup: 80, 
    XsdAnyAttribute: 81, 
    XsdGroup: 82, 
    XsdAll: 83, 
    XsdChoice: 84, 
    XsdSequence: 85, 
    XsdAny: 86, 
    XsdNotation: 87, 
    XsdSimpleType: 88, 
    XsdComplexType: 89, 
    XsdUnique: 90, 
    XsdKey: 91, 
    XsdKeyref: 92, 
    XsdSelector: 93, 
    XsdField: 94, 
    XsdMinExclusive: 95, 
    XsdMinInclusive: 96, 
    XsdMaxExclusive: 97, 
    XsdMaxInclusive: 98, 
    XsdTotalDigits: 99, 
    XsdFractionDigits: 100, 
    XsdLength: 101, 
    XsdMinLength: 102, 
    XsdMaxLength: 103, 
    XsdEnumeration: 104, 
    XsdPattern: 105, 
    XsdDocumentation: 106, 
    XsdAppInfo: 107, 
    XsdComplexContent: 108, 
    XsdComplexContentExtension: 109, 
    XsdComplexContentRestriction: 110, 
    XsdSimpleContent: 111, 
    XsdSimpleContentExtension: 112, 
    XsdSimpleContentRestriction: 113, 
    XsdSimpleTypeList: 114, 
    XsdSimpleTypeRestriction: 115, 
    XsdSimpleTypeUnion: 116, 
    XsdWhitespace: 117, 
    XsdRedefine: 118, 
    SchemaItemType: 119, 
    SchemaMemberTypes: 120, 
    SchemaXPath: 121, 
    XmlLang: 122
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Schema.SchemaNamespaceManager", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28EEF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x28EF6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x28EF7, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "node", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.SchemaNotation", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28F26, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x28F1B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Pubid", 
    $sig.make(0x28F22, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SystemLiteral", 
    $sig.make(0x28F1D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Pubid", 
    $sig.make(0x28F24, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SystemLiteral", 
    $sig.make(0x28F1F, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "SYSTEM", 0); 
  $.Constant({Static:true , Public:false}, "PUBLIC", 1); 
  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "systemLiteral", $.String); 
  $.Field({Static:false, Public:false}, "pubid", $.String); 
  $.Property({Static:false, Public:false}, "Name", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false}, "SystemLiteral", $.String);

  $.Property({Static:false, Public:false}, "Pubid", $.String);

});

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaType", false, {
    None: 0, 
    DTD: 1, 
    XDR: 2, 
    XSD: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.Schema.ValidationEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB760, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB761, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Exception", 
    $sig.make(0xB75E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0xB75F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Severity", 
    $sig.make(0xB75D, $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"), [], [])
  );

  $.Field({Static:false, Public:false}, "ex", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")); 
  $.Field({Static:false, Public:false}, "severity", $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")); 
  $.Property({Static:false, Public:true }, "Severity", $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType"));

  $.Property({Static:false, Public:true }, "Exception", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"));

  $.Property({Static:false, Public:true }, "Message", $.String);

});

JSIL.MakeDelegate("System.Xml.Schema.ValidationEventHandler", true, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.StateUnion", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "State", $.Int32); 
  $.Field({Static:false, Public:true }, "AllElementsRequired", $.Int32); 
  $.Field({Static:false, Public:true }, "CurPosIndex", $.Int32); 
  $.Field({Static:false, Public:true }, "NumberOfRunningPos", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.ValidationState", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBCA0, null, [], [])
  );

  $.Field({Static:false, Public:true }, "IsNill", $.Boolean); 
  $.Field({Static:false, Public:true }, "IsDefault", $.Boolean); 
  $.Field({Static:false, Public:true }, "NeedValidateChildren", $.Boolean); 
  $.Field({Static:false, Public:true }, "CheckRequiredAttribute", $.Boolean); 
  $.Field({Static:false, Public:true }, "ValidationSkipped", $.Boolean); 
  $.Field({Static:false, Public:true }, "Depth", $.Int32); 
  $.Field({Static:false, Public:true }, "ProcessContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
  $.Field({Static:false, Public:true }, "Validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity")); 
  $.Field({Static:false, Public:true }, "ElementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Field({Static:false, Public:true }, "ElementDeclBeforeXsi", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Field({Static:false, Public:true }, "LocalName", $.String); 
  $.Field({Static:false, Public:true }, "Namespace", $.String); 
  $.Field({Static:false, Public:true }, "Constr", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.ConstraintStruct")])); 
  $.Field({Static:false, Public:true }, "CurrentState", $asm0E.TypeRef("System.Xml.Schema.StateUnion")); 
  $.Field({Static:false, Public:true }, "HasMatched", $.Boolean); 
  $.Field({Static:false, Public:true }, "CurPos", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.BitSet")])); 
  $.Field({Static:false, Public:true }, "AllElementsSet", $asm0E.TypeRef("System.Xml.Schema.BitSet")); 
  $.Field({Static:false, Public:true }, "RunningPositions", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.RangePositionInfo")])); 
  $.Field({Static:false, Public:true }, "TooComplex", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SchemaBuilder"), "System.Xml.Schema.XdrBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28F77, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddOrder", 
    $sig.make(0x28FC6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckDatatype", 
    $sig.make(0x28FD3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckDefaultAttValue", 
    $sig.make(0x28FD4, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CompareMinMaxLength", 
    $sig.make(0x28FCD, null, [
        $.UInt32, $.UInt32, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndChildren", 
    $sig.make(0x28F8E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetContent", 
    $sig.make(0x28FD1, $.Int32, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetModel", 
    $sig.make(0x28FD2, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNextState", 
    $sig.make(0x28FC2, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrder", 
    $sig.make(0x28FC5, $.Int32, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HandleMinMax", 
    $sig.make(0x28FCA, null, [
        $asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.UInt32, 
        $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsContentParsed", 
    $sig.make(0x28F84, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsGlobal", 
    $sig.make(0x28FD5, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSkipableAttribute", 
    $sig.make(0x28FC4, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSkipableElement", 
    $sig.make(0x28FC3, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsXdrSchema", 
    $sig.make(0x28F7E, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsYes", 
    $sig.make(0x28FC7, $.Boolean, [$.Object, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
    $sig.make(0x28F7D, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseDtMaxLength", 
    $sig.make(0x28FCB, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Object, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseDtMinLength", 
    $sig.make(0x28FCC, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Object, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseInteger", 
    $sig.make(0x28FCE, $.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseMaxOccurs", 
    $sig.make(0x28FC9, $.UInt32, [$.Object, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseMinOccurs", 
    $sig.make(0x28FC8, $.UInt32, [$.Object, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x28F91, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopGroupInfo", 
    $sig.make(0x28F93, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAttribute", 
    $sig.make(0x28F7B, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessCData", 
    $sig.make(0x28F8B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
    $sig.make(0x28F79, $.Boolean, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessMarkup", 
    $sig.make(0x28F86, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x28F90, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushGroupInfo", 
    $sig.make(0x28F92, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28FD6, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28FD7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28FD8, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x28FD9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0x28F74, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributePresence", 
    $sig.make(0x28FD0, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartChildren", 
    $sig.make(0x28F8D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BeginAttribute", 
    $sig.make(0x28FB7, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BeginAttributeType", 
    $sig.make(0x28FAC, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BeginElementType", 
    $sig.make(0x28FA2, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BeginRoot", 
    $sig.make(0x28F97, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Default", 
    $sig.make(0x28FB6, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Required", 
    $sig.make(0x28FB5, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Type", 
    $sig.make(0x28FB4, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Default", 
    $sig.make(0x28FA7, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtMaxLength", 
    $sig.make(0x28FAA, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtMinLength", 
    $sig.make(0x28FAB, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtType", 
    $sig.make(0x28FA8, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtValues", 
    $sig.make(0x28FA9, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Name", 
    $sig.make(0x28FA5, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Required", 
    $sig.make(0x28FA6, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_MaxOccurs", 
    $sig.make(0x28FB1, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_MinOccurs", 
    $sig.make(0x28FB0, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_Type", 
    $sig.make(0x28FAF, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Content", 
    $sig.make(0x28F9B, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtMaxLength", 
    $sig.make(0x28FA0, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtMinLength", 
    $sig.make(0x28FA1, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtType", 
    $sig.make(0x28F9E, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtValues", 
    $sig.make(0x28F9F, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Model", 
    $sig.make(0x28F9C, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Name", 
    $sig.make(0x28F9A, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Order", 
    $sig.make(0x28F9D, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_MaxOccurs", 
    $sig.make(0x28FBC, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_MinOccurs", 
    $sig.make(0x28FBB, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_Order", 
    $sig.make(0x28FBA, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildRoot_ID", 
    $sig.make(0x28F96, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_BuildRoot_Name", 
    $sig.make(0x28F95, null, [
        $.Type, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XDR_CheckAttributeDefault", 
    $sig.make(0x28FCF, null, [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/DeclBaseInfo"), $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttribute", 
    $sig.make(0x28FB8, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttributeDtType", 
    $sig.make(0x28FC1, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttributeType", 
    $sig.make(0x28FAD, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndElement", 
    $sig.make(0x28FB2, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndElementDtType", 
    $sig.make(0x28FBF, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndElementType", 
    $sig.make(0x28FA3, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndGroup", 
    $sig.make(0x28FBD, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_EndRoot", 
    $sig.make(0x28F98, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttribute", 
    $sig.make(0x28FB3, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttributeDtType", 
    $sig.make(0x28FC0, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttributeType", 
    $sig.make(0x28FA4, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitElement", 
    $sig.make(0x28FAE, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitElementDtType", 
    $sig.make(0x28FBE, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitElementType", 
    $sig.make(0x28F99, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitGroup", 
    $sig.make(0x28FB9, null, [$.Type, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "XDR_InitRoot", 
    $sig.make(0x28F94, null, [$.Type, $.Object], [])
  );

  $.Constant({Static:true , Public:false}, "XdrSchema", 1); 
  $.Constant({Static:true , Public:false}, "XdrElementType", 2); 
  $.Constant({Static:true , Public:false}, "XdrAttributeType", 3); 
  $.Constant({Static:true , Public:false}, "XdrElement", 4); 
  $.Constant({Static:true , Public:false}, "XdrAttribute", 5); 
  $.Constant({Static:true , Public:false}, "XdrGroup", 6); 
  $.Constant({Static:true , Public:false}, "XdrElementDatatype", 7); 
  $.Constant({Static:true , Public:false}, "XdrAttributeDatatype", 8); 
  $.Constant({Static:true , Public:false}, "SchemaFlagsNs", 256); 
  $.Constant({Static:true , Public:false}, "StackIncrement", 10); 
  $.Constant({Static:true , Public:false}, "SchemaOrderNone", 0); 
  $.Constant({Static:true , Public:false}, "SchemaOrderMany", 1); 
  $.Constant({Static:true , Public:false}, "SchemaOrderSequence", 2); 
  $.Constant({Static:true , Public:false}, "SchemaOrderChoice", 3); 
  $.Constant({Static:true , Public:false}, "SchemaOrderAll", 4); 
  $.Constant({Static:true , Public:false}, "SchemaContentNone", 0); 
  $.Constant({Static:true , Public:false}, "SchemaContentEmpty", 1); 
  $.Constant({Static:true , Public:false}, "SchemaContentText", 2); 
  $.Constant({Static:true , Public:false}, "SchemaContentMixed", 3); 
  $.Constant({Static:true , Public:false}, "SchemaContentElement", 4); 
  $.Constant({Static:true , Public:false}, "x_schema", "x-schema:"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_Element", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementType_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeType_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Group_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementType_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeType_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Element_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Attribute_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Group_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementDataType_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeDataType_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "S_SchemaEntries", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrEntry")])); 
  $.Field({Static:false, Public:false}, "_SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "_TargetNamespace", $.String); 
  $.Field({Static:false, Public:false}, "_reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "positionInfo", $asm0E.TypeRef("System.Xml.PositionInfo")); 
  $.Field({Static:false, Public:false}, "_contentValidator", $asm0E.TypeRef("System.Xml.Schema.ParticleContentValidator")); 
  $.Field({Static:false, Public:false}, "_CurState", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrEntry")); 
  $.Field({Static:false, Public:false}, "_NextState", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrEntry")); 
  $.Field({Static:false, Public:false}, "_StateHistory", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "_GroupStack", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "_XdrName", $.String); 
  $.Field({Static:false, Public:false}, "_XdrPrefix", $.String); 
  $.Field({Static:false, Public:false}, "_ElementDef", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/ElementContent")); 
  $.Field({Static:false, Public:false}, "_GroupDef", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/GroupContent")); 
  $.Field({Static:false, Public:false}, "_AttributeDef", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/AttributeContent")); 
  $.Field({Static:false, Public:false}, "_UndefinedAttributeTypes", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/DeclBaseInfo")); 
  $.Field({Static:false, Public:false}, "_BaseDecl", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/DeclBaseInfo")); 
  $.Field({Static:false, Public:false}, "_NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "_SchemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "_CurNsMgr", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "_Text", $.String); 
  $.Field({Static:false, Public:false}, "validationEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "_UndeclaredElements", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/DeclBaseInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29002, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x29003, null, [], [])
  );

  $.Field({Static:false, Public:false}, "_Name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "_Prefix", $.String); 
  $.Field({Static:false, Public:false}, "_TypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "_TypePrefix", $.String); 
  $.Field({Static:false, Public:false}, "_Default", $.Object); 
  $.Field({Static:false, Public:false}, "_Revises", $.Object); 
  $.Field({Static:false, Public:false}, "_MaxOccurs", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MinOccurs", $.UInt32); 
  $.Field({Static:false, Public:false}, "_Checking", $.Boolean); 
  $.Field({Static:false, Public:false}, "_ElementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Field({Static:false, Public:false}, "_Attdef", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")); 
  $.Field({Static:false, Public:false}, "_Next", $.Type); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/GroupContent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29044, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Copy", 
    $sig.make(0x29040, null, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Copy", 
    $sig.make(0x29042, $.Type, [$.Type], [])
  );

  $.Field({Static:false, Public:false}, "_MinVal", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32); 
  $.Field({Static:false, Public:false}, "_HasMaxAttr", $.Boolean); 
  $.Field({Static:false, Public:false}, "_HasMinAttr", $.Boolean); 
  $.Field({Static:false, Public:false}, "_Order", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/ElementContent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2901F, null, [], [])
  );

  $.Field({Static:false, Public:false}, "_ElementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Field({Static:false, Public:false}, "_ContentAttr", $.Int32); 
  $.Field({Static:false, Public:false}, "_OrderAttr", $.Int32); 
  $.Field({Static:false, Public:false}, "_MasterGroupRequired", $.Boolean); 
  $.Field({Static:false, Public:false}, "_ExistTerminal", $.Boolean); 
  $.Field({Static:false, Public:false}, "_AllowDataType", $.Boolean); 
  $.Field({Static:false, Public:false}, "_HasDataType", $.Boolean); 
  $.Field({Static:false, Public:false}, "_HasType", $.Boolean); 
  $.Field({Static:false, Public:false}, "_EnumerationRequired", $.Boolean); 
  $.Field({Static:false, Public:false}, "_MinVal", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MaxLength", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MinLength", $.UInt32); 
  $.Field({Static:false, Public:false}, "_AttDefList", $asm06.TypeRef("System.Collections.Hashtable")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/AttributeContent", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x290E6, null, [], [])
  );

  $.Field({Static:false, Public:false}, "_AttDef", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")); 
  $.Field({Static:false, Public:false}, "_Name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "_Prefix", $.String); 
  $.Field({Static:false, Public:false}, "_Required", $.Boolean); 
  $.Field({Static:false, Public:false}, "_MinVal", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MaxLength", $.UInt32); 
  $.Field({Static:false, Public:false}, "_MinLength", $.UInt32); 
  $.Field({Static:false, Public:false}, "_EnumerationRequired", $.Boolean); 
  $.Field({Static:false, Public:false}, "_HasDataType", $.Boolean); 
  $.Field({Static:false, Public:false}, "_Global", $.Boolean); 
  $.Field({Static:false, Public:false}, "_Default", $.Object); 
});

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrBuildFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrInitFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrBeginChildFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrEndChildFunction", false, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/XdrAttributeEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A94D, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm0E.TypeRef("System.Xml.XmlTokenizedType"), 
        $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrBuildFunction")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A94E, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm0E.TypeRef("System.Xml.XmlTokenizedType"), 
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrBuildFunction")
      ], [])
  );

  $.Field({Static:false, Public:false}, "_Attribute", $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
  $.Field({Static:false, Public:false}, "_SchemaFlags", $.Int32); 
  $.Field({Static:false, Public:false}, "_Datatype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "_BuildFunc", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrBuildFunction")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/XdrEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2900A, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")]), $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrInitFunction"), 
        $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrBeginChildFunction"), $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrEndChildFunction"), 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "_Name", $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
  $.Field({Static:false, Public:false}, "_NextStates", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "_Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
  $.Field({Static:false, Public:false}, "_InitFunc", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrInitFunction")); 
  $.Field({Static:false, Public:false}, "_BeginChildFunc", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrBeginChildFunction")); 
  $.Field({Static:false, Public:false}, "_EndChildFunc", $asm0E.TypeRef("System.Xml.Schema.XdrBuilder/XdrEndChildFunction")); 
  $.Field({Static:false, Public:false}, "_AllowText", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.XdrValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29238, null, [$asm0E.TypeRef("System.Xml.Schema.BaseValidator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29239, null, [
        $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
        $asm0E.TypeRef("System.Xml.IValidationEventHandling")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddID", 
    $sig.make(0x2924A, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CheckDefaultValue", 
    $sig.make(0x29249, null, [
        $.String, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), 
        $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $.Object, 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
    $sig.make(0x2924E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
    $sig.make(0x29248, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x29247, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FindId", 
    $sig.make(0x2924B, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
    $sig.make(0x29236, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsInlineSchemaStarted", 
    $sig.make(0x29235, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0x29237, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x2923A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
    $sig.make(0x29245, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadSchemaFromLocation", 
    $sig.make(0x29244, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x2924D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
    $sig.make(0x2923F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
    $sig.make(0x2923E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
    $sig.make(0x29246, null, [$asm0E.TypeRef("System.Xml.XmlTokenizedType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x2924C, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "QualifiedName", 
    $sig.make(0x2924F, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThoroughGetElementDecl", 
    $sig.make(0x29241, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0x2923B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
    $sig.make(0x2923D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
    $sig.make(0x2923C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
    $sig.make(0x29240, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
    $sig.make(0x29243, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
    $sig.make(0x29242, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
  $.Constant({Static:true , Public:false}, "x_schema", "x-schema:"); 
  $.Field({Static:false, Public:false}, "validationStack", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "attPresence", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "$name", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "nsManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "isProcessContents", $.Boolean); 
  $.Field({Static:false, Public:false}, "IDs", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "idRefListHead", $asm0E.TypeRef("System.Xml.Schema.IdRefNode")); 
  $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm0E.TypeRef("System.Xml.Schema.Parser")); 
  $.Property({Static:false, Public:false}, "IsInlineSchemaStarted", $.Boolean);

  $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XPath.XPathItem"), "System.Xml.Schema.XmlAtomicValue", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292C3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292C5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292C9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Double], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292CB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292CE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292D2, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292D4, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292D5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292D6, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Object, 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x292D7, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNode", 
    $sig.make(0x292A5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypedValue", 
    $sig.make(0x292AA, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x292C1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsBoolean", 
    $sig.make(0x292AD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsDateTime", 
    $sig.make(0x292B0, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsDouble", 
    $sig.make(0x292B6, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsInt", 
    $sig.make(0x292BD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueAsLong", 
    $sig.make(0x292C0, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x292A7, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
    $sig.make(0x292A6, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPrefixFromQName", 
    $sig.make(0x292DB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICloneable.Clone", 
    $sig.make(0x292D8, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x292DA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValueAs", 
    $sig.make(0x292D9, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.Field({Static:false, Public:false}, "xmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "objVal", $.Object); 
  $.Field({Static:false, Public:false}, "clrType", $asm06.TypeRef("System.TypeCode")); 
  $.Field({Static:false, Public:false}, "unionVal", $asm0E.TypeRef("System.Xml.Schema.XmlAtomicValue/Union")); 
  $.Field({Static:false, Public:false}, "nsPrefix", $asm0E.TypeRef("System.Xml.Schema.XmlAtomicValue/NamespacePrefixForQName")); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm06.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.XmlAtomicValue/Union", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "boolVal", $.Boolean); 
  $.Field({Static:false, Public:true }, "dblVal", $.Double); 
  $.Field({Static:false, Public:true }, "i64Val", $.Int64); 
  $.Field({Static:false, Public:true }, "i32Val", $.Int32); 
  $.Field({Static:false, Public:true }, "dtVal", $asm06.TypeRef("System.DateTime")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlAtomicValue/NamespacePrefixForQName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29417, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
    $sig.make(0x2941B, $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm0E.TypeRef("System.Xml.XmlNamespaceScope")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x29418, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
    $sig.make(0x29419, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:true }, "prefix", $.String); 
  $.Field({Static:false, Public:true }, "ns", $.String); 
  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObject", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB10B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAnnotation", 
    $sig.make(0xB109, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB10A, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IdAttribute", 
    $sig.make(0xB0FF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsProcessing", 
    $sig.make(0xB103, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0xB0F5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0xB0F7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0xB101, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
    $sig.make(0xB0FD, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
    $sig.make(0xB0FB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
    $sig.make(0xB0F9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnAdd", 
    $sig.make(0xB105, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnClear", 
    $sig.make(0xB107, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnRemove", 
    $sig.make(0xB106, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IdAttribute", 
    $sig.make(0xB100, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsProcessing", 
    $sig.make(0xB104, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LineNumber", 
    $sig.make(0xB0F6, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LinePosition", 
    $sig.make(0xB0F8, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0xB102, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
    $sig.make(0xB0FE, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Parent", 
    $sig.make(0xB0FC, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SourceUri", 
    $sig.make(0xB0FA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetUnhandledAttributes", 
    $sig.make(0xB108, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.Field({Static:false, Public:false}, "lineNum", $.Int32); 
  $.Field({Static:false, Public:false}, "linePos", $.Int32); 
  $.Field({Static:false, Public:false}, "sourceUri", $.String); 
  $.Field({Static:false, Public:false}, "namespaces", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")); 
  $.Field({Static:false, Public:false}, "parent", $.Type); 
  $.Field({Static:false, Public:false}, "isProcessing", $.Boolean); 
  $.Property({Static:false, Public:true }, "LineNumber", $.Int32)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "SourceUri", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Parent", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Namespaces", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlNamespaceDeclarationsAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "IsProcessing", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchema", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB6CA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAnnotation", 
    $sig.make(0xB6DC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddCompiledInfo", 
    $sig.make(0xB6DE, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB6D8, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0xB6D4, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0xB6D5, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.XmlResolver")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

  $.ExternalMethod({Static:false, Public:false}, "CompileSchema", 
    $sig.make(0xB6D6, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileSchemaInSet", 
    $sig.make(0xB6D7, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeepClone", 
    $sig.make(0xB6D9, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeFormDefault", 
    $sig.make(0xB69C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeGroups", 
    $sig.make(0xB6B2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0xB6B1, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseUri", 
    $sig.make(0xB6BC, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BlockDefault", 
    $sig.make(0xB69E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Document", 
    $sig.make(0xB6C2, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementFormDefault", 
    $sig.make(0xB6A2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Elements", 
    $sig.make(0xB6B4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ErrorCount", 
    $sig.make(0xB6C3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FinalDefault", 
    $sig.make(0xB6A0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Groups", 
    $sig.make(0xB6B9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0xB6B5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IdAttribute", 
    $sig.make(0xB6C5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IdentityConstraints", 
    $sig.make(0xB6BB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Ids", 
    $sig.make(0xB6C1, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ImportedNamespaces", 
    $sig.make(0xB6C9, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ImportedSchemas", 
    $sig.make(0xB6C8, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Includes", 
    $sig.make(0xB6A8, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsChameleon", 
    $sig.make(0xB6BF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
    $sig.make(0xB6AA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsCompiledBySet", 
    $sig.make(0xB6AB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsPreprocessed", 
    $sig.make(0xB6AD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsRedefined", 
    $sig.make(0xB6AF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0xB6A9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
    $sig.make(0xB6C7, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
    $sig.make(0xB6BA, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaId", 
    $sig.make(0xB6BE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypes", 
    $sig.make(0xB6B3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespace", 
    $sig.make(0xB6A4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
    $sig.make(0xB6B7, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0xB6A6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExternalSchemasList", 
    $sig.make(0xB6DD, null, [$asm06.TypeRef("System.Collections.IList"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Read", 
    $sig.make(0xB6CB, $.Type, [$asm06.TypeRef("System.IO.TextReader"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Read", 
    $sig.make(0xB6CC, $.Type, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Read", 
    $sig.make(0xB6CD, $.Type, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AttributeFormDefault", 
    $sig.make(0xB69D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_BaseUri", 
    $sig.make(0xB6BD, null, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BlockDefault", 
    $sig.make(0xB69F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementFormDefault", 
    $sig.make(0xB6A3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ErrorCount", 
    $sig.make(0xB6C4, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FinalDefault", 
    $sig.make(0xB6A1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Id", 
    $sig.make(0xB6B6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IdAttribute", 
    $sig.make(0xB6C6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsChameleon", 
    $sig.make(0xB6C0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsCompiledBySet", 
    $sig.make(0xB6AC, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsPreprocessed", 
    $sig.make(0xB6AE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsRedefined", 
    $sig.make(0xB6B0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TargetNamespace", 
    $sig.make(0xB6A5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
    $sig.make(0xB6B8, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Version", 
    $sig.make(0xB6A7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetIsCompiled", 
    $sig.make(0xB6DA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetUnhandledAttributes", 
    $sig.make(0xB6DB, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xB6CE, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xB6CF, null, [$asm06.TypeRef("System.IO.Stream"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xB6D0, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xB6D1, null, [$asm06.TypeRef("System.IO.TextWriter"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xB6D2, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xB6D3, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager")], [])
  );

  $.Constant({Static:true , Public:true }, "Namespace", "http://www.w3.org/2001/XMLSchema"); 
  $.Constant({Static:true , Public:true }, "InstanceNamespace", "http://www.w3.org/2001/XMLSchema-instance"); 
  $.Field({Static:false, Public:false}, "attributeFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "elementFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "blockDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "finalDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "targetNs", $.String); 
  $.Field({Static:false, Public:false}, "version", $.String); 
  $.Field({Static:false, Public:false}, "includes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "id", $.String); 
  $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])); 
  $.Field({Static:false, Public:false}, "isCompiled", $.Boolean); 
  $.Field({Static:false, Public:false}, "isCompiledBySet", $.Boolean); 
  $.Field({Static:false, Public:false}, "isPreprocessed", $.Boolean); 
  $.Field({Static:false, Public:false}, "isRedefined", $.Boolean); 
  $.Field({Static:false, Public:false}, "errorCount", $.Int32); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "attributeGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "elements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "types", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "groups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "notations", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "identityConstraints", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:true , Public:false}, "globalIdCounter", $.Int32, -1); 
  $.Field({Static:false, Public:false}, "importedSchemas", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "importedNamespaces", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "schemaId", $.Int32); 
  $.Field({Static:false, Public:false}, "baseUri", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "isChameleon", $.Boolean); 
  $.Field({Static:false, Public:false}, "ids", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "document", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Property({Static:false, Public:true }, "AttributeFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaForm.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["attributeFormDefault"]; });

  $.Property({Static:false, Public:true }, "BlockDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["blockDefault"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

  $.Property({Static:false, Public:true }, "FinalDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["finalDefault"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

  $.Property({Static:false, Public:true }, "ElementFormDefault", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaForm.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["elementFormDefault"]; });

  $.Property({Static:false, Public:true }, "TargetNamespace", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["targetNamespace"]; });

  $.Property({Static:false, Public:true }, "Version", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["version"]; });

  $.Property({Static:false, Public:true }, "Includes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["redefine", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["include", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInclude")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["import", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaImport")]; });

  $.Property({Static:false, Public:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["notation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaNotation")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; });

  $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "IsCompiledBySet", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "IsPreprocessed", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "IsRedefined", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "AttributeGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "SchemaTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Elements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Id", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

  $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

  $.Property({Static:false, Public:true }, "Groups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Notations", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "IdentityConstraints", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "BaseUri", $asm07.TypeRef("System.Uri"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "SchemaId", $.Int32)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "IsChameleon", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Ids", $asm06.TypeRef("System.Collections.Hashtable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Document", $asm0E.TypeRef("System.Xml.XmlDocument"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "ErrorCount", $.Int32)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false}, "ImportedSchemas", $asm06.TypeRef("System.Collections.ArrayList"));

  $.Property({Static:false, Public:false}, "ImportedNamespaces", $asm06.TypeRef("System.Collections.ArrayList"));

})
  .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["schema"]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaAnnotated", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB11C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAnnotation", 
    $sig.make(0xB11B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
    $sig.make(0xB114, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0xB112, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IdAttribute", 
    $sig.make(0xB118, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
    $sig.make(0xB116, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
    $sig.make(0xB115, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Id", 
    $sig.make(0xB113, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IdAttribute", 
    $sig.make(0xB119, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
    $sig.make(0xB117, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetUnhandledAttributes", 
    $sig.make(0xB11A, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.Field({Static:false, Public:false}, "id", $.String); 
  $.Field({Static:false, Public:false}, "annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
  $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])); 
  $.Property({Static:false, Public:true }, "Id", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

  $.Property({Static:false, Public:true }, "Annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")]; });

  $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaParticle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB188, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
    $sig.make(0xB184, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsMultipleOccurrence", 
    $sig.make(0xB185, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxOccurs", 
    $sig.make(0xB182, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxOccursString", 
    $sig.make(0xB17E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MinOccurs", 
    $sig.make(0xB180, $asm06.TypeRef("System.Decimal"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MinOccursString", 
    $sig.make(0xB17C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameString", 
    $sig.make(0xB186, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
    $sig.make(0xB187, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaxOccurs", 
    $sig.make(0xB183, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaxOccursString", 
    $sig.make(0xB17F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MinOccurs", 
    $sig.make(0xB181, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MinOccursString", 
    $sig.make(0xB17D, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "minOccurs", $asm06.TypeRef("System.Decimal")); 
  $.Field({Static:false, Public:false}, "maxOccurs", $asm06.TypeRef("System.Decimal")); 
  $.Field({Static:false, Public:false}, "flags", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle/Occurs")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type); 
  $.Property({Static:false, Public:true }, "MinOccursString", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["minOccurs"]; });

  $.Property({Static:false, Public:true }, "MaxOccursString", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["maxOccurs"]; });

  $.Property({Static:false, Public:true }, "MinOccurs", $asm06.TypeRef("System.Decimal"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "MaxOccurs", $asm06.TypeRef("System.Decimal"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

  $.Property({Static:false, Public:false}, "IsMultipleOccurrence", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String);

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaParticle/Occurs", false, {
    None: 0, 
    Min: 1, 
    Max: 2
  }, true
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaParticle/EmptyParticle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A990, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
    $sig.make(0x2A98E, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaGroupBase", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27CF9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x27CF7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItems", 
    $sig.make(0x27CF8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), "System.Xml.Schema.XmlSchemaAll", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D0D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
    $sig.make(0x27D0B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x27D0A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItems", 
    $sig.make(0x27D0C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")]; });

  $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaAnnotation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB8D6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0xB8CE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IdAttribute", 
    $sig.make(0xB8D3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0xB8D0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
    $sig.make(0xB8D1, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Id", 
    $sig.make(0xB8CF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IdAttribute", 
    $sig.make(0xB8D4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
    $sig.make(0xB8D2, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetUnhandledAttributes", 
    $sig.make(0xB8D5, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.Field({Static:false, Public:false}, "id", $.String); 
  $.Field({Static:false, Public:false}, "items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])); 
  $.Property({Static:false, Public:true }, "Id", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

  $.Property({Static:false, Public:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["documentation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDocumentation")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["appinfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAppInfo")]; });

  $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaAny", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28334, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Allows", 
    $sig.make(0x28332, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceList", 
    $sig.make(0x2832F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceListV1Compat", 
    $sig.make(0x28330, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x28319, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
    $sig.make(0x28320, $asm0E.TypeRef("System.Xml.Schema.NamespaceList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameString", 
    $sig.make(0x2832E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProcessContents", 
    $sig.make(0x2831C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProcessContentsCorrect", 
    $sig.make(0x2832C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ResolvedNamespace", 
    $sig.make(0x28328, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x2831B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ProcessContents", 
    $sig.make(0x2831D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
  );

  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "processContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
  $.Field({Static:false, Public:false}, "namespaceList", $asm0E.TypeRef("System.Xml.Schema.NamespaceList")); 
  $.Property({Static:false, Public:true }, "Namespace", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

  $.Property({Static:false, Public:true }, "ProcessContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["processContents"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaContentProcessing.None]; });

  $.Property({Static:false, Public:false}, "NamespaceList", $asm0E.TypeRef("System.Xml.Schema.NamespaceList"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "ResolvedNamespace", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "ProcessContentsCorrect", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAnyAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBD08, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Allows", 
    $sig.make(0xBD04, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceList", 
    $sig.make(0xBD02, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceListV1Compat", 
    $sig.make(0xBD03, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0xBCFC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
    $sig.make(0xBD00, $asm0E.TypeRef("System.Xml.Schema.NamespaceList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProcessContents", 
    $sig.make(0xBCFE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProcessContentsCorrect", 
    $sig.make(0xBD01, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Intersection", 
    $sig.make(0xBD06, $.Type, [
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSubset", 
    $sig.make(0xBD05, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0xBCFD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ProcessContents", 
    $sig.make(0xBCFF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Union", 
    $sig.make(0xBD07, $.Type, [
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "processContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
  $.Field({Static:false, Public:false}, "namespaceList", $asm0E.TypeRef("System.Xml.Schema.NamespaceList")); 
  $.Property({Static:false, Public:true }, "Namespace", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

  $.Property({Static:false, Public:true }, "ProcessContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["processContents"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaContentProcessing.None]; });

  $.Property({Static:false, Public:false}, "NamespaceList", $asm0E.TypeRef("System.Xml.Schema.NamespaceList"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "ProcessContentsCorrect", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaAppInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D2A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Markup", 
    $sig.make(0x27D28, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Source", 
    $sig.make(0x27D26, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Markup", 
    $sig.make(0x27D29, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Source", 
    $sig.make(0x27D27, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "source", $.String); 
  $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])); 
  $.Property({Static:false, Public:true }, "Source", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["source"]; });

  $.Property({Static:false, Public:true }, "Markup", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB140, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB13F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttDef", 
    $sig.make(0xB137, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeSchemaType", 
    $sig.make(0xB135, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeType", 
    $sig.make(0xB134, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Datatype", 
    $sig.make(0xB136, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
    $sig.make(0xB123, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FixedValue", 
    $sig.make(0xB125, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Form", 
    $sig.make(0xB127, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
    $sig.make(0xB139, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB129, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0xB13A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
    $sig.make(0xB133, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
    $sig.make(0xB12B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0xB12F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypeName", 
    $sig.make(0xB12D, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Use", 
    $sig.make(0xB131, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaUse"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_AttDef", 
    $sig.make(0xB138, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
    $sig.make(0xB124, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FixedValue", 
    $sig.make(0xB126, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Form", 
    $sig.make(0xB128, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0xB12A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0xB13B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
    $sig.make(0xB12C, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
    $sig.make(0xB130, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaTypeName", 
    $sig.make(0xB12E, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Use", 
    $sig.make(0xB132, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaUse")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributeType", 
    $sig.make(0xB13E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
    $sig.make(0xB13D, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Validate", 
    $sig.make(0xB13C, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.Field({Static:false, Public:false}, "defaultValue", $.String); 
  $.Field({Static:false, Public:false}, "fixedValue", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "use", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaUse")); 
  $.Field({Static:false, Public:false}, "refName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "typeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "qualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "attributeType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "attDef", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")); 
  $.Property({Static:false, Public:true }, "DefaultValue", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["default"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

  $.Property({Static:false, Public:true }, "FixedValue", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

  $.Property({Static:false, Public:true }, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaForm.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["form"]; });

  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "RefName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

  $.Property({Static:false, Public:true }, "SchemaTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

  $.Property({Static:false, Public:true }, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType"]; });

  $.Property({Static:false, Public:true }, "Use", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaUse"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaUse.None]; });

  $.Property({Static:false, Public:true }, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "AttributeType", $.Object)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use AttributeSchemaType property that returns a strongly typed attribute type. http://go.microsoft.com/fwlink/?linkid=14202"]; });

  $.Property({Static:false, Public:true }, "AttributeSchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Datatype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "AttDef", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"));

  $.Property({Static:false, Public:false}, "HasDefault", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAttributeGroup", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28098, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x28097, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
    $sig.make(0x2807C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x2807B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttributeUses", 
    $sig.make(0x2807F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AttributeWildcard", 
    $sig.make(0x28080, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x28079, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0x28089, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
    $sig.make(0x2807E, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
    $sig.make(0x28083, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RedefinedAttributeGroup", 
    $sig.make(0x28082, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SelfReferenceCount", 
    $sig.make(0x28085, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
    $sig.make(0x2807D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_AttributeWildcard", 
    $sig.make(0x28081, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x2807A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0x28092, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
    $sig.make(0x28084, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SelfReferenceCount", 
    $sig.make(0x28086, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
    $sig.make(0x28096, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "qname", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "redefined", $.Type); 
  $.Field({Static:false, Public:false}, "attributeUses", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "attributeWildcard", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "selfReferenceCount", $.Int32); 
  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; });

  $.Property({Static:false, Public:true }, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

  $.Property({Static:false, Public:true }, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "AttributeUses", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "AttributeWildcard", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "RedefinedAttributeGroup", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Redefined", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "SelfReferenceCount", $.Int32)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAttributeGroupRef", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x282D2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
    $sig.make(0x282D0, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
    $sig.make(0x282D1, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "refName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "RefName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), "System.Xml.Schema.XmlSchemaChoice", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2830A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
    $sig.make(0x28308, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x28307, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItems", 
    $sig.make(0x28309, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $.Type]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["any", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")]; });

  $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB819, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB81A, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB81B, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB81C, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB81D, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [
        $.String, $asm0E.TypeRef("System.Xml.XmlReader"), 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB81E, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB81F, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB820, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xB829, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [
        $.String, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xB82A, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [
        $.String, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.XmlResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xB82B, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
    $sig.make(0xB817, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xB821, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xB822, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xB826, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB80E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EventHandler", 
    $sig.make(0xB815, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xB811, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xB80F, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xB824, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollectionEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaInfo", 
    $sig.make(0xB827, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaNames", 
    $sig.make(0xB828, $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
    $sig.make(0xB818, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xB82C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_EventHandler", 
    $sig.make(0xB816, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
    $sig.make(0xB810, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0xB825, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_Count", 
    $sig.make(0xB814, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0xB812, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0xB813, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xB823, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "collection", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "wLock", $asm06.TypeRef("System.Threading.ReaderWriterLock")); 
  $.Field({Static:false, Public:false}, "timeout", $.Int32); 
  $.Field({Static:false, Public:false}, "isThreadSafe", $.Boolean); 
  $.Field({Static:false, Public:false}, "validationEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:false}, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.Count", $.Int32);

  $.Property({Static:false, Public:false}, "EventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCollectionNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBC81, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
    $sig.make(0xBC7B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
    $sig.make(0xBC7F, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaInfo", 
    $sig.make(0xBC7D, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NamespaceURI", 
    $sig.make(0xBC7C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Schema", 
    $sig.make(0xBC80, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SchemaInfo", 
    $sig.make(0xBC7E, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaInfo")], [])
  );

  $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
  $.Field({Static:false, Public:false}, "schemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

  $.Property({Static:false, Public:false}, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"));

  $.Property({Static:false, Public:false}, "Schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCollectionEnumerator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBC8B, null, [$asm06.TypeRef("System.Collections.Hashtable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0xBC89, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurrentNode", 
    $sig.make(0xBC8A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xBC8E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0xBC88, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0xBC8D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0xBC8C, null, [], [])
  );

  $.Field({Static:false, Public:false}, "enumerator", $asm06.TypeRef("System.Collections.IDictionaryEnumerator")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.Property({Static:false, Public:true }, "Current", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:false}, "CurrentNode", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaContentModel", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBD66, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Content", 
    $sig.make(0xBD64, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Content", 
    $sig.make(0xBD65, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), "System.Xml.Schema.XmlSchemaComplexContent", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DF6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Content", 
    $sig.make(0x27DEF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasMixedAttribute", 
    $sig.make(0x27DF5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsMixed", 
    $sig.make(0x27DEC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Content", 
    $sig.make(0x27DF0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsMixed", 
    $sig.make(0x27DEE, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent")); 
  $.Field({Static:false, Public:false}, "isMixed", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasMixedAttribute", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsMixed", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mixed"]; });

  $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["extension", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")]; });

  $.Property({Static:false, Public:false}, "HasMixedAttribute", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaContent", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBE27, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaComplexContentExtension", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27F14, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
    $sig.make(0x27F10, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x27F0E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
    $sig.make(0x27EFE, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
    $sig.make(0x27F02, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
    $sig.make(0x27F11, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
    $sig.make(0x27F00, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
    $sig.make(0x27F0A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
    $sig.make(0x27F13, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "baseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "BaseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

  $.Property({Static:false, Public:true }, "Particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")]; });

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")]; });

  $.Property({Static:false, Public:true }, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaComplexContentRestriction", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27D59, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
    $sig.make(0x27D53, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x27D52, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
    $sig.make(0x27D4E, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
    $sig.make(0x27D50, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
    $sig.make(0x27D55, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
    $sig.make(0x27D4F, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
    $sig.make(0x27D51, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
    $sig.make(0x27D57, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "baseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "BaseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

  $.Property({Static:false, Public:true }, "Particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")]; });

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; });

  $.Property({Static:false, Public:true }, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaType", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB16A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseSchemaType", 
    $sig.make(0xB14D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseXmlSchemaType", 
    $sig.make(0xB14E, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Datatype", 
    $sig.make(0xB150, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DerivedBy", 
    $sig.make(0xB14F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DerivedFrom", 
    $sig.make(0xB15A, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementDecl", 
    $sig.make(0xB156, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Final", 
    $sig.make(0xB149, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FinalResolved", 
    $sig.make(0xB14C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsMixed", 
    $sig.make(0xB151, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB147, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0xB15B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
    $sig.make(0xB14B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
    $sig.make(0xB158, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaContentType", 
    $sig.make(0xB155, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0xB153, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValueConverter", 
    $sig.make(0xB154, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetBuiltInComplexType", 
    $sig.make(0xB15F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetBuiltInComplexType", 
    $sig.make(0xB160, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetBuiltInSimpleType", 
    $sig.make(0xB15D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetBuiltInSimpleType", 
    $sig.make(0xB15E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsDerivedFrom", 
    $sig.make(0xB168, $.Boolean, [
        $.Type, $.Type, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsDerivedFromDatatype", 
    $sig.make(0xB169, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ElementDecl", 
    $sig.make(0xB157, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Final", 
    $sig.make(0xB14A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsMixed", 
    $sig.make(0xB152, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0xB148, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0xB15C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
    $sig.make(0xB159, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBaseSchemaType", 
    $sig.make(0xB164, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetContentType", 
    $sig.make(0xB167, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDatatype", 
    $sig.make(0xB166, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDerivedBy", 
    $sig.make(0xB165, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetFinalResolved", 
    $sig.make(0xB163, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
    $sig.make(0xB162, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Validate", 
    $sig.make(0xB161, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "final", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "derivedBy", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "baseSchemaType", $.Type); 
  $.Field({Static:false, Public:false}, "datatype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "finalResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "elementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Field({Static:false, Public:false}, "qname", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "redefined", $.Type); 
  $.Field({Static:false, Public:false}, "contentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")); 
  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "Final", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaDerivationMethod.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["final"]; });

  $.Property({Static:false, Public:true }, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "FinalResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "BaseSchemaType", $.Object)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202"]; });

  $.Property({Static:false, Public:true }, "BaseXmlSchemaType", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "DerivedBy", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Datatype", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsMixed", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "ValueConverter", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "SchemaContentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

  $.Property({Static:false, Public:false}, "ElementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"));

  $.Property({Static:false, Public:false}, "Redefined", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), "System.Xml.Schema.XmlSchemaComplexType", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB9DD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearCompiledState", 
    $sig.make(0xB9E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB9E3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB9E4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CloneAttributes", 
    $sig.make(0xB9E6, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CloneGroupBaseParticles", 
    $sig.make(0xB9E7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CloneParticle", 
    $sig.make(0xB9E8, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ContainsIdAttribute", 
    $sig.make(0xB9E2, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateAnyType", 
    $sig.make(0xB9DC, $.Type, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
    $sig.make(0xB9D0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AnyType", 
    $sig.make(0xB9C1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AnyTypeContentValidator", 
    $sig.make(0xB9C4, $asm0E.TypeRef("System.Xml.Schema.ContentValidator"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AnyTypeSkip", 
    $sig.make(0xB9C3, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0xB9CF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeUses", 
    $sig.make(0xB9D5, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeWildcard", 
    $sig.make(0xB9D6, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Block", 
    $sig.make(0xB9C7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BlockResolved", 
    $sig.make(0xB9D4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContentModel", 
    $sig.make(0xB9CB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
    $sig.make(0xB9D2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContentTypeParticle", 
    $sig.make(0xB9D3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DerivedFrom", 
    $sig.make(0xB9DA, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasWildCard", 
    $sig.make(0xB9D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
    $sig.make(0xB9C5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsMixed", 
    $sig.make(0xB9C9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LocalElements", 
    $sig.make(0xB9D7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
    $sig.make(0xB9CD, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UntypedAnyType", 
    $sig.make(0xB9C2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetResolvedElementForm", 
    $sig.make(0xB9E9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasAttributeQNameRef", 
    $sig.make(0xB9EB, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasParticleRef", 
    $sig.make(0xB9EA, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
    $sig.make(0xB9D1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Block", 
    $sig.make(0xB9C8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ContentModel", 
    $sig.make(0xB9CC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentModel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_HasWildCard", 
    $sig.make(0xB9D9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
    $sig.make(0xB9C6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsMixed", 
    $sig.make(0xB9CA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
    $sig.make(0xB9CE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
    $sig.make(0xB9E1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributeWildcard", 
    $sig.make(0xB9E0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBlockResolved", 
    $sig.make(0xB9DF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetContentTypeParticle", 
    $sig.make(0xB9DE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.Constant({Static:true , Public:false}, "wildCardMask", 1); 
  $.Constant({Static:true , Public:false}, "isMixedMask", 2); 
  $.Constant({Static:true , Public:false}, "isAbstractMask", 4); 
  $.Field({Static:false, Public:false}, "block", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "contentModel", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentModel")); 
  $.Field({Static:false, Public:false}, "particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "contentTypeParticle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
  $.Field({Static:false, Public:false}, "blockResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "localElements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "attributeUses", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "attributeWildcard", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:true , Public:false}, "anyTypeLax", $.Type); 
  $.Field({Static:true , Public:false}, "anyTypeSkip", $.Type); 
  $.Field({Static:true , Public:false}, "untypedAnyType", $.Type); 
  $.Field({Static:false, Public:false}, "pvFlags", $.Byte); 
  $.Property({Static:true , Public:false}, "AnyType", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:true , Public:false}, "UntypedAnyType", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:true , Public:false}, "AnyTypeSkip", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:true , Public:false}, "AnyTypeContentValidator", $asm0E.TypeRef("System.Xml.Schema.ContentValidator"));

  $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["abstract"]; });

  $.Property({Static:false, Public:true }, "Block", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["block"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

  $.Property({Static:false, Public:true , Virtual:true }, "IsMixed", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mixed"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "ContentModel", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentModel"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleContent", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexContent", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent")]; });

  $.Property({Static:false, Public:true }, "Particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")]; });

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")]; });

  $.Property({Static:false, Public:true }, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

  $.Property({Static:false, Public:true }, "ContentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "ContentTypeParticle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "BlockResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "AttributeUses", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "AttributeWildcard", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "LocalElements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "HasWildCard", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaContentProcessing", true, {
    None: 0, 
    Skip: 1, 
    Lax: 2, 
    Strict: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaContentType", true, {
    TextOnly: 0, 
    Empty: 1, 
    ElementOnly: 2, 
    Mixed: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaDerivationMethod", true, {
    Empty: 0, 
    Substitution: 1, 
    Extension: 2, 
    Restriction: 4, 
    List: 8, 
    Union: 16, 
    All: 255, 
    None: 256
  }, true
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaDocumentation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DCF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Language", 
    $sig.make(0x27DC7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Markup", 
    $sig.make(0x27DCB, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Source", 
    $sig.make(0x27DC5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Language", 
    $sig.make(0x27DC8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Markup", 
    $sig.make(0x27DCD, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Source", 
    $sig.make(0x27DC6, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "source", $.String); 
  $.Field({Static:false, Public:false}, "language", $.String); 
  $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])); 
  $.Field({Static:true , Public:false}, "languageType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Property({Static:false, Public:true }, "Source", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["source"]; });

  $.Property({Static:false, Public:true }, "Language", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["xml:lang"]; });

  $.Property({Static:false, Public:true }, "Markup", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaElement", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB1C0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB1BE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB1BF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Block", 
    $sig.make(0xB192, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BlockResolved", 
    $sig.make(0xB1AE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Constraints", 
    $sig.make(0xB1AA, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
    $sig.make(0xB194, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementDecl", 
    $sig.make(0xB1B4, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementSchemaType", 
    $sig.make(0xB1AD, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementType", 
    $sig.make(0xB1AC, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Final", 
    $sig.make(0xB196, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FinalResolved", 
    $sig.make(0xB1AF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FixedValue", 
    $sig.make(0xB198, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Form", 
    $sig.make(0xB19A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasAbstractAttribute", 
    $sig.make(0xB1A1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasConstraints", 
    $sig.make(0xB1B1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
    $sig.make(0xB1B0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasNillableAttribute", 
    $sig.make(0xB1A0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
    $sig.make(0xB190, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsLocalTypeDerivationChecked", 
    $sig.make(0xB1B2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNillable", 
    $sig.make(0xB19E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xB19C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0xB1B6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameString", 
    $sig.make(0xB1B8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
    $sig.make(0xB1AB, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
    $sig.make(0xB1A2, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0xB1A8, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypeName", 
    $sig.make(0xB1A6, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SubstitutionGroup", 
    $sig.make(0xB1A4, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Block", 
    $sig.make(0xB193, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
    $sig.make(0xB195, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ElementDecl", 
    $sig.make(0xB1B5, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Final", 
    $sig.make(0xB197, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FixedValue", 
    $sig.make(0xB199, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Form", 
    $sig.make(0xB19B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
    $sig.make(0xB191, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsLocalTypeDerivationChecked", 
    $sig.make(0xB1B3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNillable", 
    $sig.make(0xB19F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0xB19D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0xB1B7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
    $sig.make(0xB1A3, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
    $sig.make(0xB1A9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaTypeName", 
    $sig.make(0xB1A7, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SubstitutionGroup", 
    $sig.make(0xB1A5, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBlockResolved", 
    $sig.make(0xB1BC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetElementType", 
    $sig.make(0xB1BB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetFinalResolved", 
    $sig.make(0xB1BD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
    $sig.make(0xB1BA, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Validate", 
    $sig.make(0xB1B9, $asm0E.TypeRef("System.Xml.XmlReader"), [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlResolver"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.Field({Static:false, Public:false}, "isAbstract", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasAbstractAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "isNillable", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasNillableAttribute", $.Boolean); 
  $.Field({Static:false, Public:false}, "isLocalTypeDerivationChecked", $.Boolean); 
  $.Field({Static:false, Public:false}, "block", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "final", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "defaultValue", $.String); 
  $.Field({Static:false, Public:false}, "fixedValue", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "refName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "substitutionGroup", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "typeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "qualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "elementType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "blockResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "finalResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
  $.Field({Static:false, Public:false}, "constraints", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "elementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
  $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["abstract"]; });

  $.Property({Static:false, Public:true }, "Block", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaDerivationMethod.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["block"]; });

  $.Property({Static:false, Public:true }, "DefaultValue", $.String)
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["default"]; });

  $.Property({Static:false, Public:true }, "Final", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaDerivationMethod.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["final"]; });

  $.Property({Static:false, Public:true }, "FixedValue", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

  $.Property({Static:false, Public:true }, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0E.System.Xml.Schema.XmlSchemaForm.None]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["form"]; });

  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "IsNillable", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["nillable"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:false}, "HasNillableAttribute", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "HasAbstractAttribute", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "RefName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

  $.Property({Static:false, Public:true }, "SubstitutionGroup", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["substitutionGroup"]; });

  $.Property({Static:false, Public:true }, "SchemaTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

  $.Property({Static:false, Public:true }, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")]; });

  $.Property({Static:false, Public:true }, "Constraints", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["unique", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaUnique")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["key", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaKey")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["keyref", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaKeyref")]; });

  $.Property({Static:false, Public:true }, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "ElementType", $.Object)
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202"]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "ElementSchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "BlockResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "FinalResolved", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "HasDefault", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "HasConstraints", $.Boolean);

  $.Property({Static:false, Public:false}, "IsLocalTypeDerivationChecked", $.Boolean);

  $.Property({Static:false, Public:false}, "ElementDecl", $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm06.TypeRef("System.SystemException"), "System.Xml.Schema.XmlSchemaException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB316, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB318, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB319, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB31A, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB31B, null, [
        $.String, $asm06.TypeRef("System.Exception"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB31C, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB31D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB31E, null, [
        $.String, $.String, 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB31F, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB320, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB321, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB322, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB323, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB324, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception"), $.String, 
        $.Int32, $.Int32, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
    $sig.make(0xB325, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Args", 
    $sig.make(0xB310, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GetRes", 
    $sig.make(0xB30F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0xB312, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0xB313, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0xB315, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceSchemaObject", 
    $sig.make(0xB314, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
    $sig.make(0xB311, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0xB317, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetResourceId", 
    $sig.make(0xB329, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSchemaObject", 
    $sig.make(0xB327, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSource", 
    $sig.make(0xB326, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSource", 
    $sig.make(0xB328, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Field({Static:false, Public:false}, "res", $.String); 
  $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:false}, "sourceUri", $.String); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Field({Static:false, Public:false}, "sourceSchemaObject", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
  $.Field({Static:false, Public:false}, "message", $.String); 
  $.Property({Static:false, Public:false}, "GetRes", $.String);

  $.Property({Static:false, Public:false}, "Args", $jsilcore.TypeRef("System.Array", [$.String]));

  $.Property({Static:false, Public:true }, "SourceUri", $.String);

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "SourceSchemaObject", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"));

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaExternal", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27C42, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseUri", 
    $sig.make(0x27C3B, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Compositor", 
    $sig.make(0x27C3F, $asm0E.TypeRef("System.Xml.Schema.Compositor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0x27C34, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IdAttribute", 
    $sig.make(0x27C3D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x27C2C, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaLocation", 
    $sig.make(0x27C28, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
    $sig.make(0x27C39, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_BaseUri", 
    $sig.make(0x27C3C, null, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Compositor", 
    $sig.make(0x27C40, null, [$asm0E.TypeRef("System.Xml.Schema.Compositor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Id", 
    $sig.make(0x27C36, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IdAttribute", 
    $sig.make(0x27C3E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x27C2E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaLocation", 
    $sig.make(0x27C29, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
    $sig.make(0x27C3A, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetUnhandledAttributes", 
    $sig.make(0x27C41, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])], [])
  );

  $.Field({Static:false, Public:false}, "location", $.String); 
  $.Field({Static:false, Public:false}, "baseUri", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "id", $.String); 
  $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")])); 
  $.Field({Static:false, Public:false}, "compositor", $asm0E.TypeRef("System.Xml.Schema.Compositor")); 
  $.Property({Static:false, Public:true }, "SchemaLocation", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["schemaLocation"]; });

  $.Property({Static:false, Public:true }, "Schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Id", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

  $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

  $.Property({Static:false, Public:false}, "BaseUri", $asm07.TypeRef("System.Uri"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Compositor", $asm0E.TypeRef("System.Xml.Schema.Compositor"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.FacetType", false, {
    None: 0, 
    Length: 1, 
    MinLength: 2, 
    MaxLength: 3, 
    Pattern: 4, 
    Whitespace: 5, 
    Enumeration: 6, 
    MinExclusive: 7, 
    MinInclusive: 8, 
    MaxExclusive: 9, 
    MaxInclusive: 10, 
    TotalDigits: 11, 
    FractionDigits: 12
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2811B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FacetType", 
    $sig.make(0x28119, $asm0E.TypeRef("System.Xml.Schema.FacetType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsFixed", 
    $sig.make(0x28116, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x28112, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_FacetType", 
    $sig.make(0x2811A, null, [$asm0E.TypeRef("System.Xml.Schema.FacetType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsFixed", 
    $sig.make(0x28118, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0x28114, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "value", $.String); 
  $.Field({Static:false, Public:false}, "isFixed", $.Boolean); 
  $.Field({Static:false, Public:false}, "facetType", $asm0E.TypeRef("System.Xml.Schema.FacetType")); 
  $.Property({Static:false, Public:true }, "Value", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["value"]; });

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixed", $.Boolean)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:false}, "FacetType", $asm0E.TypeRef("System.Xml.Schema.FacetType"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaNumericFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x293FD, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaLengthFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2940D, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaMinLengthFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29425, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaMaxLengthFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x294C3, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaPatternFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x294FE, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaEnumerationFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29505, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMinExclusiveFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2950C, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMinInclusiveFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2954B, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMaxExclusiveFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29564, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMaxInclusiveFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29584, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaTotalDigitsFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x295B8, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaFractionDigitsFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x295D1, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaWhiteSpaceFacet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x295ED, null, [], [])
  );

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaForm", true, {
    None: 0, 
    Qualified: 1, 
    Unqualified: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaGroup", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2837D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x28379, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x2837B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanonicalParticle", 
    $sig.make(0x2836C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x28365, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0x28374, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
    $sig.make(0x28368, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
    $sig.make(0x2836B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
    $sig.make(0x2836E, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SelfReferenceCount", 
    $sig.make(0x28372, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CanonicalParticle", 
    $sig.make(0x2836D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x28366, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0x28375, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
    $sig.make(0x28369, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
    $sig.make(0x2836F, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SelfReferenceCount", 
    $sig.make(0x28373, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
    $sig.make(0x28377, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")); 
  $.Field({Static:false, Public:false}, "canonicalParticle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
  $.Field({Static:false, Public:false}, "qname", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "redefined", $.Type); 
  $.Field({Static:false, Public:false}, "selfReferenceCount", $.Int32); 
  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "Particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")]; });

  $.Property({Static:false, Public:true }, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "CanonicalParticle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Redefined", $.Type)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "SelfReferenceCount", $.Int32)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaGroupRef", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27F83, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
    $sig.make(0x27F7A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
    $sig.make(0x27F7C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
    $sig.make(0x27F75, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
    $sig.make(0x27F7E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
    $sig.make(0x27F77, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParticle", 
    $sig.make(0x27F81, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")], [])
  );

  $.Field({Static:false, Public:false}, "refName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")); 
  $.Field({Static:false, Public:false}, "refined", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")); 
  $.Property({Static:false, Public:true }, "RefName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

  $.Property({Static:false, Public:true }, "Particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Redefined", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaIdentityConstraint", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27FB7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CompiledConstraint", 
    $sig.make(0x27FAE, $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Fields", 
    $sig.make(0x27FAA, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x27FA1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0x27FB0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
    $sig.make(0x27FAD, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Selector", 
    $sig.make(0x27FA4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CompiledConstraint", 
    $sig.make(0x27FAF, null, [$asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x27FA2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0x27FB1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Selector", 
    $sig.make(0x27FA6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
    $sig.make(0x27FB4, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "selector", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath")); 
  $.Field({Static:false, Public:false}, "fields", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "qualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "compiledConstraint", $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")); 
  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "Selector", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["selector", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath")]; });

  $.Property({Static:false, Public:true }, "Fields", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["field", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath")]; });

  $.Property({Static:false, Public:true }, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "CompiledConstraint", $asm0E.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaXPath", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x282E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XPath", 
    $sig.make(0x282E0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XPath", 
    $sig.make(0x282E2, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "xpath", $.String); 
  $.Property({Static:false, Public:true }, "XPath", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["xpath"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), "System.Xml.Schema.XmlSchemaUnique", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x294BC, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), "System.Xml.Schema.XmlSchemaKey", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x294E5, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), "System.Xml.Schema.XmlSchemaKeyref", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x294F7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Refer", 
    $sig.make(0x294F5, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Refer", 
    $sig.make(0x294F6, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "refer", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "Refer", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["refer"]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaExternal"), "System.Xml.Schema.XmlSchemaImport", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2814C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAnnotation", 
    $sig.make(0x2814D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
    $sig.make(0x28147, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x2813E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
    $sig.make(0x28149, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x28144, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
  $.Property({Static:false, Public:true }, "Namespace", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

  $.Property({Static:false, Public:true }, "Annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaExternal"), "System.Xml.Schema.XmlSchemaInclude", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28409, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAnnotation", 
    $sig.make(0x2840A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
    $sig.make(0x283FF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
    $sig.make(0x28406, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.Field({Static:false, Public:false}, "annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
  $.Property({Static:false, Public:true }, "Annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27C76, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27C77, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0x27C78, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
    $sig.make(0x27C71, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultValue", 
    $sig.make(0x27C74, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x27C5C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNil", 
    $sig.make(0x27C62, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsUnionType", 
    $sig.make(0x27C75, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
    $sig.make(0x27C66, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaAttribute", 
    $sig.make(0x27C6F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaElement", 
    $sig.make(0x27C6D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
    $sig.make(0x27C6A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Validity", 
    $sig.make(0x27C5A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlType", 
    $sig.make(0x27C73, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ContentType", 
    $sig.make(0x27C72, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsDefault", 
    $sig.make(0x27C60, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNil", 
    $sig.make(0x27C64, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
    $sig.make(0x27C68, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaAttribute", 
    $sig.make(0x27C70, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaElement", 
    $sig.make(0x27C6E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
    $sig.make(0x27C6C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Validity", 
    $sig.make(0x27C5B, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity")], [])
  );

  $.Field({Static:false, Public:false}, "isDefault", $.Boolean); 
  $.Field({Static:false, Public:false}, "isNil", $.Boolean); 
  $.Field({Static:false, Public:false}, "schemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
  $.Field({Static:false, Public:false}, "schemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:false, Public:false}, "schemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "memberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity")); 
  $.Field({Static:false, Public:false}, "contentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"));

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

  $.Property({Static:false, Public:true }, "ContentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

  $.Property({Static:false, Public:false}, "XmlType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false}, "HasDefaultValue", $.Boolean);

  $.Property({Static:false, Public:false}, "IsUnionType", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaNotation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x280B0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x280A6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAttribute", 
    $sig.make(0x280AE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Public", 
    $sig.make(0x280A8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_QualifiedName", 
    $sig.make(0x280AC, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_System", 
    $sig.make(0x280AA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x280A7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NameAttribute", 
    $sig.make(0x280AF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Public", 
    $sig.make(0x280A9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_QualifiedName", 
    $sig.make(0x280AD, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_System", 
    $sig.make(0x280AB, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "publicId", $.String); 
  $.Field({Static:false, Public:false}, "systemId", $.String); 
  $.Field({Static:false, Public:false}, "qname", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:true }, "Public", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["public"]; });

  $.Property({Static:false, Public:true }, "System", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["system"]; });

  $.Property({Static:false, Public:false}, "QualifiedName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.CollectionBase"), "System.Xml.Schema.XmlSchemaObjectCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB8B9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB8BA, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB8BC, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xB8C7, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB8C6, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xB8BF, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xB8C1, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xB8B7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xB8BB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xB8BE, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0xB8BD, null, [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnClear", 
    $sig.make(0xB8C4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnInsert", 
    $sig.make(0xB8C2, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnRemove", 
    $sig.make(0xB8C5, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnSet", 
    $sig.make(0xB8C3, null, [
        $.Int32, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0xB8C0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0xB8B8, null, [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Field({Static:false, Public:false}, "parent", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectEnumerator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBCAF, null, [$asm06.TypeRef("System.Collections.IEnumerator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0xBCAD, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xBCB1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0xBCB0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0xBCAE, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0xBCB3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0xBCB2, null, [], [])
  );

  $.Field({Static:false, Public:false}, "enumerator", $asm06.TypeRef("System.Collections.IEnumerator")); 
  $.Property({Static:false, Public:true }, "Current", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB6EA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xB6EB, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0xB6EE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xB6F1, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindIndexByValue", 
    $sig.make(0xB6F0, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB6E6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xB6E7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Names", 
    $sig.make(0xB6E8, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Values", 
    $sig.make(0xB6E9, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xB6F2, $asm06.TypeRef("System.Collections.IDictionaryEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Insert", 
    $sig.make(0xB6EC, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Remove", 
    $sig.make(0xB6EF, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Replace", 
    $sig.make(0xB6ED, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Field({Static:false, Public:false}, "table", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")])); 
  $.Field({Static:false, Public:false}, "entries", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"));

  $.Property({Static:false, Public:true }, "Names", $asm06.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:true }, "Values", $asm06.TypeRef("System.Collections.ICollection"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType", false, {
    Keys: 0, 
    Values: 1, 
    DictionaryEntry: 2
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A9DA, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsMatch", 
    $sig.make(0x2A9DB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2A9DC, null, [], [])
  );

  $.Field({Static:false, Public:false}, "qname", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "xso", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable/NamesCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A9FA, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x2A9FB, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2A9F7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x2A9F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x2A9F8, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x2A9FC, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "entries", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
  $.Field({Static:false, Public:false}, "size", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable/ValuesCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2AA17, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x2AA18, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2AA14, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x2AA16, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x2AA15, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x2AA19, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "entries", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
  $.Field({Static:false, Public:false}, "size", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable/XSOEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A9CB, null, [
        $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x2A9CA, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x2A9CC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x2A9CD, null, [], [])
  );

  $.Field({Static:false, Public:false}, "entries", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
  $.Field({Static:false, Public:false}, "enumType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType")); 
  $.Field({Static:false, Public:false}, "currentIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "size", $.Int32); 
  $.Field({Static:false, Public:false}, "currentKey", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "currentValue", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XSOEnumerator"), "System.Xml.Schema.XmlSchemaObjectTable/XSODictionaryEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A9F0, null, [
        $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Entry", 
    $sig.make(0x2A9EC, $asm06.TypeRef("System.Collections.DictionaryEntry"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x2A9EE, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x2A9EF, $.Object, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm06.TypeRef("System.Collections.DictionaryEntry"));

  $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IDictionaryEnumerator"), $asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaExternal"), "System.Xml.Schema.XmlSchemaRedefine", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27CAB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAnnotation", 
    $sig.make(0x27CAD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeGroups", 
    $sig.make(0x27CA5, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Groups", 
    $sig.make(0x27CA9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x27CA3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypes", 
    $sig.make(0x27CA7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.Field({Static:false, Public:false}, "items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "attributeGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "types", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "groups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Property({Static:false, Public:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")]; });

  $.Property({Static:false, Public:true }, "AttributeGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "SchemaTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:true }, "Groups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), "System.Xml.Schema.XmlSchemaSequence", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x27DDC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
    $sig.make(0x27DDA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x27DD9, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetItems", 
    $sig.make(0x27DDB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["any", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $.Type]; });

  $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaSet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAFAB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAFAC, null, [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xAFAD, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xAFAE, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xAFAF, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xAFB0, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xAFBA, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0xAFBB, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlReader"), 
        $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
    $sig.make(0xAFA9, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSchemaToSet", 
    $sig.make(0xAFBE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToTable", 
    $sig.make(0xAFCE, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearTables", 
    $sig.make(0xAFC2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0xAFB5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xAFB3, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xAFB4, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyFromCompiledSet", 
    $sig.make(0xAFC5, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xAFB7, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindSchemaByNSAndUrl", 
    $sig.make(0xAFBC, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [
        $asm07.TypeRef("System.Uri"), $.String, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Collections.DictionaryEntry")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CompilationSettings", 
    $sig.make(0xAF9C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CompileAll", 
    $sig.make(0xAFA8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CompiledInfo", 
    $sig.make(0xAFA5, $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xAF9E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GlobalAttributes", 
    $sig.make(0xAFA0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GlobalElements", 
    $sig.make(0xAF9F, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GlobalTypes", 
    $sig.make(0xAFA1, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalSyncObject", 
    $sig.make(0xAF98, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
    $sig.make(0xAF9A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0xAF99, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReaderSettings", 
    $sig.make(0xAFA6, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaLocations", 
    $sig.make(0xAFA3, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SortedSchemas", 
    $sig.make(0xAFA7, $asm06.TypeRef("System.Collections.SortedList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SubstitutionGroups", 
    $sig.make(0xAFA2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeExtensions", 
    $sig.make(0xAFA4, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEventHandler", 
    $sig.make(0xAFC7, $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
    $sig.make(0xAFC6, $asm0E.TypeRef("System.Xml.XmlResolver"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaByUri", 
    $sig.make(0xAFCA, $.Boolean, [$asm07.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaNames", 
    $sig.make(0xAFC8, $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), [$asm0E.TypeRef("System.Xml.XmlNameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTargetNamespace", 
    $sig.make(0xAFCB, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallback", 
    $sig.make(0xAFD0, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSchemaLoaded", 
    $sig.make(0xAFC9, $.Boolean, [
        $asm07.TypeRef("System.Uri"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseSchema", 
    $sig.make(0xAFC4, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PreprocessSchema", 
    $sig.make(0xAFC3, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessNewSubstitutionGroups", 
    $sig.make(0xAFBF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0xAFB1, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Remove", 
    $sig.make(0xAFC1, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
    $sig.make(0xAFAA, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveRecursive", 
    $sig.make(0xAFB2, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveSchemaFromCaches", 
    $sig.make(0xAFCC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveSchemaFromGlobalTables", 
    $sig.make(0xAFCD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reprocess", 
    $sig.make(0xAFB6, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResolveSubstitutionGroup", 
    $sig.make(0xAFC0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Schemas", 
    $sig.make(0xAFB8, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Schemas", 
    $sig.make(0xAFB9, $asm06.TypeRef("System.Collections.ICollection"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0xAFD1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CompilationSettings", 
    $sig.make(0xAF9D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0xAF9B, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDtdProcessing", 
    $sig.make(0xAFBD, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyTables", 
    $sig.make(0xAFCF, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "schemas", $asm06.TypeRef("System.Collections.SortedList")); 
  $.Field({Static:false, Public:false}, "internalEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "eventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "isCompiled", $.Boolean); 
  $.Field({Static:false, Public:false}, "schemaLocations", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "chameleonSchemas", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "targetNamespaces", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "compileAll", $.Boolean); 
  $.Field({Static:false, Public:false}, "cachedCompiledInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "readerSettings", $asm0E.TypeRef("System.Xml.XmlReaderSettings")); 
  $.Field({Static:false, Public:false}, "schemaForSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "compilationSettings", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")); 
  $.Field({Static:false, Public:false}, "elements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "schemaTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "substitutionGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "typeExtensions", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
  $.Field({Static:false, Public:false}, "internalSyncObject", $.Object); 
  $.Property({Static:false, Public:false}, "InternalSyncObject", $.Object);

  $.Property({Static:false, Public:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean);

  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "CompilationSettings", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "GlobalElements", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

  $.Property({Static:false, Public:true }, "GlobalAttributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

  $.Property({Static:false, Public:true }, "GlobalTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

  $.Property({Static:false, Public:false}, "SubstitutionGroups", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

  $.Property({Static:false, Public:false}, "SchemaLocations", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "TypeExtensions", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

  $.Property({Static:false, Public:false}, "CompiledInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo"));

  $.Property({Static:false, Public:false}, "ReaderSettings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:false}, "SortedSchemas", $asm06.TypeRef("System.Collections.SortedList"));

  $.Property({Static:false, Public:false}, "CompileAll", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCompilationSettings", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB695, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EnableUpaCheck", 
    $sig.make(0xB693, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EnableUpaCheck", 
    $sig.make(0xB694, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "enableUpaCheck", $.Boolean); 
  $.Property({Static:false, Public:true }, "EnableUpaCheck", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), "System.Xml.Schema.XmlSchemaSimpleContent", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28180, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Content", 
    $sig.make(0x2817D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Content", 
    $sig.make(0x2817E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent")], [])
  );

  $.Field({Static:false, Public:false}, "content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["extension", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaSimpleContentExtension", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28054, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
    $sig.make(0x28044, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x28041, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
    $sig.make(0x2803B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
    $sig.make(0x2804E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
    $sig.make(0x2803C, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
    $sig.make(0x28052, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "baseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "BaseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")]; });

  $.Property({Static:false, Public:true }, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaSimpleContentRestriction", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x283BB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
    $sig.make(0x283AE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x283AC, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
    $sig.make(0x283A3, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
    $sig.make(0x2839E, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Facets", 
    $sig.make(0x283A8, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
    $sig.make(0x283B0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseType", 
    $sig.make(0x283A5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
    $sig.make(0x283A0, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
    $sig.make(0x283B9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Field({Static:false, Public:false}, "baseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "baseType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "facets", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Property({Static:false, Public:true }, "BaseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

  $.Property({Static:false, Public:true }, "BaseType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; });

  $.Property({Static:false, Public:true }, "Facets", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["pattern", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["enumeration", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaEnumerationFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxInclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minInclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMinInclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minExclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMinExclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["length", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaLengthFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["whiteSpace", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxLength", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMaxLengthFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxExclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minLength", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMinLengthFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["totalDigits", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaTotalDigitsFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fractionDigits", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFractionDigitsFacet")]; });

  $.Property({Static:false, Public:true }, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]; });

  $.Property({Static:false, Public:true }, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), "System.Xml.Schema.XmlSchemaSimpleType", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB174, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0xB175, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Content", 
    $sig.make(0xB171, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DerivedFrom", 
    $sig.make(0xB173, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Content", 
    $sig.make(0xB172, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent")], [])
  );

  $.Field({Static:false, Public:false}, "content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent")); 
  $.Property({Static:false, Public:true }, "Content", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["list", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["union", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion")]; });

  $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaSimpleTypeContent", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB9F2, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), "System.Xml.Schema.XmlSchemaSimpleTypeList", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28109, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x28108, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseItemType", 
    $sig.make(0x28106, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ItemType", 
    $sig.make(0x28104, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ItemTypeName", 
    $sig.make(0x28102, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseItemType", 
    $sig.make(0x28107, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ItemType", 
    $sig.make(0x28105, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ItemTypeName", 
    $sig.make(0x28103, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "itemTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "itemType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "baseItemType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Property({Static:false, Public:true }, "ItemTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["itemType"]; });

  $.Property({Static:false, Public:true }, "ItemType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; });

  $.Property({Static:false, Public:true }, "BaseItemType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), "System.Xml.Schema.XmlSchemaSimpleTypeRestriction", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28444, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x28443, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
    $sig.make(0x2843D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
    $sig.make(0x2843B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Facets", 
    $sig.make(0x28442, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseType", 
    $sig.make(0x2843F, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
    $sig.make(0x2843C, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "baseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "baseType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "facets", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Property({Static:false, Public:true }, "BaseTypeName", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

  $.Property({Static:false, Public:true }, "BaseType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; });

  $.Property({Static:false, Public:true }, "Facets", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxLength", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMaxLengthFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxInclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minInclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMinInclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["length", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaLengthFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minLength", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMinLengthFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["pattern", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["enumeration", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaEnumerationFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxExclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fractionDigits", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFractionDigitsFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minExclusive", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaMinExclusiveFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["totalDigits", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaTotalDigitsFacet")]; })
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["whiteSpace", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]; });

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), "System.Xml.Schema.XmlSchemaSimpleTypeUnion", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2842F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x2842E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseMemberTypes", 
    $sig.make(0x2842C, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseTypes", 
    $sig.make(0x28423, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberTypes", 
    $sig.make(0x28427, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberTypes", 
    $sig.make(0x2842B, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBaseMemberTypes", 
    $sig.make(0x2842D, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
  );

  $.Field({Static:false, Public:false}, "baseTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "memberTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])); 
  $.Field({Static:false, Public:false}, "baseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])); 
  $.Property({Static:false, Public:true }, "BaseTypes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]; });

  $.Property({Static:false, Public:true }, "MemberTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["memberTypes"]; });

  $.Property({Static:false, Public:true }, "BaseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaSubstitutionGroup", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB6FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Examplar", 
    $sig.make(0xB6FA, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Members", 
    $sig.make(0xB6F9, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Examplar", 
    $sig.make(0xB6FB, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "membersList", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "examplar", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:false}, "Members", $asm06.TypeRef("System.Collections.ArrayList"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

  $.Property({Static:false, Public:false}, "Examplar", $asm0E.TypeRef("System.Xml.XmlQualifiedName"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"), "System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28E07, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Choice", 
    $sig.make(0x28E06, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice"), [], [])
  );

  $.Field({Static:false, Public:false}, "choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")); 
  $.Property({Static:false, Public:false}, "Choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice"))
    .Attribute($asm0E.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaUse", true, {
    None: 0, 
    Optional: 1, 
    Prohibited: 2, 
    Required: 3
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), "System.Xml.Schema.XmlSchemaValidationException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2847E, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28482, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28484, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28486, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28488, null, [
        $.String, $asm06.TypeRef("System.Exception"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2848B, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2848D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2848F, null, [
        $.String, $.String, 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28490, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28491, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28492, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception"), $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28494, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28496, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28498, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Int32, 
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceObject", 
    $sig.make(0x2847D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x28480, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSourceObject", 
    $sig.make(0x28499, null, [$.Object], [])
  );

  $.Field({Static:false, Public:false}, "sourceNodeObject", $.Object); 
  $.Property({Static:false, Public:true }, "SourceObject", $.Object);

});

JSIL.MakeDelegate("System.Xml.Schema.XmlValueGetter", true, []);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaValidationFlags", true, {
    None: 0, 
    ProcessInlineSchema: 1, 
    ProcessSchemaLocation: 2, 
    ReportValidationWarnings: 4, 
    ProcessIdentityConstraints: 8, 
    AllowXmlAttributes: 16
  }, true
);

JSIL.MakeEnum(
  "System.Xml.Schema.ValidatorState", false, {
    None: 0, 
    Start: 1, 
    TopLevelAttribute: 2, 
    TopLevelTextOrWS: 3, 
    Element: 4, 
    Attribute: 5, 
    EndOfAttributes: 6, 
    Text: 7, 
    Whitespace: 8, 
    EndElement: 9, 
    SkipToEndElement: 10, 
    Finish: 11
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.IdRefNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2844B, null, [
        $.Type, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "Id", $.String); 
  $.Field({Static:false, Public:false}, "LineNo", $.Int32); 
  $.Field({Static:false, Public:false}, "LinePos", $.Int32); 
  $.Field({Static:false, Public:false}, "Next", $.Type); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaValidator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28221, null, [
        $asm0E.TypeRef("System.Xml.XmlNameTable"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
    $sig.make(0x2821E, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddIdentityConstraints", 
    $sig.make(0x282A9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSchema", 
    $sig.make(0x2822C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddXmlNamespaceSchema", 
    $sig.make(0x28289, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddXsiAttributes", 
    $sig.make(0x2827F, null, [$asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AttributeIdentityConstraints", 
    $sig.make(0x282AB, null, [
        $.String, $.String, 
        $.Object, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElementName", 
    $sig.make(0x282BB, $.String, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElementName", 
    $sig.make(0x282BC, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildXsiAttributes", 
    $sig.make(0x282AD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckAttributeValue", 
    $sig.make(0x28293, $.Object, [$.Object, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckElementProperties", 
    $sig.make(0x28284, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckElementValue", 
    $sig.make(0x28295, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
    $sig.make(0x282A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckIsXmlAttribute", 
    $sig.make(0x28287, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckMixedValueConstraint", 
    $sig.make(0x2828B, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRequiredAttributes", 
    $sig.make(0x282A6, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckStateTransition", 
    $sig.make(0x282A2, null, [$asm0E.TypeRef("System.Xml.Schema.ValidatorState"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckTokenizedTypes", 
    $sig.make(0x2829C, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $.Object, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckXsiTypeAndNil", 
    $sig.make(0x28281, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [
        $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), $.String, 
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearPSVI", 
    $sig.make(0x282A5, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CompleteValidationError", 
    $sig.make(0x282B0, null, [
        $asm0E.TypeRef("System.Xml.Schema.ValidationState"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
        $.Object, $.String, 
        $.Int32, $.Int32, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ElementIdentityConstraints", 
    $sig.make(0x282AA, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementValidationError", 
    $sig.make(0x282AF, null, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.ValidationState"), 
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Object, 
        $.String, $.Int32, 
        $.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndElementIdentityConstraints", 
    $sig.make(0x282AC, null, [
        $.Object, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndValidation", 
    $sig.make(0x2825E, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnumerateAny", 
    $sig.make(0x282B7, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FastGetElementDecl", 
    $sig.make(0x28280, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindId", 
    $sig.make(0x2829E, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurrentContentType", 
    $sig.make(0x28210, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurrentProcessContents", 
    $sig.make(0x28211, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasIdentityConstraints", 
    $sig.make(0x28215, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
    $sig.make(0x28213, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineInfoProvider", 
    $sig.make(0x28202, $asm0E.TypeRef("System.Xml.IXmlLineInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProcessIdentityConstraints", 
    $sig.make(0x28217, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProcessInlineSchema", 
    $sig.make(0x2821A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProcessSchemaHints", 
    $sig.make(0x2821C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProcessSchemaLocation", 
    $sig.make(0x2821B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReportValidationWarnings", 
    $sig.make(0x28219, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaSet", 
    $sig.make(0x2820D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
    $sig.make(0x28204, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StrictlyAssessed", 
    $sig.make(0x28212, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValidationEventSender", 
    $sig.make(0x2820B, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidationFlags", 
    $sig.make(0x2820E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetConcatenatedValue", 
    $sig.make(0x2826A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttributePrefix", 
    $sig.make(0x282A8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetExpectedAttributes", 
    $sig.make(0x28265, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetExpectedParticles", 
    $sig.make(0x28263, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSchemaElement", 
    $sig.make(0x282A7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSubstitutionGroupHead", 
    $sig.make(0x28272, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
    $sig.make(0x28279, $.String, [$asm0E.TypeRef("System.Xml.Schema.SchemaDeclBase")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetUnspecifiedDefaultAttributes", 
    $sig.make(0x28247, null, [$asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetUnspecifiedDefaultAttributes", 
    $sig.make(0x28267, null, [$asm06.TypeRef("System.Collections.ArrayList"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x28223, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x2822E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x28230, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalValidateEndElement", 
    $sig.make(0x2826C, $.Object, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
    $sig.make(0x2828D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x2827E, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PrintExpectedElements", 
    $sig.make(0x282B2, $.String, [$asm06.TypeRef("System.Collections.ArrayList"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PrintNames", 
    $sig.make(0x282B4, $.String, [$asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PrintNamesWithNS", 
    $sig.make(0x282B5, null, [$asm06.TypeRef("System.Collections.ArrayList"), $asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessEntity", 
    $sig.make(0x282BD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessSchemaLocations", 
    $sig.make(0x2826E, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
    $sig.make(0x28291, null, [
        $asm0E.TypeRef("System.Xml.XmlTokenizedType"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x2827D, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QNameString", 
    $sig.make(0x282B9, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecompileSchemaSet", 
    $sig.make(0x2828F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
    $sig.make(0x2821F, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x28224, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SaveTextValue", 
    $sig.make(0x2827B, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282BE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282BF, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C0, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C1, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C2, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C3, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C4, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C6, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x282C7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SendValidationEvent", 
    $sig.make(0x282C8, null, [
        $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Object, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LineInfoProvider", 
    $sig.make(0x28203, null, [$asm0E.TypeRef("System.Xml.IXmlLineInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SourceUri", 
    $sig.make(0x28207, null, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ValidationEventSender", 
    $sig.make(0x2820C, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
    $sig.make(0x28201, null, [$asm0E.TypeRef("System.Xml.XmlResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDtdSchemaInfo", 
    $sig.make(0x28269, null, [$asm0E.TypeRef("System.Xml.IDtdInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SkipToEndElement", 
    $sig.make(0x2825C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowDeclNotFoundWarningOrError", 
    $sig.make(0x28282, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateAtomicValue", 
    $sig.make(0x28274, $.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateAtomicValue", 
    $sig.make(0x28277, $.Object, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateAttribute", 
    $sig.make(0x28241, $.Object, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateAttribute", 
    $sig.make(0x28244, $.Object, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlValueGetter"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateAttribute", 
    $sig.make(0x28245, $.Object, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlValueGetter"), $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x28232, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
    $sig.make(0x28239, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.String, 
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateElementContext", 
    $sig.make(0x28270, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateEndElement", 
    $sig.make(0x28258, $.Object, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateEndElement", 
    $sig.make(0x2825A, $.Object, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateEndOfAttributes", 
    $sig.make(0x28249, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateStartElementIdentityConstraints", 
    $sig.make(0x28285, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
    $sig.make(0x2824B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
    $sig.make(0x2824D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateText", 
    $sig.make(0x2824F, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
    $sig.make(0x28251, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
    $sig.make(0x28254, null, [$asm0E.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateWhitespace", 
    $sig.make(0x28256, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
  );

  $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
  $.Constant({Static:true , Public:false}, "Quote", "'"); 
  $.Field({Static:false, Public:false}, "schemaSet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "validationFlags", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")); 
  $.Field({Static:false, Public:false}, "startIDConstraint", $.Int32); 
  $.Field({Static:false, Public:false}, "isRoot", $.Boolean); 
  $.Field({Static:false, Public:false}, "rootHasSchema", $.Boolean); 
  $.Field({Static:false, Public:false}, "attrValid", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkEntity", $.Boolean); 
  $.Field({Static:false, Public:false}, "compiledSchemaInfo", $asm0E.TypeRef("System.Xml.Schema.SchemaInfo")); 
  $.Field({Static:false, Public:false}, "dtdSchemaInfo", $asm0E.TypeRef("System.Xml.IDtdInfo")); 
  $.Field({Static:false, Public:false}, "validatedNamespaces", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "validationStack", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "context", $asm0E.TypeRef("System.Xml.Schema.ValidationState")); 
  $.Field({Static:false, Public:false}, "currentState", $asm0E.TypeRef("System.Xml.Schema.ValidatorState")); 
  $.Field({Static:false, Public:false}, "attPresence", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "wildID", $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")); 
  $.Field({Static:false, Public:false}, "IDs", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "idRefListHead", $asm0E.TypeRef("System.Xml.Schema.IdRefNode")); 
  $.Field({Static:false, Public:false}, "contextQName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "NsXs", $.String); 
  $.Field({Static:false, Public:false}, "NsXsi", $.String); 
  $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
  $.Field({Static:false, Public:false}, "NsXml", $.String); 
  $.Field({Static:false, Public:false}, "partialValidationType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
  $.Field({Static:false, Public:false}, "textValue", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "eventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "validationEventSender", $.Object); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "positionInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "dummyPositionInfo", $asm0E.TypeRef("System.Xml.IXmlLineInfo")); 
  $.Field({Static:false, Public:false}, "xmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver")); 
  $.Field({Static:false, Public:false}, "sourceUri", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "sourceUriString", $.String); 
  $.Field({Static:false, Public:false}, "nsResolver", $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")); 
  $.Field({Static:false, Public:false}, "processContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
  $.Field({Static:true , Public:false}, "xsiTypeSO", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:true , Public:false}, "xsiNilSO", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:true , Public:false}, "xsiSLSO", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:true , Public:false}, "xsiNoNsSLSO", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:false, Public:false}, "xsiTypeString", $.String); 
  $.Field({Static:false, Public:false}, "xsiNilString", $.String); 
  $.Field({Static:false, Public:false}, "xsiSchemaLocationString", $.String); 
  $.Field({Static:false, Public:false}, "xsiNoNamespaceSchemaLocationString", $.String); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "dtQName", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "dtCDATA", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "dtStringArray", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:true , Public:false}, "EmptyParticleArray", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")]), function ($pi) {
      return JSIL.Array.New($asm0E.System.Xml.Schema.XmlSchemaParticle, 0);
    }); 
  $.Field({Static:true , Public:false}, "EmptyAttributeArray", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]), function ($pi) {
      return JSIL.Array.New($asm0E.System.Xml.Schema.XmlSchemaAttribute, 0);
    }); 
  $.Field({Static:false, Public:false}, "xmlCharType", $asm0E.TypeRef("System.Xml.XmlCharType")); 
  $.Field({Static:true , Public:false}, "ValidStates", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:true , Public:false}, "MethodNames", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Property({Static:false, Public:true }, "XmlResolver", $asm0E.TypeRef("System.Xml.XmlResolver"));

  $.Property({Static:false, Public:true }, "LineInfoProvider", $asm0E.TypeRef("System.Xml.IXmlLineInfo"));

  $.Property({Static:false, Public:true }, "SourceUri", $asm07.TypeRef("System.Uri"));

  $.Property({Static:false, Public:true }, "ValidationEventSender", $.Object);

  $.Property({Static:false, Public:false}, "SchemaSet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"));

  $.Property({Static:false, Public:false}, "ValidationFlags", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

  $.Property({Static:false, Public:false}, "CurrentContentType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

  $.Property({Static:false, Public:false}, "CurrentProcessContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

  $.Property({Static:false, Public:false}, "StrictlyAssessed", $.Boolean);

  $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

  $.Property({Static:false, Public:false}, "HasIdentityConstraints", $.Boolean);

  $.Property({Static:false, Public:false}, "ProcessIdentityConstraints", $.Boolean);

  $.Property({Static:false, Public:false}, "ReportValidationWarnings", $.Boolean);

  $.Property({Static:false, Public:false}, "ProcessInlineSchema", $.Boolean);

  $.Property({Static:false, Public:false}, "ProcessSchemaLocation", $.Boolean);

  $.Property({Static:false, Public:false}, "ProcessSchemaHints", $.Boolean);

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaValidity", true, {
    NotKnown: 0, 
    Valid: 1, 
    Invalid: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSeverityType", true, {
    Error: 0, 
    Warning: 1
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTokenizedType", true, {
    CDATA: 0, 
    ID: 1, 
    IDREF: 2, 
    IDREFS: 3, 
    ENTITY: 4, 
    ENTITIES: 5, 
    NMTOKEN: 6, 
    NMTOKENS: 7, 
    NOTATION: 8, 
    ENUMERATION: 9, 
    QName: 10, 
    NCName: 11, 
    None: 12
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlTypeCode", true, {
    None: 0, 
    Item: 1, 
    Node: 2, 
    Document: 3, 
    Element: 4, 
    Attribute: 5, 
    Namespace: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    Text: 9, 
    AnyAtomicType: 10, 
    UntypedAtomic: 11, 
    String: 12, 
    Boolean: 13, 
    Decimal: 14, 
    Float: 15, 
    Double: 16, 
    Duration: 17, 
    DateTime: 18, 
    Time: 19, 
    Date: 20, 
    GYearMonth: 21, 
    GYear: 22, 
    GMonthDay: 23, 
    GDay: 24, 
    GMonth: 25, 
    HexBinary: 26, 
    Base64Binary: 27, 
    AnyUri: 28, 
    QName: 29, 
    Notation: 30, 
    NormalizedString: 31, 
    Token: 32, 
    Language: 33, 
    NmToken: 34, 
    Name: 35, 
    NCName: 36, 
    Id: 37, 
    Idref: 38, 
    Entity: 39, 
    Integer: 40, 
    NonPositiveInteger: 41, 
    NegativeInteger: 42, 
    Long: 43, 
    Int: 44, 
    Short: 45, 
    Byte: 46, 
    NonNegativeInteger: 47, 
    UnsignedLong: 48, 
    UnsignedInt: 49, 
    UnsignedShort: 50, 
    UnsignedByte: 51, 
    PositiveInteger: 52, 
    YearMonthDuration: 53, 
    DayTimeDuration: 54
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlValueConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB9BA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9AE, $.Object, [$.Boolean, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9AF, $.Object, [$.Int32, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B0, $.Object, [$.Int64, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B1, $.Object, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B2, $.Object, [$.Single, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B3, $.Object, [$.Double, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B4, $.Object, [$asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B5, $.Object, [$asm06.TypeRef("System.DateTimeOffset"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B6, $.Object, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B7, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B8, $.Object, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0xB9B9, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB952, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB953, $.Boolean, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB954, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB955, $.Boolean, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB956, $.Boolean, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB957, $.Boolean, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB958, $.Boolean, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB959, $.Boolean, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB95A, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0xB95B, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB98E, $asm06.TypeRef("System.DateTime"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB98F, $asm06.TypeRef("System.DateTime"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB990, $asm06.TypeRef("System.DateTime"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB991, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB992, $asm06.TypeRef("System.DateTime"), [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB993, $asm06.TypeRef("System.DateTime"), [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB994, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB995, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB996, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xB997, $asm06.TypeRef("System.DateTime"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB998, $asm06.TypeRef("System.DateTimeOffset"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB999, $asm06.TypeRef("System.DateTimeOffset"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB99A, $asm06.TypeRef("System.DateTimeOffset"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB99B, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB99C, $asm06.TypeRef("System.DateTimeOffset"), [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB99D, $asm06.TypeRef("System.DateTimeOffset"), [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB99E, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB99F, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB9A0, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0xB9A1, $asm06.TypeRef("System.DateTimeOffset"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB970, $asm06.TypeRef("System.Decimal"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB971, $asm06.TypeRef("System.Decimal"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB972, $asm06.TypeRef("System.Decimal"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB973, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB974, $asm06.TypeRef("System.Decimal"), [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB975, $asm06.TypeRef("System.Decimal"), [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB976, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB977, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB978, $asm06.TypeRef("System.Decimal"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0xB979, $asm06.TypeRef("System.Decimal"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB97A, $.Double, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB97B, $.Double, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB97C, $.Double, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB97D, $.Double, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB97E, $.Double, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB97F, $.Double, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB980, $.Double, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB981, $.Double, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB982, $.Double, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0xB983, $.Double, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB95C, $.Int32, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB95D, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB95E, $.Int32, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB95F, $.Int32, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB960, $.Int32, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB961, $.Int32, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB962, $.Int32, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB963, $.Int32, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB964, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0xB965, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB966, $.Int64, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB967, $.Int64, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB968, $.Int64, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB969, $.Int64, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB96A, $.Int64, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB96B, $.Int64, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB96C, $.Int64, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB96D, $.Int64, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB96E, $.Int64, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0xB96F, $.Int64, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB984, $.Single, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB985, $.Single, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB986, $.Single, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB987, $.Single, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB988, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB989, $.Single, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB98A, $.Single, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB98B, $.Single, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB98C, $.Single, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xB98D, $.Single, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A2, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A3, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A4, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A5, $.String, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A6, $.String, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A7, $.String, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A8, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9A9, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9AA, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9AB, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9AC, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0xB9AD, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), "System.Xml.Schema.XmlBaseConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x271E6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x271E7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x271E8, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x271E9, null, [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AnyUriToString", 
    $sig.make(0x27386, $.String, [$asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Base64BinaryToString", 
    $sig.make(0x27387, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeListType", 
    $sig.make(0x2736F, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27361, $.Object, [$.Boolean, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27362, $.Object, [$asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27363, $.Object, [$asm06.TypeRef("System.DateTimeOffset"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27364, $.Object, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27365, $.Object, [$.Double, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27366, $.Object, [$.Int32, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27367, $.Object, [$.Int64, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27368, $.Object, [$.Single, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27369, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2736A, $.Object, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2736B, $.Object, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidClrMappingException", 
    $sig.make(0x2736D, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DateOffsetToString", 
    $sig.make(0x273AD, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DateTimeOffsetToDateTime", 
    $sig.make(0x273B8, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DateTimeOffsetToString", 
    $sig.make(0x273AE, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DateTimeToString", 
    $sig.make(0x27389, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DateToString", 
    $sig.make(0x27388, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DayTimeDurationToString", 
    $sig.make(0x2738A, $.String, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DecimalToInt32", 
    $sig.make(0x273B9, $.Int32, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DecimalToInt64", 
    $sig.make(0x273BA, $.Int64, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DecimalToUInt64", 
    $sig.make(0x273BB, $.UInt64, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DurationToString", 
    $sig.make(0x2738B, $.String, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GDayOffsetToString", 
    $sig.make(0x273AF, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GDayToString", 
    $sig.make(0x2738C, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultClrType", 
    $sig.make(0x271E5, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
    $sig.make(0x271E2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeCode", 
    $sig.make(0x271E3, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlTypeName", 
    $sig.make(0x271E4, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GMonthDayOffsetToString", 
    $sig.make(0x273B1, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GMonthDayToString", 
    $sig.make(0x273AA, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GMonthOffsetToString", 
    $sig.make(0x273B0, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GMonthToString", 
    $sig.make(0x273A9, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GYearMonthOffsetToString", 
    $sig.make(0x273B3, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GYearMonthToString", 
    $sig.make(0x273AC, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GYearOffsetToString", 
    $sig.make(0x273B2, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GYearToString", 
    $sig.make(0x273AB, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Int32ToByte", 
    $sig.make(0x273BC, $.Byte, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Int32ToInt16", 
    $sig.make(0x273BD, $.Int16, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Int32ToSByte", 
    $sig.make(0x273BE, $.SByte, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Int32ToUInt16", 
    $sig.make(0x273BF, $.UInt16, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Int64ToInt32", 
    $sig.make(0x273C0, $.Int32, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Int64ToUInt32", 
    $sig.make(0x273C1, $.UInt32, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsDerivedFrom", 
    $sig.make(0x2736C, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QNameToString", 
    $sig.make(0x2736E, $.String, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QNameToString", 
    $sig.make(0x273B4, $.String, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToBase64Binary", 
    $sig.make(0x27370, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToDate", 
    $sig.make(0x27371, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToDateOffset", 
    $sig.make(0x2737A, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToDateTime", 
    $sig.make(0x27372, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToDateTimeOffset", 
    $sig.make(0x2737B, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToDayTimeDuration", 
    $sig.make(0x27373, $asm06.TypeRef("System.TimeSpan"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToDuration", 
    $sig.make(0x27374, $asm06.TypeRef("System.TimeSpan"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGDay", 
    $sig.make(0x27375, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGDayOffset", 
    $sig.make(0x2737C, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGMonth", 
    $sig.make(0x27376, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGMonthDay", 
    $sig.make(0x27377, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGMonthDayOffset", 
    $sig.make(0x2737E, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGMonthOffset", 
    $sig.make(0x2737D, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGYear", 
    $sig.make(0x27378, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGYearMonth", 
    $sig.make(0x27379, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGYearMonthOffset", 
    $sig.make(0x27380, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToGYearOffset", 
    $sig.make(0x2737F, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToHexBinary", 
    $sig.make(0x27381, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToQName", 
    $sig.make(0x27382, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToTime", 
    $sig.make(0x27383, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToTimeOffset", 
    $sig.make(0x27384, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StringToYearMonthDuration", 
    $sig.make(0x27385, $asm06.TypeRef("System.TimeSpan"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TimeOffsetToString", 
    $sig.make(0x273B6, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TimeToString", 
    $sig.make(0x273B5, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271EA, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271EB, $.Boolean, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271EC, $.Boolean, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271ED, $.Boolean, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271EE, $.Boolean, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271EF, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271F0, $.Boolean, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271F1, $.Boolean, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271F2, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x271F3, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x271F4, $asm06.TypeRef("System.DateTime"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x271F5, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x27207, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x27208, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x27209, $asm06.TypeRef("System.DateTime"), [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x2720A, $asm06.TypeRef("System.DateTime"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x2720B, $asm06.TypeRef("System.DateTime"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x2720C, $asm06.TypeRef("System.DateTime"), [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x2720D, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x2720E, $asm06.TypeRef("System.DateTime"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x2720F, $asm06.TypeRef("System.DateTimeOffset"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27210, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27211, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27212, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27213, $asm06.TypeRef("System.DateTimeOffset"), [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27214, $asm06.TypeRef("System.DateTimeOffset"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27215, $asm06.TypeRef("System.DateTimeOffset"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27216, $asm06.TypeRef("System.DateTimeOffset"), [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27217, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27218, $asm06.TypeRef("System.DateTimeOffset"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x27219, $asm06.TypeRef("System.Decimal"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2721A, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2721B, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2721C, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2721D, $asm06.TypeRef("System.Decimal"), [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2721E, $asm06.TypeRef("System.Decimal"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2721F, $asm06.TypeRef("System.Decimal"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x27220, $asm06.TypeRef("System.Decimal"), [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2732B, $asm06.TypeRef("System.Decimal"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2732C, $asm06.TypeRef("System.Decimal"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x2732D, $.Double, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x2732E, $.Double, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x2732F, $.Double, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27330, $.Double, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27331, $.Double, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27332, $.Double, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27333, $.Double, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27334, $.Double, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27335, $.Double, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27336, $.Double, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27337, $.Int32, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27338, $.Int32, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27339, $.Int32, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x2733A, $.Int32, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x2733B, $.Int32, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x2733C, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x2733D, $.Int32, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x2733E, $.Int32, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x2733F, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27340, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27341, $.Int64, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27342, $.Int64, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27343, $.Int64, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27344, $.Int64, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27345, $.Int64, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27346, $.Int64, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27347, $.Int64, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27348, $.Int64, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27349, $.Int64, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x2734A, $.Int64, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2734B, $.Single, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2734C, $.Single, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2734D, $.Single, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2734E, $.Single, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2734F, $.Single, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27350, $.Single, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27351, $.Single, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27352, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27353, $.Single, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27354, $.Single, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27355, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27356, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27357, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27358, $.String, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27359, $.String, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2735A, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2735B, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2735C, $.String, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2735D, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2735E, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2735F, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27360, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UntypedAtomicToDateTime", 
    $sig.make(0x273C2, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UntypedAtomicToDateTimeOffset", 
    $sig.make(0x273C3, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "YearMonthDurationToString", 
    $sig.make(0x273B7, $.String, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.Field({Static:false, Public:false}, "schemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "typeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")); 
  $.Field({Static:false, Public:false}, "clrTypeDefault", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ICollectionType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IEnumerableType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IListType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectArrayType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "StringArrayType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "XmlAtomicValueArrayType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Int32Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Int64Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "StringType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "XmlAtomicValueType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ByteType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Int16Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SByteType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "UInt16Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "UInt32Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "UInt64Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "XPathItemType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DoubleType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SingleType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeOffsetType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BooleanType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ByteArrayType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "XmlQualifiedNameType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "UriType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TimeSpanType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "XPathNavigatorType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false}, "SchemaType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false}, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:false}, "XmlTypeName", $.String);

  $.Property({Static:false, Public:false}, "DefaultClrType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlNumeric10Converter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27637, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27651, $.Object, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27652, $.Object, [$.Int32, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27653, $.Object, [$.Int64, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27654, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27655, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
    $sig.make(0x27656, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
    $sig.make(0x27657, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x27639, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2763B, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2763D, $asm06.TypeRef("System.Decimal"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x2763F, $asm06.TypeRef("System.Decimal"), [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x27640, $asm06.TypeRef("System.Decimal"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x27641, $asm06.TypeRef("System.Decimal"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27642, $.Int32, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27643, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27644, $.Int32, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27645, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27646, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27647, $.Int64, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27648, $.Int64, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27649, $.Int64, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x2764A, $.Int64, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x2764B, $.Int64, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2764C, $.String, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2764D, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2764E, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2764F, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27650, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlNumeric2Converter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27661, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2767D, $.Object, [$.Double, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2767E, $.Object, [$.Single, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27680, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27681, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x27665, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27666, $.Double, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27667, $.Double, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27668, $.Double, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x2766A, $.Double, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2766B, $.Single, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2766C, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x2766F, $.Single, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27672, $.Single, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27675, $.String, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27678, $.String, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2767A, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2767C, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlDateTimeConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x276FD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27715, $.Object, [$asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27717, $.Object, [$asm06.TypeRef("System.DateTimeOffset"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2771A, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27723, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x276FE, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x276FF, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x27700, $asm06.TypeRef("System.DateTime"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x27701, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x27705, $asm06.TypeRef("System.DateTime"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27706, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27707, $asm06.TypeRef("System.DateTimeOffset"), [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27708, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x27709, $asm06.TypeRef("System.DateTimeOffset"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2770B, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2770E, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27711, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27713, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlBooleanConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2775C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27764, $.Object, [$.Boolean, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27765, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27766, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x2775D, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x2775E, $.Boolean, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x2775F, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x27760, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27761, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27762, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27763, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlMiscConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27796, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2779C, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2779D, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
    $sig.make(0x277A2, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
    $sig.make(0x277A5, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x27799, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2779A, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2779B, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlStringConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x277B8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x277BC, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x277BD, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x277B9, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x277BA, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x277BB, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlListConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27894, null, [$asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27895, null, [$asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27898, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeListType", 
    $sig.make(0x2789E, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2789C, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x2789A, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidClrMappingException", 
    $sig.make(0x278B3, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsListType", 
    $sig.make(0x278A0, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ListAsString", 
    $sig.make(0x278B1, $.String, [$asm06.TypeRef("System.Collections.IEnumerable"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StringAsList", 
    $sig.make(0x278AF, $asm06.TypeRef("System.Collections.Generic.List`1", [$.String]), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToArray", 
    $sig.make(0x278A7, $jsilcore.TypeRef("System.Array", ["!!0"]), [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToList", 
    $sig.make(0x278A9, $asm06.TypeRef("System.Collections.IList"), [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.Field({Static:false, Public:false}, "atomicConverter", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlListConverter"), "System.Xml.Schema.XmlUntypedConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x278ED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x278EF, null, [$.Type, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeListType", 
    $sig.make(0x27958, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27928, $.Object, [$.Boolean, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2792A, $.Object, [$asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2792D, $.Object, [$asm06.TypeRef("System.DateTimeOffset"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27933, $.Object, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27937, $.Object, [$.Double, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27940, $.Object, [$.Int32, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27944, $.Object, [$.Int64, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27949, $.Object, [$.Single, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x2794C, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27950, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
    $sig.make(0x27953, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
    $sig.make(0x27957, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SupportsType", 
    $sig.make(0x2795A, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x278F1, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x278F3, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x278F5, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x278F7, $asm06.TypeRef("System.DateTime"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x278F8, $asm06.TypeRef("System.DateTimeOffset"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x278FA, $asm06.TypeRef("System.DateTimeOffset"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x278FC, $asm06.TypeRef("System.Decimal"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x278FE, $asm06.TypeRef("System.Decimal"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x278FF, $.Double, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x27900, $.Double, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27901, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x27902, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27903, $.Int64, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x27904, $.Int64, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27905, $.Single, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x27907, $.Single, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27909, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2790B, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2790D, $.String, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2790E, $.String, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27910, $.String, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2791A, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x2791E, $.String, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27921, $.String, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27923, $.String, [$.String, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x27926, $.String, [$.Object, $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.Field({Static:false, Public:false}, "allowListToList", $.Boolean); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Untyped", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "UntypedList", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlNodeConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x279B1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279B2, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Node", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlAnyConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x279C7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E1, $.Object, [$.Boolean, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E2, $.Object, [$asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E3, $.Object, [$asm06.TypeRef("System.DateTimeOffset"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E4, $.Object, [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E5, $.Object, [$.Double, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E6, $.Object, [$.Int32, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E7, $.Object, [$.Int64, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E8, $.Object, [$.Single, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279E9, $.Object, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x279EA, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
    $sig.make(0x279EB, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
    $sig.make(0x279EC, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
    $sig.make(0x279C8, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x279D6, $asm06.TypeRef("System.DateTime"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDateTimeOffset", 
    $sig.make(0x279D8, $asm06.TypeRef("System.DateTimeOffset"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
    $sig.make(0x279D9, $asm06.TypeRef("System.Decimal"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
    $sig.make(0x279DB, $.Double, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
    $sig.make(0x279DD, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
    $sig.make(0x279DF, $.Int64, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToNavigator", 
    $sig.make(0x279ED, $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0x279E0, $.Single, [$.Object], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "AnyAtomic", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlListConverter"), "System.Xml.Schema.XmlAnyListConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27A0A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27A0C, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "ItemList", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "AnyAtomicList", $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlUnionConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27A26, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ChangeType", 
    $sig.make(0x27A29, $.Object, [
        $.Object, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x27A28, $asm0E.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.Field({Static:false, Public:false}, "converters", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlValueConverter")])); 
  $.Field({Static:false, Public:false}, "hasAtomicMember", $.Boolean); 
  $.Field({Static:false, Public:false}, "hasListMember", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.SchemaBuilder"), "System.Xml.Schema.XsdBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x27A92, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.XmlNamespaceManager"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm0E.TypeRef("System.Xml.XmlNameTable"), 
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames"), $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0x27B67, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddParticle", 
    $sig.make(0x27B68, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAnnotated_Id", 
    $sig.make(0x27A9E, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAny_Namespace", 
    $sig.make(0x27B49, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAny_ProcessContents", 
    $sig.make(0x27B4A, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAnyAttribute_Namespace", 
    $sig.make(0x27B3D, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAnyAttribute_ProcessContents", 
    $sig.make(0x27B3E, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAppinfo_Source", 
    $sig.make(0x27B5B, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Default", 
    $sig.make(0x27AB0, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Fixed", 
    $sig.make(0x27ABD, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Form", 
    $sig.make(0x27ABF, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Name", 
    $sig.make(0x27AD1, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Ref", 
    $sig.make(0x27ACF, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Type", 
    $sig.make(0x27AD2, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Use", 
    $sig.make(0x27AC8, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttributeGroup_Name", 
    $sig.make(0x27B38, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildAttributeGroupRef_Ref", 
    $sig.make(0x27B3B, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexContent_Mixed", 
    $sig.make(0x27B25, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexContentExtension_Base", 
    $sig.make(0x27B29, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexContentRestriction_Base", 
    $sig.make(0x27B2C, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Abstract", 
    $sig.make(0x27B16, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Block", 
    $sig.make(0x27B17, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Final", 
    $sig.make(0x27B18, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Mixed", 
    $sig.make(0x27B1B, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Name", 
    $sig.make(0x27B1F, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildDocumentation_Source", 
    $sig.make(0x27B5E, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildDocumentation_XmlLang", 
    $sig.make(0x27B60, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Abstract", 
    $sig.make(0x27AD6, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Block", 
    $sig.make(0x27ADC, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Default", 
    $sig.make(0x27ADD, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Final", 
    $sig.make(0x27AE6, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Fixed", 
    $sig.make(0x27AE7, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Form", 
    $sig.make(0x27AE0, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_MaxOccurs", 
    $sig.make(0x27AE9, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_MinOccurs", 
    $sig.make(0x27AEA, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Name", 
    $sig.make(0x27AEB, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Nillable", 
    $sig.make(0x27AEE, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Ref", 
    $sig.make(0x27AEF, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_SubstitutionGroup", 
    $sig.make(0x27AE5, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildElement_Type", 
    $sig.make(0x27AF2, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildFacet_Fixed", 
    $sig.make(0x27B50, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildFacet_Value", 
    $sig.make(0x27B51, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildField_XPath", 
    $sig.make(0x27B58, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildGroup_Name", 
    $sig.make(0x27B40, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildGroupRef_Ref", 
    $sig.make(0x27B44, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildIdentityConstraint_Name", 
    $sig.make(0x27B53, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildIdentityConstraint_Refer", 
    $sig.make(0x27B54, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildImport_Namespace", 
    $sig.make(0x27AA9, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildImport_SchemaLocation", 
    $sig.make(0x27AAA, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildInclude_SchemaLocation", 
    $sig.make(0x27AA7, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildNotation_Name", 
    $sig.make(0x27B4C, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildNotation_Public", 
    $sig.make(0x27B4D, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildNotation_System", 
    $sig.make(0x27B4E, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildParticle_MaxOccurs", 
    $sig.make(0x27B42, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildParticle_MinOccurs", 
    $sig.make(0x27B43, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildRedefine_SchemaLocation", 
    $sig.make(0x27AAC, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSchema_AttributeFormDefault", 
    $sig.make(0x27A9F, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSchema_BlockDefault", 
    $sig.make(0x27AA4, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSchema_ElementFormDefault", 
    $sig.make(0x27AA0, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSchema_FinalDefault", 
    $sig.make(0x27AA3, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSchema_TargetNamespace", 
    $sig.make(0x27AA1, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSchema_Version", 
    $sig.make(0x27AA2, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSelector_XPath", 
    $sig.make(0x27B56, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleContentExtension_Base", 
    $sig.make(0x27B31, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleContentRestriction_Base", 
    $sig.make(0x27B35, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleType_Final", 
    $sig.make(0x27AF8, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleType_Name", 
    $sig.make(0x27AF7, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeList_ItemType", 
    $sig.make(0x27B09, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeRestriction_Base", 
    $sig.make(0x27B14, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeUnion_MemberTypes", 
    $sig.make(0x27B00, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EndAppinfo", 
    $sig.make(0x27B5C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndChildren", 
    $sig.make(0x27A99, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EndDocumentation", 
    $sig.make(0x27B65, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EndRedefine", 
    $sig.make(0x27AAD, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurrentElement", 
    $sig.make(0x27A8F, $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParentContainer", 
    $sig.make(0x27A91, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParentElement", 
    $sig.make(0x27A90, $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetContainer", 
    $sig.make(0x27A9C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNextState", 
    $sig.make(0x27B6A, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAll", 
    $sig.make(0x27B45, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAnnotation", 
    $sig.make(0x27B59, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAny", 
    $sig.make(0x27B48, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAnyAttribute", 
    $sig.make(0x27B3C, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAppinfo", 
    $sig.make(0x27B5A, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAttribute", 
    $sig.make(0x27AAE, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAttributeGroup", 
    $sig.make(0x27B36, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitAttributeGroupRef", 
    $sig.make(0x27B3A, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitChoice", 
    $sig.make(0x27B46, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitComplexContent", 
    $sig.make(0x27B22, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitComplexContentExtension", 
    $sig.make(0x27B27, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitComplexContentRestriction", 
    $sig.make(0x27B2B, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitComplexType", 
    $sig.make(0x27B15, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitDocumentation", 
    $sig.make(0x27B5D, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitElement", 
    $sig.make(0x27AD4, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitFacet", 
    $sig.make(0x27B4F, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitField", 
    $sig.make(0x27B57, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitGroup", 
    $sig.make(0x27B3F, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitGroupRef", 
    $sig.make(0x27B41, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitIdentityConstraint", 
    $sig.make(0x27B52, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitImport", 
    $sig.make(0x27AA8, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitInclude", 
    $sig.make(0x27AA6, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitNotation", 
    $sig.make(0x27B4B, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitRedefine", 
    $sig.make(0x27AAB, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSchema", 
    $sig.make(0x27AA5, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSelector", 
    $sig.make(0x27B55, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSequence", 
    $sig.make(0x27B47, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleContent", 
    $sig.make(0x27B2D, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleContentExtension", 
    $sig.make(0x27B2F, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleContentRestriction", 
    $sig.make(0x27B33, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleType", 
    $sig.make(0x27AF5, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeList", 
    $sig.make(0x27B03, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeRestriction", 
    $sig.make(0x27B12, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeUnion", 
    $sig.make(0x27AFA, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsContentParsed", 
    $sig.make(0x27A95, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSkipableElement", 
    $sig.make(0x27B6B, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseBlockFinalEnum", 
    $sig.make(0x27B73, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseBoolean", 
    $sig.make(0x27B6F, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseEnum", 
    $sig.make(0x27B70, $.Int32, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
    $sig.make(0x27B72, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseUriReference", 
    $sig.make(0x27B75, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x27A9B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAttribute", 
    $sig.make(0x27A94, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessCData", 
    $sig.make(0x27A97, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
    $sig.make(0x27A93, $.Boolean, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessMarkup", 
    $sig.make(0x27A96, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x27A9A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecordPosition", 
    $sig.make(0x27B81, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x27B77, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x27B79, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x27B7B, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x27B7E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm0E.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
    $sig.make(0x27B80, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetContainer", 
    $sig.make(0x27A9D, null, [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMaxOccurs", 
    $sig.make(0x27B6E, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMinOccurs", 
    $sig.make(0x27B6C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartChildren", 
    $sig.make(0x27A98, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaElement", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ElementSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexTypeSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentExtensionSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentExtensionSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeListSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeUnionSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RedefineSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GroupSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AllSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChoiceSequenceSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IdentityConstraintSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotationSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotatedSubelements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ElementAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexTypeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentExtensionAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentExtensionAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeUnionAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeListAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupRefAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GroupAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GroupRefAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParticleAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AnyAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IdentityConstraintAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SelectorAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FieldAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NotationAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IncludeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ImportAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FacetAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AnyAttributeAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentationAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AppinfoAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RedefineAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotationAttributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaEntries", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdEntry")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DerivationMethodValues", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DerivationMethodStrings", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FormStringValues", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "UseStringValues", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ProcessContentsStringValues", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "positionInfo", $asm0E.TypeRef("System.Xml.PositionInfo")); 
  $.Field({Static:false, Public:false}, "currentEntry", $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdEntry")); 
  $.Field({Static:false, Public:false}, "nextEntry", $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdEntry")); 
  $.Field({Static:false, Public:false}, "hasChild", $.Boolean); 
  $.Field({Static:false, Public:false}, "stateHistory", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "containerStack", $asm06.TypeRef("System.Collections.Stack")); 
  $.Field({Static:false, Public:false}, "nameTable", $asm0E.TypeRef("System.Xml.XmlNameTable")); 
  $.Field({Static:false, Public:false}, "schemaNames", $asm0E.TypeRef("System.Xml.Schema.SchemaNames")); 
  $.Field({Static:false, Public:false}, "namespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "canIncludeImport", $.Boolean); 
  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "xso", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
  $.Field({Static:false, Public:false}, "element", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
  $.Field({Static:false, Public:false}, "anyElement", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")); 
  $.Field({Static:false, Public:false}, "attribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
  $.Field({Static:false, Public:false}, "anyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "complexType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")); 
  $.Field({Static:false, Public:false}, "simpleType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
  $.Field({Static:false, Public:false}, "complexContent", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent")); 
  $.Field({Static:false, Public:false}, "complexContentExtension", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")); 
  $.Field({Static:false, Public:false}, "complexContentRestriction", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")); 
  $.Field({Static:false, Public:false}, "simpleContent", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent")); 
  $.Field({Static:false, Public:false}, "simpleContentExtension", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")); 
  $.Field({Static:false, Public:false}, "simpleContentRestriction", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")); 
  $.Field({Static:false, Public:false}, "simpleTypeUnion", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion")); 
  $.Field({Static:false, Public:false}, "simpleTypeList", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList")); 
  $.Field({Static:false, Public:false}, "simpleTypeRestriction", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")); 
  $.Field({Static:false, Public:false}, "group", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")); 
  $.Field({Static:false, Public:false}, "groupRef", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")); 
  $.Field({Static:false, Public:false}, "all", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")); 
  $.Field({Static:false, Public:false}, "choice", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")); 
  $.Field({Static:false, Public:false}, "sequence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")); 
  $.Field({Static:false, Public:false}, "particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
  $.Field({Static:false, Public:false}, "attributeGroup", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")); 
  $.Field({Static:false, Public:false}, "attributeGroupRef", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")); 
  $.Field({Static:false, Public:false}, "notation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaNotation")); 
  $.Field({Static:false, Public:false}, "identityConstraint", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")); 
  $.Field({Static:false, Public:false}, "xpath", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath")); 
  $.Field({Static:false, Public:false}, "include", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInclude")); 
  $.Field({Static:false, Public:false}, "$import", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaImport")); 
  $.Field({Static:false, Public:false}, "annotation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
  $.Field({Static:false, Public:false}, "appInfo", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAppInfo")); 
  $.Field({Static:false, Public:false}, "documentation", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDocumentation")); 
  $.Field({Static:false, Public:false}, "facet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")); 
  $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlNode")])); 
  $.Field({Static:false, Public:false}, "redefine", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaRedefine")); 
  $.Field({Static:false, Public:false}, "validationEventHandler", $asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
  $.Field({Static:false, Public:false}, "unhandledAttributes", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "namespaces", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "CurrentElement", $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"));

  $.Property({Static:false, Public:false}, "ParentElement", $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"));

  $.Property({Static:false, Public:false}, "ParentContainer", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.XsdBuilder/State", false, {
    Root: 0, 
    Schema: 1, 
    Annotation: 2, 
    Include: 3, 
    Import: 4, 
    Element: 5, 
    Attribute: 6, 
    AttributeGroup: 7, 
    AttributeGroupRef: 8, 
    AnyAttribute: 9, 
    Group: 10, 
    GroupRef: 11, 
    All: 12, 
    Choice: 13, 
    Sequence: 14, 
    Any: 15, 
    Notation: 16, 
    SimpleType: 17, 
    ComplexType: 18, 
    ComplexContent: 19, 
    ComplexContentRestriction: 20, 
    ComplexContentExtension: 21, 
    SimpleContent: 22, 
    SimpleContentExtension: 23, 
    SimpleContentRestriction: 24, 
    SimpleTypeUnion: 25, 
    SimpleTypeList: 26, 
    SimpleTypeRestriction: 27, 
    Unique: 28, 
    Key: 29, 
    KeyRef: 30, 
    Selector: 31, 
    Field: 32, 
    MinExclusive: 33, 
    MinInclusive: 34, 
    MaxExclusive: 35, 
    MaxInclusive: 36, 
    TotalDigits: 37, 
    FractionDigits: 38, 
    Length: 39, 
    MinLength: 40, 
    MaxLength: 41, 
    Enumeration: 42, 
    Pattern: 43, 
    WhiteSpace: 44, 
    AppInfo: 45, 
    Documentation: 46, 
    Redefine: 47
  }, false
);

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder/XsdBuildFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder/XsdInitFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder/XsdEndChildFunction", false, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XsdBuilder/XsdAttributeEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A921, null, [$asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdBuildFunction")], [])
  );

  $.Field({Static:false, Public:true }, "Attribute", $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
  $.Field({Static:false, Public:true }, "BuildFunc", $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdBuildFunction")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XsdBuilder/XsdEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x282FA, null, [
        $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State"), 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")]), 
        $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdInitFunction"), $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdEndChildFunction"), 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:true }, "Name", $asm0E.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
  $.Field({Static:false, Public:true }, "CurrentState", $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")); 
  $.Field({Static:false, Public:true }, "NextStates", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
  $.Field({Static:false, Public:true }, "Attributes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
  $.Field({Static:false, Public:true }, "InitFunc", $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdInitFunction")); 
  $.Field({Static:false, Public:true }, "EndChildFunc", $asm0E.TypeRef("System.Xml.Schema.XsdBuilder/XsdEndChildFunction")); 
  $.Field({Static:false, Public:true }, "ParseContent", $.Boolean); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Schema.XsdBuilder/BuilderNamespaceManager", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A955, null, [$asm0E.TypeRef("System.Xml.XmlNamespaceManager"), $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x2A957, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "nsMgr", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "reader", $asm0E.TypeRef("System.Xml.XmlReader")); 
});

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDateTimeFlags", false, {
    DateTime: 1, 
    Time: 2, 
    Date: 4, 
    GYearMonth: 8, 
    GYear: 16, 
    GMonthDay: 32, 
    GDay: 64, 
    GMonth: 128, 
    AllXsd: 255, 
    XdrDateTimeNoTz: 256, 
    XdrDateTime: 512, 
    XdrTimeNoTz: 1024
  }, true
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.XsdDateTime", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x287E4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x287E5, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x287E6, null, [$asm0E.TypeRef("System.Xml.Schema.XsdDateTime/Parser")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x287E9, null, [$asm06.TypeRef("System.DateTime"), $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x287EA, null, [$asm06.TypeRef("System.DateTimeOffset")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x287EB, null, [$asm06.TypeRef("System.DateTimeOffset"), $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Compare", 
    $sig.make(0x287EF, $.Int32, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x287F0, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Day", 
    $sig.make(0x287DD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Fraction", 
    $sig.make(0x287E1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Hour", 
    $sig.make(0x287DE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalKind", 
    $sig.make(0x287D8, $asm0E.TypeRef("System.Xml.Schema.XsdDateTime/XsdDateTimeKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalTypeCode", 
    $sig.make(0x287D7, $asm0E.TypeRef("System.Xml.Schema.XsdDateTime/DateTimeTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x287DA, $asm06.TypeRef("System.DateTimeKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Minute", 
    $sig.make(0x287DF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Month", 
    $sig.make(0x287DC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Second", 
    $sig.make(0x287E0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
    $sig.make(0x287D9, $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Year", 
    $sig.make(0x287DB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ZoneHour", 
    $sig.make(0x287E2, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ZoneMinute", 
    $sig.make(0x287E3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetZuluDateTime", 
    $sig.make(0x287F7, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitiateXsdDateTime", 
    $sig.make(0x287E7, null, [$asm0E.TypeRef("System.Xml.Schema.XsdDateTime/Parser")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IntToCharArray", 
    $sig.make(0x287F5, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x287ED, $asm06.TypeRef("System.DateTime"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x287EE, $asm06.TypeRef("System.DateTimeOffset"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrintDate", 
    $sig.make(0x287F2, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrintTime", 
    $sig.make(0x287F3, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrintZone", 
    $sig.make(0x287F4, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ShortToCharArray", 
    $sig.make(0x287F6, null, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x287F1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToZulu", 
    $sig.make(0x287EC, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryParse", 
    $sig.make(0x287E8, $.Boolean, [
        $.String, $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.Constant({Static:true , Public:false}, "TypeMask", 4278190080); 
  $.Constant({Static:true , Public:false}, "KindMask", 16711680); 
  $.Constant({Static:true , Public:false}, "ZoneHourMask", 65280); 
  $.Constant({Static:true , Public:false}, "ZoneMinuteMask", 255); 
  $.Constant({Static:true , Public:false}, "TypeShift", 24); 
  $.Constant({Static:true , Public:false}, "KindShift", 16); 
  $.Constant({Static:true , Public:false}, "ZoneHourShift", 8); 
  $.Constant({Static:true , Public:false}, "maxFractionDigits", 7); 
  $.Field({Static:false, Public:false}, "dt", $asm06.TypeRef("System.DateTime")); 
  $.Field({Static:false, Public:false}, "extra", $.UInt32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_dd", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_ddT", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm_ss", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz_zz", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm_", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm__", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm_dd", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz___", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Lz___dd", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "typeCodes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlTypeCode")])); 
  $.Property({Static:false, Public:false}, "InternalTypeCode", $asm0E.TypeRef("System.Xml.Schema.XsdDateTime/DateTimeTypeCode"));

  $.Property({Static:false, Public:false}, "InternalKind", $asm0E.TypeRef("System.Xml.Schema.XsdDateTime/XsdDateTimeKind"));

  $.Property({Static:false, Public:true }, "TypeCode", $asm0E.TypeRef("System.Xml.Schema.XmlTypeCode"));

  $.Property({Static:false, Public:true }, "Kind", $asm06.TypeRef("System.DateTimeKind"));

  $.Property({Static:false, Public:true }, "Year", $.Int32);

  $.Property({Static:false, Public:true }, "Month", $.Int32);

  $.Property({Static:false, Public:true }, "Day", $.Int32);

  $.Property({Static:false, Public:true }, "Hour", $.Int32);

  $.Property({Static:false, Public:true }, "Minute", $.Int32);

  $.Property({Static:false, Public:true }, "Second", $.Int32);

  $.Property({Static:false, Public:true }, "Fraction", $.Int32);

  $.Property({Static:false, Public:true }, "ZoneHour", $.Int32);

  $.Property({Static:false, Public:true }, "ZoneMinute", $.Int32);

});

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDateTime/DateTimeTypeCode", false, {
    DateTime: 0, 
    Time: 1, 
    Date: 2, 
    GYearMonth: 3, 
    GYear: 4, 
    GMonthDay: 5, 
    GDay: 6, 
    GMonth: 7, 
    XdrDateTime: 8
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDateTime/XsdDateTimeKind", false, {
    Unspecified: 0, 
    Zulu: 1, 
    LocalWestOfZulu: 2, 
    LocalEastOfZulu: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.XsdDateTime/Parser", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "Parse", 
    $sig.make(0x288B1, $.Boolean, [$.String, $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Parse2Dig", 
    $sig.make(0x288B8, $.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Parse4Dig", 
    $sig.make(0x288B7, $.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseChar", 
    $sig.make(0x288B9, $.Boolean, [$.Int32, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseDate", 
    $sig.make(0x288B2, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseTime", 
    $sig.make(0x288B5, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseTimeAndWhitespace", 
    $sig.make(0x288B4, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseTimeAndZoneAndWhitespace", 
    $sig.make(0x288B3, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseZoneAndWhitespace", 
    $sig.make(0x288B6, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Test", 
    $sig.make(0x288BA, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags"), $asm0E.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
  );

  $.Constant({Static:true , Public:false}, "leapYear", 1904); 
  $.Constant({Static:true , Public:false}, "firstMonth", 1); 
  $.Constant({Static:true , Public:false}, "firstDay", 1); 
  $.Field({Static:false, Public:true }, "typeCode", $asm0E.TypeRef("System.Xml.Schema.XsdDateTime/DateTimeTypeCode")); 
  $.Field({Static:false, Public:true }, "year", $.Int32); 
  $.Field({Static:false, Public:true }, "month", $.Int32); 
  $.Field({Static:false, Public:true }, "day", $.Int32); 
  $.Field({Static:false, Public:true }, "hour", $.Int32); 
  $.Field({Static:false, Public:true }, "minute", $.Int32); 
  $.Field({Static:false, Public:true }, "second", $.Int32); 
  $.Field({Static:false, Public:true }, "fraction", $.Int32); 
  $.Field({Static:false, Public:true }, "kind", $asm0E.TypeRef("System.Xml.Schema.XsdDateTime/XsdDateTimeKind")); 
  $.Field({Static:false, Public:true }, "zoneHour", $.Int32); 
  $.Field({Static:false, Public:true }, "zoneMinute", $.Int32); 
  $.Field({Static:false, Public:false}, "text", $.String); 
  $.Field({Static:false, Public:false}, "$length", $.Int32); 
  $.Field({Static:true , Public:false}, "Power10", $jsilcore.TypeRef("System.Array", [$.Int32])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Schema.XsdDuration", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2891C, null, [
        $.Boolean, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2891D, null, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2891E, null, [$asm06.TypeRef("System.TimeSpan"), $asm0E.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2891F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28920, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Days", 
    $sig.make(0x2890F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Hours", 
    $sig.make(0x28910, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNegative", 
    $sig.make(0x2890C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Microseconds", 
    $sig.make(0x2891A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Milliseconds", 
    $sig.make(0x2891B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Minutes", 
    $sig.make(0x28911, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Months", 
    $sig.make(0x2890E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Nanoseconds", 
    $sig.make(0x28919, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Seconds", 
    $sig.make(0x28916, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Years", 
    $sig.make(0x2890D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0x28921, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x28926, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToString", 
    $sig.make(0x28927, $.String, [$asm0E.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToTimeSpan", 
    $sig.make(0x28922, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToTimeSpan", 
    $sig.make(0x28923, $asm06.TypeRef("System.TimeSpan"), [$asm0E.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryParse", 
    $sig.make(0x28928, $asm06.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryParse", 
    $sig.make(0x28929, $asm06.TypeRef("System.Exception"), [
        $.String, $asm0E.TypeRef("System.Xml.Schema.XsdDuration/DurationType"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryParseDigits", 
    $sig.make(0x2892A, $.String, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryToTimeSpan", 
    $sig.make(0x28924, $asm06.TypeRef("System.Exception"), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.TimeSpan")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryToTimeSpan", 
    $sig.make(0x28925, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.Schema.XsdDuration/DurationType"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.TimeSpan")])], [])
  );

  $.Constant({Static:true , Public:false}, "NegativeBit", 2147483648); 
  $.Field({Static:false, Public:false}, "years", $.Int32); 
  $.Field({Static:false, Public:false}, "months", $.Int32); 
  $.Field({Static:false, Public:false}, "days", $.Int32); 
  $.Field({Static:false, Public:false}, "hours", $.Int32); 
  $.Field({Static:false, Public:false}, "minutes", $.Int32); 
  $.Field({Static:false, Public:false}, "seconds", $.Int32); 
  $.Field({Static:false, Public:false}, "nanoseconds", $.UInt32); 
  $.Property({Static:false, Public:true }, "IsNegative", $.Boolean);

  $.Property({Static:false, Public:true }, "Years", $.Int32);

  $.Property({Static:false, Public:true }, "Months", $.Int32);

  $.Property({Static:false, Public:true }, "Days", $.Int32);

  $.Property({Static:false, Public:true }, "Hours", $.Int32);

  $.Property({Static:false, Public:true }, "Minutes", $.Int32);

  $.Property({Static:false, Public:true }, "Seconds", $.Int32);

  $.Property({Static:false, Public:true }, "Nanoseconds", $.Int32);

  $.Property({Static:false, Public:true }, "Microseconds", $.Int32);

  $.Property({Static:false, Public:true }, "Milliseconds", $.Int32);

});

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDuration/Parts", false, {
    HasNone: 0, 
    HasYears: 1, 
    HasMonths: 2, 
    HasDays: 4, 
    HasHours: 8, 
    HasMinutes: 16, 
    HasSeconds: 32
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDuration/DurationType", false, {
    Duration: 0, 
    YearMonthDuration: 1, 
    DayTimeDuration: 2
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.XsdValidator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2898E, null, [$asm0E.TypeRef("System.Xml.Schema.BaseValidator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2898F, null, [
        $asm0E.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
        $asm0E.TypeRef("System.Xml.IValidationEventHandling")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddID", 
    $sig.make(0x289A1, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddIdentityConstraints", 
    $sig.make(0x289A8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AttributeIdentityConstraints", 
    $sig.make(0x289AA, null, [
        $.String, $.String, 
        $.Object, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
    $sig.make(0x289A6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
    $sig.make(0x289A0, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompleteValidation", 
    $sig.make(0x28992, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ElementIdentityConstraints", 
    $sig.make(0x289A9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EndElementIdentityConstraints", 
    $sig.make(0x289AC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FastGetElementDecl", 
    $sig.make(0x28999, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FindId", 
    $sig.make(0x289A2, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DtQName", 
    $sig.make(0x28989, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasIdentityConstraints", 
    $sig.make(0x2898D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
    $sig.make(0x2898B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsInlineSchemaStarted", 
    $sig.make(0x2898A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
    $sig.make(0x2898C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x28990, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsXSDRoot", 
    $sig.make(0x289A3, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
    $sig.make(0x2899E, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LoadSchemaFromLocation", 
    $sig.make(0x2899D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Pop", 
    $sig.make(0x289A5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
    $sig.make(0x28996, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
    $sig.make(0x28993, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
    $sig.make(0x2899F, null, [$asm0E.TypeRef("System.Xml.XmlTokenizedType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessXsiAttributes", 
    $sig.make(0x28997, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x289A4, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Context", 
    $sig.make(0x28988, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThoroughGetElementDecl", 
    $sig.make(0x2899A, $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), [
        $asm0E.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnWrapUnion", 
    $sig.make(0x289AB, $.Object, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0x28991, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
    $sig.make(0x28995, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
    $sig.make(0x28994, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
    $sig.make(0x28998, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
    $sig.make(0x2899C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
    $sig.make(0x2899B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateStartElementIdentityConstraints", 
    $sig.make(0x289A7, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
  $.Field({Static:false, Public:false}, "startIDConstraint", $.Int32); 
  $.Field({Static:false, Public:false}, "validationStack", $asm0E.TypeRef("System.Xml.HWStack")); 
  $.Field({Static:false, Public:false}, "attPresence", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "nsManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "bManageNamespaces", $.Boolean); 
  $.Field({Static:false, Public:false}, "IDs", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "idRefListHead", $asm0E.TypeRef("System.Xml.Schema.IdRefNode")); 
  $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm0E.TypeRef("System.Xml.Schema.Parser")); 
  $.Field({Static:false, Public:false}, "processContents", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "dtCDATA", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "dtQName", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "dtStringArray", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
  $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
  $.Field({Static:false, Public:false}, "NsXs", $.String); 
  $.Field({Static:false, Public:false}, "NsXsi", $.String); 
  $.Field({Static:false, Public:false}, "XsiType", $.String); 
  $.Field({Static:false, Public:false}, "XsiNil", $.String); 
  $.Field({Static:false, Public:false}, "XsiSchemaLocation", $.String); 
  $.Field({Static:false, Public:false}, "XsiNoNamespaceSchemaLocation", $.String); 
  $.Field({Static:false, Public:false}, "XsdSchema", $.String); 
  $.Property({Static:false, Public:true }, "Context", $asm0E.TypeRef("System.Xml.Schema.ValidationState"));

  $.Property({Static:true , Public:true }, "DtQName", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

  $.Property({Static:false, Public:false}, "IsInlineSchemaStarted", $.Boolean);

  $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

  $.Property({Static:false, Public:false}, "HasIdentityConstraints", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaInference", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28A2B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
    $sig.make(0x28A31, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [
        $.String, $.String, 
        $.String, $.String, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddElement", 
    $sig.make(0x28A33, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSimpleContentExtension", 
    $sig.make(0x28A35, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNewElementforChoice", 
    $sig.make(0x28A4A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateXmlSchema", 
    $sig.make(0x28A32, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DateTime", 
    $sig.make(0x28A49, $.Int32, [
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindAttribute", 
    $sig.make(0x28A3E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm06.TypeRef("System.Collections.ICollection"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindAttributeRef", 
    $sig.make(0x28A43, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [
        $asm06.TypeRef("System.Collections.ICollection"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindElement", 
    $sig.make(0x28A42, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindElementRef", 
    $sig.make(0x28A44, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindGlobalElement", 
    $sig.make(0x28A40, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
        $.String, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindMatchingElement", 
    $sig.make(0x28A37, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
        $.Boolean, $asm0E.TypeRef("System.Xml.XmlReader"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Occurrence", 
    $sig.make(0x28A25, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeInference", 
    $sig.make(0x28A27, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEffectiveSchemaType", 
    $sig.make(0x28A36, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
    $sig.make(0x28A4B, $.Int32, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InferElement", 
    $sig.make(0x28A34, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchema")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InferSchema", 
    $sig.make(0x28A2C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "InferSchema", 
    $sig.make(0x28A2E, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InferSchema1", 
    $sig.make(0x28A30, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InferSimpleType", 
    $sig.make(0x28A48, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MakeExistingAttributesOptional", 
    $sig.make(0x28A45, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveAttributes", 
    $sig.make(0x28A3A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveAttributes", 
    $sig.make(0x28A3C, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
    $sig.make(0x28A39, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), 
        $.Boolean, $asm0E.TypeRef("System.Xml.Schema.XmlSchema")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RefineSimpleType", 
    $sig.make(0x28A47, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Occurrence", 
    $sig.make(0x28A26, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TypeInference", 
    $sig.make(0x28A29, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMinMaxOccurs", 
    $sig.make(0x28A4C, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SwitchUseToOptional", 
    $sig.make(0x28A46, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.Constant({Static:true , Public:false}, "HC_ST_boolean", 0); 
  $.Constant({Static:true , Public:false}, "HC_ST_byte", 1); 
  $.Constant({Static:true , Public:false}, "HC_ST_unsignedByte", 2); 
  $.Constant({Static:true , Public:false}, "HC_ST_short", 3); 
  $.Constant({Static:true , Public:false}, "HC_ST_unsignedShort", 4); 
  $.Constant({Static:true , Public:false}, "HC_ST_int", 5); 
  $.Constant({Static:true , Public:false}, "HC_ST_unsignedInt", 6); 
  $.Constant({Static:true , Public:false}, "HC_ST_long", 7); 
  $.Constant({Static:true , Public:false}, "HC_ST_unsignedLong", 8); 
  $.Constant({Static:true , Public:false}, "HC_ST_integer", 9); 
  $.Constant({Static:true , Public:false}, "HC_ST_decimal", 10); 
  $.Constant({Static:true , Public:false}, "HC_ST_float", 11); 
  $.Constant({Static:true , Public:false}, "HC_ST_double", 12); 
  $.Constant({Static:true , Public:false}, "HC_ST_duration", 13); 
  $.Constant({Static:true , Public:false}, "HC_ST_dateTime", 14); 
  $.Constant({Static:true , Public:false}, "HC_ST_time", 15); 
  $.Constant({Static:true , Public:false}, "HC_ST_date", 16); 
  $.Constant({Static:true , Public:false}, "HC_ST_gYearMonth", 17); 
  $.Constant({Static:true , Public:false}, "HC_ST_string", 18); 
  $.Constant({Static:true , Public:false}, "HC_ST_Count", 19); 
  $.Constant({Static:true , Public:false}, "TF_boolean", 1); 
  $.Constant({Static:true , Public:false}, "TF_byte", 2); 
  $.Constant({Static:true , Public:false}, "TF_unsignedByte", 4); 
  $.Constant({Static:true , Public:false}, "TF_short", 8); 
  $.Constant({Static:true , Public:false}, "TF_unsignedShort", 16); 
  $.Constant({Static:true , Public:false}, "TF_int", 32); 
  $.Constant({Static:true , Public:false}, "TF_unsignedInt", 64); 
  $.Constant({Static:true , Public:false}, "TF_long", 128); 
  $.Constant({Static:true , Public:false}, "TF_unsignedLong", 256); 
  $.Constant({Static:true , Public:false}, "TF_integer", 512); 
  $.Constant({Static:true , Public:false}, "TF_decimal", 1024); 
  $.Constant({Static:true , Public:false}, "TF_float", 2048); 
  $.Constant({Static:true , Public:false}, "TF_double", 4096); 
  $.Constant({Static:true , Public:false}, "TF_duration", 8192); 
  $.Constant({Static:true , Public:false}, "TF_dateTime", 16384); 
  $.Constant({Static:true , Public:false}, "TF_time", 32768); 
  $.Constant({Static:true , Public:false}, "TF_date", 65536); 
  $.Constant({Static:true , Public:false}, "TF_gYearMonth", 131072); 
  $.Constant({Static:true , Public:false}, "TF_string", 262144); 
  $.Field({Static:true , Public:false}, "ST_boolean", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_byte", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_unsignedByte", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_short", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_unsignedShort", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_int", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_unsignedInt", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_long", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_unsignedLong", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_integer", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_decimal", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_float", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_double", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_duration", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_dateTime", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_time", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_date", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_gYearMonth", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_string", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ST_anySimpleType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "SimpleTypes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])); 
  $.Field({Static:false, Public:false}, "rootSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "schemaSet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "xtr", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "nametable", $asm0E.TypeRef("System.Xml.NameTable")); 
  $.Field({Static:false, Public:false}, "TargetNamespace", $.String); 
  $.Field({Static:false, Public:false}, "NamespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
  $.Field({Static:false, Public:false}, "schemaList", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "occurrence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")); 
  $.Field({Static:false, Public:false}, "typeInference", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")); 
  $.Property({Static:false, Public:true }, "Occurrence", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"));

  $.Property({Static:false, Public:true }, "TypeInference", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"));

});

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaInference/InferenceOption", false, {
    Restricted: 0, 
    Relaxed: 1
  }, false
);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), "System.Xml.Schema.XmlSchemaInferenceException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AD6, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28ADA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28ADC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28ADE, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28AE9, null, [
        $.String, $asm06.TypeRef("System.Exception"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AEB, null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AEE, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AF0, null, [
        $.String, $.String, 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AF2, null, [
        $.String, $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AF4, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28AF5, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x28AD8, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.DeclareNamespace("System.Xml.Serialization");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.CodeExporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28B8C, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddIncludeMetadata", 
    $sig.make(0x28BA2, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddPropertyChangedNotifier", 
    $sig.make(0x28BAC, null, [$asm07.TypeRef("System.CodeDom.CodeTypeDeclaration")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddTypeMetadata", 
    $sig.make(0x28BA0, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm06.TypeRef("System.Type"), 
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddWarningComment", 
    $sig.make(0x28B99, null, [$asm07.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
    $sig.make(0x28B90, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreatePropertyDeclaration", 
    $sig.make(0x28BA8, $asm07.TypeRef("System.CodeDom.CodeMemberProperty"), [
        $asm07.TypeRef("System.CodeDom.CodeMemberField"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureTypesExported", 
    $sig.make(0x28B93, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.Accessor")]), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExportConstant", 
    $sig.make(0x28BA4, null, [
        $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0E.TypeRef("System.Xml.Serialization.ConstantMapping"), 
        $asm06.TypeRef("System.Type"), $.Boolean, 
        $.Int64
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportDerivedStructs", 
    $sig.make(0x28B91, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportEnum", 
    $sig.make(0x28B9E, $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportRoot", 
    $sig.make(0x28B9B, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindAttributeDeclaration", 
    $sig.make(0x28B8D, $asm07.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [$asm06.TypeRef("System.Type"), $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CodeCompileUnit", 
    $sig.make(0x28B7E, $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CodeNamespace", 
    $sig.make(0x28B7F, $asm07.TypeRef("System.CodeDom.CodeNamespace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
    $sig.make(0x28B80, $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EnableDataBinding", 
    $sig.make(0x28B89, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExportedClasses", 
    $sig.make(0x28B81, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExportedMappings", 
    $sig.make(0x28B82, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GeneratedCodeAttribute", 
    $sig.make(0x28B84, $asm07.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GenerateProperties", 
    $sig.make(0x28B83, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IncludeMetadata", 
    $sig.make(0x28B85, $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PropertyChangedEvent", 
    $sig.make(0x28B8B, $asm07.TypeRef("System.CodeDom.CodeMemberEvent"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_RaisePropertyChangedEventMethod", 
    $sig.make(0x28B8A, $asm07.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
    $sig.make(0x28B87, $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetProductVersion", 
    $sig.make(0x28B8E, $.String, [$asm06.TypeRef("System.Reflection.Assembly")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeFieldName", 
    $sig.make(0x28BAA, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PromoteType", 
    $sig.make(0x28BA6, $.Object, [$asm06.TypeRef("System.Type"), $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ShouldInclude", 
    $sig.make(0x28B9D, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.ArrayMapping")], [])
  );

  $.Field({Static:false, Public:false}, "exportedMappings", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "exportedClasses", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "codeNamespace", $asm07.TypeRef("System.CodeDom.CodeNamespace")); 
  $.Field({Static:false, Public:false}, "codeCompileUnit", $asm07.TypeRef("System.CodeDom.CodeCompileUnit")); 
  $.Field({Static:false, Public:false}, "rootExported", $.Boolean); 
  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "includeMetadata", $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")); 
  $.Field({Static:false, Public:false}, "options", $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions")); 
  $.Field({Static:false, Public:false}, "codeProvider", $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
  $.Field({Static:false, Public:false}, "generatedCodeAttribute", $asm07.TypeRef("System.CodeDom.CodeAttributeDeclaration")); 
  $.Property({Static:false, Public:false}, "CodeCompileUnit", $asm07.TypeRef("System.CodeDom.CodeCompileUnit"));

  $.Property({Static:false, Public:false}, "CodeNamespace", $asm07.TypeRef("System.CodeDom.CodeNamespace"));

  $.Property({Static:false, Public:false}, "CodeProvider", $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

  $.Property({Static:false, Public:false}, "ExportedClasses", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "ExportedMappings", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "GenerateProperties", $.Boolean);

  $.Property({Static:false, Public:false}, "GeneratedCodeAttribute", $asm07.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

  $.Property({Static:false, Public:true }, "IncludeMetadata", $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));

  $.Property({Static:false, Public:false}, "Scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope"));

  $.Property({Static:false, Public:false}, "EnableDataBinding", $.Boolean);

  $.Property({Static:true , Public:false}, "RaisePropertyChangedEventMethod", $asm07.TypeRef("System.CodeDom.CodeMemberMethod"));

  $.Property({Static:true , Public:false}, "PropertyChangedEvent", $asm07.TypeRef("System.CodeDom.CodeMemberEvent"));

});

JSIL.MakeEnum(
  "System.Xml.Serialization.CodeGenerationOptions", true, {
    None: 0, 
    GenerateProperties: 1, 
    GenerateNewAsync: 2, 
    GenerateOldAsync: 4, 
    GenerateOrder: 8, 
    EnableDataBinding: 16
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.CodeIdentifier", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298F6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This class should never get constructed as it contains only static methods."]; });

  $.ExternalMethod({Static:true , Public:false}, "CheckValidIdentifier", 
    $sig.make(0x298FD, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EscapeKeywords", 
    $sig.make(0x29901, null, [
        $.String, $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
        $asm06.TypeRef("System.Text.StringBuilder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EscapeKeywords", 
    $sig.make(0x29902, $.String, [$.String, $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
    $sig.make(0x298FE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
    $sig.make(0x298FF, $.Int32, [
        $asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), 
        $.Int32, $asm06.TypeRef("System.Text.StringBuilder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
    $sig.make(0x29900, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsValid", 
    $sig.make(0x298FC, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsValidStart", 
    $sig.make(0x298FB, $.Boolean, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeCamel", 
    $sig.make(0x298F8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakePascal", 
    $sig.make(0x298F7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeValid", 
    $sig.make(0x298F9, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeValidInternal", 
    $sig.make(0x298FA, $.String, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "MaxIdentifierLength", 511); 
  $.Field({Static:true , Public:false}, "csharp", $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Collections.CaseInsensitiveComparer"), "System.Xml.Serialization.CaseInsensitiveKeyComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29912, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEqualityComparer.Equals", 
    $sig.make(0x29914, $.Boolean, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEqualityComparer.GetHashCode", 
    $sig.make(0x29916, $.Int32, [$.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEqualityComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.CodeIdentifiers", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2902B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2902E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x2903B, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddReserved", 
    $sig.make(0x29034, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddUnique", 
    $sig.make(0x29038, $.String, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x2902F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x2903F, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UseCamelCasing", 
    $sig.make(0x29027, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsInUse", 
    $sig.make(0x2903A, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeRightCase", 
    $sig.make(0x29031, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeUnique", 
    $sig.make(0x29033, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x2903D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveReserved", 
    $sig.make(0x29036, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UseCamelCasing", 
    $sig.make(0x29029, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToArray", 
    $sig.make(0x2903E, $.Object, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "identifiers", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "reservedIdentifiers", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "list", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "camelCase", $.Boolean); 
  $.Property({Static:false, Public:true }, "UseCamelCasing", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TempAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29950, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29951, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), 
        $.String, $.String, 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29952, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm06.TypeRef("System.Reflection.Assembly"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29953, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanRead", 
    $sig.make(0x2995D, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), $asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateAssembly", 
    $sig.make(0x2995A, $asm06.TypeRef("System.Reflection.Assembly"), [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), 
        $.String, $asm06.TypeRef("System.Security.Policy.Evidence"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerCompilerParameters"), $asm06.TypeRef("System.Reflection.Assembly"), 
        $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateAssemblyId", 
    $sig.make(0x29959, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Contract", 
    $sig.make(0x2994D, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_FileIOPermission", 
    $sig.make(0x2994E, $asm06.TypeRef("System.Security.Permissions.FileIOPermission"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NeedAssembyResolve", 
    $sig.make(0x2994F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMethodFromType", 
    $sig.make(0x2995B, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $asm06.TypeRef("System.Reflection.Assembly")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetName", 
    $sig.make(0x29957, $asm06.TypeRef("System.Reflection.AssemblyName"), [$asm06.TypeRef("System.Reflection.Assembly"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetReferencedAssembly", 
    $sig.make(0x29961, $asm06.TypeRef("System.Reflection.Assembly"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTypeFromAssembly", 
    $sig.make(0x2995C, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Reflection.Assembly"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitAssemblyMethods", 
    $sig.make(0x29954, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InvokeReader", 
    $sig.make(0x2995F, $.Object, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), $asm0E.TypeRef("System.Xml.XmlReader"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InvokeWriter", 
    $sig.make(0x29960, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), $asm0E.TypeRef("System.Xml.XmlWriter"), 
        $.Object, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSerializerVersionMatch", 
    $sig.make(0x29958, $.Boolean, [
        $asm06.TypeRef("System.Reflection.Assembly"), $asm06.TypeRef("System.Type"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LoadGeneratedAssembly", 
    $sig.make(0x29955, $asm06.TypeRef("System.Reflection.Assembly"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Log", 
    $sig.make(0x29956, null, [$.String, $asm07.TypeRef("System.Diagnostics.EventLogEntryType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateEncodingStyle", 
    $sig.make(0x2995E, $.String, [$.String, $.String], [])
  );

  $.Constant({Static:true , Public:false}, "GeneratedAssemblyNamespace", "Microsoft.Xml.Serialization.GeneratedAssembly"); 
  $.Field({Static:false, Public:false}, "assembly", $asm06.TypeRef("System.Reflection.Assembly")); 
  $.Field({Static:false, Public:false}, "pregeneratedAssmbly", $.Boolean); 
  $.Field({Static:false, Public:false}, "contract", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")); 
  $.Field({Static:false, Public:false}, "writerMethods", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "readerMethods", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "methods", $asm0E.TypeRef("System.Xml.Serialization.TempAssembly/TempMethodDictionary")); 
  $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
      return JSIL.Array.New($asm06.System.Object, 0);
    }); 
  $.Field({Static:false, Public:false}, "assemblies", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "fileIOPermission", $asm06.TypeRef("System.Security.Permissions.FileIOPermission")); 
  $.Property({Static:false, Public:false}, "Contract", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"));

  $.Property({Static:true , Public:false}, "FileIOPermission", $asm06.TypeRef("System.Security.Permissions.FileIOPermission"));

  $.Property({Static:false, Public:false}, "NeedAssembyResolve", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TempAssembly/TempMethod", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A11B, null, [], [])
  );

  $.Field({Static:false, Public:false}, "writeMethod", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "readMethod", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
  $.Field({Static:false, Public:false}, "methodKey", $.String); 
});

JSIL.MakeClass($asm06.TypeRef("System.Collections.DictionaryBase"), "System.Xml.Serialization.TempAssembly/TempMethodDictionary", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29AF6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x29AF5, null, [$.String, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly/TempMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x29AF4, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly/TempMethod"), [$.String], [])
  );

  $.Property({Static:false, Public:false}, "Item", $asm0E.TypeRef("System.Xml.Serialization.TempAssembly/TempMethod"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerCompilerParameters", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29AAA, null, [$asm07.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x29AB2, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x29AB5, $.Type, [$asm07.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CodeDomParameters", 
    $sig.make(0x29AA8, $asm07.TypeRef("System.CodeDom.Compiler.CompilerParameters"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNeedTempDirAccess", 
    $sig.make(0x29AA6, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "needTempDirAccess", $.Boolean); 
  $.Field({Static:false, Public:false}, "parameters", $asm07.TypeRef("System.CodeDom.Compiler.CompilerParameters")); 
  $.Property({Static:false, Public:false}, "IsNeedTempDirAccess", $.Boolean);

  $.Property({Static:false, Public:false}, "CodeDomParameters", $asm07.TypeRef("System.CodeDom.Compiler.CompilerParameters"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TempAssemblyCacheKey", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A1A8, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x2A1A9, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x2A1AA, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "type", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TempAssemblyCache", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A042, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x2A041, null, [
        $.String, $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.TempAssembly")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x2A03F, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly"), [$.String, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "cache", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "Item", $asm0E.TypeRef("System.Xml.Serialization.TempAssembly"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Compiler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A1BA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddImport", 
    $sig.make(0x2A1B2, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Hashtable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddImport", 
    $sig.make(0x2A1B3, null, [$asm06.TypeRef("System.Reflection.Assembly")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AssemblyNameFromOptions", 
    $sig.make(0x2A1B8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Close", 
    $sig.make(0x2A1B4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Compile", 
    $sig.make(0x2A1B7, $asm06.TypeRef("System.Reflection.Assembly"), [
        $asm06.TypeRef("System.Reflection.Assembly"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerCompilerParameters"), $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Imports", 
    $sig.make(0x2A1B0, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Source", 
    $sig.make(0x2A1B1, $asm06.TypeRef("System.IO.TextWriter"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCurrentUser", 
    $sig.make(0x2A1B9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTempAssemblyName", 
    $sig.make(0x2A1B6, $.String, [$asm06.TypeRef("System.Reflection.AssemblyName"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTempAssemblyPath", 
    $sig.make(0x2A1B5, $.String, [
        $.String, $asm06.TypeRef("System.Reflection.Assembly"), 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "debugEnabled", $.Boolean); 
  $.Field({Static:false, Public:false}, "imports", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "writer", $asm06.TypeRef("System.IO.StringWriter")); 
  $.Property({Static:false, Public:false}, "Imports", $jsilcore.TypeRef("System.Array", [$.String]));

  $.Property({Static:false, Public:false}, "Source", $asm06.TypeRef("System.IO.TextWriter"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.ImportContext", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2952B, null, [$asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2952C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
    $sig.make(0x29525, $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
    $sig.make(0x29526, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Mappings", 
    $sig.make(0x29527, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ShareTypes", 
    $sig.make(0x29529, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeIdentifiers", 
    $sig.make(0x29528, $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Warnings", 
    $sig.make(0x2952A, $asm07.TypeRef("System.Collections.Specialized.StringCollection"), [], [])
  );

  $.Field({Static:false, Public:false}, "shareTypes", $.Boolean); 
  $.Field({Static:false, Public:false}, "cache", $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache")); 
  $.Field({Static:false, Public:false}, "mappings", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "elements", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "typeIdentifiers", $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")); 
  $.Property({Static:false, Public:false}, "Cache", $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

  $.Property({Static:false, Public:false}, "Elements", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "Mappings", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:true }, "TypeIdentifiers", $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

  $.Property({Static:false, Public:true }, "ShareTypes", $.Boolean);

  $.Property({Static:false, Public:true }, "Warnings", $asm07.TypeRef("System.Collections.Specialized.StringCollection"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SchemaObjectCache", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2951E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddItem", 
    $sig.make(0x29517, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompositeHash", 
    $sig.make(0x2951A, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateSchemaGraph", 
    $sig.make(0x2951B, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Graph", 
    $sig.make(0x29513, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Hash", 
    $sig.make(0x29514, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ObjectCache", 
    $sig.make(0x29515, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Warnings", 
    $sig.make(0x29516, $asm07.TypeRef("System.Collections.Specialized.StringCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDependencies", 
    $sig.make(0x29519, $asm06.TypeRef("System.Collections.ArrayList"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm06.TypeRef("System.Collections.ArrayList"), 
        $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHash", 
    $sig.make(0x2951C, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x29518, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToString", 
    $sig.make(0x2951D, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectWriter")], [])
  );

  $.Field({Static:false, Public:false}, "graph", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "hash", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "objectCache", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "warnings", $asm07.TypeRef("System.Collections.Specialized.StringCollection")); 
  $.Field({Static:false, Public:false}, "looks", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "Graph", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "Hash", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "ObjectCache", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "Warnings", $asm07.TypeRef("System.Collections.Specialized.StringCollection"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SchemaGraph", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29548, null, [$asm06.TypeRef("System.Collections.Hashtable"), $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddRef", 
    $sig.make(0x2954A, null, [$asm06.TypeRef("System.Collections.ArrayList"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Depends", 
    $sig.make(0x29553, $asm06.TypeRef("System.Collections.ArrayList"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Depends", 
    $sig.make(0x29556, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetItems", 
    $sig.make(0x29549, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.Field({Static:false, Public:false}, "empty", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")); 
  $.Field({Static:false, Public:false}, "scope", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "items", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.IndentedWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29576, null, [$asm06.TypeRef("System.IO.TextWriter"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Indent", 
    $sig.make(0x29574, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Indent", 
    $sig.make(0x29575, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write", 
    $sig.make(0x29577, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write", 
    $sig.make(0x29578, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
    $sig.make(0x2957B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
    $sig.make(0x29579, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
    $sig.make(0x2957A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "writer", $asm06.TypeRef("System.IO.TextWriter")); 
  $.Field({Static:false, Public:false}, "needIndent", $.Boolean); 
  $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "compact", $.Boolean); 
  $.Property({Static:false, Public:false}, "Indent", $.Int32);

});

JSIL.MakeInterface(
  "System.Xml.Serialization.IXmlSerializable", true, [], function ($) {
    $.Method({}, "GetSchema", $sig.make(0x295B4, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], []));
    $.Method({}, "ReadXml", $sig.make(0x295B5, null, [$asm0E.TypeRef("System.Xml.XmlReader")], []));
    $.Method({}, "WriteXml", $sig.make(0x295B6, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], []));
  }, []);

JSIL.MakeInterface(
  "System.Xml.Serialization.IXmlTextParser", true, [], function ($) {
    $.Method({}, "get_Normalized", $sig.make(0x295CA, $.Boolean, [], []));
    $.Method({}, "set_Normalized", $sig.make(0x295CC, null, [$.Boolean], []));
    $.Method({}, "get_WhitespaceHandling", $sig.make(0x295CF, $asm0E.TypeRef("System.Xml.WhitespaceHandling"), [], []));
    $.Method({}, "set_WhitespaceHandling", $sig.make(0x295D0, null, [$asm0E.TypeRef("System.Xml.WhitespaceHandling")], []));
    $.Property({}, "Normalized");
    $.Property({}, "WhitespaceHandling");
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Accessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x290CA, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EscapeName", 
    $sig.make(0x290CB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EscapeQName", 
    $sig.make(0x290CC, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Any", 
    $sig.make(0x290BC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AnyNamespaces", 
    $sig.make(0x290BE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Default", 
    $sig.make(0x290B7, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Form", 
    $sig.make(0x290C2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
    $sig.make(0x290B9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFixed", 
    $sig.make(0x290C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsOptional", 
    $sig.make(0x290C6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelInSchema", 
    $sig.make(0x290C8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
    $sig.make(0x290B5, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x290BA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
    $sig.make(0x290C0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Any", 
    $sig.make(0x290BD, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_AnyNamespaces", 
    $sig.make(0x290BF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Default", 
    $sig.make(0x290B8, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Form", 
    $sig.make(0x290C3, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsFixed", 
    $sig.make(0x290C5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsOptional", 
    $sig.make(0x290C7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelInSchema", 
    $sig.make(0x290C9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Mapping", 
    $sig.make(0x290B6, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Name", 
    $sig.make(0x290BB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
    $sig.make(0x290C1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToString", 
    $sig.make(0x290CE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnescapeName", 
    $sig.make(0x290CD, $.String, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "defaultValue", $.Object); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "mapping", $asm0E.TypeRef("System.Xml.Serialization.TypeMapping")); 
  $.Field({Static:false, Public:false}, "any", $.Boolean); 
  $.Field({Static:false, Public:false}, "anyNs", $.String); 
  $.Field({Static:false, Public:false}, "topLevelInSchema", $.Boolean); 
  $.Field({Static:false, Public:false}, "isFixed", $.Boolean); 
  $.Field({Static:false, Public:false}, "isOptional", $.Boolean); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Property({Static:false, Public:false}, "Mapping", $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"));

  $.Property({Static:false, Public:false}, "Default", $.Object);

  $.Property({Static:false, Public:false}, "HasDefault", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:false}, "Any", $.Boolean);

  $.Property({Static:false, Public:false}, "AnyNamespaces", $.String);

  $.Property({Static:false, Public:false}, "Namespace", $.String);

  $.Property({Static:false, Public:false}, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"));

  $.Property({Static:false, Public:false}, "IsFixed", $.Boolean);

  $.Property({Static:false, Public:false}, "IsOptional", $.Boolean);

  $.Property({Static:false, Public:false}, "IsTopLevelInSchema", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.ElementAccessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x291E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x291E1, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
    $sig.make(0x291DD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
    $sig.make(0x291DB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsUnbounded", 
    $sig.make(0x291DF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
    $sig.make(0x291DE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
    $sig.make(0x291DC, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsUnbounded", 
    $sig.make(0x291E0, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
  $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
  $.Field({Static:false, Public:false}, "unbounded", $.Boolean); 
  $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsUnbounded", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.ChoiceIdentifierAccessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2922E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MemberIds", 
    $sig.make(0x2922C, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MemberName", 
    $sig.make(0x2922A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MemberIds", 
    $sig.make(0x2922D, null, [$jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MemberName", 
    $sig.make(0x2922B, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "memberName", $.String); 
  $.Field({Static:false, Public:false}, "memberIds", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Property({Static:false, Public:false}, "MemberName", $.String);

  $.Property({Static:false, Public:false}, "MemberIds", $jsilcore.TypeRef("System.Array", [$.String]));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.TextAccessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29134, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.XmlnsAccessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29276, null, [], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.AttributeAccessor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29218, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSpecial", 
    $sig.make(0x29217, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
    $sig.make(0x29215, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSpecialXmlNamespace", 
    $sig.make(0x29214, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsList", 
    $sig.make(0x29216, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "isSpecial", $.Boolean); 
  $.Field({Static:false, Public:false}, "isList", $.Boolean); 
  $.Property({Static:false, Public:false}, "IsSpecialXmlNamespace", $.Boolean);

  $.Property({Static:false, Public:false}, "IsList", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Mapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28BE8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
    $sig.make(0x28BE6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
    $sig.make(0x28BE7, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
  $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Mapping"), "System.Xml.Serialization.TypeMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28C5A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultElementName", 
    $sig.make(0x28C57, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IncludeInSchema", 
    $sig.make(0x28C4D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymousType", 
    $sig.make(0x28C56, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
    $sig.make(0x28C51, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
    $sig.make(0x28C54, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
    $sig.make(0x28C38, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReferencedByElement", 
    $sig.make(0x28C33, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReferencedByTopLevelElement", 
    $sig.make(0x28C24, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
    $sig.make(0x28C3D, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
    $sig.make(0x28C3A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IncludeInSchema", 
    $sig.make(0x28C4F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsList", 
    $sig.make(0x28C53, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
    $sig.make(0x28C55, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
    $sig.make(0x28C39, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ReferencedByElement", 
    $sig.make(0x28C36, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ReferencedByTopLevelElement", 
    $sig.make(0x28C27, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TypeDesc", 
    $sig.make(0x28C44, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TypeName", 
    $sig.make(0x28C3B, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "typeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Field({Static:false, Public:false}, "typeNs", $.String); 
  $.Field({Static:false, Public:false}, "typeName", $.String); 
  $.Field({Static:false, Public:false}, "referencedByElement", $.Boolean); 
  $.Field({Static:false, Public:false}, "referencedByTopLevelElement", $.Boolean); 
  $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean); 
  $.Field({Static:false, Public:false}, "reference", $.Boolean); 
  $.Property({Static:false, Public:false}, "ReferencedByTopLevelElement", $.Boolean);

  $.Property({Static:false, Public:false}, "ReferencedByElement", $.Boolean);

  $.Property({Static:false, Public:false}, "Namespace", $.String);

  $.Property({Static:false, Public:false}, "TypeName", $.String);

  $.Property({Static:false, Public:false}, "TypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

  $.Property({Static:false, Public:false}, "IncludeInSchema", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IsList", $.Boolean);

  $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

  $.Property({Static:false, Public:false}, "IsAnonymousType", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "DefaultElementName", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.PrimitiveMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28DF9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
    $sig.make(0x28DF7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsList", 
    $sig.make(0x28DF8, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "isList", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsList", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.NullableMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x295FB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseMapping", 
    $sig.make(0x295F8, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DefaultElementName", 
    $sig.make(0x295FA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_BaseMapping", 
    $sig.make(0x295F9, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.Field({Static:false, Public:false}, "baseMapping", $asm0E.TypeRef("System.Xml.Serialization.TypeMapping")); 
  $.Property({Static:false, Public:false}, "BaseMapping", $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"));

  $.Property({Static:false, Public:false, Virtual:true }, "DefaultElementName", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.ArrayMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D3B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
    $sig.make(0x28D33, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsSortedByDerivation", 
    $sig.make(0x28D35, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Next", 
    $sig.make(0x28D36, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TopLevelMapping", 
    $sig.make(0x28D38, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Elements", 
    $sig.make(0x28D34, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Next", 
    $sig.make(0x28D37, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TopLevelMapping", 
    $sig.make(0x28D3A, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
  $.Field({Static:false, Public:false}, "sortedElements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
  $.Field({Static:false, Public:false}, "topLevelMapping", $asm0E.TypeRef("System.Xml.Serialization.StructMapping")); 
  $.Property({Static:false, Public:false}, "Elements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]));

  $.Property({Static:false, Public:false}, "ElementsSortedByDerivation", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]));

  $.Property({Static:false, Public:false}, "Next", $.Type);

  $.Property({Static:false, Public:false}, "TopLevelMapping", $asm0E.TypeRef("System.Xml.Serialization.StructMapping"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), "System.Xml.Serialization.EnumMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28E10, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Constants", 
    $sig.make(0x28E0C, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantMapping")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
    $sig.make(0x28E08, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Constants", 
    $sig.make(0x28E0D, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
    $sig.make(0x28E0A, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "constants", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantMapping")])); 
  $.Field({Static:false, Public:false}, "isFlags", $.Boolean); 
  $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

  $.Property({Static:false, Public:false}, "Constants", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantMapping")]));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Mapping"), "System.Xml.Serialization.ConstantMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28D6F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x28D65, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Value", 
    $sig.make(0x28D69, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
    $sig.make(0x28D61, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Name", 
    $sig.make(0x28D67, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Value", 
    $sig.make(0x28D6C, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
    $sig.make(0x28D63, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "xmlName", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "value", $.Int64); 
  $.Property({Static:false, Public:false}, "XmlName", $.String);

  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "Value", $.Int64);

});

JSIL.MakeInterface(
  "System.Xml.Serialization.INameScope", false, [], function ($) {
    $.Method({}, "get_Item", $sig.make(0x28C72, $.Object, [$.String, $.String], []));
    $.Method({}, "set_Item", $sig.make(0x28C73, null, [
          $.String, $.String, 
          $.Object
        ], []));
    $.Property({}, "Item");
  }, []);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.StructMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28CD2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Declares", 
    $sig.make(0x28CCC, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindDeclaringMapping", 
    $sig.make(0x28CCA, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseMapping", 
    $sig.make(0x28C84, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DerivedMappings", 
    $sig.make(0x28C8C, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasElements", 
    $sig.make(0x28CC4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasSimpleContent", 
    $sig.make(0x28CA4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasXmlnsMember", 
    $sig.make(0x28CAB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFullyInitialized", 
    $sig.make(0x28C8F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsOpenModel", 
    $sig.make(0x28CBC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSequence", 
    $sig.make(0x28CC5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LocalAttributes", 
    $sig.make(0x28C9E, $asm0E.TypeRef("System.Xml.Serialization.NameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LocalElements", 
    $sig.make(0x28C97, $asm0E.TypeRef("System.Xml.Serialization.NameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Members", 
    $sig.make(0x28CAE, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NextDerivedMapping", 
    $sig.make(0x28CA3, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
    $sig.make(0x28CC1, $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlnsMember", 
    $sig.make(0x28CB8, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HasExplicitSequence", 
    $sig.make(0x28CCF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_BaseMapping", 
    $sig.make(0x28C86, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsOpenModel", 
    $sig.make(0x28CBE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsSequence", 
    $sig.make(0x28CC7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Members", 
    $sig.make(0x28CB0, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Scope", 
    $sig.make(0x28CC2, null, [$asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlnsMember", 
    $sig.make(0x28CBA, null, [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetContentModel", 
    $sig.make(0x28CCE, null, [$asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSequence", 
    $sig.make(0x28CD1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "INameScope.get_Item", 
    $sig.make(0x28CA1, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "INameScope.set_Item", 
    $sig.make(0x28CA2, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")])); 
  $.Field({Static:false, Public:false}, "baseMapping", $.Type); 
  $.Field({Static:false, Public:false}, "derivedMappings", $.Type); 
  $.Field({Static:false, Public:false}, "nextDerivedMapping", $.Type); 
  $.Field({Static:false, Public:false}, "xmlnsMember", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")); 
  $.Field({Static:false, Public:false}, "hasSimpleContent", $.Boolean); 
  $.Field({Static:false, Public:false}, "openModel", $.Boolean); 
  $.Field({Static:false, Public:false}, "isSequence", $.Boolean); 
  $.Field({Static:false, Public:false}, "elements", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "attributes", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")); 
  $.Property({Static:false, Public:false}, "BaseMapping", $.Type);

  $.Property({Static:false, Public:false}, "DerivedMappings", $.Type);

  $.Property({Static:false, Public:false}, "IsFullyInitialized", $.Boolean);

  $.Property({Static:false, Public:false}, "LocalElements", $asm0E.TypeRef("System.Xml.Serialization.NameTable"));

  $.Property({Static:false, Public:false}, "LocalAttributes", $asm0E.TypeRef("System.Xml.Serialization.NameTable"));

  $.Property({Static:false, Public:false, Virtual:true }, "INameScope.Item", $.Object);

  $.Property({Static:false, Public:false}, "NextDerivedMapping", $.Type);

  $.Property({Static:false, Public:false}, "HasSimpleContent", $.Boolean);

  $.Property({Static:false, Public:false}, "HasXmlnsMember", $.Boolean);

  $.Property({Static:false, Public:false}, "Members", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]));

  $.Property({Static:false, Public:false}, "XmlnsMember", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"));

  $.Property({Static:false, Public:false}, "IsOpenModel", $.Boolean);

  $.Property({Static:false, Public:false}, "Scope", $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

  $.Property({Static:false, Public:false}, "HasElements", $.Boolean);

  $.Property({Static:false, Public:false}, "IsSequence", $.Boolean);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.Serialization.INameScope"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.Mapping"), "System.Xml.Serialization.AccessorMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28F59, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementsMatch", 
    $sig.make(0x28F57, $.Boolean, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
    $sig.make(0x28F53, $asm0E.TypeRef("System.Xml.Serialization.Accessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Attribute", 
    $sig.make(0x28F46, $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChoiceIdentifier", 
    $sig.make(0x28F4D, $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
    $sig.make(0x28F48, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsSortedByDerivation", 
    $sig.make(0x28F4A, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Ignore", 
    $sig.make(0x28F51, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAttribute", 
    $sig.make(0x28F41, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNeedNullable", 
    $sig.make(0x28F54, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsParticle", 
    $sig.make(0x28F43, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
    $sig.make(0x28F42, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Text", 
    $sig.make(0x28F4B, $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
    $sig.make(0x28F44, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Xmlns", 
    $sig.make(0x28F4F, $asm0E.TypeRef("System.Xml.Serialization.XmlnsAccessor"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNeedNullableMember", 
    $sig.make(0x28F56, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x28F58, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Attribute", 
    $sig.make(0x28F47, null, [$asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ChoiceIdentifier", 
    $sig.make(0x28F4E, null, [$asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Elements", 
    $sig.make(0x28F49, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Ignore", 
    $sig.make(0x28F52, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Text", 
    $sig.make(0x28F4C, null, [$asm0E.TypeRef("System.Xml.Serialization.TextAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TypeDesc", 
    $sig.make(0x28F45, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Xmlns", 
    $sig.make(0x28F50, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlnsAccessor")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SortMostToLeastDerived", 
    $sig.make(0x28F55, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
  );

  $.Field({Static:false, Public:false}, "typeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Field({Static:false, Public:false}, "attribute", $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor")); 
  $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
  $.Field({Static:false, Public:false}, "sortedElements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
  $.Field({Static:false, Public:false}, "text", $asm0E.TypeRef("System.Xml.Serialization.TextAccessor")); 
  $.Field({Static:false, Public:false}, "choiceIdentifier", $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor")); 
  $.Field({Static:false, Public:false}, "xmlns", $asm0E.TypeRef("System.Xml.Serialization.XmlnsAccessor")); 
  $.Field({Static:false, Public:false}, "ignore", $.Boolean); 
  $.Property({Static:false, Public:false}, "IsAttribute", $.Boolean);

  $.Property({Static:false, Public:false}, "IsText", $.Boolean);

  $.Property({Static:false, Public:false}, "IsParticle", $.Boolean);

  $.Property({Static:false, Public:false}, "TypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

  $.Property({Static:false, Public:false}, "Attribute", $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"));

  $.Property({Static:false, Public:false}, "Elements", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]));

  $.Property({Static:false, Public:false}, "ElementsSortedByDerivation", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]));

  $.Property({Static:false, Public:false}, "Text", $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"));

  $.Property({Static:false, Public:false}, "ChoiceIdentifier", $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"));

  $.Property({Static:false, Public:false}, "Xmlns", $asm0E.TypeRef("System.Xml.Serialization.XmlnsAccessor"));

  $.Property({Static:false, Public:false}, "Ignore", $.Boolean);

  $.Property({Static:false, Public:false}, "Accessor", $asm0E.TypeRef("System.Xml.Serialization.Accessor"));

  $.Property({Static:false, Public:false}, "IsNeedNullable", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.AccessorMapping/AccessorComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A9B6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x2A9B4, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.MemberMappingComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2959C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x2959B, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.AccessorMapping"), "System.Xml.Serialization.MemberMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F85, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CheckShouldPersist", 
    $sig.make(0x28F64, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecified", 
    $sig.make(0x28F69, $asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReturnValue", 
    $sig.make(0x28F75, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSequence", 
    $sig.make(0x28F7F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x28F6D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
    $sig.make(0x28F7A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SequenceId", 
    $sig.make(0x28F80, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNullableType", 
    $sig.make(0x28F82, $.String, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
    $sig.make(0x28F83, $.String, [$asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CheckShouldPersist", 
    $sig.make(0x28F66, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CheckSpecified", 
    $sig.make(0x28F6B, null, [$asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsReturnValue", 
    $sig.make(0x28F78, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Name", 
    $sig.make(0x28F6F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
    $sig.make(0x28F7C, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SequenceId", 
    $sig.make(0x28F81, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "checkShouldPersist", $.Boolean); 
  $.Field({Static:false, Public:false}, "checkSpecified", $asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor")); 
  $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "readOnly", $.Boolean); 
  $.Field({Static:false, Public:false}, "sequenceId", $.Int32); 
  $.Property({Static:false, Public:false}, "CheckShouldPersist", $.Boolean);

  $.Property({Static:false, Public:false}, "CheckSpecified", $asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "IsReturnValue", $.Boolean);

  $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

  $.Property({Static:false, Public:false}, "IsSequence", $.Boolean);

  $.Property({Static:false, Public:false}, "SequenceId", $.Int32);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.MembersMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x295AD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasWrapperElement", 
    $sig.make(0x295A7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Members", 
    $sig.make(0x295A3, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ValidateRpcWrapperElement", 
    $sig.make(0x295A9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_WriteAccessors", 
    $sig.make(0x295AB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlnsMember", 
    $sig.make(0x295A5, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_HasWrapperElement", 
    $sig.make(0x295A8, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Members", 
    $sig.make(0x295A4, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ValidateRpcWrapperElement", 
    $sig.make(0x295AA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_WriteAccessors", 
    $sig.make(0x295AC, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_XmlnsMember", 
    $sig.make(0x295A6, null, [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")], [])
  );

  $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")])); 
  $.Field({Static:false, Public:false}, "hasWrapperElement", $.Boolean); 
  $.Field({Static:false, Public:false}, "validateRpcWrapperElement", $.Boolean); 
  $.Field({Static:false, Public:false}, "writeAccessors", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlnsMember", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")); 
  $.Property({Static:false, Public:false}, "Members", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]));

  $.Property({Static:false, Public:false}, "XmlnsMember", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"));

  $.Property({Static:false, Public:false}, "HasWrapperElement", $.Boolean);

  $.Property({Static:false, Public:false}, "ValidateRpcWrapperElement", $.Boolean);

  $.Property({Static:false, Public:false}, "WriteAccessors", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.SpecialMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x295C3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamedAny", 
    $sig.make(0x295BE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NamedAny", 
    $sig.make(0x295C0, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "namedAny", $.Boolean); 
  $.Property({Static:false, Public:false}, "NamedAny", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.SpecialMapping"), "System.Xml.Serialization.SerializableMapping", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29605, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29607, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29609, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckDuplicateElement", 
    $sig.make(0x2960D, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DerivedMappings", 
    $sig.make(0x295F0, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAny", 
    $sig.make(0x295EB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
    $sig.make(0x295EC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Next", 
    $sig.make(0x295F5, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NextDerivedMapping", 
    $sig.make(0x295F3, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
    $sig.make(0x29601, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
    $sig.make(0x29600, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Type", 
    $sig.make(0x295FC, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
    $sig.make(0x29603, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XsiType", 
    $sig.make(0x29602, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Match", 
    $sig.make(0x2960E, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RetrieveSerializableSchema", 
    $sig.make(0x2960F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Next", 
    $sig.make(0x295F7, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Type", 
    $sig.make(0x295FE, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBaseMapping", 
    $sig.make(0x2960B, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
    $sig.make(0x2960C, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.Field({Static:false, Public:false}, "schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "needSchema", $.Boolean); 
  $.Field({Static:false, Public:false}, "getSchemaMethod", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "xsiType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "xsdType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "any", $.Boolean); 
  $.Field({Static:false, Public:false}, "namespaces", $.String); 
  $.Field({Static:false, Public:false}, "baseMapping", $.Type); 
  $.Field({Static:false, Public:false}, "derivedMappings", $.Type); 
  $.Field({Static:false, Public:false}, "nextDerivedMapping", $.Type); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
  $.Property({Static:false, Public:false}, "IsAny", $.Boolean);

  $.Property({Static:false, Public:false}, "NamespaceList", $.String);

  $.Property({Static:false, Public:false}, "DerivedMappings", $.Type);

  $.Property({Static:false, Public:false}, "NextDerivedMapping", $.Type);

  $.Property({Static:false, Public:false}, "Next", $.Type);

  $.Property({Static:false, Public:false}, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false}, "Schemas", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"));

  $.Property({Static:false, Public:false}, "Schema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:false}, "XsiType", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:false}, "XsdType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.ModelScope", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29630, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeScope", 
    $sig.make(0x2962D, $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetArrayModel", 
    $sig.make(0x2963A, $asm0E.TypeRef("System.Xml.Serialization.ArrayModel"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeModel", 
    $sig.make(0x29636, $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeModel", 
    $sig.make(0x29638, $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "typeScope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "models", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "arrayModels", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "TypeScope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TypeModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29619, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.ModelScope")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ModelScope", 
    $sig.make(0x29617, $asm0E.TypeRef("System.Xml.Serialization.ModelScope"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Type", 
    $sig.make(0x29616, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
    $sig.make(0x29618, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.Field({Static:false, Public:false}, "typeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.ModelScope")); 
  $.Property({Static:false, Public:false}, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false}, "ModelScope", $asm0E.TypeRef("System.Xml.Serialization.ModelScope"));

  $.Property({Static:false, Public:false}, "TypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.ArrayModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29665, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.ModelScope")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Element", 
    $sig.make(0x29663, $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), [], [])
  );

  $.Property({Static:false, Public:false}, "Element", $asm0E.TypeRef("System.Xml.Serialization.TypeModel"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.PrimitiveModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29689, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.ModelScope")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.SpecialModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2969F, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.ModelScope")
      ], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.StructModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29661, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.ModelScope")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckPropertyRead", 
    $sig.make(0x2966C, $.Boolean, [$asm06.TypeRef("System.Reflection.PropertyInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSupportedMember", 
    $sig.make(0x29666, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm06.TypeRef("System.Reflection.MemberInfo"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFieldModel", 
    $sig.make(0x29664, $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFieldModel", 
    $sig.make(0x29668, $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), [$asm06.TypeRef("System.Reflection.FieldInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMemberInfos", 
    $sig.make(0x29662, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.MemberInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPropertyModel", 
    $sig.make(0x2966B, $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), [$asm06.TypeRef("System.Reflection.PropertyInfo")], [])
  );

});

JSIL.MakeEnum(
  "System.Xml.Serialization.SpecifiedAccessor", false, {
    None: 0, 
    ReadOnly: 1, 
    ReadWrite: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.FieldModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2969E, null, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x296A0, null, [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x296A6, null, [
        $asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CheckShouldPersist", 
    $sig.make(0x2969A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecified", 
    $sig.make(0x2969B, $asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FieldType", 
    $sig.make(0x29698, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FieldTypeDesc", 
    $sig.make(0x29699, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsProperty", 
    $sig.make(0x2969D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x29697, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
    $sig.make(0x2969C, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "checkSpecified", $asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor")); 
  $.Field({Static:false, Public:false}, "checkShouldPersist", $.Boolean); 
  $.Field({Static:false, Public:false}, "readOnly", $.Boolean); 
  $.Field({Static:false, Public:false}, "isProperty", $.Boolean); 
  $.Field({Static:false, Public:false}, "fieldType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "fieldTypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "FieldType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false}, "FieldTypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

  $.Property({Static:false, Public:false}, "CheckShouldPersist", $.Boolean);

  $.Property({Static:false, Public:false}, "CheckSpecified", $asm0E.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

  $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

  $.Property({Static:false, Public:false}, "IsProperty", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.ConstantModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29722, null, [$asm06.TypeRef("System.Reflection.FieldInfo"), $.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FieldInfo", 
    $sig.make(0x2971F, $asm06.TypeRef("System.Reflection.FieldInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x2971A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Value", 
    $sig.make(0x2971C, $.Int64, [], [])
  );

  $.Field({Static:false, Public:false}, "fieldInfo", $asm06.TypeRef("System.Reflection.FieldInfo")); 
  $.Field({Static:false, Public:false}, "value", $.Int64); 
  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "Value", $.Int64);

  $.Property({Static:false, Public:false}, "FieldInfo", $asm06.TypeRef("System.Reflection.FieldInfo"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.EnumModel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29773, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.ModelScope")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Constants", 
    $sig.make(0x29770, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantModel")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetConstantModel", 
    $sig.make(0x29775, $asm0E.TypeRef("System.Xml.Serialization.ConstantModel"), [$asm06.TypeRef("System.Reflection.FieldInfo")], [])
  );

  $.Field({Static:false, Public:false}, "constants", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantModel")])); 
  $.Property({Static:false, Public:false}, "Constants", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ConstantModel")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.NameKey", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29784, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x29785, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x29786, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.NameTable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28F27, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x28F21, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x28F23, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x28F0E, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x28F13, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Values", 
    $sig.make(0x28F20, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x28F10, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x28F14, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "INameScope.get_Item", 
    $sig.make(0x28F17, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "INameScope.set_Item", 
    $sig.make(0x28F19, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToArray", 
    $sig.make(0x28F25, $asm06.TypeRef("System.Array"), [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "table", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "Item", $.Object);

  $.Property({Static:false, Public:false}, "Item", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "INameScope.Item", $.Object);

  $.Property({Static:false, Public:false}, "Values", $asm06.TypeRef("System.Collections.ICollection"));

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.Serialization.INameScope"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SchemaImporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29333, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm0E.TypeRef("System.Xml.Serialization.ImportContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddReference", 
    $sig.make(0x2933D, null, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Serialization.NameTable"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddReservedIdentifiersForDataBinding", 
    $sig.make(0x2933F, null, [$asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
    $sig.make(0x29339, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateUniqueTypeName", 
    $sig.make(0x29337, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
    $sig.make(0x29323, $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Context", 
    $sig.make(0x29322, $asm0E.TypeRef("System.Xml.Serialization.ImportContext"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Extensions", 
    $sig.make(0x29324, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GroupsInUse", 
    $sig.make(0x2932A, $asm0E.TypeRef("System.Xml.Serialization.NameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ImportedElements", 
    $sig.make(0x29325, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ImportedMappings", 
    $sig.make(0x29326, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Options", 
    $sig.make(0x29330, $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
    $sig.make(0x29328, $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
    $sig.make(0x29329, $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeIdentifiers", 
    $sig.make(0x29327, $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypesInUse", 
    $sig.make(0x2932B, $asm0E.TypeRef("System.Xml.Serialization.NameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
    $sig.make(0x2933A, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDerivedTypes", 
    $sig.make(0x2933C, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportRootMapping", 
    $sig.make(0x2933B, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MakeDerived", 
    $sig.make(0x29335, null, [
        $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveReference", 
    $sig.make(0x2933E, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Serialization.NameTable")], [])
  );

  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")); 
  $.Field({Static:false, Public:false}, "root", $asm0E.TypeRef("System.Xml.Serialization.StructMapping")); 
  $.Field({Static:false, Public:false}, "options", $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions")); 
  $.Field({Static:false, Public:false}, "codeProvider", $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "context", $asm0E.TypeRef("System.Xml.Serialization.ImportContext")); 
  $.Field({Static:false, Public:false}, "rootImported", $.Boolean); 
  $.Field({Static:false, Public:false}, "typesInUse", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "groupsInUse", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "extensions", $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection")); 
  $.Property({Static:false, Public:false}, "Context", $asm0E.TypeRef("System.Xml.Serialization.ImportContext"));

  $.Property({Static:false, Public:false}, "CodeProvider", $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

  $.Property({Static:false, Public:true }, "Extensions", $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));

  $.Property({Static:false, Public:false}, "ImportedElements", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "ImportedMappings", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "TypeIdentifiers", $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

  $.Property({Static:false, Public:false}, "Schemas", $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"));

  $.Property({Static:false, Public:false}, "Scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope"));

  $.Property({Static:false, Public:false}, "GroupsInUse", $asm0E.TypeRef("System.Xml.Serialization.NameTable"));

  $.Property({Static:false, Public:false}, "TypesInUse", $asm0E.TypeRef("System.Xml.Serialization.NameTable"));

  $.Property({Static:false, Public:false}, "Options", $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlAttributeComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x297D4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x297D3, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlFacetComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29817, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x29815, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.QNameComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29839, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x29838, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaObjectComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2985C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x29856, $.Int32, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NameOf", 
    $sig.make(0x29857, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NameOf", 
    $sig.make(0x29859, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Namespace", 
    $sig.make(0x2985A, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Field({Static:false, Public:false}, "comparer", $asm0E.TypeRef("System.Xml.Serialization.QNameComparer")); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SchemaObjectWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2980B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetString", 
    $sig.make(0x297E1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NewLine", 
    $sig.make(0x297E0, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToString", 
    $sig.make(0x297E4, $.String, [$asm0E.TypeRef("System.Xml.Schema.NamespaceList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_XmlSchemaFacet", 
    $sig.make(0x297F2, null, [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write1_XmlSchemaAttribute", 
    $sig.make(0x297E7, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write11_XmlSchemaDerivationMethod", 
    $sig.make(0x297ED, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write12_XmlSchemaSimpleTypeUnion", 
    $sig.make(0x297EE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write14_XmlSchemaSimpleTypeList", 
    $sig.make(0x297EF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write15_XmlSchemaSimpleTypeRestriction", 
    $sig.make(0x297F0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write3_XmlSchemaObject", 
    $sig.make(0x297E8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write30_XmlSchemaUse", 
    $sig.make(0x297F3, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaUse")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write31_XmlSchemaAttributeGroup", 
    $sig.make(0x297F4, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write32_XmlSchemaAttributeGroupRef", 
    $sig.make(0x297F5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write33_XmlSchemaAnyAttribute", 
    $sig.make(0x297F6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write34_XmlSchemaContentProcessing", 
    $sig.make(0x297F7, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write35_XmlSchemaComplexType", 
    $sig.make(0x297F8, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write36_XmlSchemaSimpleContent", 
    $sig.make(0x297F9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write38_XmlSchemaSimpleContentExtension", 
    $sig.make(0x297FA, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write40_XmlSchemaSimpleContentRestriction", 
    $sig.make(0x297FB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write41_XmlSchemaComplexContent", 
    $sig.make(0x297FC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContent")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write42_XmlSchemaComplexContentExtension", 
    $sig.make(0x297FD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write43_XmlSchemaAll", 
    $sig.make(0x297FE, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAll")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write46_XmlSchemaElement", 
    $sig.make(0x297FF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write47_XmlSchemaKey", 
    $sig.make(0x29800, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaKey")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write48_XmlSchemaIdentityConstraint", 
    $sig.make(0x29801, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write49_XmlSchemaXPath", 
    $sig.make(0x29802, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaXPath")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write5_XmlSchemaAnnotation", 
    $sig.make(0x297E9, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write50_XmlSchemaKeyref", 
    $sig.make(0x29803, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaKeyref")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write51_XmlSchemaUnique", 
    $sig.make(0x29804, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaUnique")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write52_XmlSchemaChoice", 
    $sig.make(0x29805, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write53_XmlSchemaAny", 
    $sig.make(0x29806, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write54_XmlSchemaSequence", 
    $sig.make(0x29807, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSequence")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write55_XmlSchemaGroupRef", 
    $sig.make(0x29808, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write56_XmlSchemaComplexContentRestriction", 
    $sig.make(0x29809, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write57_XmlSchemaGroup", 
    $sig.make(0x2980A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write6_XmlSchemaDocumentation", 
    $sig.make(0x297EA, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaDocumentation")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write7_XmlSchemaAppInfo", 
    $sig.make(0x297EB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaAppInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write9_XmlSchemaSimpleType", 
    $sig.make(0x297EC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x297DC, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x297DD, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x297E2, null, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttributes", 
    $sig.make(0x297E3, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlAttribute")]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x297DF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFacets", 
    $sig.make(0x297F1, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
    $sig.make(0x297DB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSortedItems", 
    $sig.make(0x297E6, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x297DE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchemaObject", 
    $sig.make(0x297E5, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.Field({Static:false, Public:false}, "w", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapAttributeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29679, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2967B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
    $sig.make(0x29671, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x29675, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x29673, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
    $sig.make(0x29672, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x29676, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x29674, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "attributeName", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Property({Static:false, Public:true }, "AttributeName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "DataType", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SoapAttributeOverrides", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298C3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x298C1, null, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x298C2, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x298BF, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x298C0, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.Field({Static:false, Public:false}, "types", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"));

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeEnum(
  "System.Xml.Serialization.SoapAttributeFlags", false, {
    Enum: 1, 
    Type: 2, 
    Element: 4, 
    Attribute: 8
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SoapAttributes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29650, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29651, null, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapAttribute", 
    $sig.make(0x2964C, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapDefaultValue", 
    $sig.make(0x2964E, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapElement", 
    $sig.make(0x2964A, $asm0E.TypeRef("System.Xml.Serialization.SoapElementAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapEnum", 
    $sig.make(0x29646, $asm0E.TypeRef("System.Xml.Serialization.SoapEnumAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SoapFlags", 
    $sig.make(0x29643, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributeFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapIgnore", 
    $sig.make(0x29648, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapType", 
    $sig.make(0x29644, $asm0E.TypeRef("System.Xml.Serialization.SoapTypeAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapAttribute", 
    $sig.make(0x2964D, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapAttributeAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapDefaultValue", 
    $sig.make(0x2964F, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapElement", 
    $sig.make(0x2964B, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapEnum", 
    $sig.make(0x29647, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapEnumAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapIgnore", 
    $sig.make(0x29649, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapType", 
    $sig.make(0x29645, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapTypeAttribute")], [])
  );

  $.Field({Static:false, Public:false}, "soapIgnore", $.Boolean); 
  $.Field({Static:false, Public:false}, "soapType", $asm0E.TypeRef("System.Xml.Serialization.SoapTypeAttribute")); 
  $.Field({Static:false, Public:false}, "soapElement", $asm0E.TypeRef("System.Xml.Serialization.SoapElementAttribute")); 
  $.Field({Static:false, Public:false}, "soapAttribute", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributeAttribute")); 
  $.Field({Static:false, Public:false}, "soapEnum", $asm0E.TypeRef("System.Xml.Serialization.SoapEnumAttribute")); 
  $.Field({Static:false, Public:false}, "soapDefaultValue", $.Object); 
  $.Property({Static:false, Public:false}, "SoapFlags", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributeFlags"));

  $.Property({Static:false, Public:true }, "SoapType", $asm0E.TypeRef("System.Xml.Serialization.SoapTypeAttribute"));

  $.Property({Static:false, Public:true }, "SoapEnum", $asm0E.TypeRef("System.Xml.Serialization.SoapEnumAttribute"));

  $.Property({Static:false, Public:true }, "SoapIgnore", $.Boolean);

  $.Property({Static:false, Public:true }, "SoapElement", $asm0E.TypeRef("System.Xml.Serialization.SoapElementAttribute"));

  $.Property({Static:false, Public:true }, "SoapAttribute", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"));

  $.Property({Static:false, Public:true }, "SoapDefaultValue", $.Object);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.CodeExporter"), "System.Xml.Serialization.SoapCodeExporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2979B, null, [$asm07.TypeRef("System.CodeDom.CodeNamespace")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2979C, null, [$asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2979D, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2979E, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2979F, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddElementMetadata", 
    $sig.make(0x297A8, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
    $sig.make(0x297A6, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
    $sig.make(0x297A7, null, [$asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddMemberMetadata", 
    $sig.make(0x297A9, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureTypesExported", 
    $sig.make(0x297AC, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.Accessor")]), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportDerivedStructs", 
    $sig.make(0x297A5, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
    $sig.make(0x297A2, null, [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportMember", 
    $sig.make(0x297AA, null, [$asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
    $sig.make(0x297A1, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportProperty", 
    $sig.make(0x297AB, null, [
        $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportStruct", 
    $sig.make(0x297A4, $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportType", 
    $sig.make(0x297A3, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
    $sig.make(0x297A0, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapElementAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x296D7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x296D8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x296D3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x296D0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x296D5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x296D4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
    $sig.make(0x296D2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
    $sig.make(0x296D6, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "elementName", $.String); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "DataType", $.String);

  $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapEnumAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x296B0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x296B1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x296AE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x296AF, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Property({Static:false, Public:true }, "Name", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Field]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapIgnoreAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298CA, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapIncludeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29915, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x29911, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x29913, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Interface", "Method", "Struct")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SoapReflectionImporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2999F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299A0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299A1, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapAttributeOverrides")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299A2, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapAttributeOverrides"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateElementAccessor", 
    $sig.make(0x299C1, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNullableMapping", 
    $sig.make(0x299B5, $asm0E.TypeRef("System.Xml.Serialization.NullableMapping"), [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
    $sig.make(0x299B2, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
    $sig.make(0x299AE, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
    $sig.make(0x299AF, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultValue", 
    $sig.make(0x299C2, $.Object, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
    $sig.make(0x299B3, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeMapping", 
    $sig.make(0x299B4, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAccessorMapping", 
    $sig.make(0x299C0, null, [
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), 
        $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportArrayLikeMapping", 
    $sig.make(0x299B8, $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), [$asm0E.TypeRef("System.Xml.Serialization.ArrayModel"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportConstantMapping", 
    $sig.make(0x299BC, $asm0E.TypeRef("System.Xml.Serialization.ConstantMapping"), [$asm0E.TypeRef("System.Xml.Serialization.ConstantModel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportEnumMapping", 
    $sig.make(0x299BB, $asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), [$asm0E.TypeRef("System.Xml.Serialization.EnumModel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportFieldMapping", 
    $sig.make(0x299BF, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportMemberMapping", 
    $sig.make(0x299BE, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember"), $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299A9, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299AA, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299AB, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299AC, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean, $.Boolean, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlMappingAccess")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportMembersMapping", 
    $sig.make(0x299BD, $asm0E.TypeRef("System.Xml.Serialization.MembersMapping"), [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.String, 
        $.Boolean, $.Boolean, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveMapping", 
    $sig.make(0x299BA, $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm0E.TypeRef("System.Xml.Serialization.PrimitiveModel"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportStructLikeMapping", 
    $sig.make(0x299B6, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [$asm0E.TypeRef("System.Xml.Serialization.StructModel"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x299A7, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x299A8, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
    $sig.make(0x299B0, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm0E.TypeRef("System.Xml.Serialization.TypeModel"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
    $sig.make(0x299B1, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IncludeType", 
    $sig.make(0x299A5, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncludeType", 
    $sig.make(0x299A6, null, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IncludeTypes", 
    $sig.make(0x299A3, null, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncludeTypes", 
    $sig.make(0x299A4, null, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeStructMembers", 
    $sig.make(0x299B7, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $asm0E.TypeRef("System.Xml.Serialization.StructModel"), 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReflectionException", 
    $sig.make(0x299AD, $asm06.TypeRef("System.Exception"), [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetArrayMappingType", 
    $sig.make(0x299B9, null, [$asm0E.TypeRef("System.Xml.Serialization.ArrayMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
    $sig.make(0x299C3, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
    $sig.make(0x299C4, $.String, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "typeScope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "attributeOverrides", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributeOverrides")); 
  $.Field({Static:false, Public:false}, "types", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "nullables", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "root", $asm0E.TypeRef("System.Xml.Serialization.StructMapping")); 
  $.Field({Static:false, Public:false}, "defaultNs", $.String); 
  $.Field({Static:false, Public:false}, "modelScope", $asm0E.TypeRef("System.Xml.Serialization.ModelScope")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SoapSchemaExporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29D6B, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSchemaImport", 
    $sig.make(0x29D72, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSchemaItem", 
    $sig.make(0x29D71, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateType", 
    $sig.make(0x29D70, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
    $sig.make(0x29D6F, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportArrayMapping", 
    $sig.make(0x29D78, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportDerivedMappings", 
    $sig.make(0x29D7F, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessor", 
    $sig.make(0x29D7A, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $.Boolean, $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessors", 
    $sig.make(0x29D79, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
        $.Boolean, $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportEnumMapping", 
    $sig.make(0x29D80, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
    $sig.make(0x29D6D, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
    $sig.make(0x29D6E, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportMembersMapping", 
    $sig.make(0x29D7D, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.MembersMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportNonXsdPrimitiveMapping", 
    $sig.make(0x29D76, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportPrimitiveMapping", 
    $sig.make(0x29D77, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportRootMapping", 
    $sig.make(0x29D7B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportStructMapping", 
    $sig.make(0x29D7C, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
    $sig.make(0x29D6C, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportTypeMapping", 
    $sig.make(0x29D75, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportTypeMembers", 
    $sig.make(0x29D7E, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindImport", 
    $sig.make(0x29D74, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Document", 
    $sig.make(0x29D6A, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SchemaContainsItem", 
    $sig.make(0x29D73, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String], [])
  );

  $.Constant({Static:true , Public:false}, "elementFormDefault", 1); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")); 
  $.Field({Static:false, Public:false}, "types", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "exportedRoot", $.Boolean); 
  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "document", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:true , Public:false}, "ArrayQName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:true , Public:false}, "ArrayTypeQName", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:false}, "Document", $asm0E.TypeRef("System.Xml.XmlDocument"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.SchemaImporter"), "System.Xml.Serialization.SoapSchemaImporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DA6, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DA8, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DA9, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DAA, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm0E.TypeRef("System.Xml.Serialization.ImportContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DAB, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm0E.TypeRef("System.Xml.Serialization.ImportContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindDataType", 
    $sig.make(0x29DCA, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindType", 
    $sig.make(0x29DCC, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDataTypeSource", 
    $sig.make(0x29DC9, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAnyType", 
    $sig.make(0x29DB9, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportArray", 
    $sig.make(0x29DBE, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportArrayMapping", 
    $sig.make(0x29DBF, $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDataType", 
    $sig.make(0x29DC3, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
    $sig.make(0x29DAC, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDerivedTypes", 
    $sig.make(0x29DB4, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
    $sig.make(0x29DB1, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElementMember", 
    $sig.make(0x29DC1, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElementType", 
    $sig.make(0x29DB2, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedDataType", 
    $sig.make(0x29DC4, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportGroup", 
    $sig.make(0x29DBC, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportGroupMembers", 
    $sig.make(0x29DBD, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x29DAD, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.SoapSchemaMember")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x29DAE, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.SoapSchemaMember")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x29DAF, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.SoapSchemaMember")]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x29DB0, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.SoapSchemaMember")]), $.Boolean, 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportNonXsdPrimitiveDataType", 
    $sig.make(0x29DC7, $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveDataType", 
    $sig.make(0x29DC6, $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportStructType", 
    $sig.make(0x29DBA, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportType", 
    $sig.make(0x29DB6, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportType", 
    $sig.make(0x29DB8, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeMembers", 
    $sig.make(0x29DBB, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.SoapSchemaMember", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DEC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
    $sig.make(0x29DEA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
    $sig.make(0x29DE7, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
    $sig.make(0x29DEB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
    $sig.make(0x29DE9, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.Field({Static:false, Public:false}, "memberName", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Property({Static:false, Public:true }, "MemberType", $asm0E.TypeRef("System.Xml.XmlQualifiedName"));

  $.Property({Static:false, Public:true }, "MemberName", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapTypeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2972F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29731, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29733, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IncludeInSchema", 
    $sig.make(0x2971B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x29723, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
    $sig.make(0x29720, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IncludeInSchema", 
    $sig.make(0x2971D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x2972C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
    $sig.make(0x29721, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "typeName", $.String); 
  $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean); 
  $.Property({Static:false, Public:true }, "IncludeInSchema", $.Boolean);

  $.Property({Static:false, Public:true }, "TypeName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

JSIL.MakeEnum(
  "System.Xml.Serialization.TypeKind", false, {
    Root: 0, 
    Primitive: 1, 
    Enum: 2, 
    Struct: 3, 
    Class: 4, 
    Array: 5, 
    Collection: 6, 
    Enumerable: 7, 
    Void: 8, 
    Node: 9, 
    Attribute: 10, 
    Serializable: 11
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Serialization.TypeFlags", false, {
    None: 0, 
    Abstract: 1, 
    Reference: 2, 
    Special: 4, 
    CanBeAttributeValue: 8, 
    CanBeTextValue: 16, 
    CanBeElementValue: 32, 
    HasCustomFormatter: 64, 
    AmbiguousDataType: 128, 
    IgnoreDefault: 512, 
    HasIsEmpty: 1024, 
    HasDefaultConstructor: 2048, 
    XmlEncodingNotRequired: 4096, 
    UseReflection: 16384, 
    CollapseWhitespace: 32768, 
    OptionalValue: 65536, 
    CtorInaccessible: 131072, 
    UsePrivateImplementation: 262144, 
    GenericInterface: 524288, 
    Unsupported: 1048576
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TypeDesc", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E8F, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0E.TypeRef("System.Xml.Serialization.TypeKind"), 
        $.Type, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E90, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0E.TypeRef("System.Xml.Serialization.TypeKind"), 
        $.Type, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E91, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeKind"), $.Type, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E92, null, [
        $asm06.TypeRef("System.Type"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x28E93, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeKind"), 
        $.Type, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckNeedConstructor", 
    $sig.make(0x28E97, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSupported", 
    $sig.make(0x28E96, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateArrayTypeDesc", 
    $sig.make(0x28E98, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateMappedTypeDesc", 
    $sig.make(0x28E99, $.Type, [$asm0E.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindCommonBaseTypeDesc", 
    $sig.make(0x28E9B, $.Type, [$jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ArrayElementTypeDesc", 
    $sig.make(0x28E8A, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ArrayLengthName", 
    $sig.make(0x28E89, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BaseTypeDesc", 
    $sig.make(0x28E8D, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanBeAttributeValue", 
    $sig.make(0x28E46, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanBeElementValue", 
    $sig.make(0x28E53, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanBeTextValue", 
    $sig.make(0x28E55, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CannotNew", 
    $sig.make(0x28E70, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CollapseWhitespace", 
    $sig.make(0x28E68, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ConstructorInaccessible", 
    $sig.make(0x28E86, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CSharpName", 
    $sig.make(0x28E28, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DataType", 
    $sig.make(0x28E2C, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Exception", 
    $sig.make(0x28E87, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExtendedType", 
    $sig.make(0x28E20, $asm0E.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Flags", 
    $sig.make(0x28E19, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FormatterName", 
    $sig.make(0x28E31, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FullName", 
    $sig.make(0x28E25, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasCustomFormatter", 
    $sig.make(0x28E63, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultConstructor", 
    $sig.make(0x28E69, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultSupport", 
    $sig.make(0x28E64, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_HasIsEmpty", 
    $sig.make(0x28E66, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAbstract", 
    $sig.make(0x28E72, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAmbiguousDataType", 
    $sig.make(0x28E62, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsArray", 
    $sig.make(0x28E80, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsArrayLike", 
    $sig.make(0x28E7D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsClass", 
    $sig.make(0x28E7A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsCollection", 
    $sig.make(0x28E7E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEnum", 
    $sig.make(0x28E83, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsEnumerable", 
    $sig.make(0x28E7F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsGenericInterface", 
    $sig.make(0x28E6B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsMappedType", 
    $sig.make(0x28E1F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsMixed", 
    $sig.make(0x28E57, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
    $sig.make(0x28E84, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsOptionalValue", 
    $sig.make(0x28E73, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsPrimitive", 
    $sig.make(0x28E82, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsPrivateImplementation", 
    $sig.make(0x28E6D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsRoot", 
    $sig.make(0x28E85, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSpecial", 
    $sig.make(0x28E5A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStructLike", 
    $sig.make(0x28E7C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsUnsupported", 
    $sig.make(0x28E6A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
    $sig.make(0x28E40, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsVoid", 
    $sig.make(0x28E78, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsXsdType", 
    $sig.make(0x28E1A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
    $sig.make(0x28E33, $asm0E.TypeRef("System.Xml.Serialization.TypeKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x28E22, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Type", 
    $sig.make(0x28E2E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_UseReflection", 
    $sig.make(0x28E75, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Weight", 
    $sig.make(0x28E8C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlEncodingNotRequired", 
    $sig.make(0x28E4A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNullableTypeDesc", 
    $sig.make(0x28E95, $.Type, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsDerivedFrom", 
    $sig.make(0x28E9A, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ArrayElementTypeDesc", 
    $sig.make(0x28E8B, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_BaseTypeDesc", 
    $sig.make(0x28E8E, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Exception", 
    $sig.make(0x28E88, null, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsMixed", 
    $sig.make(0x28E58, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x28E94, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "fullName", $.String); 
  $.Field({Static:false, Public:false}, "cSharpName", $.String); 
  $.Field({Static:false, Public:false}, "arrayElementTypeDesc", $.Type); 
  $.Field({Static:false, Public:false}, "arrayTypeDesc", $.Type); 
  $.Field({Static:false, Public:false}, "nullableTypeDesc", $.Type); 
  $.Field({Static:false, Public:false}, "kind", $asm0E.TypeRef("System.Xml.Serialization.TypeKind")); 
  $.Field({Static:false, Public:false}, "dataType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "baseTypeDesc", $.Type); 
  $.Field({Static:false, Public:false}, "flags", $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")); 
  $.Field({Static:false, Public:false}, "formatterName", $.String); 
  $.Field({Static:false, Public:false}, "isXsdType", $.Boolean); 
  $.Field({Static:false, Public:false}, "isMixed", $.Boolean); 
  $.Field({Static:false, Public:false}, "extendedType", $asm0E.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc")); 
  $.Field({Static:false, Public:false}, "weight", $.Int32); 
  $.Field({Static:false, Public:false}, "exception", $asm06.TypeRef("System.Exception")); 
  $.Property({Static:false, Public:false}, "Flags", $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"));

  $.Property({Static:false, Public:false}, "IsXsdType", $.Boolean);

  $.Property({Static:false, Public:false}, "IsMappedType", $.Boolean);

  $.Property({Static:false, Public:false}, "ExtendedType", $asm0E.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"));

  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "FullName", $.String);

  $.Property({Static:false, Public:false}, "CSharpName", $.String);

  $.Property({Static:false, Public:false}, "DataType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"));

  $.Property({Static:false, Public:false}, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false}, "FormatterName", $.String);

  $.Property({Static:false, Public:false}, "Kind", $asm0E.TypeRef("System.Xml.Serialization.TypeKind"));

  $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

  $.Property({Static:false, Public:false}, "CanBeAttributeValue", $.Boolean);

  $.Property({Static:false, Public:false}, "XmlEncodingNotRequired", $.Boolean);

  $.Property({Static:false, Public:false}, "CanBeElementValue", $.Boolean);

  $.Property({Static:false, Public:false}, "CanBeTextValue", $.Boolean);

  $.Property({Static:false, Public:false}, "IsMixed", $.Boolean);

  $.Property({Static:false, Public:false}, "IsSpecial", $.Boolean);

  $.Property({Static:false, Public:false}, "IsAmbiguousDataType", $.Boolean);

  $.Property({Static:false, Public:false}, "HasCustomFormatter", $.Boolean);

  $.Property({Static:false, Public:false}, "HasDefaultSupport", $.Boolean);

  $.Property({Static:false, Public:false}, "HasIsEmpty", $.Boolean);

  $.Property({Static:false, Public:false}, "CollapseWhitespace", $.Boolean);

  $.Property({Static:false, Public:false}, "HasDefaultConstructor", $.Boolean);

  $.Property({Static:false, Public:false}, "IsUnsupported", $.Boolean);

  $.Property({Static:false, Public:false}, "IsGenericInterface", $.Boolean);

  $.Property({Static:false, Public:false}, "IsPrivateImplementation", $.Boolean);

  $.Property({Static:false, Public:false}, "CannotNew", $.Boolean);

  $.Property({Static:false, Public:false}, "IsAbstract", $.Boolean);

  $.Property({Static:false, Public:false}, "IsOptionalValue", $.Boolean);

  $.Property({Static:false, Public:false}, "UseReflection", $.Boolean);

  $.Property({Static:false, Public:false}, "IsVoid", $.Boolean);

  $.Property({Static:false, Public:false}, "IsClass", $.Boolean);

  $.Property({Static:false, Public:false}, "IsStructLike", $.Boolean);

  $.Property({Static:false, Public:false}, "IsArrayLike", $.Boolean);

  $.Property({Static:false, Public:false}, "IsCollection", $.Boolean);

  $.Property({Static:false, Public:false}, "IsEnumerable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsArray", $.Boolean);

  $.Property({Static:false, Public:false}, "IsPrimitive", $.Boolean);

  $.Property({Static:false, Public:false}, "IsEnum", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsRoot", $.Boolean);

  $.Property({Static:false, Public:false}, "ConstructorInaccessible", $.Boolean);

  $.Property({Static:false, Public:false}, "Exception", $asm06.TypeRef("System.Exception"));

  $.Property({Static:false, Public:false}, "ArrayLengthName", $.String);

  $.Property({Static:false, Public:false}, "ArrayElementTypeDesc", $.Type);

  $.Property({Static:false, Public:false}, "Weight", $.Int32);

  $.Property({Static:false, Public:false}, "BaseTypeDesc", $.Type);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.TypeScope", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x28BDF, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddNonXsdPrimitive", 
    $sig.make(0x28BC7, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaFacet")]), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddPrimitive", 
    $sig.make(0x28BC6, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddSoapEncodedPrimitive", 
    $sig.make(0x28BC8, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddSoapEncodedTypes", 
    $sig.make(0x28BC5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddTypeMapping", 
    $sig.make(0x28BDE, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PrimtiveTypes", 
    $sig.make(0x28BC2, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeMappings", 
    $sig.make(0x28BC1, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Types", 
    $sig.make(0x28BC0, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetAllMembers", 
    $sig.make(0x28BD7, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetAllMembers", 
    $sig.make(0x28BD8, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetArrayElementType", 
    $sig.make(0x28BD6, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetArrayTypeDesc", 
    $sig.make(0x28BD0, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCollectionElementType", 
    $sig.make(0x28BDC, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetConstructorFlags", 
    $sig.make(0x28BD9, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDefaultIndexer", 
    $sig.make(0x28BDB, $asm06.TypeRef("System.Reflection.PropertyInfo"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetEnumeratorElementType", 
    $sig.make(0x28BDA, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Serialization.TypeFlags")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BC9, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BCA, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BCB, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BCC, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BCD, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BCE, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MemberInfo"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
    $sig.make(0x28BCF, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MemberInfo"), 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeFromTypeDesc", 
    $sig.make(0x28BD2, $asm06.TypeRef("System.Type"), [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeMappingFromTypeDesc", 
    $sig.make(0x28BD1, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeDesc", 
    $sig.make(0x28BD3, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MemberInfo"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsKnownType", 
    $sig.make(0x28BC4, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsOptionalValue", 
    $sig.make(0x28BD4, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseWsdlArrayType", 
    $sig.make(0x28BDD, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeName", 
    $sig.make(0x28BD5, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "typeDescs", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "arrayTypeDescs", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "typeMappings", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:true , Public:false}, "primitiveTypes", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "primitiveDataTypes", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "primitiveNames", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:true , Public:false}, "unsupportedTypes", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Property({Static:false, Public:false}, "Types", $asm06.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:false}, "TypeMappings", $asm06.TypeRef("System.Collections.ICollection"));

  $.Property({Static:true , Public:false}, "PrimtiveTypes", $asm06.TypeRef("System.Collections.Hashtable"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Soap", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29E6B, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "Encoding", "http://schemas.xmlsoap.org/soap/encoding/"); 
  $.Constant({Static:true , Public:false}, "UrType", "anyType"); 
  $.Constant({Static:true , Public:false}, "Array", "Array"); 
  $.Constant({Static:true , Public:false}, "ArrayType", "arrayType"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Soap12", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x296B8, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "Encoding", "http://www.w3.org/2003/05/soap-encoding"); 
  $.Constant({Static:true , Public:false}, "RpcNamespace", "http://www.w3.org/2003/05/soap-rpc"); 
  $.Constant({Static:true , Public:false}, "RpcResult", "result"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Wsdl", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x296C1, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "Namespace", "http://schemas.xmlsoap.org/wsdl/"); 
  $.Constant({Static:true , Public:false}, "ArrayType", "arrayType"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.UrtTypes", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29702, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "Namespace", "http://microsoft.com/wsdl/types/"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlAnyAttributeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29709, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlAnyElementAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2974D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2974F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29750, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2973F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x29742, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceSpecified", 
    $sig.make(0x2974B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Order", 
    $sig.make(0x29744, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x29740, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x29743, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Order", 
    $sig.make(0x29746, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "order", $.Int32); 
  $.Field({Static:false, Public:false}, "nsSpecified", $.Boolean); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "Order", $.Int32);

  $.Property({Static:false, Public:false}, "NamespaceSpecified", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlAnyElementAttributes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29794, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x2978E, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x29791, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x29793, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2978C, $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x29790, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x2978F, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x29792, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x2978D, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
  );

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlArrayAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2982A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2982B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x29814, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Form", 
    $sig.make(0x29826, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x29824, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x29822, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Order", 
    $sig.make(0x29828, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
    $sig.make(0x2981A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Form", 
    $sig.make(0x29827, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
    $sig.make(0x29825, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x29823, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Order", 
    $sig.make(0x29829, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "elementName", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "order", $.Int32); 
  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:true }, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"));

  $.Property({Static:false, Public:true }, "Order", $.Int32);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlArrayItemAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2989A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2989B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2989E, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298A0, null, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x29875, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x29869, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Form", 
    $sig.make(0x29898, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x2987C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
    $sig.make(0x29896, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x2986D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NestingLevel", 
    $sig.make(0x29870, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x29867, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x29878, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
    $sig.make(0x2986B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Form", 
    $sig.make(0x29899, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
    $sig.make(0x29893, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x2986E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NestingLevel", 
    $sig.make(0x29872, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x29868, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "elementName", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
  $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "nestingLevel", $.Int32); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "NestingLevel", $.Int32);

  $.Property({Static:false, Public:true }, "DataType", $.String);

  $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

  $.Property({Static:false, Public:true }, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlArrayItemAttributes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298EF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x298E9, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x298EC, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x298EE, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x298E7, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x298EB, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x298EA, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x298ED, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x298E8, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
  );

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlAttributeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29995, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29996, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29997, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29998, null, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
    $sig.make(0x2998D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x29991, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Form", 
    $sig.make(0x29993, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x2998F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x2998B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
    $sig.make(0x2998E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x29992, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Form", 
    $sig.make(0x29994, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x29990, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x2998C, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "attributeName", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "AttributeName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "DataType", $.String);

  $.Property({Static:false, Public:true }, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlAttributeOverrides", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299EA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x299E7, null, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x299E8, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x299E4, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x299E6, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.Field({Static:false, Public:false}, "types", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"));

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeEnum(
  "System.Xml.Serialization.XmlAttributeFlags", false, {
    Enum: 1, 
    Array: 2, 
    Text: 4, 
    ArrayItems: 8, 
    Elements: 16, 
    Attribute: 32, 
    Root: 64, 
    Type: 128, 
    AnyElements: 256, 
    AnyAttribute: 512, 
    ChoiceIdentifier: 1024, 
    XmlnsDeclarations: 2048
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlAttributes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29A68, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29A6A, null, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IgnoreAttribute", 
    $sig.make(0x29A45, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlAnyAttribute", 
    $sig.make(0x29A62, $asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlAnyElements", 
    $sig.make(0x29A60, $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlArray", 
    $sig.make(0x29A4D, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlArrayItems", 
    $sig.make(0x29A4F, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlAttribute", 
    $sig.make(0x29A47, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlChoiceIdentifier", 
    $sig.make(0x29A64, $asm0E.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlDefaultValue", 
    $sig.make(0x29A50, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlElements", 
    $sig.make(0x29A46, $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttributes"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlEnum", 
    $sig.make(0x29A49, $asm0E.TypeRef("System.Xml.Serialization.XmlEnumAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_XmlFlags", 
    $sig.make(0x29A44, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlIgnore", 
    $sig.make(0x29A58, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Xmlns", 
    $sig.make(0x29A65, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlRoot", 
    $sig.make(0x29A5C, $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlText", 
    $sig.make(0x29A4B, $asm0E.TypeRef("System.Xml.Serialization.XmlTextAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
    $sig.make(0x29A5A, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeAttribute"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetAttr", 
    $sig.make(0x29A6C, $.Object, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlAnyAttribute", 
    $sig.make(0x29A63, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlArray", 
    $sig.make(0x29A4E, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlAttribute", 
    $sig.make(0x29A48, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlDefaultValue", 
    $sig.make(0x29A56, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlEnum", 
    $sig.make(0x29A4A, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlEnumAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlIgnore", 
    $sig.make(0x29A59, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Xmlns", 
    $sig.make(0x29A66, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlRoot", 
    $sig.make(0x29A5E, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlText", 
    $sig.make(0x29A4C, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTextAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlType", 
    $sig.make(0x29A5B, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeAttribute")], [])
  );

  $.Field({Static:false, Public:false}, "xmlElements", $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttributes")); 
  $.Field({Static:false, Public:false}, "xmlArrayItems", $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes")); 
  $.Field({Static:false, Public:false}, "xmlAnyElements", $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes")); 
  $.Field({Static:false, Public:false}, "xmlArray", $asm0E.TypeRef("System.Xml.Serialization.XmlArrayAttribute")); 
  $.Field({Static:false, Public:false}, "xmlAttribute", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute")); 
  $.Field({Static:false, Public:false}, "xmlText", $asm0E.TypeRef("System.Xml.Serialization.XmlTextAttribute")); 
  $.Field({Static:false, Public:false}, "xmlEnum", $asm0E.TypeRef("System.Xml.Serialization.XmlEnumAttribute")); 
  $.Field({Static:false, Public:false}, "xmlIgnore", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlns", $.Boolean); 
  $.Field({Static:false, Public:false}, "xmlDefaultValue", $.Object); 
  $.Field({Static:false, Public:false}, "xmlRoot", $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute")); 
  $.Field({Static:false, Public:false}, "xmlType", $asm0E.TypeRef("System.Xml.Serialization.XmlTypeAttribute")); 
  $.Field({Static:false, Public:false}, "xmlAnyAttribute", $asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute")); 
  $.Field({Static:false, Public:false}, "xmlChoiceIdentifier", $asm0E.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute")); 
  $.Field({Static:true , Public:false}, "ignoreAttributeType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:false}, "XmlFlags", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeFlags"));

  $.Property({Static:true , Public:false}, "IgnoreAttribute", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "XmlElements", $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttributes"));

  $.Property({Static:false, Public:true }, "XmlAttribute", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"));

  $.Property({Static:false, Public:true }, "XmlEnum", $asm0E.TypeRef("System.Xml.Serialization.XmlEnumAttribute"));

  $.Property({Static:false, Public:true }, "XmlText", $asm0E.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

  $.Property({Static:false, Public:true }, "XmlArray", $asm0E.TypeRef("System.Xml.Serialization.XmlArrayAttribute"));

  $.Property({Static:false, Public:true }, "XmlArrayItems", $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"));

  $.Property({Static:false, Public:true }, "XmlDefaultValue", $.Object);

  $.Property({Static:false, Public:true }, "XmlIgnore", $.Boolean);

  $.Property({Static:false, Public:true }, "XmlType", $asm0E.TypeRef("System.Xml.Serialization.XmlTypeAttribute"));

  $.Property({Static:false, Public:true }, "XmlRoot", $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"));

  $.Property({Static:false, Public:true }, "XmlAnyElements", $asm0E.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"));

  $.Property({Static:false, Public:true }, "XmlAnyAttribute", $asm0E.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

  $.Property({Static:false, Public:true }, "XmlChoiceIdentifier", $asm0E.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"));

  $.Property({Static:false, Public:true }, "Xmlns", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlChoiceIdentifierAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29ADC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29ADD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
    $sig.make(0x29ADA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
    $sig.make(0x29ADB, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Property({Static:false, Public:true }, "MemberName", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.CodeExporter"), "System.Xml.Serialization.XmlCodeExporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C28, null, [$asm07.TypeRef("System.CodeDom.CodeNamespace")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C29, null, [$asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C2A, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C2E, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C2F, null, [
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDefaultValueAttribute", 
    $sig.make(0x29C48, null, [
        $asm07.TypeRef("System.CodeDom.CodeMemberField"), $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
        $.Object, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), 
        $asm07.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.Accessor"), $asm07.TypeRef("System.CodeDom.CodeConstructor")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddInitializationStatement", 
    $sig.make(0x29C49, null, [
        $asm07.TypeRef("System.CodeDom.CodeConstructor"), $asm07.TypeRef("System.CodeDom.CodeMemberField"), 
        $asm07.TypeRef("System.CodeDom.CodeExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
    $sig.make(0x29C4F, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
    $sig.make(0x29C50, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
    $sig.make(0x29C51, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddMemberMetadata", 
    $sig.make(0x29C55, null, [
        $asm07.TypeRef("System.CodeDom.CodeMemberField"), $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $.String, 
        $.Boolean, $asm07.TypeRef("System.CodeDom.CodeCommentStatementCollection"), 
        $asm07.TypeRef("System.CodeDom.CodeConstructor")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddRootMetadata", 
    $sig.make(0x29C40, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DropDefaultAttribute", 
    $sig.make(0x29C4B, null, [
        $asm0E.TypeRef("System.Xml.Serialization.Accessor"), $asm07.TypeRef("System.CodeDom.CodeCommentStatementCollection"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureTypesExported", 
    $sig.make(0x29C61, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.Accessor")]), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureTypesExported", 
    $sig.make(0x29C62, null, [$asm0E.TypeRef("System.Xml.Serialization.Accessor"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportAnyAttribute", 
    $sig.make(0x29C60, null, [$asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportAnyElement", 
    $sig.make(0x29C5F, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
        $.String, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportArray", 
    $sig.make(0x29C5D, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
        $.String, $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportArrayElements", 
    $sig.make(0x29C53, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportArrayItem", 
    $sig.make(0x29C5B, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportAttribute", 
    $sig.make(0x29C5A, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportDerivedStructs", 
    $sig.make(0x29C4E, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
    $sig.make(0x29C33, null, [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
    $sig.make(0x29C5C, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportMember", 
    $sig.make(0x29C56, null, [
        $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), 
        $.String, $asm07.TypeRef("System.CodeDom.CodeConstructor")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
    $sig.make(0x29C32, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportMetadata", 
    $sig.make(0x29C5E, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm06.TypeRef("System.Type"), 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $.Object, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportProperty", 
    $sig.make(0x29C58, null, [
        $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm07.TypeRef("System.CodeDom.CodeConstructor")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportStruct", 
    $sig.make(0x29C4D, $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportText", 
    $sig.make(0x29C59, null, [
        $asm07.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportType", 
    $sig.make(0x29C35, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportType", 
    $sig.make(0x29C38, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
    $sig.make(0x29C30, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultValueArguments", 
    $sig.make(0x29C42, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.CodeDom.CodeAttributeArgument")]), [
        $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.Object, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.CodeDom.CodeExpression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDefault", 
    $sig.make(0x29C44, $.Object, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDefaultValue", 
    $sig.make(0x29C46, $.Object, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.XmlReader"), "System.Xml.Serialization.XmlCountingReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29CCE, null, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x29CD3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x29D58, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AdvanceCount", 
    $sig.make(0x29C75, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
    $sig.make(0x29C9F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
    $sig.make(0x29C93, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadBinaryContent", 
    $sig.make(0x29CB7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReadValueChunk", 
    $sig.make(0x29CB9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanResolveEntity", 
    $sig.make(0x29CB5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
    $sig.make(0x29C90, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EOF", 
    $sig.make(0x29CAA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAttributes", 
    $sig.make(0x29CBC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x29C8E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x29C95, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
    $sig.make(0x29C94, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x29CA0, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x29CA1, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x29CA3, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x29C85, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x29C7C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x29C8C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
    $sig.make(0x29CB3, $asm0E.TypeRef("System.Xml.XmlNameTable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x29C7A, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
    $sig.make(0x29C8D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
    $sig.make(0x29C96, $.Char, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
    $sig.make(0x29CB1, $asm0E.TypeRef("System.Xml.ReadState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
    $sig.make(0x29C9A, $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
    $sig.make(0x29C78, $asm0E.TypeRef("System.Xml.XmlReaderSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x29C8F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x29C9D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
    $sig.make(0x29C98, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
    $sig.make(0x29C97, $asm0E.TypeRef("System.Xml.XmlSpace"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x29CD5, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x29CD6, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
    $sig.make(0x29CD8, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncrementCount", 
    $sig.make(0x29CCF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
    $sig.make(0x29CFB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
    $sig.make(0x29CFD, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
    $sig.make(0x29CFF, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
    $sig.make(0x29CF1, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x29CDA, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x29CDC, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
    $sig.make(0x29CDF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToContent", 
    $sig.make(0x29D03, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
    $sig.make(0x29CEE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
    $sig.make(0x29CE6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
    $sig.make(0x29CE8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x29D05, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
    $sig.make(0x29CF7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAs", 
    $sig.make(0x29D14, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBase64", 
    $sig.make(0x29D35, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBinHex", 
    $sig.make(0x29D3A, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsBoolean", 
    $sig.make(0x29D0B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDateTime", 
    $sig.make(0x29D0C, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsDouble", 
    $sig.make(0x29D0D, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsInt", 
    $sig.make(0x29D0E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsLong", 
    $sig.make(0x29D10, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsObject", 
    $sig.make(0x29D0A, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadContentAsString", 
    $sig.make(0x29D12, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAs", 
    $sig.make(0x29D32, $.Object, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAs", 
    $sig.make(0x29D33, $.Object, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.IXmlNamespaceResolver"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBase64", 
    $sig.make(0x29D39, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBinHex", 
    $sig.make(0x29D3C, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
    $sig.make(0x29D1A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
    $sig.make(0x29D1C, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDateTime", 
    $sig.make(0x29D1E, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDateTime", 
    $sig.make(0x29D20, $asm06.TypeRef("System.DateTime"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
    $sig.make(0x29D22, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
    $sig.make(0x29D24, $.Double, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
    $sig.make(0x29D26, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
    $sig.make(0x29D28, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
    $sig.make(0x29D2A, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
    $sig.make(0x29D2C, $.Int64, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsObject", 
    $sig.make(0x29D16, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsObject", 
    $sig.make(0x29D18, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
    $sig.make(0x29D2E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
    $sig.make(0x29D30, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementString", 
    $sig.make(0x29D49, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementString", 
    $sig.make(0x29D4B, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadElementString", 
    $sig.make(0x29D4C, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadEndElement", 
    $sig.make(0x29D4E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadInnerXml", 
    $sig.make(0x29D08, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadOuterXml", 
    $sig.make(0x29D09, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadStartElement", 
    $sig.make(0x29D45, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadStartElement", 
    $sig.make(0x29D46, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadStartElement", 
    $sig.make(0x29D47, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadString", 
    $sig.make(0x29D43, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadSubtree", 
    $sig.make(0x29D01, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToDescendant", 
    $sig.make(0x29D53, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToDescendant", 
    $sig.make(0x29D55, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToFollowing", 
    $sig.make(0x29D50, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToFollowing", 
    $sig.make(0x29D52, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToNextSibling", 
    $sig.make(0x29D56, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadToNextSibling", 
    $sig.make(0x29D57, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadValueChunk", 
    $sig.make(0x29D3E, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResolveEntity", 
    $sig.make(0x29CF9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Skip", 
    $sig.make(0x29D06, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.get_LineNumber", 
    $sig.make(0x29CCC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.get_LinePosition", 
    $sig.make(0x29CCD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlLineInfo.HasLineInfo", 
    $sig.make(0x29D59, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlTextParser.get_Normalized", 
    $sig.make(0x29CBF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlTextParser.get_WhitespaceHandling", 
    $sig.make(0x29CC3, $asm0E.TypeRef("System.Xml.WhitespaceHandling"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlTextParser.set_Normalized", 
    $sig.make(0x29CC1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IXmlTextParser.set_WhitespaceHandling", 
    $sig.make(0x29CC6, null, [$asm0E.TypeRef("System.Xml.WhitespaceHandling")], [])
  );

  $.Field({Static:false, Public:false}, "innerReader", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "advanceCount", $.Int32); 
  $.Property({Static:false, Public:false}, "AdvanceCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm0E.TypeRef("System.Xml.XmlReaderSettings"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

  $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm0E.TypeRef("System.Xml.XmlSpace"));

  $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm0E.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm0E.TypeRef("System.Xml.ReadState"));

  $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm0E.TypeRef("System.Xml.XmlNameTable"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlTextParser.Normalized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlTextParser.WhitespaceHandling", $asm0E.TypeRef("System.Xml.WhitespaceHandling"));

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlLineInfo.LineNumber", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IXmlLineInfo.LinePosition", $.Int32);

  $.ImplementInterfaces($asm0E.TypeRef("System.Xml.Serialization.IXmlTextParser"), $asm0E.TypeRef("System.Xml.IXmlLineInfo"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlCustomFormatter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x296E0, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CollapseWhitespace", 
    $sig.make(0x296FA, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromByteArrayHex", 
    $sig.make(0x296EB, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromChar", 
    $sig.make(0x296E5, $.String, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromDate", 
    $sig.make(0x296E2, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
    $sig.make(0x296E4, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromDefaultValue", 
    $sig.make(0x296E1, $.String, [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
    $sig.make(0x296EC, $.String, [
        $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
        $jsilcore.TypeRef("System.Array", [$.Int64]), $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromTime", 
    $sig.make(0x296E3, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlName", 
    $sig.make(0x296E6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlNCName", 
    $sig.make(0x296E7, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlNmToken", 
    $sig.make(0x296E8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlNmTokens", 
    $sig.make(0x296E9, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Mode", 
    $sig.make(0x296DF, $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToByteArrayBase64", 
    $sig.make(0x296F7, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToByteArrayHex", 
    $sig.make(0x296F8, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToChar", 
    $sig.make(0x296F2, $.Char, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToDate", 
    $sig.make(0x296F0, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
    $sig.make(0x296EE, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
    $sig.make(0x296EF, $asm06.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToDefaultValue", 
    $sig.make(0x296ED, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToEnum", 
    $sig.make(0x296F9, $.Int64, [
        $.String, $asm06.TypeRef("System.Collections.Hashtable"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToTime", 
    $sig.make(0x296F1, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlName", 
    $sig.make(0x296F3, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNCName", 
    $sig.make(0x296F4, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNmToken", 
    $sig.make(0x296F5, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNmTokens", 
    $sig.make(0x296F6, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteArrayBase64", 
    $sig.make(0x296EA, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:true , Public:false}, "mode", $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode")); 
  $.Field({Static:true , Public:false}, "allDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false}, "allDateFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:true , Public:false}, "allTimeFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Property({Static:true , Public:false}, "Mode", $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"));

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlElementAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x297C2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x297C3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x297C4, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x297C5, null, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x297B9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x297B5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Form", 
    $sig.make(0x297BE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x297BB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
    $sig.make(0x297BD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x297B7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Order", 
    $sig.make(0x297C0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x297B3, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x297BA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
    $sig.make(0x297B6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Form", 
    $sig.make(0x297BF, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
    $sig.make(0x297BC, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x297B8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Order", 
    $sig.make(0x297C1, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x297B4, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "elementName", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
  $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean); 
  $.Field({Static:false, Public:false}, "form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
  $.Field({Static:false, Public:false}, "order", $.Int32); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "DataType", $.String);

  $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

  $.Property({Static:false, Public:true }, "Form", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"));

  $.Property({Static:false, Public:true }, "Order", $.Int32);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlElementAttributes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29887, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x2987B, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x29881, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x29885, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x29877, $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x2987F, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x2987D, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x29883, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x29879, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
  );

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlEnumAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298D3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x298D4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x298D1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x298D2, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Property({Static:false, Public:true }, "Name", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Field]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlIgnoreAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2990A, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlIncludeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2996F, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x2996B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x2996C, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Interface", "Method", "Struct")]; });

JSIL.MakeEnum(
  "System.Xml.Serialization.XmlMappingAccess", true, {
    None: 0, 
    Read: 1, 
    Write: 2
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlMapping", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x295DB, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x295DD, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlMappingAccess")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckShallow", 
    $sig.make(0x295E3, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateKey", 
    $sig.make(0x295E2, $.String, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
    $sig.make(0x295B7, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x295C1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GenerateSerializer", 
    $sig.make(0x295C9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReadable", 
    $sig.make(0x295D5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
    $sig.make(0x295D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsWriteable", 
    $sig.make(0x295D7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Key", 
    $sig.make(0x295DA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x295C8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
    $sig.make(0x295B9, $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XsdElementName", 
    $sig.make(0x295C7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsShallow", 
    $sig.make(0x295E4, $.Boolean, [$jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_GenerateSerializer", 
    $sig.make(0x295D3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
    $sig.make(0x295D9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetKey", 
    $sig.make(0x295DF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetKeyInternal", 
    $sig.make(0x295E1, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "generateSerializer", $.Boolean); 
  $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
  $.Field({Static:false, Public:false}, "accessor", $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")); 
  $.Field({Static:false, Public:false}, "key", $.String); 
  $.Field({Static:false, Public:false}, "shallow", $.Boolean); 
  $.Field({Static:false, Public:false}, "access", $asm0E.TypeRef("System.Xml.Serialization.XmlMappingAccess")); 
  $.Property({Static:false, Public:false}, "Accessor", $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"));

  $.Property({Static:false, Public:false}, "Scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope"));

  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "XsdElementName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:false}, "GenerateSerializer", $.Boolean);

  $.Property({Static:false, Public:false}, "IsReadable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsWriteable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

  $.Property({Static:false, Public:false}, "Key", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlMemberMapping", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x298AC, null, [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GenerateTypeName", 
    $sig.make(0x298AD, $.String, [$asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
    $sig.make(0x29890, $asm0E.TypeRef("System.Xml.Serialization.Accessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Any", 
    $sig.make(0x29892, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CheckSpecified", 
    $sig.make(0x298A6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x29895, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
    $sig.make(0x298AB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
    $sig.make(0x2988D, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
    $sig.make(0x2989F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x2989D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeFullName", 
    $sig.make(0x298A4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
    $sig.make(0x298A1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeNamespace", 
    $sig.make(0x298A2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XsdElementName", 
    $sig.make(0x2989C, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "mapping", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")); 
  $.Property({Static:false, Public:false}, "Mapping", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"));

  $.Property({Static:false, Public:false}, "Accessor", $asm0E.TypeRef("System.Xml.Serialization.Accessor"));

  $.Property({Static:false, Public:true }, "Any", $.Boolean);

  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "XsdElementName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "MemberName", $.String);

  $.Property({Static:false, Public:true }, "TypeName", $.String);

  $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

  $.Property({Static:false, Public:true }, "TypeFullName", $.String);

  $.Property({Static:false, Public:true }, "CheckSpecified", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), "System.Xml.Serialization.XmlMembersMapping", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x296C9, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlMappingAccess")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x296C7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x296C5, $asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
    $sig.make(0x296BF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeNamespace", 
    $sig.make(0x296C0, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "mappings", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping")])); 
  $.Property({Static:false, Public:true }, "TypeName", $.String);

  $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.XmlMemberMapping"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlNamespaceDeclarationsAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299CB, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlReflectionImporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299D5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299D6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299D7, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x299D9, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddUniqueAccessor", 
    $sig.make(0x29A38, null, [$asm0E.TypeRef("System.Xml.Serialization.INameScope"), $asm0E.TypeRef("System.Xml.Serialization.Accessor")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddUniqueAccessor", 
    $sig.make(0x29A39, null, [
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $asm0E.TypeRef("System.Xml.Serialization.INameScope"), 
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckAmbiguousChoice", 
    $sig.make(0x29A32, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $asm06.TypeRef("System.Type"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckChoiceIdentifierMapping", 
    $sig.make(0x29A33, null, [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckChoiceIdentifierType", 
    $sig.make(0x29A2C, $asm06.TypeRef("System.Type"), [
        $asm06.TypeRef("System.Type"), $.Boolean, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckContext", 
    $sig.make(0x29A24, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckForm", 
    $sig.make(0x29A3A, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckNullable", 
    $sig.make(0x29A3B, null, [
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeMapping")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckTopLevelAttributes", 
    $sig.make(0x29A31, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CountAtLevel", 
    $sig.make(0x29A21, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateArrayAttribute", 
    $sig.make(0x29A36, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateArrayElementsFromAttributes", 
    $sig.make(0x29A2F, null, [
        $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), 
        $asm06.TypeRef("System.Type"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateArrayItemAttribute", 
    $sig.make(0x29A35, $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateElementAccessor", 
    $sig.make(0x29A3C, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateElementAttribute", 
    $sig.make(0x29A37, $asm0E.TypeRef("System.Xml.Serialization.XmlElementAttribute"), [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateMemberReflectionException", 
    $sig.make(0x29A07, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.Serialization.FieldModel"), $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNullableMapping", 
    $sig.make(0x29A19, $asm0E.TypeRef("System.Xml.Serialization.NullableMapping"), [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReflectionException", 
    $sig.make(0x29A04, $asm06.TypeRef("System.Exception"), [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
    $sig.make(0x29A18, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateTypeReflectionException", 
    $sig.make(0x29A05, $asm06.TypeRef("System.Exception"), [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindSpecifiedMember", 
    $sig.make(0x29A2A, $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember"), [$.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
    $sig.make(0x299FC, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
    $sig.make(0x299FF, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierType", 
    $sig.make(0x29A2D, $asm06.TypeRef("System.Type"), [
        $asm0E.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierType", 
    $sig.make(0x29A2E, $asm06.TypeRef("System.Type"), [
        $asm0E.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), $asm0E.TypeRef("System.Xml.Serialization.StructModel"), 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetContextName", 
    $sig.make(0x29A14, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultValue", 
    $sig.make(0x29A34, $.Object, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMappingName", 
    $sig.make(0x29A01, $.String, [$asm0E.TypeRef("System.Xml.Serialization.Mapping")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMethodFromSchemaProvider", 
    $sig.make(0x29A0D, $asm06.TypeRef("System.Reflection.MethodInfo"), [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
    $sig.make(0x29A1A, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTopLevelMapping", 
    $sig.make(0x29A3D, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeMapping", 
    $sig.make(0x29A1B, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm0E.TypeRef("System.Xml.Serialization.NameTable"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAccessorMapping", 
    $sig.make(0x29A30, null, [
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String, 
        $asm06.TypeRef("System.Type"), $.Boolean, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportArrayLikeMapping", 
    $sig.make(0x29A23, $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.ArrayModel"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportConstantMapping", 
    $sig.make(0x29A27, $asm0E.TypeRef("System.Xml.Serialization.ConstantMapping"), [$asm0E.TypeRef("System.Xml.Serialization.ConstantModel")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
    $sig.make(0x29A00, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [
        $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportEnumMapping", 
    $sig.make(0x29A26, $asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.EnumModel"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportFieldMapping", 
    $sig.make(0x29A2B, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.StructModel"), $asm0E.TypeRef("System.Xml.Serialization.FieldModel"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportMemberMapping", 
    $sig.make(0x29A29, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember"), $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299F2, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299F4, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299F8, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x299F9, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
        $.Boolean, $.Boolean, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlMappingAccess")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportMembersMapping", 
    $sig.make(0x29A28, $asm0E.TypeRef("System.Xml.Serialization.MembersMapping"), [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.String, 
        $.Boolean, $.Boolean, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveMapping", 
    $sig.make(0x29A25, $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.PrimitiveModel"), $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportSpecialMapping", 
    $sig.make(0x29A0F, $asm0E.TypeRef("System.Xml.Serialization.SpecialMapping"), [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportStructLikeMapping", 
    $sig.make(0x29A1C, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.StructModel"), $.String, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x299E2, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x299E9, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x299EB, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x299EE, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
    $sig.make(0x29A09, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
    $sig.make(0x29A0B, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $.Boolean, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IncludeType", 
    $sig.make(0x299DD, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncludeType", 
    $sig.make(0x299DF, null, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IncludeTypes", 
    $sig.make(0x299DA, null, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncludeTypes", 
    $sig.make(0x299DC, null, [$asm06.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeStructMembers", 
    $sig.make(0x29A1D, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $asm0E.TypeRef("System.Xml.Serialization.StructModel"), 
        $.Boolean, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.RecursionLimiter")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidAttributeUseException", 
    $sig.make(0x29A15, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsAnonymousType", 
    $sig.make(0x29A1E, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReconcileAccessor", 
    $sig.make(0x29A03, $asm0E.TypeRef("System.Xml.Serialization.Accessor"), [$asm0E.TypeRef("System.Xml.Serialization.Accessor"), $asm0E.TypeRef("System.Xml.Serialization.NameTable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReconcileLocalAccessor", 
    $sig.make(0x29A02, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetArrayMappingType", 
    $sig.make(0x29A22, null, [
        $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetBase", 
    $sig.make(0x29A12, null, [$asm0E.TypeRef("System.Xml.Serialization.SerializableMapping"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnsupportedException", 
    $sig.make(0x29A17, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $asm0E.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
    $sig.make(0x29A11, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
    $sig.make(0x29A1F, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
    $sig.make(0x29A20, $.String, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "typeScope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
  $.Field({Static:false, Public:false}, "attributeOverrides", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")); 
  $.Field({Static:false, Public:false}, "defaultAttributes", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes")); 
  $.Field({Static:false, Public:false}, "types", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "nullables", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "elements", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "xsdAttributes", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "specials", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "anonymous", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "serializables", $asm0E.TypeRef("System.Xml.Serialization.NameTable")); 
  $.Field({Static:false, Public:false}, "root", $asm0E.TypeRef("System.Xml.Serialization.StructMapping")); 
  $.Field({Static:false, Public:false}, "defaultNs", $.String); 
  $.Field({Static:false, Public:false}, "modelScope", $asm0E.TypeRef("System.Xml.Serialization.ModelScope")); 
  $.Field({Static:false, Public:false}, "arrayNestingLevel", $.Int32); 
  $.Field({Static:false, Public:false}, "savedArrayItemAttributes", $asm0E.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes")); 
  $.Field({Static:false, Public:false}, "savedArrayNamespace", $.String); 
  $.Field({Static:false, Public:false}, "choiceNum", $.Int32); 
});

JSIL.MakeEnum(
  "System.Xml.Serialization.XmlReflectionImporter/ImportContext", false, {
    Text: 0, 
    Attribute: 1, 
    Element: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.ImportStructWorkItem", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29BB9, null, [$asm0E.TypeRef("System.Xml.Serialization.StructModel"), $asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
    $sig.make(0x29BB8, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Model", 
    $sig.make(0x29BB7, $asm0E.TypeRef("System.Xml.Serialization.StructModel"), [], [])
  );

  $.Field({Static:false, Public:false}, "model", $asm0E.TypeRef("System.Xml.Serialization.StructModel")); 
  $.Field({Static:false, Public:false}, "mapping", $asm0E.TypeRef("System.Xml.Serialization.StructMapping")); 
  $.Property({Static:false, Public:false}, "Model", $asm0E.TypeRef("System.Xml.Serialization.StructModel"));

  $.Property({Static:false, Public:false}, "Mapping", $asm0E.TypeRef("System.Xml.Serialization.StructMapping"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.WorkItems", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B8D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x29B85, null, [$asm0E.TypeRef("System.Xml.Serialization.ImportStructWorkItem")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Contains", 
    $sig.make(0x29B87, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x29B83, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x29B7E, $asm0E.TypeRef("System.Xml.Serialization.ImportStructWorkItem"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
    $sig.make(0x29B89, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
    $sig.make(0x29B8B, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x29B80, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.ImportStructWorkItem")], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Property({Static:false, Public:false}, "Item", $asm0E.TypeRef("System.Xml.Serialization.ImportStructWorkItem"));

  $.Property({Static:false, Public:false}, "Count", $.Int32);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.RecursionLimiter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29A08, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DeferredWorkItems", 
    $sig.make(0x29A06, $asm0E.TypeRef("System.Xml.Serialization.WorkItems"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
    $sig.make(0x299FA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsExceededLimit", 
    $sig.make(0x299F6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Depth", 
    $sig.make(0x299FD, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "maxDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "depth", $.Int32); 
  $.Field({Static:false, Public:false}, "deferredWorkItems", $asm0E.TypeRef("System.Xml.Serialization.WorkItems")); 
  $.Property({Static:false, Public:false}, "IsExceededLimit", $.Boolean);

  $.Property({Static:false, Public:false}, "Depth", $.Int32);

  $.Property({Static:false, Public:false}, "DeferredWorkItems", $asm0E.TypeRef("System.Xml.Serialization.WorkItems"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlReflectionMember", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29AA9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReturnValue", 
    $sig.make(0x29AA2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
    $sig.make(0x29AA0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
    $sig.make(0x29A93, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OverrideIsNullable", 
    $sig.make(0x29AA5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SoapAttributes", 
    $sig.make(0x29A9A, $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlAttributes", 
    $sig.make(0x29A97, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsReturnValue", 
    $sig.make(0x29AA3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
    $sig.make(0x29AA1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
    $sig.make(0x29A95, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OverrideIsNullable", 
    $sig.make(0x29AA7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SoapAttributes", 
    $sig.make(0x29A9C, null, [$asm0E.TypeRef("System.Xml.Serialization.SoapAttributes")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_XmlAttributes", 
    $sig.make(0x29A98, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributes")], [])
  );

  $.Field({Static:false, Public:false}, "memberName", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "xmlAttributes", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes")); 
  $.Field({Static:false, Public:false}, "soapAttributes", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes")); 
  $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "overrideIsNullable", $.Boolean); 
  $.Property({Static:false, Public:true }, "MemberType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "XmlAttributes", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributes"));

  $.Property({Static:false, Public:true }, "SoapAttributes", $asm0E.TypeRef("System.Xml.Serialization.SoapAttributes"));

  $.Property({Static:false, Public:true }, "MemberName", $.String);

  $.Property({Static:false, Public:true }, "IsReturnValue", $.Boolean);

  $.Property({Static:false, Public:true }, "OverrideIsNullable", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlRootAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2984F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29855, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x29844, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0x29840, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
    $sig.make(0x29846, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
    $sig.make(0x2984B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Key", 
    $sig.make(0x2984D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x29842, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x29845, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
    $sig.make(0x29841, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
    $sig.make(0x29848, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x29843, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "elementName", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
  $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean); 
  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "DataType", $.String);

  $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

  $.Property({Static:false, Public:false}, "Key", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "Class", "Enum", "Interface", "ReturnValue", 
        "Struct"
    )]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaExporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29923, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSchema", 
    $sig.make(0x2992F, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSchemaImport", 
    $sig.make(0x29931, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddSchemaItem", 
    $sig.make(0x29930, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAnnotation", 
    $sig.make(0x29946, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateType", 
    $sig.make(0x2992E, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
    $sig.make(0x2992C, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportAnonymousPrimitiveMapping", 
    $sig.make(0x2993A, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportAnyType", 
    $sig.make(0x2992A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportAnyType", 
    $sig.make(0x2992B, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportArrayMapping", 
    $sig.make(0x2993C, null, [
        $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportAttributeAccessor", 
    $sig.make(0x2993E, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExportDefaultValue", 
    $sig.make(0x29940, $.String, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportDerivedMappings", 
    $sig.make(0x29944, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
    $sig.make(0x2992D, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessor", 
    $sig.make(0x2993F, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $.Boolean, $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessors", 
    $sig.make(0x2993D, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
        $.Boolean, $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportElementMapping", 
    $sig.make(0x29936, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm0E.TypeRef("System.Xml.Serialization.Mapping"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportEnumMapping", 
    $sig.make(0x29945, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportMapping", 
    $sig.make(0x29935, null, [
        $asm0E.TypeRef("System.Xml.Serialization.Mapping"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
    $sig.make(0x29926, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
    $sig.make(0x29927, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportMembersMapping", 
    $sig.make(0x29939, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.Serialization.MembersMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportNonXsdPrimitiveMapping", 
    $sig.make(0x29937, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportPrimitiveMapping", 
    $sig.make(0x2993B, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportRootIfNecessary", 
    $sig.make(0x29941, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportSpecialMapping", 
    $sig.make(0x29938, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [
        $asm0E.TypeRef("System.Xml.Serialization.SpecialMapping"), $.String, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportStructMapping", 
    $sig.make(0x29942, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [
        $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
    $sig.make(0x29924, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
    $sig.make(0x29925, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportTypeMembers", 
    $sig.make(0x29943, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), 
        $.String, $.String, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindImport", 
    $sig.make(0x29934, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindSchemaType", 
    $sig.make(0x29928, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsAnyType", 
    $sig.make(0x29929, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NamespacesEqual", 
    $sig.make(0x29932, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SchemaContainsItem", 
    $sig.make(0x29933, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String], [])
  );

  $.Constant({Static:true , Public:false}, "elementFormDefault", 1); 
  $.Constant({Static:true , Public:false}, "attributeFormDefault", 2); 
  $.Field({Static:false, Public:false}, "schemas", $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")); 
  $.Field({Static:false, Public:false}, "elements", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "attributes", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "types", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "references", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "needToExportRoot", $.Boolean); 
  $.Field({Static:false, Public:false}, "scope", $asm0E.TypeRef("System.Xml.Serialization.TypeScope")); 
});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.SchemaImporter"), "System.Xml.Serialization.XmlSchemaImporter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29384, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29389, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2938B, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2938E, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm0E.TypeRef("System.Xml.Serialization.ImportContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29391, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm0E.TypeRef("System.Xml.Serialization.ImportContext")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddScopeElement", 
    $sig.make(0x293CA, null, [
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddScopeElements", 
    $sig.make(0x293CB, null, [
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AttributeForm", 
    $sig.make(0x293F6, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BaseTypeName", 
    $sig.make(0x293EC, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ElementForm", 
    $sig.make(0x293F2, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindAttribute", 
    $sig.make(0x293F1, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindAttributeGroup", 
    $sig.make(0x293EB, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindDataType", 
    $sig.make(0x293EE, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindElement", 
    $sig.make(0x293F0, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindExtendedAnyElement", 
    $sig.make(0x293F3, $.String, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
        $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), $asm07.TypeRef("System.CodeDom.CodeNamespace"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindExtendedType", 
    $sig.make(0x293F4, $.String, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindExtendedType", 
    $sig.make(0x293F5, $.String, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), $asm07.TypeRef("System.CodeDom.CodeNamespace"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindGroup", 
    $sig.make(0x293EA, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindType", 
    $sig.make(0x293EF, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GatherGroupChoices", 
    $sig.make(0x293C8, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $asm0E.TypeRef("System.Xml.Serialization.NameTable"), 
        $.String, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GatherGroupChoices", 
    $sig.make(0x293C9, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm0E.TypeRef("System.Xml.Serialization.NameTable"), 
        $.String, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateUniqueTypeName", 
    $sig.make(0x293B8, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GenerateOrder", 
    $sig.make(0x29380, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDataTypeSource", 
    $sig.make(0x293ED, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDefaultMapping", 
    $sig.make(0x29395, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm0E.TypeRef("System.Xml.Serialization.TypeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEquivalentElements", 
    $sig.make(0x293CE, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")]), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTopLevelElement", 
    $sig.make(0x293CD, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeItems", 
    $sig.make(0x293C4, $asm0E.TypeRef("System.Xml.Serialization.XmlSchemaImporter/TypeItems"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAny", 
    $sig.make(0x293D2, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAnyAttributeMember", 
    $sig.make(0x293DA, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAnyMapping", 
    $sig.make(0x293D6, $asm0E.TypeRef("System.Xml.Serialization.SpecialMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAnyMember", 
    $sig.make(0x293D1, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportAnyType", 
    $sig.make(0x293AD, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportArray", 
    $sig.make(0x293D3, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportArrayMapping", 
    $sig.make(0x293D4, $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAttribute", 
    $sig.make(0x293E3, $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAttributeGroupMembers", 
    $sig.make(0x293DF, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportAttributeMember", 
    $sig.make(0x293D8, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportChoiceGroup", 
    $sig.make(0x293C6, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDataType", 
    $sig.make(0x293E5, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
        $.String, $asm06.TypeRef("System.Type"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
    $sig.make(0x29393, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
    $sig.make(0x29396, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportDerivedTypes", 
    $sig.make(0x293BA, null, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
    $sig.make(0x293B4, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
    $sig.make(0x293B5, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElementMember", 
    $sig.make(0x293D7, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportElementType", 
    $sig.make(0x293B6, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedChoice", 
    $sig.make(0x293E7, $asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedDataType", 
    $sig.make(0x293E6, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportGroup", 
    $sig.make(0x293C5, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
        $.Boolean, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportGroupMembers", 
    $sig.make(0x293CC, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x293AB, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x293AF, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x293B0, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
    $sig.make(0x293B2, $asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.SoapSchemaMember")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportMembersType", 
    $sig.make(0x293BE, $asm0E.TypeRef("System.Xml.Serialization.MembersMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportNonXsdPrimitiveDataType", 
    $sig.make(0x293E9, $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveDataType", 
    $sig.make(0x293E8, $asm0E.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
    $sig.make(0x29398, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
    $sig.make(0x2939A, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
    $sig.make(0x2939D, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportSpecialAttribute", 
    $sig.make(0x293E1, $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportStructDataType", 
    $sig.make(0x293C1, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
        $.String, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportStructType", 
    $sig.make(0x293BF, $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $.String, $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportSubstitutionGroupMember", 
    $sig.make(0x293CF, $.Boolean, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTextMember", 
    $sig.make(0x293D0, null, [
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportType", 
    $sig.make(0x293BC, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportType", 
    $sig.make(0x293BD, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
        $.String, $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
    $sig.make(0x293A9, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportTypeMembers", 
    $sig.make(0x293C2, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm0E.TypeRef("System.Xml.Serialization.INameScope"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ImportXmlnsDeclarationsMember", 
    $sig.make(0x293DE, null, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsAllGroup", 
    $sig.make(0x293C0, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsCyclicReferencedType", 
    $sig.make(0x293D5, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm06.TypeRef("System.Collections.Generic.List`1", [$.String])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsMixed", 
    $sig.make(0x293C3, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsNeedXmlSerializationAttributes", 
    $sig.make(0x293C7, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.ArrayMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "KeepXmlnsDeclarations", 
    $sig.make(0x293DC, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RunSchemaExtensions", 
    $sig.make(0x293B7, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeFlags")
      ], [])
  );

  $.Property({Static:false, Public:false}, "GenerateOrder", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaImporter/TypeItems", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x297CC, null, [], [])
  );

  $.Field({Static:false, Public:false}, "Attributes", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
  $.Field({Static:false, Public:false}, "AnyAttribute", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
  $.Field({Static:false, Public:false}, "Particle", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")); 
  $.Field({Static:false, Public:false}, "baseSimpleType", $asm0E.TypeRef("System.Xml.XmlQualifiedName")); 
  $.Field({Static:false, Public:false}, "IsUnbounded", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaImporter/ElementComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2AA28, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x2AA27, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlSchemaProviderAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29984, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsAny", 
    $sig.make(0x29982, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MethodName", 
    $sig.make(0x29981, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsAny", 
    $sig.make(0x29983, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "methodName", $.String); 
  $.Field({Static:false, Public:false}, "any", $.Boolean); 
  $.Property({Static:false, Public:true }, "MethodName", $.String);

  $.Property({Static:false, Public:true }, "IsAny", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Interface", "Struct")]; });

JSIL.MakeClass($asm06.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlSchemas", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29312, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x292EC, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x292ED, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x292EE, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x292EF, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddImport", 
    $sig.make(0x29304, null, [$asm06.TypeRef("System.Collections.IList"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddName", 
    $sig.make(0x292FB, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddReference", 
    $sig.make(0x292F0, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0x2930C, null, [$asm0E.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x292F3, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x292F4, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x292F6, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateFakeXsdSchema", 
    $sig.make(0x2930F, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateValidationException", 
    $sig.make(0x2930D, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaException"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Dump", 
    $sig.make(0x29309, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Find", 
    $sig.make(0x292FE, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Find", 
    $sig.make(0x292FF, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Find", 
    $sig.make(0x2930B, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm06.TypeRef("System.Collections.IList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
    $sig.make(0x292E4, $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
    $sig.make(0x292E8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x292E1, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x292E3, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MergedSchemas", 
    $sig.make(0x292E5, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_References", 
    $sig.make(0x292E6, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaSet", 
    $sig.make(0x292E7, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XmlSchema", 
    $sig.make(0x292EA, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XsdSchema", 
    $sig.make(0x292E9, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetParentName", 
    $sig.make(0x29307, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSchemaItem", 
    $sig.make(0x29308, $.String, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSchemas", 
    $sig.make(0x292EB, $asm06.TypeRef("System.Collections.IList"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IgnoreCompileErrors", 
    $sig.make(0x2930E, null, [$.Object, $asm0E.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x292F2, $.Int32, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x292F1, null, [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsDataSet", 
    $sig.make(0x29302, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsReference", 
    $sig.make(0x29311, $.Boolean, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ItemName", 
    $sig.make(0x29306, $.String, [$asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Merge", 
    $sig.make(0x29303, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Merge", 
    $sig.make(0x29305, null, [$asm06.TypeRef("System.Collections.IList"), $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MergeFailedMessage", 
    $sig.make(0x2930A, $.String, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnClear", 
    $sig.make(0x292F9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnInsert", 
    $sig.make(0x292F7, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnRemove", 
    $sig.make(0x292F8, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnSet", 
    $sig.make(0x292FA, null, [
        $.Int32, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Prepare", 
    $sig.make(0x292FC, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Preprocess", 
    $sig.make(0x29301, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x292F5, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveName", 
    $sig.make(0x292FD, null, [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x292E2, null, [$.Int32, $asm0E.TypeRef("System.Xml.Schema.XmlSchema")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetCache", 
    $sig.make(0x29310, null, [$asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x29300, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), [], [])
  );

  $.Constant({Static:true , Public:false}, "xmlSchema", "<?xml version='1.0' encoding='UTF-8' ?> \r\n<xs:schema targetNamespace='http://www.w3.org/XML/1998/namespace' xmlns:xs='http://www.w3.org/2001/XMLSchema' xml:lang='en'>\r\n <xs:attribute name='lang' type='xs:language'/>\r\n <xs:attribute name='space'>\r\n  <xs:simpleType>\r\n   <xs:restriction base='xs:NCName'>\r\n    <xs:enumeration value='default'/>\r\n    <xs:enumeration value='preserve'/>\r\n   </xs:restriction>\r\n  </xs:simpleType>\r\n </xs:attribute>\r\n <xs:attribute name='base' type='xs:anyURI'/>\r\n <xs:attribute name='id' type='xs:ID' />\r\n <xs:attributeGroup name='specialAttrs'>\r\n  <xs:attribute ref='xml:base'/>\r\n  <xs:attribute ref='xml:lang'/>\r\n  <xs:attribute ref='xml:space'/>\r\n </xs:attributeGroup>\r\n</xs:schema>"); 
  $.Field({Static:false, Public:false}, "schemaSet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
  $.Field({Static:false, Public:false}, "references", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "cache", $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache")); 
  $.Field({Static:false, Public:false}, "shareTypes", $.Boolean); 
  $.Field({Static:false, Public:false}, "mergedSchemas", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "delayedSchemas", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "isCompiled", $.Boolean); 
  $.Field({Static:true , Public:false}, "xsd", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Field({Static:true , Public:false}, "xml", $asm0E.TypeRef("System.Xml.Schema.XmlSchema")); 
  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:false}, "Cache", $asm0E.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

  $.Property({Static:false, Public:false}, "MergedSchemas", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "References", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "SchemaSet", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaSet"));

  $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean);

  $.Property({Static:true , Public:false}, "XsdSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:true , Public:false}, "XmlSchema", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaEnumerator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29AD0, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x29AD1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x29ACE, $asm0E.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x29AD2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x29ACF, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x29AD3, null, [], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas")); 
  $.Field({Static:false, Public:false}, "idx", $.Int32); 
  $.Field({Static:false, Public:false}, "end", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm0E.TypeRef("System.Xml.Schema.XmlSchema"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0E.TypeRef("System.Xml.Schema.XmlSchema")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationGeneratedCode", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29AE7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x29AE5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x29AE4, null, [$asm0E.TypeRef("System.Xml.Serialization.TempAssembly")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnAssemblyResolve", 
    $sig.make(0x29AE6, $asm06.TypeRef("System.Reflection.Assembly"), [$.Object, $asm06.TypeRef("System.ResolveEventArgs")], [])
  );

  $.Field({Static:false, Public:false}, "tempAssembly", $asm0E.TypeRef("System.Xml.Serialization.TempAssembly")); 
  $.Field({Static:false, Public:false}, "threadCode", $.Int32); 
  $.Field({Static:false, Public:false}, "assemblyResolver", $asm06.TypeRef("System.ResolveEventHandler")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationCodeGen", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29B13, null, [
        $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureArrayIndex", 
    $sig.make(0x29B17, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")]), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateBaseSerializer", 
    $sig.make(0x29B1D, $.String, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateGetSerializer", 
    $sig.make(0x29B20, null, [$asm06.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateHashtableGetBegin", 
    $sig.make(0x29B19, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateHashtableGetEnd", 
    $sig.make(0x29B1A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateMethod", 
    $sig.make(0x29B14, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GeneratePublicMethods", 
    $sig.make(0x29B1B, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateReferencedMethods", 
    $sig.make(0x29B15, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateSerializerContract", 
    $sig.make(0x29B21, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $.String, 
        $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
        $jsilcore.TypeRef("System.Array", [$.String]), $asm06.TypeRef("System.Collections.Hashtable")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateSupportedTypes", 
    $sig.make(0x29B1C, null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateTypedSerializer", 
    $sig.make(0x29B1E, $.String, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), $asm0E.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateTypedSerializers", 
    $sig.make(0x29B1F, null, [$asm06.TypeRef("System.Collections.Hashtable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Access", 
    $sig.make(0x29B0F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ClassName", 
    $sig.make(0x29B0E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_GeneratedMethods", 
    $sig.make(0x29B12, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MethodNames", 
    $sig.make(0x29B11, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NextMethodNumber", 
    $sig.make(0x29B09, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_QnameTypeDesc", 
    $sig.make(0x29B0D, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_RaCodeGen", 
    $sig.make(0x29B0B, $asm0E.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Scopes", 
    $sig.make(0x29B10, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_StringTypeDesc", 
    $sig.make(0x29B0C, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
    $sig.make(0x29B08, $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsWildcard", 
    $sig.make(0x29B22, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.SpecialMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReferenceMapping", 
    $sig.make(0x29B16, $.String, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_NextMethodNumber", 
    $sig.make(0x29B0A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteQuotedCSharpString", 
    $sig.make(0x29B18, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "writer", $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter")); 
  $.Field({Static:false, Public:false}, "nextMethodNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "methodNames", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "raCodeGen", $asm0E.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen")); 
  $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")])); 
  $.Field({Static:false, Public:false}, "stringTypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Field({Static:false, Public:false}, "qnameTypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Field({Static:false, Public:false}, "access", $.String); 
  $.Field({Static:false, Public:false}, "className", $.String); 
  $.Field({Static:false, Public:false}, "referencedMethods", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")])); 
  $.Field({Static:false, Public:false}, "references", $.Int32); 
  $.Field({Static:false, Public:false}, "generatedMethods", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "Writer", $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter"));

  $.Property({Static:false, Public:false}, "NextMethodNumber", $.Int32);

  $.Property({Static:false, Public:false}, "RaCodeGen", $asm0E.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"));

  $.Property({Static:false, Public:false}, "StringTypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

  $.Property({Static:false, Public:false}, "QnameTypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

  $.Property({Static:false, Public:false}, "ClassName", $.String);

  $.Property({Static:false, Public:false}, "Access", $.String);

  $.Property({Static:false, Public:false}, "Scopes", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")]));

  $.Property({Static:false, Public:false}, "MethodNames", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:false}, "GeneratedMethods", $asm06.TypeRef("System.Collections.Hashtable"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlSerializationGeneratedCode"), "System.Xml.Serialization.XmlSerializationReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29C21, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddFixup", 
    $sig.make(0x29C0E, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader/Fixup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddFixup", 
    $sig.make(0x29C0F, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader/CollectionFixup")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddReadCallback", 
    $sig.make(0x29C1D, null, [
        $.String, $.String, 
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReadCallback")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddTarget", 
    $sig.make(0x29C0D, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckReaderCount", 
    $sig.make(0x29C20, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CollapseWhitespace", 
    $sig.make(0x29BDD, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateAbstractTypeException", 
    $sig.make(0x29BFD, $asm06.TypeRef("System.Exception"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateBadDerivationException", 
    $sig.make(0x29C04, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateCtorHasSecurityException", 
    $sig.make(0x29BFF, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInaccessibleConstructorException", 
    $sig.make(0x29BFE, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidCastException", 
    $sig.make(0x29C02, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Type"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidCastException", 
    $sig.make(0x29C03, $asm06.TypeRef("System.Exception"), [
        $asm06.TypeRef("System.Type"), $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateMissingIXmlSerializableType", 
    $sig.make(0x29C05, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReadOnlyCollectionException", 
    $sig.make(0x29BFC, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateUnknownConstantException", 
    $sig.make(0x29C01, $asm06.TypeRef("System.Exception"), [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateUnknownNodeException", 
    $sig.make(0x29C00, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
    $sig.make(0x29BFB, $asm06.TypeRef("System.Exception"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CurrentTag", 
    $sig.make(0x29BFA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DoFixups", 
    $sig.make(0x29C13, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureArrayIndex", 
    $sig.make(0x29C06, $asm06.TypeRef("System.Array"), [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FixupArrayRefs", 
    $sig.make(0x29C14, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DecodeName", 
    $sig.make(0x29BC0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Document", 
    $sig.make(0x29BC4, $asm0E.TypeRef("System.Xml.XmlDocument"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReturnValue", 
    $sig.make(0x29BC5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
    $sig.make(0x29BC2, $asm0E.TypeRef("System.Xml.XmlReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReaderCount", 
    $sig.make(0x29BC3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetArrayLength", 
    $sig.make(0x29BE3, $.Int32, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetCurrentPosition", 
    $sig.make(0x29BF8, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNullAttr", 
    $sig.make(0x29BD8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveType", 
    $sig.make(0x29BCD, $asm06.TypeRef("System.Type"), [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTarget", 
    $sig.make(0x29C10, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetXsiType", 
    $sig.make(0x29BCC, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleUnreferencedObjects", 
    $sig.make(0x29C12, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x29BC9, null, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitCallbacks", 
    $sig.make(0x29C16, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitIDs", 
    $sig.make(0x29BC8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitPrimitiveIDs", 
    $sig.make(0x29BCB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsPrimitiveNamespace", 
    $sig.make(0x29BCE, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsXmlnsAttribute", 
    $sig.make(0x29BD5, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseArrayType", 
    $sig.make(0x29BE4, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader/SoapArrayInfo"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseSoap12ArrayType", 
    $sig.make(0x29BE5, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader/SoapArrayInfo"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseWsdlArrayType", 
    $sig.make(0x29BD6, null, [$asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
    $sig.make(0x29C15, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadByteArray", 
    $sig.make(0x29BD1, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadElementQualifiedName", 
    $sig.make(0x29BDB, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
    $sig.make(0x29C1E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadNull", 
    $sig.make(0x29BD7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadNullableQualifiedName", 
    $sig.make(0x29BDA, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadNullableString", 
    $sig.make(0x29BD9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReference", 
    $sig.make(0x29C0C, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElement", 
    $sig.make(0x29C18, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElement", 
    $sig.make(0x29C19, $.Object, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElements", 
    $sig.make(0x29C17, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
    $sig.make(0x29C1A, $.Object, [$jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
    $sig.make(0x29C1B, $.Object, [
        $.String, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
    $sig.make(0x29C1C, $.Object, [
        $.String, $.String, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadSerializable", 
    $sig.make(0x29C0A, $asm0E.TypeRef("System.Xml.Serialization.IXmlSerializable"), [$asm0E.TypeRef("System.Xml.Serialization.IXmlSerializable")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadSerializable", 
    $sig.make(0x29C0B, $asm0E.TypeRef("System.Xml.Serialization.IXmlSerializable"), [$asm0E.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadString", 
    $sig.make(0x29C08, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadString", 
    $sig.make(0x29C09, $.String, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadStringValue", 
    $sig.make(0x29BCF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadTypedNull", 
    $sig.make(0x29BD4, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadTypedPrimitive", 
    $sig.make(0x29BD2, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadTypedPrimitive", 
    $sig.make(0x29BD3, $.Object, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadXmlDocument", 
    $sig.make(0x29BDC, $asm0E.TypeRef("System.Xml.XmlDocument"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadXmlNode", 
    $sig.make(0x29BDE, $asm0E.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadXmlNodes", 
    $sig.make(0x29C1F, $.Object, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadXmlQualifiedName", 
    $sig.make(0x29BD0, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Referenced", 
    $sig.make(0x29C11, null, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ResolveDynamicAssembly", 
    $sig.make(0x29BCA, $asm06.TypeRef("System.Reflection.Assembly"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DecodeName", 
    $sig.make(0x29BC1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsReturnValue", 
    $sig.make(0x29BC6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ShrinkArray", 
    $sig.make(0x29C07, $asm06.TypeRef("System.Array"), [
        $asm06.TypeRef("System.Array"), $.Int32, 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToByteArrayBase64", 
    $sig.make(0x29BDF, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToByteArrayBase64", 
    $sig.make(0x29BE0, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToByteArrayHex", 
    $sig.make(0x29BE1, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToByteArrayHex", 
    $sig.make(0x29BE2, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToChar", 
    $sig.make(0x29BE9, $.Char, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToDate", 
    $sig.make(0x29BE7, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
    $sig.make(0x29BE6, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToEnum", 
    $sig.make(0x29BEA, $.Int64, [
        $.String, $asm06.TypeRef("System.Collections.Hashtable"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToTime", 
    $sig.make(0x29BE8, $asm06.TypeRef("System.DateTime"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlName", 
    $sig.make(0x29BEB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNCName", 
    $sig.make(0x29BEC, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNmToken", 
    $sig.make(0x29BED, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXmlNmTokens", 
    $sig.make(0x29BEE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToXmlQualifiedName", 
    $sig.make(0x29BEF, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToXmlQualifiedName", 
    $sig.make(0x29BF0, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownAttribute", 
    $sig.make(0x29BF1, null, [$.Object, $asm0E.TypeRef("System.Xml.XmlAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownAttribute", 
    $sig.make(0x29BF2, null, [
        $.Object, $asm0E.TypeRef("System.Xml.XmlAttribute"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownElement", 
    $sig.make(0x29BF3, null, [$.Object, $asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownElement", 
    $sig.make(0x29BF4, null, [
        $.Object, $asm0E.TypeRef("System.Xml.XmlElement"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
    $sig.make(0x29BF5, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
    $sig.make(0x29BF6, null, [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
    $sig.make(0x29BF7, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnreferencedObject", 
    $sig.make(0x29BF9, null, [$.String, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "r", $asm0E.TypeRef("System.Xml.XmlReader")); 
  $.Field({Static:false, Public:false}, "countingReader", $asm0E.TypeRef("System.Xml.Serialization.XmlCountingReader")); 
  $.Field({Static:false, Public:false}, "d", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "callbacks", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "types", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "typesReverse", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "events", $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")); 
  $.Field({Static:false, Public:false}, "targets", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "referencedTargets", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "targetsWithoutIds", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "fixups", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "collectionFixups", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "soap12", $.Boolean); 
  $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean); 
  $.Field({Static:false, Public:false}, "decodeName", $.Boolean); 
  $.Field({Static:false, Public:false}, "schemaNsID", $.String); 
  $.Field({Static:false, Public:false}, "schemaNs1999ID", $.String); 
  $.Field({Static:false, Public:false}, "schemaNs2000ID", $.String); 
  $.Field({Static:false, Public:false}, "schemaNonXsdTypesNsID", $.String); 
  $.Field({Static:false, Public:false}, "instanceNsID", $.String); 
  $.Field({Static:false, Public:false}, "instanceNs2000ID", $.String); 
  $.Field({Static:false, Public:false}, "instanceNs1999ID", $.String); 
  $.Field({Static:false, Public:false}, "soapNsID", $.String); 
  $.Field({Static:false, Public:false}, "soap12NsID", $.String); 
  $.Field({Static:false, Public:false}, "schemaID", $.String); 
  $.Field({Static:false, Public:false}, "wsdlNsID", $.String); 
  $.Field({Static:false, Public:false}, "wsdlArrayTypeID", $.String); 
  $.Field({Static:false, Public:false}, "nullID", $.String); 
  $.Field({Static:false, Public:false}, "nilID", $.String); 
  $.Field({Static:false, Public:false}, "typeID", $.String); 
  $.Field({Static:false, Public:false}, "arrayTypeID", $.String); 
  $.Field({Static:false, Public:false}, "itemTypeID", $.String); 
  $.Field({Static:false, Public:false}, "arraySizeID", $.String); 
  $.Field({Static:false, Public:false}, "arrayID", $.String); 
  $.Field({Static:false, Public:false}, "urTypeID", $.String); 
  $.Field({Static:false, Public:false}, "stringID", $.String); 
  $.Field({Static:false, Public:false}, "intID", $.String); 
  $.Field({Static:false, Public:false}, "booleanID", $.String); 
  $.Field({Static:false, Public:false}, "shortID", $.String); 
  $.Field({Static:false, Public:false}, "longID", $.String); 
  $.Field({Static:false, Public:false}, "floatID", $.String); 
  $.Field({Static:false, Public:false}, "doubleID", $.String); 
  $.Field({Static:false, Public:false}, "decimalID", $.String); 
  $.Field({Static:false, Public:false}, "dateTimeID", $.String); 
  $.Field({Static:false, Public:false}, "qnameID", $.String); 
  $.Field({Static:false, Public:false}, "dateID", $.String); 
  $.Field({Static:false, Public:false}, "timeID", $.String); 
  $.Field({Static:false, Public:false}, "hexBinaryID", $.String); 
  $.Field({Static:false, Public:false}, "base64BinaryID", $.String); 
  $.Field({Static:false, Public:false}, "base64ID", $.String); 
  $.Field({Static:false, Public:false}, "unsignedByteID", $.String); 
  $.Field({Static:false, Public:false}, "byteID", $.String); 
  $.Field({Static:false, Public:false}, "unsignedShortID", $.String); 
  $.Field({Static:false, Public:false}, "unsignedIntID", $.String); 
  $.Field({Static:false, Public:false}, "unsignedLongID", $.String); 
  $.Field({Static:false, Public:false}, "oldDecimalID", $.String); 
  $.Field({Static:false, Public:false}, "oldTimeInstantID", $.String); 
  $.Field({Static:false, Public:false}, "anyURIID", $.String); 
  $.Field({Static:false, Public:false}, "durationID", $.String); 
  $.Field({Static:false, Public:false}, "ENTITYID", $.String); 
  $.Field({Static:false, Public:false}, "ENTITIESID", $.String); 
  $.Field({Static:false, Public:false}, "gDayID", $.String); 
  $.Field({Static:false, Public:false}, "gMonthID", $.String); 
  $.Field({Static:false, Public:false}, "gMonthDayID", $.String); 
  $.Field({Static:false, Public:false}, "gYearID", $.String); 
  $.Field({Static:false, Public:false}, "gYearMonthID", $.String); 
  $.Field({Static:false, Public:false}, "IDID", $.String); 
  $.Field({Static:false, Public:false}, "IDREFID", $.String); 
  $.Field({Static:false, Public:false}, "IDREFSID", $.String); 
  $.Field({Static:false, Public:false}, "integerID", $.String); 
  $.Field({Static:false, Public:false}, "languageID", $.String); 
  $.Field({Static:false, Public:false}, "NameID", $.String); 
  $.Field({Static:false, Public:false}, "NCNameID", $.String); 
  $.Field({Static:false, Public:false}, "NMTOKENID", $.String); 
  $.Field({Static:false, Public:false}, "NMTOKENSID", $.String); 
  $.Field({Static:false, Public:false}, "negativeIntegerID", $.String); 
  $.Field({Static:false, Public:false}, "nonPositiveIntegerID", $.String); 
  $.Field({Static:false, Public:false}, "nonNegativeIntegerID", $.String); 
  $.Field({Static:false, Public:false}, "normalizedStringID", $.String); 
  $.Field({Static:false, Public:false}, "NOTATIONID", $.String); 
  $.Field({Static:false, Public:false}, "positiveIntegerID", $.String); 
  $.Field({Static:false, Public:false}, "tokenID", $.String); 
  $.Field({Static:false, Public:false}, "charID", $.String); 
  $.Field({Static:false, Public:false}, "guidID", $.String); 
  $.Field({Static:true , Public:false}, "checkDeserializeAdvances", $.Boolean); 
  $.Property({Static:false, Public:false}, "DecodeName", $.Boolean);

  $.Property({Static:false, Public:false}, "Reader", $asm0E.TypeRef("System.Xml.XmlReader"));

  $.Property({Static:false, Public:false}, "ReaderCount", $.Int32);

  $.Property({Static:false, Public:false}, "Document", $asm0E.TypeRef("System.Xml.XmlDocument"));

  $.Property({Static:false, Public:false}, "IsReturnValue", $.Boolean);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Serialization.XmlSerializationReader/SoapArrayInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "qname", $.String); 
  $.Field({Static:false, Public:true }, "dimensions", $.Int32); 
  $.Field({Static:false, Public:true }, "$length", $.Int32); 
  $.Field({Static:false, Public:true }, "jaggedDimensions", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReader/Fixup", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C3A, null, [
        $.Object, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C3C, null, [
        $.Object, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
    $sig.make(0x29C31, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Ids", 
    $sig.make(0x29C39, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Source", 
    $sig.make(0x29C34, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Source", 
    $sig.make(0x29C36, null, [$.Object], [])
  );

  $.Field({Static:false, Public:false}, "callback", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback")); 
  $.Field({Static:false, Public:false}, "source", $.Object); 
  $.Field({Static:false, Public:false}, "ids", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Property({Static:false, Public:true }, "Callback", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"));

  $.Property({Static:false, Public:true }, "Source", $.Object);

  $.Property({Static:false, Public:true }, "Ids", $jsilcore.TypeRef("System.Array", [$.String]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReader/CollectionFixup", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29C6C, null, [
        $.Object, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
    $sig.make(0x29C69, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Collection", 
    $sig.make(0x29C6A, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CollectionItems", 
    $sig.make(0x29C6B, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "callback", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback")); 
  $.Field({Static:false, Public:false}, "collection", $.Object); 
  $.Field({Static:false, Public:false}, "collectionItems", $.Object); 
  $.Property({Static:false, Public:true }, "Callback", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"));

  $.Property({Static:false, Public:true }, "Collection", $.Object);

  $.Property({Static:false, Public:true }, "CollectionItems", $.Object);

});

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationFixupCallback", true, []);

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationCollectionFixupCallback", true, []);

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationReadCallback", true, []);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlSerializationCodeGen"), "System.Xml.Serialization.XmlSerializationReaderCodeGen", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29ED2, null, [
        $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExpectedElements", 
    $sig.make(0x29F03, $.String, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateBegin", 
    $sig.make(0x29ED3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateElement", 
    $sig.make(0x29ED7, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateEncodedMembersElement", 
    $sig.make(0x29EE5, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
    $sig.make(0x29ED5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
    $sig.make(0x29ED6, null, [
        $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateInitCallbacksMethod", 
    $sig.make(0x29EDB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateLiteralMembersElement", 
    $sig.make(0x29EE0, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateMembersElement", 
    $sig.make(0x29EDC, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateMethod", 
    $sig.make(0x29ED4, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateTypeElement", 
    $sig.make(0x29EE7, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Enums", 
    $sig.make(0x29ED0, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetArraySource", 
    $sig.make(0x29F0F, $.String, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetArraySource", 
    $sig.make(0x29F11, $.String, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierSource", 
    $sig.make(0x29EDD, $.String, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")]), $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierSource", 
    $sig.make(0x29EDE, $.String, [
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeValueTypes", 
    $sig.make(0x29EE4, null, [$.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSequence", 
    $sig.make(0x29F0C, $.Boolean, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MakeUnique", 
    $sig.make(0x29EEB, $.String, [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextIdName", 
    $sig.make(0x29EE9, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextMethodName", 
    $sig.make(0x29EE8, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAddCollectionFixup", 
    $sig.make(0x29EF5, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
    $sig.make(0x29F1A, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.ArrayMapping"), $.Boolean, 
        $.Boolean, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
    $sig.make(0x29F2D, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x29EFE, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttributes", 
    $sig.make(0x29EFA, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteBooleanValue", 
    $sig.make(0x29F26, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCatchCastException", 
    $sig.make(0x29F2C, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCatchException", 
    $sig.make(0x29F2B, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCreateCollection", 
    $sig.make(0x29EE6, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCreateCollectionMethod", 
    $sig.make(0x29EF6, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/CreateCollectionInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCreateInstance", 
    $sig.make(0x29F2E, null, [
        $.String, $.String, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCreateMapping", 
    $sig.make(0x29F2A, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteDerivedSerializable", 
    $sig.make(0x29F1E, null, [
        $asm0E.TypeRef("System.Xml.Serialization.SerializableMapping"), $asm0E.TypeRef("System.Xml.Serialization.SerializableMapping"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteDerivedTypes", 
    $sig.make(0x29EEE, null, [
        $asm0E.TypeRef("System.Xml.Serialization.StructMapping"), $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
    $sig.make(0x29F1C, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $.String, 
        $.Boolean, $.Boolean, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEncodedStructMethod", 
    $sig.make(0x29EF3, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumAndArrayTypes", 
    $sig.make(0x29EEF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumMethod", 
    $sig.make(0x29EED, null, [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteFixupMethod", 
    $sig.make(0x29EF4, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), 
        $.String, $.Boolean, 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteHandleHrefList", 
    $sig.make(0x29F28, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteHashtable", 
    $sig.make(0x29EEC, $.String, [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteID", 
    $sig.make(0x29EF9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIfNotSoapRoot", 
    $sig.make(0x29F29, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteInitCheckTypeHrefList", 
    $sig.make(0x29F27, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteIsStartTag", 
    $sig.make(0x29ED9, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLiteralStructMethod", 
    $sig.make(0x29EF2, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
    $sig.make(0x29F2F, null, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberBegin", 
    $sig.make(0x29F01, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberElements", 
    $sig.make(0x29F04, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsCheckType", 
    $sig.make(0x29F09, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsElse", 
    $sig.make(0x29F0A, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsIf", 
    $sig.make(0x29F0E, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberEnd", 
    $sig.make(0x29F12, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberEnd", 
    $sig.make(0x29F13, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberFixupBegin", 
    $sig.make(0x29EFF, $.Boolean, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberText", 
    $sig.make(0x29F06, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableMethod", 
    $sig.make(0x29EF0, null, [$asm0E.TypeRef("System.Xml.Serialization.NullableMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteParamsRead", 
    $sig.make(0x29F24, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePrimitive", 
    $sig.make(0x29EEA, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteQNameEqual", 
    $sig.make(0x29EF7, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReadNonRoots", 
    $sig.make(0x29F25, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSourceBegin", 
    $sig.make(0x29F17, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSourceBeginTyped", 
    $sig.make(0x29F15, null, [$.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSourceEnd", 
    $sig.make(0x29F18, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStructMethod", 
    $sig.make(0x29EF1, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteText", 
    $sig.make(0x29F07, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteUnknownNode", 
    $sig.make(0x29EDA, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopEnd", 
    $sig.make(0x29F21, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopEndCheck", 
    $sig.make(0x29F23, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopStartCheck", 
    $sig.make(0x29F22, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteWhileNotLoopStart", 
    $sig.make(0x29F20, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlNodeEqual", 
    $sig.make(0x29EF8, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.Field({Static:false, Public:false}, "idNames", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "enums", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "createMethods", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "nextCreateMethodNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "nextIdNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "nextWhileLoopIndex", $.Int32); 
  $.Property({Static:false, Public:false}, "Enums", $asm06.TypeRef("System.Collections.Hashtable"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReaderCodeGen/CreateCollectionInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29FAF, null, [$.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x29FAD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
    $sig.make(0x29FAE, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "td", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")); 
  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "TypeDesc", $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReaderCodeGen/Member", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F67, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F68, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F69, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
        $.String, $.String, 
        $.Int32, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F6A, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
        $.String, $.String, 
        $.Int32, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F6B, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
        $.String, $.Int32, 
        $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29F6C, null, [
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
        $.String, $.String, 
        $.Int32, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ArrayName", 
    $sig.make(0x29F50, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ArraySource", 
    $sig.make(0x29F52, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecifiedSource", 
    $sig.make(0x29F62, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChoiceArrayName", 
    $sig.make(0x29F65, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChoiceArraySource", 
    $sig.make(0x29F66, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChoiceSource", 
    $sig.make(0x29F64, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FixupIndex", 
    $sig.make(0x29F5E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsArrayLike", 
    $sig.make(0x29F56, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
    $sig.make(0x29F55, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
    $sig.make(0x29F5A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
    $sig.make(0x29F4D, $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MultiRef", 
    $sig.make(0x29F5C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParamsReadSource", 
    $sig.make(0x29F60, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Source", 
    $sig.make(0x29F4E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CheckSpecifiedSource", 
    $sig.make(0x29F63, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_FixupIndex", 
    $sig.make(0x29F5F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
    $sig.make(0x29F5B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MultiRef", 
    $sig.make(0x29F5D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ParamsReadSource", 
    $sig.make(0x29F61, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "source", $.String); 
  $.Field({Static:false, Public:false}, "arrayName", $.String); 
  $.Field({Static:false, Public:false}, "arraySource", $.String); 
  $.Field({Static:false, Public:false}, "choiceArrayName", $.String); 
  $.Field({Static:false, Public:false}, "choiceSource", $.String); 
  $.Field({Static:false, Public:false}, "choiceArraySource", $.String); 
  $.Field({Static:false, Public:false}, "mapping", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping")); 
  $.Field({Static:false, Public:false}, "isArray", $.Boolean); 
  $.Field({Static:false, Public:false}, "isList", $.Boolean); 
  $.Field({Static:false, Public:false}, "isNullable", $.Boolean); 
  $.Field({Static:false, Public:false}, "multiRef", $.Boolean); 
  $.Field({Static:false, Public:false}, "fixupIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "paramsReadSource", $.String); 
  $.Field({Static:false, Public:false}, "checkSpecifiedSource", $.String); 
  $.Property({Static:false, Public:false}, "Mapping", $asm0E.TypeRef("System.Xml.Serialization.MemberMapping"));

  $.Property({Static:false, Public:false}, "Source", $.String);

  $.Property({Static:false, Public:false}, "ArrayName", $.String);

  $.Property({Static:false, Public:false}, "ArraySource", $.String);

  $.Property({Static:false, Public:false}, "IsList", $.Boolean);

  $.Property({Static:false, Public:false}, "IsArrayLike", $.Boolean);

  $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

  $.Property({Static:false, Public:false}, "MultiRef", $.Boolean);

  $.Property({Static:false, Public:false}, "FixupIndex", $.Int32);

  $.Property({Static:false, Public:false}, "ParamsReadSource", $.String);

  $.Property({Static:false, Public:false}, "CheckSpecifiedSource", $.String);

  $.Property({Static:false, Public:false}, "ChoiceSource", $.String);

  $.Property({Static:false, Public:false}, "ChoiceArrayName", $.String);

  $.Property({Static:false, Public:false}, "ChoiceArraySource", $.String);

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlSerializationGeneratedCode"), "System.Xml.Serialization.XmlSerializationWriter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29E83, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddWriteCallback", 
    $sig.make(0x29E72, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriteCallback")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateChoiceIdentifierValueException", 
    $sig.make(0x29E49, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidAnyTypeException", 
    $sig.make(0x29E4B, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidAnyTypeException", 
    $sig.make(0x29E4C, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidChoiceIdentifierValueException", 
    $sig.make(0x29E48, $asm06.TypeRef("System.Exception"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInvalidEnumValueException", 
    $sig.make(0x29E4A, $asm06.TypeRef("System.Exception"), [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateMismatchChoiceException", 
    $sig.make(0x29E46, $asm06.TypeRef("System.Exception"), [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateUnknownAnyElementException", 
    $sig.make(0x29E47, $asm06.TypeRef("System.Exception"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
    $sig.make(0x29E44, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
    $sig.make(0x29E45, $asm06.TypeRef("System.Exception"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromByteArrayBase64", 
    $sig.make(0x29DF4, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromByteArrayHex", 
    $sig.make(0x29DF8, $.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromChar", 
    $sig.make(0x29E0A, $.String, [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromDate", 
    $sig.make(0x29DFD, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
    $sig.make(0x29DFB, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
    $sig.make(0x29E0B, $.String, [
        $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
        $jsilcore.TypeRef("System.Array", [$.Int64])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
    $sig.make(0x29E0E, $.String, [
        $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
        $jsilcore.TypeRef("System.Array", [$.Int64]), $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromTime", 
    $sig.make(0x29E06, $.String, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlName", 
    $sig.make(0x29E10, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlNCName", 
    $sig.make(0x29E12, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlNmToken", 
    $sig.make(0x29E13, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromXmlNmTokens", 
    $sig.make(0x29E15, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FromXmlQualifiedName", 
    $sig.make(0x29E25, $.String, [$asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FromXmlQualifiedName", 
    $sig.make(0x29E26, $.String, [$asm0E.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EscapeName", 
    $sig.make(0x29DE4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
    $sig.make(0x29DEE, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
    $sig.make(0x29DE6, $asm0E.TypeRef("System.Xml.XmlWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetId", 
    $sig.make(0x29E50, $.String, [$.Object, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveTypeName", 
    $sig.make(0x29E19, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveTypeName", 
    $sig.make(0x29E1A, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveTypeNameInternal", 
    $sig.make(0x29E21, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
    $sig.make(0x29E24, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTypeEntry", 
    $sig.make(0x29E7D, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriter/TypeEntry"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x29DF1, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), 
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TempAssembly")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitCallbacks", 
    $sig.make(0x29E7E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsIdDefined", 
    $sig.make(0x29E4F, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ListUsedPrefixes", 
    $sig.make(0x29E2E, $asm06.TypeRef("System.Collections.Hashtable"), [$asm06.TypeRef("System.Collections.Hashtable"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextPrefix", 
    $sig.make(0x29E82, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ResolveDynamicAssembly", 
    $sig.make(0x29DF5, $asm06.TypeRef("System.Reflection.Assembly"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_EscapeName", 
    $sig.make(0x29DE5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
    $sig.make(0x29DF0, null, [$asm06.TypeRef("System.Collections.ArrayList")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Writer", 
    $sig.make(0x29DE8, null, [$asm0E.TypeRef("System.Xml.XmlWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TopLevelElement", 
    $sig.make(0x29E80, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
    $sig.make(0x29E73, null, [
        $.String, $.String, 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x29E55, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x29E56, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x29E57, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x29E58, null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x29E59, null, [
        $.String, $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
    $sig.make(0x29E43, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementEncoded", 
    $sig.make(0x29E41, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementLiteral", 
    $sig.make(0x29E42, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.String, 
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
    $sig.make(0x29E6A, null, [$.String, $asm0E.TypeRef("System.Xml.XmlQualifiedName")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
    $sig.make(0x29E6C, null, [
        $.String, $asm0E.TypeRef("System.Xml.XmlQualifiedName"), 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
    $sig.make(0x29E6E, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
    $sig.make(0x29E70, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
    $sig.make(0x29E5D, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
    $sig.make(0x29E5E, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
    $sig.make(0x29E5F, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
    $sig.make(0x29E60, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E61, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E62, null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E63, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E64, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E65, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E66, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E67, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
    $sig.make(0x29E68, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
    $sig.make(0x29E33, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
    $sig.make(0x29E34, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x29E35, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x29E36, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteId", 
    $sig.make(0x29E51, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteId", 
    $sig.make(0x29E52, null, [$.Object, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclarations", 
    $sig.make(0x29E81, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableQualifiedNameEncoded", 
    $sig.make(0x29E3F, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName"), $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableQualifiedNameLiteral", 
    $sig.make(0x29E40, null, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncoded", 
    $sig.make(0x29E39, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncodedRaw", 
    $sig.make(0x29E3B, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncodedRaw", 
    $sig.make(0x29E3C, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0E.TypeRef("System.Xml.XmlQualifiedName")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteral", 
    $sig.make(0x29E3A, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteralRaw", 
    $sig.make(0x29E3D, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteralRaw", 
    $sig.make(0x29E3E, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullTagEncoded", 
    $sig.make(0x29E2F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullTagEncoded", 
    $sig.make(0x29E30, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullTagLiteral", 
    $sig.make(0x29E31, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullTagLiteral", 
    $sig.make(0x29E32, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
    $sig.make(0x29E75, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
    $sig.make(0x29E77, null, [
        $.String, $.String, 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
    $sig.make(0x29E79, null, [
        $.String, $.String, 
        $.Object, $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
    $sig.make(0x29E7A, null, [
        $.String, $.String, 
        $.Object, $asm06.TypeRef("System.Type"), 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElement", 
    $sig.make(0x29E7B, null, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElement", 
    $sig.make(0x29E7C, null, [
        $.String, $.String, 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElements", 
    $sig.make(0x29E7F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReferencingElement", 
    $sig.make(0x29E4D, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReferencingElement", 
    $sig.make(0x29E4E, null, [
        $.String, $.String, 
        $.Object, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteRpcResult", 
    $sig.make(0x29E69, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSerializable", 
    $sig.make(0x29E37, null, [
        $asm0E.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteSerializable", 
    $sig.make(0x29E38, null, [
        $asm0E.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.String, 
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartDocument", 
    $sig.make(0x29E5C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29E27, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29E29, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29E2A, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29E2B, null, [
        $.String, $.String, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29E2C, null, [
        $.String, $.String, 
        $.Object, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29E2D, null, [
        $.String, $.String, 
        $.Object, $.Boolean, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTypedPrimitive", 
    $sig.make(0x29E23, null, [
        $.String, $.String, 
        $.Object, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
    $sig.make(0x29E5A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
    $sig.make(0x29E5B, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlAttribute", 
    $sig.make(0x29E53, null, [$asm0E.TypeRef("System.Xml.XmlNode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXmlAttribute", 
    $sig.make(0x29E54, null, [$asm0E.TypeRef("System.Xml.XmlNode"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteXsiType", 
    $sig.make(0x29E17, null, [$.String, $.String], [])
  );

  $.Field({Static:false, Public:false}, "w", $asm0E.TypeRef("System.Xml.XmlWriter")); 
  $.Field({Static:false, Public:false}, "namespaces", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")); 
  $.Field({Static:false, Public:false}, "tempNamespacePrefix", $.Int32); 
  $.Field({Static:false, Public:false}, "usedPrefixes", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "references", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "idBase", $.String); 
  $.Field({Static:false, Public:false}, "nextId", $.Int32); 
  $.Field({Static:false, Public:false}, "typeEntries", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "referencesToWrite", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "objectsInUse", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "aliasBase", $.String); 
  $.Field({Static:false, Public:false}, "soap12", $.Boolean); 
  $.Field({Static:false, Public:false}, "escapeName", $.Boolean); 
  $.Property({Static:false, Public:false}, "EscapeName", $.Boolean);

  $.Property({Static:false, Public:false}, "Writer", $asm0E.TypeRef("System.Xml.XmlWriter"));

  $.Property({Static:false, Public:false}, "Namespaces", $asm06.TypeRef("System.Collections.ArrayList"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationWriter/TypeEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A18E, null, [], [])
  );

  $.Field({Static:false, Public:false}, "callback", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriteCallback")); 
  $.Field({Static:false, Public:false}, "typeNs", $.String); 
  $.Field({Static:false, Public:false}, "typeName", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationWriteCallback", true, []);

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlSerializationCodeGen"), "System.Xml.Serialization.XmlSerializationWriterCodeGen", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29FCF, null, [
        $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CanOptimizeWriteListSequence", 
    $sig.make(0x2A002, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.TypeDesc")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindChoiceEnumValue", 
    $sig.make(0x2A01F, $.String, [
        $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), $asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindXmlnsIndex", 
    $sig.make(0x2A017, $.Int32, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateBegin", 
    $sig.make(0x29FD0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateElement", 
    $sig.make(0x29FD3, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
    $sig.make(0x29FD2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateInitCallbacksMethod", 
    $sig.make(0x29FD8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateMembersElement", 
    $sig.make(0x29FFA, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateMethod", 
    $sig.make(0x29FD1, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateTypeElement", 
    $sig.make(0x29FFB, $.String, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NextMethodName", 
    $sig.make(0x29FFD, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
    $sig.make(0x2A008, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArrayItems", 
    $sig.make(0x2A00A, null, [
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
    $sig.make(0x2A01A, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArrayTypeCompare", 
    $sig.make(0x2A01D, null, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
    $sig.make(0x2A004, null, [
        $.String, $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCheckDefault", 
    $sig.make(0x2A012, null, [
        $.String, $.Object, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteChoiceTypeCheck", 
    $sig.make(0x2A013, null, [
        $.String, $.String, 
        $.Boolean, $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteDerivedTypes", 
    $sig.make(0x29FFF, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
    $sig.make(0x2A010, null, [
        $.String, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElementCall", 
    $sig.make(0x2A011, null, [
        $.String, $asm06.TypeRef("System.Type"), 
        $.String, $.String, 
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElements", 
    $sig.make(0x2A00D, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
        $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), 
        $.String, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteElements", 
    $sig.make(0x2A00E, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $.String, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
    $sig.make(0x29FF8, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEncodedNullTag", 
    $sig.make(0x29FF1, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x29FED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
    $sig.make(0x29FEF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumAndArrayTypes", 
    $sig.make(0x2A000, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumCase", 
    $sig.make(0x2A01E, null, [
        $.String, $asm0E.TypeRef("System.Xml.Serialization.ConstantMapping"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumMethod", 
    $sig.make(0x29FFE, null, [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumValue", 
    $sig.make(0x29FDB, null, [$asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteExtraMembers", 
    $sig.make(0x2A018, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteInstanceOf", 
    $sig.make(0x2A01C, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLiteralNullTag", 
    $sig.make(0x29FF3, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
    $sig.make(0x2A019, null, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMember", 
    $sig.make(0x2A003, null, [
        $.String, $asm0E.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMember", 
    $sig.make(0x2A006, null, [
        $.String, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm0E.TypeRef("System.Xml.Serialization.TextAccessor"), 
        $asm0E.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNamespaces", 
    $sig.make(0x2A016, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteNullCheckBegin", 
    $sig.make(0x2A014, null, [$.String, $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePrimitive", 
    $sig.make(0x29FDF, null, [
        $.String, $.String, 
        $.String, $.Object, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), 
        $.Boolean, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
    $sig.make(0x29FDD, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedNameElement", 
    $sig.make(0x29FDA, null, [
        $.String, $.String, 
        $.Object, $.String, 
        $.Boolean, $.Boolean, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeMapping")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
    $sig.make(0x29FE8, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteStructMethod", 
    $sig.make(0x2A001, null, [$asm0E.TypeRef("System.Xml.Serialization.StructMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTag", 
    $sig.make(0x29FE1, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTag", 
    $sig.make(0x29FE2, null, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteText", 
    $sig.make(0x2A00F, null, [$.String, $asm0E.TypeRef("System.Xml.Serialization.TextAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTypeCompare", 
    $sig.make(0x2A01B, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
    $sig.make(0x2A015, null, [$.Object], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.DynamicAssemblies", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29D8A, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Add", 
    $sig.make(0x29D8D, null, [$asm06.TypeRef("System.Reflection.Assembly")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Get", 
    $sig.make(0x29D8E, $asm06.TypeRef("System.Reflection.Assembly"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
    $sig.make(0x29D89, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UnrestrictedFileIOPermission", 
    $sig.make(0x29D88, $asm06.TypeRef("System.Security.Permissions.FileIOPermission"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetName", 
    $sig.make(0x29D8F, $.String, [$asm06.TypeRef("System.Reflection.Assembly")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsTypeDynamic", 
    $sig.make(0x29D8B, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsTypeDynamic", 
    $sig.make(0x29D8C, $.Boolean, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.Field({Static:true , Public:false}, "assembliesInConfig", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:true , Public:false}, "nameToAssemblyMap", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "assemblyToNameMap", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "tableIsTypeDynamic", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "fileIOPermission", $asm06.TypeRef("System.Security.Permissions.FileIOPermission")); 
  $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
  $.Property({Static:true , Public:false}, "UnrestrictedFileIOPermission", $asm06.TypeRef("System.Security.Permissions.FileIOPermission"));

  $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.ReflectionAwareCodeGen", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29B70, null, [$asm0E.TypeRef("System.Xml.Serialization.IndentedWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GenerateVariableName", 
    $sig.make(0x29B7A, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetReflectionVariable", 
    $sig.make(0x29B7B, $.String, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForArrayMember", 
    $sig.make(0x29B86, $.String, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
    $sig.make(0x29B8A, $.String, [
        $.String, $.Boolean, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
    $sig.make(0x29B8C, $.String, [
        $.String, $.Boolean, 
        $.Boolean, $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
    $sig.make(0x29B8E, $.String, [
        $.String, $.String, 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumCompare", 
    $sig.make(0x29B7D, $.String, [
        $asm0E.TypeRef("System.Xml.Serialization.EnumMapping"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumLongValue", 
    $sig.make(0x29B7F, $.String, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumMember", 
    $sig.make(0x29B84, $.String, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForMember", 
    $sig.make(0x29B82, $.String, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForMethod", 
    $sig.make(0x29B88, $.String, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForMethodInvoke", 
    $sig.make(0x29B7C, $.String, [
        $.String, $.String, 
        $.String, $.Boolean, 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStringForTypeof", 
    $sig.make(0x29B81, $.String, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitTheFirstTime", 
    $sig.make(0x29B73, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
    $sig.make(0x29B95, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteArrayTypeCompare", 
    $sig.make(0x29B98, null, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteAssemblyInfo", 
    $sig.make(0x29B76, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCollectionInfo", 
    $sig.make(0x29B75, null, [
        $.String, $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCreateInstance", 
    $sig.make(0x29B91, null, [
        $.String, $.String, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteDefaultIndexerInit", 
    $sig.make(0x29B79, $.String, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteEnumCase", 
    $sig.make(0x29B96, null, [
        $.String, $asm0E.TypeRef("System.Xml.Serialization.ConstantMapping"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteInstanceOf", 
    $sig.make(0x29B93, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
    $sig.make(0x29B90, null, [
        $.String, $.String, 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMappingInfo", 
    $sig.make(0x29B74, null, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), $.String, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMemberInfo", 
    $sig.make(0x29B77, $.String, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteMethodInfo", 
    $sig.make(0x29B78, $.String, [
        $.String, $.String, 
        $.String, $.Boolean, 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteQuotedCSharpString", 
    $sig.make(0x29B99, null, [$asm0E.TypeRef("System.Xml.Serialization.IndentedWriter"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteQuotedCSharpString", 
    $sig.make(0x29B9A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteReflectionInit", 
    $sig.make(0x29B71, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTypeCompare", 
    $sig.make(0x29B97, null, [
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTypeInfo", 
    $sig.make(0x29B72, $.String, [
        $asm0E.TypeRef("System.Xml.Serialization.TypeScope"), $asm0E.TypeRef("System.Xml.Serialization.TypeDesc"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.Constant({Static:true , Public:false}, "hexDigits", "0123456789ABCDEF"); 
  $.Constant({Static:true , Public:false}, "arrayMemberKey", "0"); 
  $.Field({Static:false, Public:false}, "reflectionVariables", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "nextReflectionVariableNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "writer", $asm0E.TypeRef("System.Xml.Serialization.IndentedWriter")); 
  $.Field({Static:true , Public:false}, "helperClassesForUseReflection", $.String, "\r\n    sealed class XSFieldInfo {{\r\n       {3} fieldInfo;\r\n        public XSFieldInfo({2} t, {1} memberName){{\r\n            fieldInfo = t.GetField(memberName);\r\n        }}\r\n        public {0} this[{0} o] {{\r\n            get {{\r\n                return fieldInfo.GetValue(o);\r\n            }}\r\n            set {{\r\n                fieldInfo.SetValue(o, value);\r\n            }}\r\n        }}\r\n\r\n    }}\r\n    sealed class XSPropInfo {{\r\n        {4} propInfo;\r\n        public XSPropInfo({2} t, {1} memberName){{\r\n            propInfo = t.GetProperty(memberName);\r\n        }}\r\n        public {0} this[{0} o] {{\r\n            get {{\r\n                return propInfo.GetValue(o, null);\r\n            }}\r\n            set {{\r\n                propInfo.SetValue(o, value, null);\r\n            }}\r\n        }}\r\n    }}\r\n    sealed class XSArrayInfo {{\r\n        {4} propInfo;\r\n        public XSArrayInfo({4} propInfo){{\r\n            this.propInfo = propInfo;\r\n        }}\r\n        public {0} this[{0} a, int i] {{\r\n            get {{\r\n                return propInfo.GetValue(a, new {0}[]{{i}});\r\n            }}\r\n            set {{\r\n                propInfo.SetValue(a, value, new {0}[]{{i}});\r\n            }}\r\n        }}\r\n    }}\r\n"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlSerializerAssemblyAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DFE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29DFF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29E01, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
    $sig.make(0x29DF6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CodeBase", 
    $sig.make(0x29DF2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
    $sig.make(0x29DF9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CodeBase", 
    $sig.make(0x29DF3, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "assemblyName", $.String); 
  $.Field({Static:false, Public:false}, "codeBase", $.String); 
  $.Property({Static:false, Public:true }, "CodeBase", $.String);

  $.Property({Static:false, Public:true }, "AssemblyName", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Xml.Serialization.XmlDeserializationEvents", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownAttribute", 
    $sig.make(0x29A77, $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownElement", 
    $sig.make(0x29A79, $asm0E.TypeRef("System.Xml.Serialization.XmlElementEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownNode", 
    $sig.make(0x29A75, $asm0E.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OnUnreferencedObject", 
    $sig.make(0x29A7B, $asm0E.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownAttribute", 
    $sig.make(0x29A78, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownElement", 
    $sig.make(0x29A7A, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownNode", 
    $sig.make(0x29A76, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OnUnreferencedObject", 
    $sig.make(0x29A7C, null, [$asm0E.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")], [])
  );

  $.Field({Static:false, Public:false}, "onUnknownNode", $asm0E.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")); 
  $.Field({Static:false, Public:false}, "onUnknownAttribute", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")); 
  $.Field({Static:false, Public:false}, "onUnknownElement", $asm0E.TypeRef("System.Xml.Serialization.XmlElementEventHandler")); 
  $.Field({Static:false, Public:false}, "onUnreferencedObject", $asm0E.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")); 
  $.Field({Static:false, Public:false}, "sender", $.Object); 
  $.Property({Static:false, Public:true }, "OnUnknownNode", $asm0E.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"));

  $.Property({Static:false, Public:true }, "OnUnknownAttribute", $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"));

  $.Property({Static:false, Public:true }, "OnUnknownElement", $asm0E.TypeRef("System.Xml.Serialization.XmlElementEventHandler"));

  $.Property({Static:false, Public:true }, "OnUnreferencedObject", $asm0E.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerImplementation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29A5F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanSerialize", 
    $sig.make(0x29A57, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
    $sig.make(0x29A51, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadMethods", 
    $sig.make(0x29A53, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypedSerializers", 
    $sig.make(0x29A55, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WriteMethods", 
    $sig.make(0x29A54, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
    $sig.make(0x29A52, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSerializer", 
    $sig.make(0x29A5D, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm06.TypeRef("System.Type")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Reader", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader"));

  $.Property({Static:false, Public:true , Virtual:true }, "Writer", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriter"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReadMethods", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:true , Virtual:true }, "WriteMethods", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypedSerializers", $asm06.TypeRef("System.Collections.Hashtable"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializer", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29B32, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B33, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B34, null, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B35, null, [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B36, null, [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B37, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B38, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B39, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B3A, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29B3B, null, [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String, $.String, 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This method is obsolete and will be removed in a future release of the .NET Framework. Please use a XmlSerializer constructor overload which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information."]; });

  $.ExternalMethod({Static:false, Public:true }, "add_UnknownAttribute", 
    $sig.make(0x29B2C, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_UnknownElement", 
    $sig.make(0x29B2E, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_UnknownNode", 
    $sig.make(0x29B2A, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_UnreferencedObject", 
    $sig.make(0x29B30, null, [$asm0E.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanDeserialize", 
    $sig.make(0x29B4E, $.Boolean, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
    $sig.make(0x29B58, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWriter", 
    $sig.make(0x29B5A, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DemandForUserLocation", 
    $sig.make(0x29B3C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
    $sig.make(0x29B48, $.Object, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
    $sig.make(0x29B49, $.Object, [$asm06.TypeRef("System.IO.TextReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
    $sig.make(0x29B4A, $.Object, [$asm0E.TypeRef("System.Xml.XmlReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
    $sig.make(0x29B4B, $.Object, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
    $sig.make(0x29B4C, $.Object, [$asm0E.TypeRef("System.Xml.XmlReader"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
    $sig.make(0x29B4D, $.Object, [
        $asm0E.TypeRef("System.Xml.XmlReader"), $.String, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Deserialize", 
    $sig.make(0x29B59, $.Object, [$asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeserializePrimitive", 
    $sig.make(0x29B5F, $.Object, [$asm0E.TypeRef("System.Xml.XmlReader"), $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
    $sig.make(0x29B4F, $jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
    $sig.make(0x29B50, $jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
    $sig.make(0x29B52, $jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm06.TypeRef("System.Security.Policy.Evidence")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of FromMappings which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information."]; });

  $.ExternalMethod({Static:true , Public:true }, "FromTypes", 
    $sig.make(0x29B55, $jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GenerateSerializer", 
    $sig.make(0x29B53, $asm06.TypeRef("System.Reflection.Assembly"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GenerateSerializer", 
    $sig.make(0x29B54, $asm06.TypeRef("System.Reflection.Assembly"), [
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), 
        $asm07.TypeRef("System.CodeDom.Compiler.CompilerParameters")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
    $sig.make(0x29B3D, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly"), [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
    $sig.make(0x29B3E, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly"), [
        $asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), $asm06.TypeRef("System.Type"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
    $sig.make(0x29B3F, $asm0E.TypeRef("System.Xml.Serialization.TempAssembly"), [
        $asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), $asm06.TypeRef("System.Type"), 
        $.String, $.String, 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DefaultNamespaces", 
    $sig.make(0x29B29, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetKnownMapping", 
    $sig.make(0x29B5D, $asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSerializersFromCache", 
    $sig.make(0x29B51, $jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetXmlSerializerAssemblyName", 
    $sig.make(0x29B56, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetXmlSerializerAssemblyName", 
    $sig.make(0x29B57, $.String, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_UnknownAttribute", 
    $sig.make(0x29B2D, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_UnknownElement", 
    $sig.make(0x29B2F, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlElementEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_UnknownNode", 
    $sig.make(0x29B2B, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_UnreferencedObject", 
    $sig.make(0x29B31, null, [$asm0E.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B40, null, [$asm06.TypeRef("System.IO.TextWriter"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B41, null, [
        $asm06.TypeRef("System.IO.TextWriter"), $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B42, null, [$asm06.TypeRef("System.IO.Stream"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B43, null, [
        $asm06.TypeRef("System.IO.Stream"), $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B44, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B45, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B46, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Serialize", 
    $sig.make(0x29B47, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Serialize", 
    $sig.make(0x29B5B, null, [$.Object, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SerializePrimitive", 
    $sig.make(0x29B5E, null, [
        $asm0E.TypeRef("System.Xml.XmlWriter"), $.Object, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetTempAssembly", 
    $sig.make(0x29B5C, null, [$asm0E.TypeRef("System.Xml.Serialization.TempAssembly"), $asm0E.TypeRef("System.Xml.Serialization.XmlMapping")], [])
  );

  $.Field({Static:false, Public:false}, "tempAssembly", $asm0E.TypeRef("System.Xml.Serialization.TempAssembly")); 
  $.Field({Static:false, Public:false}, "typedSerializer", $.Boolean); 
  $.Field({Static:false, Public:false}, "primitiveType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "mapping", $asm0E.TypeRef("System.Xml.Serialization.XmlMapping")); 
  $.Field({Static:false, Public:false}, "events", $asm0E.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")); 
  $.Field({Static:true , Public:false}, "cache", $asm0E.TypeRef("System.Xml.Serialization.TempAssemblyCache")); 
  $.Field({Static:true , Public:false}, "defaultNamespaces", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")); 
  $.Field({Static:true , Public:false}, "xmlSerializerTable", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:true , Public:false}, "DefaultNamespaces", $asm0E.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializer/XmlSerializerMappingKey", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A916, null, [$asm0E.TypeRef("System.Xml.Serialization.XmlMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x2A917, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x2A918, $.Int32, [], [])
  );

  $.Field({Static:false, Public:true }, "Mapping", $asm0E.TypeRef("System.Xml.Serialization.XmlMapping")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerFactory", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A02F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A026, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A027, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A028, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A029, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A02A, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm0E.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A02B, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A02C, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A02D, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
    $sig.make(0x2A02E, $asm0E.TypeRef("System.Xml.Serialization.XmlSerializer"), [
        $asm06.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $asm0E.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
        $.String, $.String, 
        $asm06.TypeRef("System.Security.Policy.Evidence")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateSerializer which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information."]; });

  $.Field({Static:true , Public:false}, "cache", $asm0E.TypeRef("System.Xml.Serialization.TempAssemblyCache")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerNamespaces", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB885, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB886, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB887, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xB888, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddInternal", 
    $sig.make(0xB889, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB881, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
    $sig.make(0xB882, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
    $sig.make(0xB883, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
    $sig.make(0xB88B, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
    $sig.make(0xB884, null, [$asm06.TypeRef("System.Collections.Hashtable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToArray", 
    $sig.make(0xB88A, $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
  );

  $.Field({Static:false, Public:false}, "namespaces", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false}, "NamespaceList", $asm06.TypeRef("System.Collections.ArrayList"));

  $.Property({Static:false, Public:false}, "Namespaces", $asm06.TypeRef("System.Collections.Hashtable"));

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlSerializerVersionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A070, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A072, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x2A06A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentAssemblyId", 
    $sig.make(0x2A065, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x2A06D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x2A068, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x2A06B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ParentAssemblyId", 
    $sig.make(0x2A067, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x2A06E, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Version", 
    $sig.make(0x2A069, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "mvid", $.String); 
  $.Field({Static:false, Public:false}, "serializerVersion", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "ParentAssemblyId", $.String);

  $.Property({Static:false, Public:true }, "Version", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Assembly]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlTextAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29AC6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29AC7, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
    $sig.make(0x29AC4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x29AC2, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
    $sig.make(0x29AC5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x29AC3, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false}, "dataType", $.String); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "DataType", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlTypeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29A8B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29A8C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AnonymousType", 
    $sig.make(0x29A81, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IncludeInSchema", 
    $sig.make(0x29A85, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
    $sig.make(0x29A89, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
    $sig.make(0x29A87, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AnonymousType", 
    $sig.make(0x29A83, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IncludeInSchema", 
    $sig.make(0x29A86, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
    $sig.make(0x29A8A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
    $sig.make(0x29A88, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean); 
  $.Field({Static:false, Public:false}, "anonymousType", $.Boolean); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "typeName", $.String); 
  $.Property({Static:false, Public:true }, "AnonymousType", $.Boolean);

  $.Property({Static:false, Public:true }, "IncludeInSchema", $.Boolean);

  $.Property({Static:false, Public:true }, "TypeName", $.String);

  $.Property({Static:false, Public:true }, "Namespace", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlMapping"), "System.Xml.Serialization.XmlTypeMapping", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2975E, null, [$asm0E.TypeRef("System.Xml.Serialization.TypeScope"), $asm0E.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
    $sig.make(0x29759, $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeFullName", 
    $sig.make(0x2975B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
    $sig.make(0x2975A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XsdTypeName", 
    $sig.make(0x2975C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XsdTypeNamespace", 
    $sig.make(0x2975D, $.String, [], [])
  );

  $.Property({Static:false, Public:false}, "Mapping", $asm0E.TypeRef("System.Xml.Serialization.TypeMapping"));

  $.Property({Static:false, Public:true }, "TypeName", $.String);

  $.Property({Static:false, Public:true }, "TypeFullName", $.String);

  $.Property({Static:false, Public:true }, "XsdTypeName", $.String);

  $.Property({Static:false, Public:true }, "XsdTypeNamespace", $.String);

});

JSIL.MakeDelegate("System.Xml.Serialization.XmlAttributeEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.Serialization.XmlAttributeEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A0A4, null, [
        $asm0E.TypeRef("System.Xml.XmlAttribute"), $.Int32, 
        $.Int32, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attr", 
    $sig.make(0x2A0A0, $asm0E.TypeRef("System.Xml.XmlAttribute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ExpectedAttributes", 
    $sig.make(0x2A0A3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x2A0A1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x2A0A2, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
    $sig.make(0x2A09F, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "o", $.Object); 
  $.Field({Static:false, Public:false}, "attr", $asm0E.TypeRef("System.Xml.XmlAttribute")); 
  $.Field({Static:false, Public:false}, "qnames", $.String); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

  $.Property({Static:false, Public:true }, "Attr", $asm0E.TypeRef("System.Xml.XmlAttribute"));

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "ExpectedAttributes", $.String);

});

JSIL.MakeDelegate("System.Xml.Serialization.XmlElementEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.Serialization.XmlElementEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2A121, null, [
        $asm0E.TypeRef("System.Xml.XmlElement"), $.Int32, 
        $.Int32, $.Object, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Element", 
    $sig.make(0x2A119, $asm0E.TypeRef("System.Xml.XmlElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ExpectedElements", 
    $sig.make(0x2A120, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x2A11A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x2A11E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
    $sig.make(0x2A118, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "o", $.Object); 
  $.Field({Static:false, Public:false}, "elem", $asm0E.TypeRef("System.Xml.XmlElement")); 
  $.Field({Static:false, Public:false}, "qnames", $.String); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

  $.Property({Static:false, Public:true }, "Element", $asm0E.TypeRef("System.Xml.XmlElement"));

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

  $.Property({Static:false, Public:true }, "ExpectedElements", $.String);

});

JSIL.MakeDelegate("System.Xml.Serialization.XmlNodeEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.Serialization.XmlNodeEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x29FC8, null, [
        $asm0E.TypeRef("System.Xml.XmlNode"), $.Int32, 
        $.Int32, $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
    $sig.make(0x29FC6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
    $sig.make(0x29FC7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
    $sig.make(0x29FC3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x29FC2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
    $sig.make(0x29FC4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x29FC1, $asm0E.TypeRef("System.Xml.XmlNodeType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
    $sig.make(0x29FC0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Text", 
    $sig.make(0x29FC5, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "o", $.Object); 
  $.Field({Static:false, Public:false}, "xmlNode", $asm0E.TypeRef("System.Xml.XmlNode")); 
  $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
  $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

  $.Property({Static:false, Public:true }, "NodeType", $asm0E.TypeRef("System.Xml.XmlNodeType"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "LocalName", $.String);

  $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

  $.Property({Static:false, Public:true }, "Text", $.String);

  $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

  $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

});

JSIL.MakeDelegate("System.Xml.Serialization.UnreferencedObjectEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Xml.Serialization.UnreferencedObjectEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A039, null, [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnreferencedId", 
    $sig.make(0x2A038, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnreferencedObject", 
    $sig.make(0x2A037, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "o", $.Object); 
  $.Field({Static:false, Public:false}, "id", $.String); 
  $.Property({Static:false, Public:true }, "UnreferencedObject", $.Object);

  $.Property({Static:false, Public:true }, "UnreferencedId", $.String);

});

JSIL.DeclareNamespace("System.Xml.Serialization.Advanced");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Advanced.SchemaImporterExtension", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x292B4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportAnyElement", 
    $sig.make(0x292AF, $.String, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
        $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), $asm07.TypeRef("System.CodeDom.CodeNamespace"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportDefaultValue", 
    $sig.make(0x292B2, $asm07.TypeRef("System.CodeDom.CodeExpression"), [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
    $sig.make(0x292AC, $.String, [
        $.String, $.String, 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), 
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
        $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
    $sig.make(0x292AE, $.String, [
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
        $asm0E.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm0E.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
        $asm07.TypeRef("System.CodeDom.CodeCompileUnit"), $asm07.TypeRef("System.CodeDom.CodeNamespace"), 
        $asm0E.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm07.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29541, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x29536, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x29537, $.Int32, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x2953B, $.Int32, [$.String, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x29539, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clone", 
    $sig.make(0x2953A, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x2953E, $.Boolean, [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x29540, null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x29534, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Names", 
    $sig.make(0x29533, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x2953D, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x2953C, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x29538, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x2953F, null, [$asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x29535, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
  );

  $.Field({Static:false, Public:false}, "exNames", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:false}, "Names", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Advanced.MappedTypeDesc", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x2918F, null, [
        $.String, $.String, 
        $.String, $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType"), 
        $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), 
        $asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.Collections.Specialized.StringCollection")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExportTypeDefinition", 
    $sig.make(0x29190, $asm07.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm07.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.CodeDom.CodeCompileUnit")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Extension", 
    $sig.make(0x2918C, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Name", 
    $sig.make(0x2918D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ReferencedAssemblies", 
    $sig.make(0x2918E, $asm07.TypeRef("System.Collections.Specialized.StringCollection"), [], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "ns", $.String); 
  $.Field({Static:false, Public:false}, "xsdType", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaType")); 
  $.Field({Static:false, Public:false}, "context", $asm0E.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
  $.Field({Static:false, Public:false}, "clrType", $.String); 
  $.Field({Static:false, Public:false}, "extension", $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")); 
  $.Field({Static:false, Public:false}, "code", $asm07.TypeRef("System.CodeDom.CodeNamespace")); 
  $.Field({Static:false, Public:false}, "exported", $.Boolean); 
  $.Field({Static:false, Public:false}, "references", $asm07.TypeRef("System.Collections.Specialized.StringCollection")); 
  $.Property({Static:false, Public:false}, "Extension", $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

  $.Property({Static:false, Public:false}, "Name", $.String);

  $.Property({Static:false, Public:false}, "ReferencedAssemblies", $asm07.TypeRef("System.Collections.Specialized.StringCollection"));

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), "System.Xml.Serialization.XmlSerializationPrimitiveWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A08E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitCallbacks", 
    $sig.make(0x2A08D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_base64Binary", 
    $sig.make(0x2A089, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_boolean", 
    $sig.make(0x2A07D, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_byte", 
    $sig.make(0x2A085, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_char", 
    $sig.make(0x2A08B, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_dateTime", 
    $sig.make(0x2A083, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_decimal", 
    $sig.make(0x2A082, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_double", 
    $sig.make(0x2A081, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_float", 
    $sig.make(0x2A080, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_guid", 
    $sig.make(0x2A08A, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_int", 
    $sig.make(0x2A07C, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_long", 
    $sig.make(0x2A07F, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_QName", 
    $sig.make(0x2A08C, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_short", 
    $sig.make(0x2A07E, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_string", 
    $sig.make(0x2A07B, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_unsignedByte", 
    $sig.make(0x2A084, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_unsignedInt", 
    $sig.make(0x2A087, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_unsignedLong", 
    $sig.make(0x2A088, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write_unsignedShort", 
    $sig.make(0x2A086, null, [$.Object], [])
  );

});

JSIL.MakeClass($asm0E.TypeRef("System.Xml.Serialization.XmlSerializationReader"), "System.Xml.Serialization.XmlSerializationPrimitiveReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A0C8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitCallbacks", 
    $sig.make(0x2A0C6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitIDs", 
    $sig.make(0x2A0C7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_base64Binary", 
    $sig.make(0x2A0C2, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_boolean", 
    $sig.make(0x2A0B1, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_byte", 
    $sig.make(0x2A0BC, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_char", 
    $sig.make(0x2A0C4, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_dateTime", 
    $sig.make(0x2A0B9, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_decimal", 
    $sig.make(0x2A0B8, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_double", 
    $sig.make(0x2A0B6, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_float", 
    $sig.make(0x2A0B4, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_guid", 
    $sig.make(0x2A0C3, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_int", 
    $sig.make(0x2A0B0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_long", 
    $sig.make(0x2A0B3, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_QName", 
    $sig.make(0x2A0C5, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_short", 
    $sig.make(0x2A0B2, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_string", 
    $sig.make(0x2A0AF, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_unsignedByte", 
    $sig.make(0x2A0BB, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_unsignedInt", 
    $sig.make(0x2A0C0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_unsignedLong", 
    $sig.make(0x2A0C1, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read_unsignedShort", 
    $sig.make(0x2A0BE, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "id4_boolean", $.String); 
  $.Field({Static:false, Public:false}, "id14_unsignedInt", $.String); 
  $.Field({Static:false, Public:false}, "id15_unsignedLong", $.String); 
  $.Field({Static:false, Public:false}, "id7_float", $.String); 
  $.Field({Static:false, Public:false}, "id10_dateTime", $.String); 
  $.Field({Static:false, Public:false}, "id6_long", $.String); 
  $.Field({Static:false, Public:false}, "id9_decimal", $.String); 
  $.Field({Static:false, Public:false}, "id8_double", $.String); 
  $.Field({Static:false, Public:false}, "id17_guid", $.String); 
  $.Field({Static:false, Public:false}, "id2_Item", $.String); 
  $.Field({Static:false, Public:false}, "id13_unsignedShort", $.String); 
  $.Field({Static:false, Public:false}, "id18_char", $.String); 
  $.Field({Static:false, Public:false}, "id3_int", $.String); 
  $.Field({Static:false, Public:false}, "id12_byte", $.String); 
  $.Field({Static:false, Public:false}, "id16_base64Binary", $.String); 
  $.Field({Static:false, Public:false}, "id11_unsignedByte", $.String); 
  $.Field({Static:false, Public:false}, "id5_short", $.String); 
  $.Field({Static:false, Public:false}, "id1_string", $.String); 
  $.Field({Static:false, Public:false}, "id1_QName", $.String); 
});

JSIL.DeclareNamespace("System.Xml.Serialization.Configuration");
JSIL.MakeStaticClass("System.Xml.Serialization.Configuration.ConfigurationStrings", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "get_DateTimeSerializationSectionPath", 
    $sig.make(0x2A0E3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SchemaImporterExtensionsSectionPath", 
    $sig.make(0x2A0E2, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XmlSerializerSectionPath", 
    $sig.make(0x2A0E4, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
    $sig.make(0x2A0E5, $.String, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "Name", "name"); 
  $.Constant({Static:true , Public:false}, "SchemaImporterExtensionsSectionName", "schemaImporterExtensions"); 
  $.Constant({Static:true , Public:false}, "DateTimeSerializationSectionName", "dateTimeSerialization"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerSectionName", "xmlSerializer"); 
  $.Constant({Static:true , Public:false}, "SectionGroupName", "system.xml.serialization"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterChar", "SqlTypesSchemaImporterChar"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNChar", "SqlTypesSchemaImporterNChar"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterVarChar", "SqlTypesSchemaImporterVarChar"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNVarChar", "SqlTypesSchemaImporterNVarChar"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterText", "SqlTypesSchemaImporterText"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNText", "SqlTypesSchemaImporterNText"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterVarBinary", "SqlTypesSchemaImporterVarBinary"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBinary", "SqlTypesSchemaImporterBinary"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterImage", "SqlTypesSchemaImporterImage"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterDecimal", "SqlTypesSchemaImporterDecimal"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNumeric", "SqlTypesSchemaImporterNumeric"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBigInt", "SqlTypesSchemaImporterBigInt"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterInt", "SqlTypesSchemaImporterInt"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallInt", "SqlTypesSchemaImporterSmallInt"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterTinyInt", "SqlTypesSchemaImporterTinyInt"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBit", "SqlTypesSchemaImporterBit"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterFloat", "SqlTypesSchemaImporterFloat"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterReal", "SqlTypesSchemaImporterReal"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterDateTime", "SqlTypesSchemaImporterDateTime"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallDateTime", "SqlTypesSchemaImporterSmallDateTime"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterMoney", "SqlTypesSchemaImporterMoney"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallMoney", "SqlTypesSchemaImporterSmallMoney"); 
  $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterUniqueIdentifier", "SqlTypesSchemaImporterUniqueIdentifier"); 
  $.Constant({Static:true , Public:false}, "Type", "type"); 
  $.Constant({Static:true , Public:false}, "Mode", "mode"); 
  $.Constant({Static:true , Public:false}, "CheckDeserializeAdvances", "checkDeserializeAdvances"); 
  $.Constant({Static:true , Public:false}, "TempFilesLocation", "tempFilesLocation"); 
  $.Property({Static:true , Public:false}, "SchemaImporterExtensionsSectionPath", $.String);

  $.Property({Static:true , Public:false}, "DateTimeSerializationSectionPath", $.String);

  $.Property({Static:true , Public:false}, "XmlSerializerSectionPath", $.String);

});

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.Serialization.Configuration.DateTimeSerializationSection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x29768, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
    $sig.make(0x29766, $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Properties", 
    $sig.make(0x29765, $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
    $sig.make(0x29767, null, [$asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode")], [])
  );

  $.Field({Static:false, Public:false}, "properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "mode", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
  $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

  $.Property({Static:false, Public:true }, "Mode", $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"))
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["mode"]; });

});

JSIL.MakeEnum(
  "System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode", false, {
    Default: 0, 
    Roundtrip: 1, 
    Local: 2
  }, false
);

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationElement"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A0F6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A0F7, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A0F8, null, [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Key", 
    $sig.make(0x2A0F5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x2A0F0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Properties", 
    $sig.make(0x2A0F2, $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x2A0F3, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x2A0F1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x2A0F4, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

  $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"))
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement/TypeTypeConverter")]; })
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

  $.Property({Static:false, Public:false}, "Key", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement/TypeAndName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A963, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A964, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x2A968, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x2A965, $.Int32, [], [])
  );

  $.Field({Static:false, Public:true , ReadOnly:true }, "type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String); 
});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement/TypeTypeConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A9A9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x2A9A6, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x2A9A7, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x2A9A8, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

});

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationElementCollection"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A199, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x2A19A, null, [$asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x2A19B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNewElement", 
    $sig.make(0x2A19C, $asm08.TypeRef("System.Configuration.ConfigurationElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2A193, $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2A197, $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElementKey", 
    $sig.make(0x2A19D, $.Object, [$asm08.TypeRef("System.Configuration.ConfigurationElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x2A19E, $.Int32, [$asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x2A19F, null, [$asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x2A1A0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x2A1A1, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x2A195, null, [$.Int32, $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x2A198, null, [$.String, $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
  );

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"));

  $.Property({Static:false, Public:true }, "Item", $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"));

})
  .Attribute($asm08.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")]; })
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A1C4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Properties", 
    $sig.make(0x2A1C1, $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
    $sig.make(0x2A1C2, $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SchemaImporterExtensionsInternal", 
    $sig.make(0x2A1C3, $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSqlTypeSchemaImporter", 
    $sig.make(0x2A1C5, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeDefault", 
    $sig.make(0x2A1C6, null, [], [])
  );

  $.Field({Static:false, Public:false}, "properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "schemaImporterExtensions", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
  $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

  $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"))
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

  $.Property({Static:false, Public:false}, "SchemaImporterExtensionsInternal", $asm0E.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));

});

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationSectionGroup"), "System.Xml.Serialization.Configuration.SerializationSectionGroup", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A1D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DateTimeSerialization", 
    $sig.make(0x2A1CE, $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
    $sig.make(0x2A1CD, $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XmlSerializer", 
    $sig.make(0x2A1CF, $asm0E.TypeRef("System.Xml.Serialization.Configuration.XmlSerializerSection"), [], [])
  );

  $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm0E.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"))
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["schemaImporterExtensions"]; });

  $.Property({Static:false, Public:true }, "DateTimeSerialization", $asm0E.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection"))
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["dateTimeSerialization"]; });

  $.Property({Static:false, Public:true }, "XmlSerializer", $asm0E.TypeRef("System.Xml.Serialization.Configuration.XmlSerializerSection"));

});

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.Serialization.Configuration.XmlSerializerSection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A1E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CheckDeserializeAdvances", 
    $sig.make(0x2A1E1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Properties", 
    $sig.make(0x2A1DE, $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TempFilesLocation", 
    $sig.make(0x2A1E3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CheckDeserializeAdvances", 
    $sig.make(0x2A1E2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TempFilesLocation", 
    $sig.make(0x2A1E4, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "checkDeserializeAdvances", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "tempFilesLocation", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
  $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

  $.Property({Static:false, Public:true }, "CheckDeserializeAdvances", $.Boolean)
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["checkDeserializeAdvances"]; });

  $.Property({Static:false, Public:true }, "TempFilesLocation", $.String)
    .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["tempFilesLocation"]; });

});

JSIL.MakeClass($asm08.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Xml.Serialization.Configuration.RootedPathValidator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A0AD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanValidate", 
    $sig.make(0x2A0AA, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Validate", 
    $sig.make(0x2A0AB, null, [$.Object], [])
  );

});

JSIL.MakeStaticClass("FXAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
});

JSIL.MakeStaticClass("ThisAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Title", "System.Xml.dll"); 
  $.Constant({Static:true , Public:false}, "Description", "System.Xml.dll"); 
  $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Xml.dll"); 
  $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
  $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.233"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
  $.Constant({Static:true , Public:false}, "BuildRevisionStr", "233"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
});

JSIL.MakeStaticClass("AssemblyRef", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Xml.ResDescriptionAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A0E9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x2A0E8, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Xml.ResCategoryAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A110, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLocalizedString", 
    $sig.make(0x2A111, $.String, [$.String], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Xml.Res", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x271F8, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0x271F6, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
    $sig.make(0x271F7, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
    $sig.make(0x271F9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x271FD, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x271FA, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x271FB, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x271FC, $.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.Constant({Static:true , Public:false}, "Xml_UserException", "Xml_UserException"); 
  $.Constant({Static:true , Public:false}, "Xml_DefaultException", "Xml_DefaultException"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidOperation", "Xml_InvalidOperation"); 
  $.Constant({Static:true , Public:false}, "Xml_ErrorFilePosition", "Xml_ErrorFilePosition"); 
  $.Constant({Static:true , Public:false}, "Xml_StackOverflow", "Xml_StackOverflow"); 
  $.Constant({Static:true , Public:false}, "Xslt_NoStylesheetLoaded", "Xslt_NoStylesheetLoaded"); 
  $.Constant({Static:true , Public:false}, "Xslt_NotCompiledStylesheet", "Xslt_NotCompiledStylesheet"); 
  $.Constant({Static:true , Public:false}, "Xslt_IncompatibleCompiledStylesheetVersion", "Xslt_IncompatibleCompiledStylesheetVersion"); 
  $.Constant({Static:true , Public:false}, "Xml_UnclosedQuote", "Xml_UnclosedQuote"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOF", "Xml_UnexpectedEOF"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOF1", "Xml_UnexpectedEOF1"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOFInElementContent", "Xml_UnexpectedEOFInElementContent"); 
  $.Constant({Static:true , Public:false}, "Xml_BadStartNameChar", "Xml_BadStartNameChar"); 
  $.Constant({Static:true , Public:false}, "Xml_BadNameChar", "Xml_BadNameChar"); 
  $.Constant({Static:true , Public:false}, "Xml_BadDecimalEntity", "Xml_BadDecimalEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_BadHexEntity", "Xml_BadHexEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_MissingByteOrderMark", "Xml_MissingByteOrderMark"); 
  $.Constant({Static:true , Public:false}, "Xml_UnknownEncoding", "Xml_UnknownEncoding"); 
  $.Constant({Static:true , Public:false}, "Xml_InternalError", "Xml_InternalError"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidCharInThisEncoding", "Xml_InvalidCharInThisEncoding"); 
  $.Constant({Static:true , Public:false}, "Xml_ErrorPosition", "Xml_ErrorPosition"); 
  $.Constant({Static:true , Public:false}, "Xml_MessageWithErrorPosition", "Xml_MessageWithErrorPosition"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedTokenEx", "Xml_UnexpectedTokenEx"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedTokens2", "Xml_UnexpectedTokens2"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectingWhiteSpace", "Xml_ExpectingWhiteSpace"); 
  $.Constant({Static:true , Public:false}, "Xml_TagMismatch", "Xml_TagMismatch"); 
  $.Constant({Static:true , Public:false}, "Xml_TagMismatchEx", "Xml_TagMismatchEx"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedEndTag", "Xml_UnexpectedEndTag"); 
  $.Constant({Static:true , Public:false}, "Xml_UnknownNs", "Xml_UnknownNs"); 
  $.Constant({Static:true , Public:false}, "Xml_BadAttributeChar", "Xml_BadAttributeChar"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectExternalOrClose", "Xml_ExpectExternalOrClose"); 
  $.Constant({Static:true , Public:false}, "Xml_MissingRoot", "Xml_MissingRoot"); 
  $.Constant({Static:true , Public:false}, "Xml_MultipleRoots", "Xml_MultipleRoots"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidRootData", "Xml_InvalidRootData"); 
  $.Constant({Static:true , Public:false}, "Xml_XmlDeclNotFirst", "Xml_XmlDeclNotFirst"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidXmlDecl", "Xml_InvalidXmlDecl"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidNodeType", "Xml_InvalidNodeType"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidPIName", "Xml_InvalidPIName"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidXmlSpace", "Xml_InvalidXmlSpace"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidVersionNumber", "Xml_InvalidVersionNumber"); 
  $.Constant({Static:true , Public:false}, "Xml_DupAttributeName", "Xml_DupAttributeName"); 
  $.Constant({Static:true , Public:false}, "Xml_BadDTDLocation", "Xml_BadDTDLocation"); 
  $.Constant({Static:true , Public:false}, "Xml_ElementNotFound", "Xml_ElementNotFound"); 
  $.Constant({Static:true , Public:false}, "Xml_ElementNotFoundNs", "Xml_ElementNotFoundNs"); 
  $.Constant({Static:true , Public:false}, "Xml_PartialContentNodeTypeNotSupportedEx", "Xml_PartialContentNodeTypeNotSupportedEx"); 
  $.Constant({Static:true , Public:false}, "Xml_MultipleDTDsProvided", "Xml_MultipleDTDsProvided"); 
  $.Constant({Static:true , Public:false}, "Xml_CanNotBindToReservedNamespace", "Xml_CanNotBindToReservedNamespace"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidCharacter", "Xml_InvalidCharacter"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidBinHexValue", "Xml_InvalidBinHexValue"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidBinHexValueOddCount", "Xml_InvalidBinHexValueOddCount"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidTextDecl", "Xml_InvalidTextDecl"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidBase64Value", "Xml_InvalidBase64Value"); 
  $.Constant({Static:true , Public:false}, "Xml_UndeclaredEntity", "Xml_UndeclaredEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_RecursiveParEntity", "Xml_RecursiveParEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_RecursiveGenEntity", "Xml_RecursiveGenEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_ExternalEntityInAttValue", "Xml_ExternalEntityInAttValue"); 
  $.Constant({Static:true , Public:false}, "Xml_UnparsedEntityRef", "Xml_UnparsedEntityRef"); 
  $.Constant({Static:true , Public:false}, "Xml_NotSameNametable", "Xml_NotSameNametable"); 
  $.Constant({Static:true , Public:false}, "Xml_NametableMismatch", "Xml_NametableMismatch"); 
  $.Constant({Static:true , Public:false}, "Xml_BadNamespaceDecl", "Xml_BadNamespaceDecl"); 
  $.Constant({Static:true , Public:false}, "Xml_ErrorParsingEntityName", "Xml_ErrorParsingEntityName"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidNmToken", "Xml_InvalidNmToken"); 
  $.Constant({Static:true , Public:false}, "Xml_EntityRefNesting", "Xml_EntityRefNesting"); 
  $.Constant({Static:true , Public:false}, "Xml_CannotResolveEntity", "Xml_CannotResolveEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_CannotResolveEntityDtdIgnored", "Xml_CannotResolveEntityDtdIgnored"); 
  $.Constant({Static:true , Public:false}, "Xml_CannotResolveExternalSubset", "Xml_CannotResolveExternalSubset"); 
  $.Constant({Static:true , Public:false}, "Xml_CannotResolveUrl", "Xml_CannotResolveUrl"); 
  $.Constant({Static:true , Public:false}, "Xml_CDATAEndInText", "Xml_CDATAEndInText"); 
  $.Constant({Static:true , Public:false}, "Xml_ExternalEntityInStandAloneDocument", "Xml_ExternalEntityInStandAloneDocument"); 
  $.Constant({Static:true , Public:false}, "Xml_DtdAfterRootElement", "Xml_DtdAfterRootElement"); 
  $.Constant({Static:true , Public:false}, "Xml_ReadOnlyProperty", "Xml_ReadOnlyProperty"); 
  $.Constant({Static:true , Public:false}, "Xml_DtdIsProhibited", "Xml_DtdIsProhibited"); 
  $.Constant({Static:true , Public:false}, "Xml_DtdIsProhibitedEx", "Xml_DtdIsProhibitedEx"); 
  $.Constant({Static:true , Public:false}, "Xml_ReadSubtreeNotOnElement", "Xml_ReadSubtreeNotOnElement"); 
  $.Constant({Static:true , Public:false}, "Xml_DtdNotAllowedInFragment", "Xml_DtdNotAllowedInFragment"); 
  $.Constant({Static:true , Public:false}, "Xml_CannotStartDocumentOnFragment", "Xml_CannotStartDocumentOnFragment"); 
  $.Constant({Static:true , Public:false}, "Xml_ErrorOpeningExternalDtd", "Xml_ErrorOpeningExternalDtd"); 
  $.Constant({Static:true , Public:false}, "Xml_ErrorOpeningExternalEntity", "Xml_ErrorOpeningExternalEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_ReadBinaryContentNotSupported", "Xml_ReadBinaryContentNotSupported"); 
  $.Constant({Static:true , Public:false}, "Xml_ReadValueChunkNotSupported", "Xml_ReadValueChunkNotSupported"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidReadContentAs", "Xml_InvalidReadContentAs"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidReadElementContentAs", "Xml_InvalidReadElementContentAs"); 
  $.Constant({Static:true , Public:false}, "Xml_MixedReadElementContentAs", "Xml_MixedReadElementContentAs"); 
  $.Constant({Static:true , Public:false}, "Xml_MixingReadValueChunkWithBinary", "Xml_MixingReadValueChunkWithBinary"); 
  $.Constant({Static:true , Public:false}, "Xml_MixingBinaryContentMethods", "Xml_MixingBinaryContentMethods"); 
  $.Constant({Static:true , Public:false}, "Xml_MixingV1StreamingWithV2Binary", "Xml_MixingV1StreamingWithV2Binary"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidReadValueChunk", "Xml_InvalidReadValueChunk"); 
  $.Constant({Static:true , Public:false}, "Xml_ReadContentAsFormatException", "Xml_ReadContentAsFormatException"); 
  $.Constant({Static:true , Public:false}, "Xml_DoubleBaseUri", "Xml_DoubleBaseUri"); 
  $.Constant({Static:true , Public:false}, "Xml_NotEnoughSpaceForSurrogatePair", "Xml_NotEnoughSpaceForSurrogatePair"); 
  $.Constant({Static:true , Public:false}, "Xml_EmptyUrl", "Xml_EmptyUrl"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedNodeInSimpleContent", "Xml_UnexpectedNodeInSimpleContent"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidWhitespaceCharacter", "Xml_InvalidWhitespaceCharacter"); 
  $.Constant({Static:true , Public:false}, "Xml_IncompatibleConformanceLevel", "Xml_IncompatibleConformanceLevel"); 
  $.Constant({Static:true , Public:false}, "Xml_LimitExceeded", "Xml_LimitExceeded"); 
  $.Constant({Static:true , Public:false}, "Xml_ClosedOrErrorReader", "Xml_ClosedOrErrorReader"); 
  $.Constant({Static:true , Public:false}, "Xml_CharEntityOverflow", "Xml_CharEntityOverflow"); 
  $.Constant({Static:true , Public:false}, "Xml_BadNameCharWithPos", "Xml_BadNameCharWithPos"); 
  $.Constant({Static:true , Public:false}, "Xml_XmlnsBelongsToReservedNs", "Xml_XmlnsBelongsToReservedNs"); 
  $.Constant({Static:true , Public:false}, "Xml_UndeclaredParEntity", "Xml_UndeclaredParEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidXmlDocument", "Xml_InvalidXmlDocument"); 
  $.Constant({Static:true , Public:false}, "Xml_NoDTDPresent", "Xml_NoDTDPresent"); 
  $.Constant({Static:true , Public:false}, "Xml_MultipleValidaitonTypes", "Xml_MultipleValidaitonTypes"); 
  $.Constant({Static:true , Public:false}, "Xml_NoValidation", "Xml_NoValidation"); 
  $.Constant({Static:true , Public:false}, "Xml_WhitespaceHandling", "Xml_WhitespaceHandling"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidResetStateCall", "Xml_InvalidResetStateCall"); 
  $.Constant({Static:true , Public:false}, "Xml_EntityHandling", "Xml_EntityHandling"); 
  $.Constant({Static:true , Public:false}, "Xml_AttlistDuplEnumValue", "Xml_AttlistDuplEnumValue"); 
  $.Constant({Static:true , Public:false}, "Xml_AttlistDuplNotationValue", "Xml_AttlistDuplNotationValue"); 
  $.Constant({Static:true , Public:false}, "Xml_EncodingSwitchAfterResetState", "Xml_EncodingSwitchAfterResetState"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedNodeType", "Xml_UnexpectedNodeType"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidConditionalSection", "Xml_InvalidConditionalSection"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedCDataEnd", "Xml_UnexpectedCDataEnd"); 
  $.Constant({Static:true , Public:false}, "Xml_UnclosedConditionalSection", "Xml_UnclosedConditionalSection"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectDtdMarkup", "Xml_ExpectDtdMarkup"); 
  $.Constant({Static:true , Public:false}, "Xml_IncompleteDtdContent", "Xml_IncompleteDtdContent"); 
  $.Constant({Static:true , Public:false}, "Xml_EnumerationRequired", "Xml_EnumerationRequired"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidContentModel", "Xml_InvalidContentModel"); 
  $.Constant({Static:true , Public:false}, "Xml_FragmentId", "Xml_FragmentId"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectPcData", "Xml_ExpectPcData"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectNoWhitespace", "Xml_ExpectNoWhitespace"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectOp", "Xml_ExpectOp"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidAttributeType", "Xml_InvalidAttributeType"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidAttributeType1", "Xml_InvalidAttributeType1"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectAttType", "Xml_ExpectAttType"); 
  $.Constant({Static:true , Public:false}, "Xml_ColonInLocalName", "Xml_ColonInLocalName"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidParEntityRef", "Xml_InvalidParEntityRef"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectSubOrClose", "Xml_ExpectSubOrClose"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectExternalOrPublicId", "Xml_ExpectExternalOrPublicId"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectExternalIdOrEntityValue", "Xml_ExpectExternalIdOrEntityValue"); 
  $.Constant({Static:true , Public:false}, "Xml_ExpectIgnoreOrInclude", "Xml_ExpectIgnoreOrInclude"); 
  $.Constant({Static:true , Public:false}, "Xml_UnsupportedClass", "Xml_UnsupportedClass"); 
  $.Constant({Static:true , Public:false}, "Xml_NullResolver", "Xml_NullResolver"); 
  $.Constant({Static:true , Public:false}, "Xml_RelativeUriNotSupported", "Xml_RelativeUriNotSupported"); 
  $.Constant({Static:true , Public:false}, "Xml_UntrustedCodeSettingResolver", "Xml_UntrustedCodeSettingResolver"); 
  $.Constant({Static:true , Public:false}, "Xml_PrefixForEmptyNs", "Xml_PrefixForEmptyNs"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidCommentChars", "Xml_InvalidCommentChars"); 
  $.Constant({Static:true , Public:false}, "Xml_UndefNamespace", "Xml_UndefNamespace"); 
  $.Constant({Static:true , Public:false}, "Xml_EmptyName", "Xml_EmptyName"); 
  $.Constant({Static:true , Public:false}, "Xml_EmptyLocalName", "Xml_EmptyLocalName"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidNameCharsDetail", "Xml_InvalidNameCharsDetail"); 
  $.Constant({Static:true , Public:false}, "Xml_NoStartTag", "Xml_NoStartTag"); 
  $.Constant({Static:true , Public:false}, "Xml_ClosedOrError", "Xml_ClosedOrError"); 
  $.Constant({Static:true , Public:false}, "Xml_WrongToken", "Xml_WrongToken"); 
  $.Constant({Static:true , Public:false}, "Xml_XmlPrefix", "Xml_XmlPrefix"); 
  $.Constant({Static:true , Public:false}, "Xml_XmlnsPrefix", "Xml_XmlnsPrefix"); 
  $.Constant({Static:true , Public:false}, "Xml_NamespaceDeclXmlXmlns", "Xml_NamespaceDeclXmlXmlns"); 
  $.Constant({Static:true , Public:false}, "Xml_NonWhitespace", "Xml_NonWhitespace"); 
  $.Constant({Static:true , Public:false}, "Xml_DupXmlDecl", "Xml_DupXmlDecl"); 
  $.Constant({Static:true , Public:false}, "Xml_CannotWriteXmlDecl", "Xml_CannotWriteXmlDecl"); 
  $.Constant({Static:true , Public:false}, "Xml_NoRoot", "Xml_NoRoot"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidPosition", "Xml_InvalidPosition"); 
  $.Constant({Static:true , Public:false}, "Xml_IncompleteEntity", "Xml_IncompleteEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogateHighChar", "Xml_InvalidSurrogateHighChar"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogateMissingLowChar", "Xml_InvalidSurrogateMissingLowChar"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogatePairWithArgs", "Xml_InvalidSurrogatePairWithArgs"); 
  $.Constant({Static:true , Public:false}, "Xml_RedefinePrefix", "Xml_RedefinePrefix"); 
  $.Constant({Static:true , Public:false}, "Xml_DtdAlreadyWritten", "Xml_DtdAlreadyWritten"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidCharsInIndent", "Xml_InvalidCharsInIndent"); 
  $.Constant({Static:true , Public:false}, "Xml_IndentCharsNotWhitespace", "Xml_IndentCharsNotWhitespace"); 
  $.Constant({Static:true , Public:false}, "Xml_ConformanceLevelFragment", "Xml_ConformanceLevelFragment"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidQuote", "Xml_InvalidQuote"); 
  $.Constant({Static:true , Public:false}, "Xml_UndefPrefix", "Xml_UndefPrefix"); 
  $.Constant({Static:true , Public:false}, "Xml_NoNamespaces", "Xml_NoNamespaces"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidCDataChars", "Xml_InvalidCDataChars"); 
  $.Constant({Static:true , Public:false}, "Xml_NotTheFirst", "Xml_NotTheFirst"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidPiChars", "Xml_InvalidPiChars"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidNameChars", "Xml_InvalidNameChars"); 
  $.Constant({Static:true , Public:false}, "Xml_Closed", "Xml_Closed"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidPrefix", "Xml_InvalidPrefix"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidIndentation", "Xml_InvalidIndentation"); 
  $.Constant({Static:true , Public:false}, "Xml_NotInWriteState", "Xml_NotInWriteState"); 
  $.Constant({Static:true , Public:false}, "Xml_SurrogatePairSplit", "Xml_SurrogatePairSplit"); 
  $.Constant({Static:true , Public:false}, "Xml_NoMultipleRoots", "Xml_NoMultipleRoots"); 
  $.Constant({Static:true , Public:false}, "XmlBadName", "XmlBadName"); 
  $.Constant({Static:true , Public:false}, "XmlNoNameAllowed", "XmlNoNameAllowed"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_BadUri", "XmlConvert_BadUri"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_BadFormat", "XmlConvert_BadFormat"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_Overflow", "XmlConvert_Overflow"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeBadMapping", "XmlConvert_TypeBadMapping"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeBadMapping2", "XmlConvert_TypeBadMapping2"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeListBadMapping", "XmlConvert_TypeListBadMapping"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeListBadMapping2", "XmlConvert_TypeListBadMapping2"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeToString", "XmlConvert_TypeToString"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeFromString", "XmlConvert_TypeFromString"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeNoPrefix", "XmlConvert_TypeNoPrefix"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_TypeNoNamespace", "XmlConvert_TypeNoNamespace"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_NotOneCharString", "XmlConvert_NotOneCharString"); 
  $.Constant({Static:true , Public:false}, "Sch_ParEntityRefNesting", "Sch_ParEntityRefNesting"); 
  $.Constant({Static:true , Public:false}, "Sch_NotTokenString", "Sch_NotTokenString"); 
  $.Constant({Static:true , Public:false}, "Sch_XsdDateTimeCompare", "Sch_XsdDateTimeCompare"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidNullCast", "Sch_InvalidNullCast"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidDateTimeOption", "Sch_InvalidDateTimeOption"); 
  $.Constant({Static:true , Public:false}, "Sch_StandAloneNormalization", "Sch_StandAloneNormalization"); 
  $.Constant({Static:true , Public:false}, "Sch_UnSpecifiedDefaultAttributeInExternalStandalone", "Sch_UnSpecifiedDefaultAttributeInExternalStandalone"); 
  $.Constant({Static:true , Public:false}, "Sch_DefaultException", "Sch_DefaultException"); 
  $.Constant({Static:true , Public:false}, "Sch_DupElementDecl", "Sch_DupElementDecl"); 
  $.Constant({Static:true , Public:false}, "Sch_IdAttrDeclared", "Sch_IdAttrDeclared"); 
  $.Constant({Static:true , Public:false}, "Sch_RootMatchDocType", "Sch_RootMatchDocType"); 
  $.Constant({Static:true , Public:false}, "Sch_DupId", "Sch_DupId"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredElement", "Sch_UndeclaredElement"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredAttribute", "Sch_UndeclaredAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredNotation", "Sch_UndeclaredNotation"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredId", "Sch_UndeclaredId"); 
  $.Constant({Static:true , Public:false}, "Sch_SchemaRootExpected", "Sch_SchemaRootExpected"); 
  $.Constant({Static:true , Public:false}, "Sch_XSDSchemaRootExpected", "Sch_XSDSchemaRootExpected"); 
  $.Constant({Static:true , Public:false}, "Sch_UnsupportedAttribute", "Sch_UnsupportedAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_UnsupportedElement", "Sch_UnsupportedElement"); 
  $.Constant({Static:true , Public:false}, "Sch_MissAttribute", "Sch_MissAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_AnnotationLocation", "Sch_AnnotationLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_DataTypeTextOnly", "Sch_DataTypeTextOnly"); 
  $.Constant({Static:true , Public:false}, "Sch_UnknownModel", "Sch_UnknownModel"); 
  $.Constant({Static:true , Public:false}, "Sch_UnknownOrder", "Sch_UnknownOrder"); 
  $.Constant({Static:true , Public:false}, "Sch_UnknownContent", "Sch_UnknownContent"); 
  $.Constant({Static:true , Public:false}, "Sch_UnknownRequired", "Sch_UnknownRequired"); 
  $.Constant({Static:true , Public:false}, "Sch_UnknownDtType", "Sch_UnknownDtType"); 
  $.Constant({Static:true , Public:false}, "Sch_MixedMany", "Sch_MixedMany"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupDisabled", "Sch_GroupDisabled"); 
  $.Constant({Static:true , Public:false}, "Sch_MissDtvalue", "Sch_MissDtvalue"); 
  $.Constant({Static:true , Public:false}, "Sch_MissDtvaluesAttribute", "Sch_MissDtvaluesAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_DupDtType", "Sch_DupDtType"); 
  $.Constant({Static:true , Public:false}, "Sch_DupAttribute", "Sch_DupAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_RequireEnumeration", "Sch_RequireEnumeration"); 
  $.Constant({Static:true , Public:false}, "Sch_DefaultIdValue", "Sch_DefaultIdValue"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementNotAllowed", "Sch_ElementNotAllowed"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementMissing", "Sch_ElementMissing"); 
  $.Constant({Static:true , Public:false}, "Sch_ManyMaxOccurs", "Sch_ManyMaxOccurs"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxOccursInvalid", "Sch_MaxOccursInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MinOccursInvalid", "Sch_MinOccursInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_DtMaxLengthInvalid", "Sch_DtMaxLengthInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_DtMinLengthInvalid", "Sch_DtMinLengthInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_DupDtMaxLength", "Sch_DupDtMaxLength"); 
  $.Constant({Static:true , Public:false}, "Sch_DupDtMinLength", "Sch_DupDtMinLength"); 
  $.Constant({Static:true , Public:false}, "Sch_DtMinMaxLength", "Sch_DtMinMaxLength"); 
  $.Constant({Static:true , Public:false}, "Sch_DupElement", "Sch_DupElement"); 
  $.Constant({Static:true , Public:false}, "Sch_DupGroupParticle", "Sch_DupGroupParticle"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidValue", "Sch_InvalidValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidValueDetailed", "Sch_InvalidValueDetailed"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidValueDetailedAttribute", "Sch_InvalidValueDetailedAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_MissRequiredAttribute", "Sch_MissRequiredAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_FixedAttributeValue", "Sch_FixedAttributeValue"); 
  $.Constant({Static:true , Public:false}, "Sch_FixedElementValue", "Sch_FixedElementValue"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeValueDataTypeDetailed", "Sch_AttributeValueDataTypeDetailed"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeDefaultDataType", "Sch_AttributeDefaultDataType"); 
  $.Constant({Static:true , Public:false}, "Sch_IncludeLocation", "Sch_IncludeLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_ImportLocation", "Sch_ImportLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_RedefineLocation", "Sch_RedefineLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidBlockDefaultValue", "Sch_InvalidBlockDefaultValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidFinalDefaultValue", "Sch_InvalidFinalDefaultValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementBlockValue", "Sch_InvalidElementBlockValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementFinalValue", "Sch_InvalidElementFinalValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidSimpleTypeFinalValue", "Sch_InvalidSimpleTypeFinalValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidComplexTypeBlockValue", "Sch_InvalidComplexTypeBlockValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidComplexTypeFinalValue", "Sch_InvalidComplexTypeFinalValue"); 
  $.Constant({Static:true , Public:false}, "Sch_DupIdentityConstraint", "Sch_DupIdentityConstraint"); 
  $.Constant({Static:true , Public:false}, "Sch_DupGlobalElement", "Sch_DupGlobalElement"); 
  $.Constant({Static:true , Public:false}, "Sch_DupGlobalAttribute", "Sch_DupGlobalAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_DupSimpleType", "Sch_DupSimpleType"); 
  $.Constant({Static:true , Public:false}, "Sch_DupComplexType", "Sch_DupComplexType"); 
  $.Constant({Static:true , Public:false}, "Sch_DupGroup", "Sch_DupGroup"); 
  $.Constant({Static:true , Public:false}, "Sch_DupAttributeGroup", "Sch_DupAttributeGroup"); 
  $.Constant({Static:true , Public:false}, "Sch_DupNotation", "Sch_DupNotation"); 
  $.Constant({Static:true , Public:false}, "Sch_DefaultFixedAttributes", "Sch_DefaultFixedAttributes"); 
  $.Constant({Static:true , Public:false}, "Sch_FixedInRef", "Sch_FixedInRef"); 
  $.Constant({Static:true , Public:false}, "Sch_FixedDefaultInRef", "Sch_FixedDefaultInRef"); 
  $.Constant({Static:true , Public:false}, "Sch_DupXsdElement", "Sch_DupXsdElement"); 
  $.Constant({Static:true , Public:false}, "Sch_ForbiddenAttribute", "Sch_ForbiddenAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeIgnored", "Sch_AttributeIgnored"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementRef", "Sch_ElementRef"); 
  $.Constant({Static:true , Public:false}, "Sch_TypeMutualExclusive", "Sch_TypeMutualExclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementNameRef", "Sch_ElementNameRef"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeNameRef", "Sch_AttributeNameRef"); 
  $.Constant({Static:true , Public:false}, "Sch_TextNotAllowed", "Sch_TextNotAllowed"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredType", "Sch_UndeclaredType"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredSimpleType", "Sch_UndeclaredSimpleType"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredEquivClass", "Sch_UndeclaredEquivClass"); 
  $.Constant({Static:true , Public:false}, "Sch_AttListPresence", "Sch_AttListPresence"); 
  $.Constant({Static:true , Public:false}, "Sch_NotationValue", "Sch_NotationValue"); 
  $.Constant({Static:true , Public:false}, "Sch_EnumerationValue", "Sch_EnumerationValue"); 
  $.Constant({Static:true , Public:false}, "Sch_EmptyAttributeValue", "Sch_EmptyAttributeValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidLanguageId", "Sch_InvalidLanguageId"); 
  $.Constant({Static:true , Public:false}, "Sch_XmlSpace", "Sch_XmlSpace"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidXsdAttributeValue", "Sch_InvalidXsdAttributeValue"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidXsdAttributeDatatypeValue", "Sch_InvalidXsdAttributeDatatypeValue"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementValueDataTypeDetailed", "Sch_ElementValueDataTypeDetailed"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementDefaultValue", "Sch_InvalidElementDefaultValue"); 
  $.Constant({Static:true , Public:false}, "Sch_NonDeterministic", "Sch_NonDeterministic"); 
  $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAnyEx", "Sch_NonDeterministicAnyEx"); 
  $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAnyAny", "Sch_NonDeterministicAnyAny"); 
  $.Constant({Static:true , Public:false}, "Sch_StandAlone", "Sch_StandAlone"); 
  $.Constant({Static:true , Public:false}, "Sch_XmlNsAttribute", "Sch_XmlNsAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_AllElement", "Sch_AllElement"); 
  $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceInclude", "Sch_MismatchTargetNamespaceInclude"); 
  $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceImport", "Sch_MismatchTargetNamespaceImport"); 
  $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceEx", "Sch_MismatchTargetNamespaceEx"); 
  $.Constant({Static:true , Public:false}, "Sch_XsiTypeNotFound", "Sch_XsiTypeNotFound"); 
  $.Constant({Static:true , Public:false}, "Sch_XsiTypeAbstract", "Sch_XsiTypeAbstract"); 
  $.Constant({Static:true , Public:false}, "Sch_ListFromNonatomic", "Sch_ListFromNonatomic"); 
  $.Constant({Static:true , Public:false}, "Sch_UnionFromUnion", "Sch_UnionFromUnion"); 
  $.Constant({Static:true , Public:false}, "Sch_DupLengthFacet", "Sch_DupLengthFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupMinLengthFacet", "Sch_DupMinLengthFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupMaxLengthFacet", "Sch_DupMaxLengthFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupWhiteSpaceFacet", "Sch_DupWhiteSpaceFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupMaxInclusiveFacet", "Sch_DupMaxInclusiveFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupMaxExclusiveFacet", "Sch_DupMaxExclusiveFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupMinInclusiveFacet", "Sch_DupMinInclusiveFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupMinExclusiveFacet", "Sch_DupMinExclusiveFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupTotalDigitsFacet", "Sch_DupTotalDigitsFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_DupFractionDigitsFacet", "Sch_DupFractionDigitsFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_LengthFacetProhibited", "Sch_LengthFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_MinLengthFacetProhibited", "Sch_MinLengthFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxLengthFacetProhibited", "Sch_MaxLengthFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_PatternFacetProhibited", "Sch_PatternFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_EnumerationFacetProhibited", "Sch_EnumerationFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceFacetProhibited", "Sch_WhiteSpaceFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveFacetProhibited", "Sch_MaxInclusiveFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveFacetProhibited", "Sch_MaxExclusiveFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveFacetProhibited", "Sch_MinInclusiveFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExclusiveFacetProhibited", "Sch_MinExclusiveFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_TotalDigitsFacetProhibited", "Sch_TotalDigitsFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_FractionDigitsFacetProhibited", "Sch_FractionDigitsFacetProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_LengthFacetInvalid", "Sch_LengthFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MinLengthFacetInvalid", "Sch_MinLengthFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxLengthFacetInvalid", "Sch_MaxLengthFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveFacetInvalid", "Sch_MaxInclusiveFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveFacetInvalid", "Sch_MaxExclusiveFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveFacetInvalid", "Sch_MinInclusiveFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExclusiveFacetInvalid", "Sch_MinExclusiveFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_TotalDigitsFacetInvalid", "Sch_TotalDigitsFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_FractionDigitsFacetInvalid", "Sch_FractionDigitsFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_PatternFacetInvalid", "Sch_PatternFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_EnumerationFacetInvalid", "Sch_EnumerationFacetInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidWhiteSpace", "Sch_InvalidWhiteSpace"); 
  $.Constant({Static:true , Public:false}, "Sch_UnknownFacet", "Sch_UnknownFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_LengthAndMinMax", "Sch_LengthAndMinMax"); 
  $.Constant({Static:true , Public:false}, "Sch_MinLengthGtMaxLength", "Sch_MinLengthGtMaxLength"); 
  $.Constant({Static:true , Public:false}, "Sch_FractionDigitsGtTotalDigits", "Sch_FractionDigitsGtTotalDigits"); 
  $.Constant({Static:true , Public:false}, "Sch_LengthConstraintFailed", "Sch_LengthConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_MinLengthConstraintFailed", "Sch_MinLengthConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxLengthConstraintFailed", "Sch_MaxLengthConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_PatternConstraintFailed", "Sch_PatternConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_EnumerationConstraintFailed", "Sch_EnumerationConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveConstraintFailed", "Sch_MaxInclusiveConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveConstraintFailed", "Sch_MaxExclusiveConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveConstraintFailed", "Sch_MinInclusiveConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExclusiveConstraintFailed", "Sch_MinExclusiveConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_TotalDigitsConstraintFailed", "Sch_TotalDigitsConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_FractionDigitsConstraintFailed", "Sch_FractionDigitsConstraintFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_UnionFailedEx", "Sch_UnionFailedEx"); 
  $.Constant({Static:true , Public:false}, "Sch_NotationRequired", "Sch_NotationRequired"); 
  $.Constant({Static:true , Public:false}, "Sch_DupNotationAttribute", "Sch_DupNotationAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_MissingPublicSystemAttribute", "Sch_MissingPublicSystemAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_NotationAttributeOnEmptyElement", "Sch_NotationAttributeOnEmptyElement"); 
  $.Constant({Static:true , Public:false}, "Sch_RefNotInScope", "Sch_RefNotInScope"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredIdentityConstraint", "Sch_UndeclaredIdentityConstraint"); 
  $.Constant({Static:true , Public:false}, "Sch_RefInvalidIdentityConstraint", "Sch_RefInvalidIdentityConstraint"); 
  $.Constant({Static:true , Public:false}, "Sch_RefInvalidCardin", "Sch_RefInvalidCardin"); 
  $.Constant({Static:true , Public:false}, "Sch_ReftoKeyref", "Sch_ReftoKeyref"); 
  $.Constant({Static:true , Public:false}, "Sch_EmptyXPath", "Sch_EmptyXPath"); 
  $.Constant({Static:true , Public:false}, "Sch_UnresolvedPrefix", "Sch_UnresolvedPrefix"); 
  $.Constant({Static:true , Public:false}, "Sch_UnresolvedKeyref", "Sch_UnresolvedKeyref"); 
  $.Constant({Static:true , Public:false}, "Sch_ICXpathError", "Sch_ICXpathError"); 
  $.Constant({Static:true , Public:false}, "Sch_SelectorAttr", "Sch_SelectorAttr"); 
  $.Constant({Static:true , Public:false}, "Sch_FieldSimpleTypeExpected", "Sch_FieldSimpleTypeExpected"); 
  $.Constant({Static:true , Public:false}, "Sch_FieldSingleValueExpected", "Sch_FieldSingleValueExpected"); 
  $.Constant({Static:true , Public:false}, "Sch_MissingKey", "Sch_MissingKey"); 
  $.Constant({Static:true , Public:false}, "Sch_DuplicateKey", "Sch_DuplicateKey"); 
  $.Constant({Static:true , Public:false}, "Sch_TargetNamespaceXsi", "Sch_TargetNamespaceXsi"); 
  $.Constant({Static:true , Public:false}, "Sch_UndeclaredEntity", "Sch_UndeclaredEntity"); 
  $.Constant({Static:true , Public:false}, "Sch_UnparsedEntityRef", "Sch_UnparsedEntityRef"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxOccursInvalidXsd", "Sch_MaxOccursInvalidXsd"); 
  $.Constant({Static:true , Public:false}, "Sch_MinOccursInvalidXsd", "Sch_MinOccursInvalidXsd"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveExclusive", "Sch_MaxInclusiveExclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveExclusive", "Sch_MinInclusiveExclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveGtMaxInclusive", "Sch_MinInclusiveGtMaxInclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExclusiveGtMaxExclusive", "Sch_MinExclusiveGtMaxExclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveGtMaxExclusive", "Sch_MinInclusiveGtMaxExclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExclusiveGtMaxInclusive", "Sch_MinExclusiveGtMaxInclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestriction", "Sch_SimpleTypeRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidFacetPosition", "Sch_InvalidFacetPosition"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeMutuallyExclusive", "Sch_AttributeMutuallyExclusive"); 
  $.Constant({Static:true , Public:false}, "Sch_AnyAttributeLastChild", "Sch_AnyAttributeLastChild"); 
  $.Constant({Static:true , Public:false}, "Sch_ComplexTypeContentModel", "Sch_ComplexTypeContentModel"); 
  $.Constant({Static:true , Public:false}, "Sch_ComplexContentContentModel", "Sch_ComplexContentContentModel"); 
  $.Constant({Static:true , Public:false}, "Sch_NotNormalizedString", "Sch_NotNormalizedString"); 
  $.Constant({Static:true , Public:false}, "Sch_FractionDigitsNotOnDecimal", "Sch_FractionDigitsNotOnDecimal"); 
  $.Constant({Static:true , Public:false}, "Sch_ContentInNill", "Sch_ContentInNill"); 
  $.Constant({Static:true , Public:false}, "Sch_NoElementSchemaFound", "Sch_NoElementSchemaFound"); 
  $.Constant({Static:true , Public:false}, "Sch_NoAttributeSchemaFound", "Sch_NoAttributeSchemaFound"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidNamespace", "Sch_InvalidNamespace"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidTargetNamespaceAttribute", "Sch_InvalidTargetNamespaceAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidNamespaceAttribute", "Sch_InvalidNamespaceAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidSchemaLocation", "Sch_InvalidSchemaLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_ImportTargetNamespace", "Sch_ImportTargetNamespace"); 
  $.Constant({Static:true , Public:false}, "Sch_ImportTargetNamespaceNull", "Sch_ImportTargetNamespaceNull"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupDoubleRedefine", "Sch_GroupDoubleRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_ComponentRedefineNotFound", "Sch_ComponentRedefineNotFound"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupRedefineNotFound", "Sch_GroupRedefineNotFound"); 
  $.Constant({Static:true , Public:false}, "Sch_AttrGroupDoubleRedefine", "Sch_AttrGroupDoubleRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_AttrGroupRedefineNotFound", "Sch_AttrGroupRedefineNotFound"); 
  $.Constant({Static:true , Public:false}, "Sch_ComplexTypeDoubleRedefine", "Sch_ComplexTypeDoubleRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_ComplexTypeRedefineNotFound", "Sch_ComplexTypeRedefineNotFound"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleToComplexTypeRedefine", "Sch_SimpleToComplexTypeRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeDoubleRedefine", "Sch_SimpleTypeDoubleRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_ComplexToSimpleTypeRedefine", "Sch_ComplexToSimpleTypeRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRedefineNotFound", "Sch_SimpleTypeRedefineNotFound"); 
  $.Constant({Static:true , Public:false}, "Sch_MinMaxGroupRedefine", "Sch_MinMaxGroupRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_MultipleGroupSelfRef", "Sch_MultipleGroupSelfRef"); 
  $.Constant({Static:true , Public:false}, "Sch_MultipleAttrGroupSelfRef", "Sch_MultipleAttrGroupSelfRef"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidTypeRedefine", "Sch_InvalidTypeRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementRef", "Sch_InvalidElementRef"); 
  $.Constant({Static:true , Public:false}, "Sch_MinGtMax", "Sch_MinGtMax"); 
  $.Constant({Static:true , Public:false}, "Sch_DupSelector", "Sch_DupSelector"); 
  $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoSelector", "Sch_IdConstraintNoSelector"); 
  $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoFields", "Sch_IdConstraintNoFields"); 
  $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoRefer", "Sch_IdConstraintNoRefer"); 
  $.Constant({Static:true , Public:false}, "Sch_SelectorBeforeFields", "Sch_SelectorBeforeFields"); 
  $.Constant({Static:true , Public:false}, "Sch_NoSimpleTypeContent", "Sch_NoSimpleTypeContent"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestRefBase", "Sch_SimpleTypeRestRefBase"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestRefBaseNone", "Sch_SimpleTypeRestRefBaseNone"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeListRefBase", "Sch_SimpleTypeListRefBase"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeListRefBaseNone", "Sch_SimpleTypeListRefBaseNone"); 
  $.Constant({Static:true , Public:false}, "Sch_SimpleTypeUnionNoBase", "Sch_SimpleTypeUnionNoBase"); 
  $.Constant({Static:true , Public:false}, "Sch_NoRestOrExtQName", "Sch_NoRestOrExtQName"); 
  $.Constant({Static:true , Public:false}, "Sch_NoRestOrExt", "Sch_NoRestOrExt"); 
  $.Constant({Static:true , Public:false}, "Sch_NoGroupParticle", "Sch_NoGroupParticle"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAllMin", "Sch_InvalidAllMin"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAllMax", "Sch_InvalidAllMax"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidFacet", "Sch_InvalidFacet"); 
  $.Constant({Static:true , Public:false}, "Sch_AbstractElement", "Sch_AbstractElement"); 
  $.Constant({Static:true , Public:false}, "Sch_XsiTypeBlockedEx", "Sch_XsiTypeBlockedEx"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidXsiNill", "Sch_InvalidXsiNill"); 
  $.Constant({Static:true , Public:false}, "Sch_SubstitutionNotAllowed", "Sch_SubstitutionNotAllowed"); 
  $.Constant({Static:true , Public:false}, "Sch_SubstitutionBlocked", "Sch_SubstitutionBlocked"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementInEmptyEx", "Sch_InvalidElementInEmptyEx"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementInTextOnlyEx", "Sch_InvalidElementInTextOnlyEx"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidTextInElement", "Sch_InvalidTextInElement"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementContent", "Sch_InvalidElementContent"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentComplex", "Sch_InvalidElementContentComplex"); 
  $.Constant({Static:true , Public:false}, "Sch_IncompleteContent", "Sch_IncompleteContent"); 
  $.Constant({Static:true , Public:false}, "Sch_IncompleteContentComplex", "Sch_IncompleteContentComplex"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidTextInElementExpecting", "Sch_InvalidTextInElementExpecting"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentExpecting", "Sch_InvalidElementContentExpecting"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentExpectingComplex", "Sch_InvalidElementContentExpectingComplex"); 
  $.Constant({Static:true , Public:false}, "Sch_IncompleteContentExpecting", "Sch_IncompleteContentExpecting"); 
  $.Constant({Static:true , Public:false}, "Sch_IncompleteContentExpectingComplex", "Sch_IncompleteContentExpectingComplex"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementSubstitution", "Sch_InvalidElementSubstitution"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementNameAndNamespace", "Sch_ElementNameAndNamespace"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementName", "Sch_ElementName"); 
  $.Constant({Static:true , Public:false}, "Sch_ContinuationString", "Sch_ContinuationString"); 
  $.Constant({Static:true , Public:false}, "Sch_AnyElementNS", "Sch_AnyElementNS"); 
  $.Constant({Static:true , Public:false}, "Sch_AnyElement", "Sch_AnyElement"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidTextInEmpty", "Sch_InvalidTextInEmpty"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidWhitespaceInEmpty", "Sch_InvalidWhitespaceInEmpty"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidPIComment", "Sch_InvalidPIComment"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAttributeRef", "Sch_InvalidAttributeRef"); 
  $.Constant({Static:true , Public:false}, "Sch_OptionalDefaultAttribute", "Sch_OptionalDefaultAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeCircularRef", "Sch_AttributeCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_IdentityConstraintCircularRef", "Sch_IdentityConstraintCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_SubstitutionCircularRef", "Sch_SubstitutionCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAnyAttribute", "Sch_InvalidAnyAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_DupIdAttribute", "Sch_DupIdAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAllElementMax", "Sch_InvalidAllElementMax"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAny", "Sch_InvalidAny"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAnyDetailed", "Sch_InvalidAnyDetailed"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidExamplar", "Sch_InvalidExamplar"); 
  $.Constant({Static:true , Public:false}, "Sch_NoExamplar", "Sch_NoExamplar"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidSubstitutionMember", "Sch_InvalidSubstitutionMember"); 
  $.Constant({Static:true , Public:false}, "Sch_RedefineNoSchema", "Sch_RedefineNoSchema"); 
  $.Constant({Static:true , Public:false}, "Sch_ProhibitedAttribute", "Sch_ProhibitedAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_TypeCircularRef", "Sch_TypeCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_TwoIdAttrUses", "Sch_TwoIdAttrUses"); 
  $.Constant({Static:true , Public:false}, "Sch_AttrUseAndWildId", "Sch_AttrUseAndWildId"); 
  $.Constant({Static:true , Public:false}, "Sch_MoreThanOneWildId", "Sch_MoreThanOneWildId"); 
  $.Constant({Static:true , Public:false}, "Sch_BaseFinalExtension", "Sch_BaseFinalExtension"); 
  $.Constant({Static:true , Public:false}, "Sch_NotSimpleContent", "Sch_NotSimpleContent"); 
  $.Constant({Static:true , Public:false}, "Sch_NotComplexContent", "Sch_NotComplexContent"); 
  $.Constant({Static:true , Public:false}, "Sch_BaseFinalRestriction", "Sch_BaseFinalRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_BaseFinalList", "Sch_BaseFinalList"); 
  $.Constant({Static:true , Public:false}, "Sch_BaseFinalUnion", "Sch_BaseFinalUnion"); 
  $.Constant({Static:true , Public:false}, "Sch_UndefBaseRestriction", "Sch_UndefBaseRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_UndefBaseExtension", "Sch_UndefBaseExtension"); 
  $.Constant({Static:true , Public:false}, "Sch_DifContentType", "Sch_DifContentType"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidContentRestriction", "Sch_InvalidContentRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidContentRestrictionDetailed", "Sch_InvalidContentRestrictionDetailed"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidBaseToEmpty", "Sch_InvalidBaseToEmpty"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidBaseToMixed", "Sch_InvalidBaseToMixed"); 
  $.Constant({Static:true , Public:false}, "Sch_DupAttributeUse", "Sch_DupAttributeUse"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidParticleRestriction", "Sch_InvalidParticleRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidParticleRestrictionDetailed", "Sch_InvalidParticleRestrictionDetailed"); 
  $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForAll", "Sch_ForbiddenDerivedParticleForAll"); 
  $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForElem", "Sch_ForbiddenDerivedParticleForElem"); 
  $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForChoice", "Sch_ForbiddenDerivedParticleForChoice"); 
  $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForSeq", "Sch_ForbiddenDerivedParticleForSeq"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementFromElement", "Sch_ElementFromElement"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementFromAnyRule1", "Sch_ElementFromAnyRule1"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementFromAnyRule2", "Sch_ElementFromAnyRule2"); 
  $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule1", "Sch_AnyFromAnyRule1"); 
  $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule2", "Sch_AnyFromAnyRule2"); 
  $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule3", "Sch_AnyFromAnyRule3"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupBaseFromAny1", "Sch_GroupBaseFromAny1"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupBaseFromAny2", "Sch_GroupBaseFromAny2"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase1", "Sch_ElementFromGroupBase1"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase2", "Sch_ElementFromGroupBase2"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase3", "Sch_ElementFromGroupBase3"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestRangeInvalid", "Sch_GroupBaseRestRangeInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestNoMap", "Sch_GroupBaseRestNoMap"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestNotEmptiable", "Sch_GroupBaseRestNotEmptiable"); 
  $.Constant({Static:true , Public:false}, "Sch_SeqFromAll", "Sch_SeqFromAll"); 
  $.Constant({Static:true , Public:false}, "Sch_SeqFromChoice", "Sch_SeqFromChoice"); 
  $.Constant({Static:true , Public:false}, "Sch_UndefGroupRef", "Sch_UndefGroupRef"); 
  $.Constant({Static:true , Public:false}, "Sch_GroupCircularRef", "Sch_GroupCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_AllRefNotRoot", "Sch_AllRefNotRoot"); 
  $.Constant({Static:true , Public:false}, "Sch_AllRefMinMax", "Sch_AllRefMinMax"); 
  $.Constant({Static:true , Public:false}, "Sch_NotAllAlone", "Sch_NotAllAlone"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeGroupCircularRef", "Sch_AttributeGroupCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_UndefAttributeGroupRef", "Sch_UndefAttributeGroupRef"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAttributeExtension", "Sch_InvalidAttributeExtension"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAnyAttributeRestriction", "Sch_InvalidAnyAttributeRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionProhibited", "Sch_AttributeRestrictionProhibited"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionInvalid", "Sch_AttributeRestrictionInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeFixedInvalid", "Sch_AttributeFixedInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeUseInvalid", "Sch_AttributeUseInvalid"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionInvalidFromWildcard", "Sch_AttributeRestrictionInvalidFromWildcard"); 
  $.Constant({Static:true , Public:false}, "Sch_NoDerivedAttribute", "Sch_NoDerivedAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_UnexpressibleAnyAttribute", "Sch_UnexpressibleAnyAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_RefInvalidAttribute", "Sch_RefInvalidAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementCircularRef", "Sch_ElementCircularRef"); 
  $.Constant({Static:true , Public:false}, "Sch_RefInvalidElement", "Sch_RefInvalidElement"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementCannotHaveValue", "Sch_ElementCannotHaveValue"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementInMixedWithFixed", "Sch_ElementInMixedWithFixed"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementTypeCollision", "Sch_ElementTypeCollision"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidIncludeLocation", "Sch_InvalidIncludeLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_CannotLoadSchema", "Sch_CannotLoadSchema"); 
  $.Constant({Static:true , Public:false}, "Sch_CannotLoadSchemaLocation", "Sch_CannotLoadSchemaLocation"); 
  $.Constant({Static:true , Public:false}, "Sch_LengthGtBaseLength", "Sch_LengthGtBaseLength"); 
  $.Constant({Static:true , Public:false}, "Sch_MinLengthGtBaseMinLength", "Sch_MinLengthGtBaseMinLength"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxLengthGtBaseMaxLength", "Sch_MaxLengthGtBaseMaxLength"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxMinLengthBaseLength", "Sch_MaxMinLengthBaseLength"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveMismatch", "Sch_MaxInclusiveMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveMismatch", "Sch_MaxExclusiveMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MinInclusiveMismatch", "Sch_MinInclusiveMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExclusiveMismatch", "Sch_MinExclusiveMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExlIncMismatch", "Sch_MinExlIncMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MinExlMaxExlMismatch", "Sch_MinExlMaxExlMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MinIncMaxExlMismatch", "Sch_MinIncMaxExlMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MinIncExlMismatch", "Sch_MinIncExlMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxIncExlMismatch", "Sch_MaxIncExlMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_MaxExlIncMismatch", "Sch_MaxExlIncMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_TotalDigitsMismatch", "Sch_TotalDigitsMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_FacetBaseFixed", "Sch_FacetBaseFixed"); 
  $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceRestriction1", "Sch_WhiteSpaceRestriction1"); 
  $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceRestriction2", "Sch_WhiteSpaceRestriction2"); 
  $.Constant({Static:true , Public:false}, "Sch_XsiNilAndFixed", "Sch_XsiNilAndFixed"); 
  $.Constant({Static:true , Public:false}, "Sch_MixSchemaTypes", "Sch_MixSchemaTypes"); 
  $.Constant({Static:true , Public:false}, "Sch_XSDSchemaOnly", "Sch_XSDSchemaOnly"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidPublicAttribute", "Sch_InvalidPublicAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidSystemAttribute", "Sch_InvalidSystemAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_TypeAfterConstraints", "Sch_TypeAfterConstraints"); 
  $.Constant({Static:true , Public:false}, "Sch_XsiNilAndType", "Sch_XsiNilAndType"); 
  $.Constant({Static:true , Public:false}, "Sch_DupSimpleTypeChild", "Sch_DupSimpleTypeChild"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidIdAttribute", "Sch_InvalidIdAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidNameAttributeEx", "Sch_InvalidNameAttributeEx"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidAttribute", "Sch_InvalidAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_EmptyChoice", "Sch_EmptyChoice"); 
  $.Constant({Static:true , Public:false}, "Sch_DerivedNotFromBase", "Sch_DerivedNotFromBase"); 
  $.Constant({Static:true , Public:false}, "Sch_NeedSimpleTypeChild", "Sch_NeedSimpleTypeChild"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidCollection", "Sch_InvalidCollection"); 
  $.Constant({Static:true , Public:false}, "Sch_UnrefNS", "Sch_UnrefNS"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidSimpleTypeRestriction", "Sch_InvalidSimpleTypeRestriction"); 
  $.Constant({Static:true , Public:false}, "Sch_MultipleRedefine", "Sch_MultipleRedefine"); 
  $.Constant({Static:true , Public:false}, "Sch_NullValue", "Sch_NullValue"); 
  $.Constant({Static:true , Public:false}, "Sch_ComplexContentModel", "Sch_ComplexContentModel"); 
  $.Constant({Static:true , Public:false}, "Sch_SchemaNotPreprocessed", "Sch_SchemaNotPreprocessed"); 
  $.Constant({Static:true , Public:false}, "Sch_SchemaNotRemoved", "Sch_SchemaNotRemoved"); 
  $.Constant({Static:true , Public:false}, "Sch_ComponentAlreadySeenForNS", "Sch_ComponentAlreadySeenForNS"); 
  $.Constant({Static:true , Public:false}, "Sch_DefaultAttributeNotApplied", "Sch_DefaultAttributeNotApplied"); 
  $.Constant({Static:true , Public:false}, "Sch_NotXsiAttribute", "Sch_NotXsiAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_SchemaDoesNotExist", "Sch_SchemaDoesNotExist"); 
  $.Constant({Static:true , Public:false}, "XmlDocument_ValidateInvalidNodeType", "XmlDocument_ValidateInvalidNodeType"); 
  $.Constant({Static:true , Public:false}, "XmlDocument_NodeNotFromDocument", "XmlDocument_NodeNotFromDocument"); 
  $.Constant({Static:true , Public:false}, "XmlDocument_NoNodeSchemaInfo", "XmlDocument_NoNodeSchemaInfo"); 
  $.Constant({Static:true , Public:false}, "XmlDocument_NoSchemaInfo", "XmlDocument_NoSchemaInfo"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidStartTransition", "Sch_InvalidStartTransition"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidStateTransition", "Sch_InvalidStateTransition"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidEndValidation", "Sch_InvalidEndValidation"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementCall", "Sch_InvalidEndElementCall"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementCallTyped", "Sch_InvalidEndElementCallTyped"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementMultiple", "Sch_InvalidEndElementMultiple"); 
  $.Constant({Static:true , Public:false}, "Sch_DuplicateAttribute", "Sch_DuplicateAttribute"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidPartialValidationType", "Sch_InvalidPartialValidationType"); 
  $.Constant({Static:true , Public:false}, "Sch_SchemaElementNameMismatch", "Sch_SchemaElementNameMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_SchemaAttributeNameMismatch", "Sch_SchemaAttributeNameMismatch"); 
  $.Constant({Static:true , Public:false}, "Sch_ValidateAttributeInvalidCall", "Sch_ValidateAttributeInvalidCall"); 
  $.Constant({Static:true , Public:false}, "Sch_ValidateElementInvalidCall", "Sch_ValidateElementInvalidCall"); 
  $.Constant({Static:true , Public:false}, "Sch_EnumNotStarted", "Sch_EnumNotStarted"); 
  $.Constant({Static:true , Public:false}, "Sch_EnumFinished", "Sch_EnumFinished"); 
  $.Constant({Static:true , Public:false}, "SchInf_schema", "SchInf_schema"); 
  $.Constant({Static:true , Public:false}, "SchInf_entity", "SchInf_entity"); 
  $.Constant({Static:true , Public:false}, "SchInf_simplecontent", "SchInf_simplecontent"); 
  $.Constant({Static:true , Public:false}, "SchInf_extension", "SchInf_extension"); 
  $.Constant({Static:true , Public:false}, "SchInf_particle", "SchInf_particle"); 
  $.Constant({Static:true , Public:false}, "SchInf_ct", "SchInf_ct"); 
  $.Constant({Static:true , Public:false}, "SchInf_seq", "SchInf_seq"); 
  $.Constant({Static:true , Public:false}, "SchInf_noseq", "SchInf_noseq"); 
  $.Constant({Static:true , Public:false}, "SchInf_noct", "SchInf_noct"); 
  $.Constant({Static:true , Public:false}, "SchInf_UnknownParticle", "SchInf_UnknownParticle"); 
  $.Constant({Static:true , Public:false}, "SchInf_schematype", "SchInf_schematype"); 
  $.Constant({Static:true , Public:false}, "SchInf_NoElement", "SchInf_NoElement"); 
  $.Constant({Static:true , Public:false}, "Xp_UnclosedString", "Xp_UnclosedString"); 
  $.Constant({Static:true , Public:false}, "Xp_ExprExpected", "Xp_ExprExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidArgumentType", "Xp_InvalidArgumentType"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidNumArgs", "Xp_InvalidNumArgs"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidName", "Xp_InvalidName"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidToken", "Xp_InvalidToken"); 
  $.Constant({Static:true , Public:false}, "Xp_NodeSetExpected", "Xp_NodeSetExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_NotSupported", "Xp_NotSupported"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidPattern", "Xp_InvalidPattern"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidKeyPattern", "Xp_InvalidKeyPattern"); 
  $.Constant({Static:true , Public:false}, "Xp_BadQueryObject", "Xp_BadQueryObject"); 
  $.Constant({Static:true , Public:false}, "Xp_UndefinedXsltContext", "Xp_UndefinedXsltContext"); 
  $.Constant({Static:true , Public:false}, "Xp_NoContext", "Xp_NoContext"); 
  $.Constant({Static:true , Public:false}, "Xp_UndefVar", "Xp_UndefVar"); 
  $.Constant({Static:true , Public:false}, "Xp_UndefFunc", "Xp_UndefFunc"); 
  $.Constant({Static:true , Public:false}, "Xp_FunctionFailed", "Xp_FunctionFailed"); 
  $.Constant({Static:true , Public:false}, "Xp_CurrentNotAllowed", "Xp_CurrentNotAllowed"); 
  $.Constant({Static:true , Public:false}, "Xdom_DualDocumentTypeNode", "Xdom_DualDocumentTypeNode"); 
  $.Constant({Static:true , Public:false}, "Xdom_DualDocumentElementNode", "Xdom_DualDocumentElementNode"); 
  $.Constant({Static:true , Public:false}, "Xdom_DualDeclarationNode", "Xdom_DualDeclarationNode"); 
  $.Constant({Static:true , Public:false}, "Xdom_Import", "Xdom_Import"); 
  $.Constant({Static:true , Public:false}, "Xdom_Import_NullNode", "Xdom_Import_NullNode"); 
  $.Constant({Static:true , Public:false}, "Xdom_NoRootEle", "Xdom_NoRootEle"); 
  $.Constant({Static:true , Public:false}, "Xdom_Attr_Name", "Xdom_Attr_Name"); 
  $.Constant({Static:true , Public:false}, "Xdom_AttrCol_Object", "Xdom_AttrCol_Object"); 
  $.Constant({Static:true , Public:false}, "Xdom_AttrCol_Insert", "Xdom_AttrCol_Insert"); 
  $.Constant({Static:true , Public:false}, "Xdom_NamedNode_Context", "Xdom_NamedNode_Context"); 
  $.Constant({Static:true , Public:false}, "Xdom_Version", "Xdom_Version"); 
  $.Constant({Static:true , Public:false}, "Xdom_standalone", "Xdom_standalone"); 
  $.Constant({Static:true , Public:false}, "Xdom_Ele_Prefix", "Xdom_Ele_Prefix"); 
  $.Constant({Static:true , Public:false}, "Xdom_Ent_Innertext", "Xdom_Ent_Innertext"); 
  $.Constant({Static:true , Public:false}, "Xdom_EntRef_SetVal", "Xdom_EntRef_SetVal"); 
  $.Constant({Static:true , Public:false}, "Xdom_WS_Char", "Xdom_WS_Char"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_SetVal", "Xdom_Node_SetVal"); 
  $.Constant({Static:true , Public:false}, "Xdom_Empty_LocalName", "Xdom_Empty_LocalName"); 
  $.Constant({Static:true , Public:false}, "Xdom_Set_InnerXml", "Xdom_Set_InnerXml"); 
  $.Constant({Static:true , Public:false}, "Xdom_Attr_InUse", "Xdom_Attr_InUse"); 
  $.Constant({Static:true , Public:false}, "Xdom_Enum_ElementList", "Xdom_Enum_ElementList"); 
  $.Constant({Static:true , Public:false}, "Xdom_Invalid_NT_String", "Xdom_Invalid_NT_String"); 
  $.Constant({Static:true , Public:false}, "Xdom_InvalidCharacter_EntityReference", "Xdom_InvalidCharacter_EntityReference"); 
  $.Constant({Static:true , Public:false}, "Xdom_IndexOutOfRange", "Xdom_IndexOutOfRange"); 
  $.Constant({Static:true , Public:false}, "Xdom_Document_Innertext", "Xdom_Document_Innertext"); 
  $.Constant({Static:true , Public:false}, "Xpn_BadPosition", "Xpn_BadPosition"); 
  $.Constant({Static:true , Public:false}, "Xpn_MissingParent", "Xpn_MissingParent"); 
  $.Constant({Static:true , Public:false}, "Xpn_NoContent", "Xpn_NoContent"); 
  $.Constant({Static:true , Public:false}, "Xdom_Load_NoDocument", "Xdom_Load_NoDocument"); 
  $.Constant({Static:true , Public:false}, "Xdom_Load_NoReader", "Xdom_Load_NoReader"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Null_Doc", "Xdom_Node_Null_Doc"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Child", "Xdom_Node_Insert_Child"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Contain", "Xdom_Node_Insert_Contain"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Path", "Xdom_Node_Insert_Path"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Context", "Xdom_Node_Insert_Context"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Location", "Xdom_Node_Insert_Location"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_TypeConflict", "Xdom_Node_Insert_TypeConflict"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Remove_Contain", "Xdom_Node_Remove_Contain"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Remove_Child", "Xdom_Node_Remove_Child"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Modify_ReadOnly", "Xdom_Node_Modify_ReadOnly"); 
  $.Constant({Static:true , Public:false}, "Xdom_TextNode_SplitText", "Xdom_TextNode_SplitText"); 
  $.Constant({Static:true , Public:false}, "Xdom_Attr_Reserved_XmlNS", "Xdom_Attr_Reserved_XmlNS"); 
  $.Constant({Static:true , Public:false}, "Xdom_Node_Cloning", "Xdom_Node_Cloning"); 
  $.Constant({Static:true , Public:false}, "Xnr_ResolveEntity", "Xnr_ResolveEntity"); 
  $.Constant({Static:true , Public:false}, "XPathDocument_MissingSchemas", "XPathDocument_MissingSchemas"); 
  $.Constant({Static:true , Public:false}, "XPathDocument_NotEnoughSchemaInfo", "XPathDocument_NotEnoughSchemaInfo"); 
  $.Constant({Static:true , Public:false}, "XPathDocument_ValidateInvalidNodeType", "XPathDocument_ValidateInvalidNodeType"); 
  $.Constant({Static:true , Public:false}, "XPathDocument_SchemaSetNotAllowed", "XPathDocument_SchemaSetNotAllowed"); 
  $.Constant({Static:true , Public:false}, "XmlBin_MissingEndCDATA", "XmlBin_MissingEndCDATA"); 
  $.Constant({Static:true , Public:false}, "XmlBin_InvalidQNameID", "XmlBin_InvalidQNameID"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_UnexpectedToken", "XmlBinary_UnexpectedToken"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_InvalidSqlDecimal", "XmlBinary_InvalidSqlDecimal"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_InvalidSignature", "XmlBinary_InvalidSignature"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_InvalidProtocolVersion", "XmlBinary_InvalidProtocolVersion"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_UnsupportedCodePage", "XmlBinary_UnsupportedCodePage"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_InvalidStandalone", "XmlBinary_InvalidStandalone"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_NoParserContext", "XmlBinary_NoParserContext"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_ListsOfValuesNotSupported", "XmlBinary_ListsOfValuesNotSupported"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_CastNotSupported", "XmlBinary_CastNotSupported"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_NoRemapPrefix", "XmlBinary_NoRemapPrefix"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_AttrWithNsNoPrefix", "XmlBinary_AttrWithNsNoPrefix"); 
  $.Constant({Static:true , Public:false}, "XmlBinary_ValueTooBig", "XmlBinary_ValueTooBig"); 
  $.Constant({Static:true , Public:false}, "SqlTypes_ArithOverflow", "SqlTypes_ArithOverflow"); 
  $.Constant({Static:true , Public:false}, "SqlTypes_ArithTruncation", "SqlTypes_ArithTruncation"); 
  $.Constant({Static:true , Public:false}, "SqlTypes_DivideByZero", "SqlTypes_DivideByZero"); 
  $.Constant({Static:true , Public:false}, "XmlMissingType", "XmlMissingType"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedType", "XmlUnsupportedType"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerUnsupportedType", "XmlSerializerUnsupportedType"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerUnsupportedMember", "XmlSerializerUnsupportedMember"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedTypeKind", "XmlUnsupportedTypeKind"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedSoapTypeKind", "XmlUnsupportedSoapTypeKind"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedIDictionary", "XmlUnsupportedIDictionary"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedIDictionaryDetails", "XmlUnsupportedIDictionaryDetails"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateTypeName", "XmlDuplicateTypeName"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableNameMissing1", "XmlSerializableNameMissing1"); 
  $.Constant({Static:true , Public:false}, "XmlConstructorInaccessible", "XmlConstructorInaccessible"); 
  $.Constant({Static:true , Public:false}, "XmlTypeInaccessible", "XmlTypeInaccessible"); 
  $.Constant({Static:true , Public:false}, "XmlTypeStatic", "XmlTypeStatic"); 
  $.Constant({Static:true , Public:false}, "XmlNoDefaultAccessors", "XmlNoDefaultAccessors"); 
  $.Constant({Static:true , Public:false}, "XmlNoAddMethod", "XmlNoAddMethod"); 
  $.Constant({Static:true , Public:false}, "XmlAttributeSetAgain", "XmlAttributeSetAgain"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalWildcard", "XmlIllegalWildcard"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalArrayElement", "XmlIllegalArrayElement"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalForm", "XmlIllegalForm"); 
  $.Constant({Static:true , Public:false}, "XmlBareTextMember", "XmlBareTextMember"); 
  $.Constant({Static:true , Public:false}, "XmlBareAttributeMember", "XmlBareAttributeMember"); 
  $.Constant({Static:true , Public:false}, "XmlReflectionError", "XmlReflectionError"); 
  $.Constant({Static:true , Public:false}, "XmlTypeReflectionError", "XmlTypeReflectionError"); 
  $.Constant({Static:true , Public:false}, "XmlPropertyReflectionError", "XmlPropertyReflectionError"); 
  $.Constant({Static:true , Public:false}, "XmlFieldReflectionError", "XmlFieldReflectionError"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidDataTypeUsage", "XmlInvalidDataTypeUsage"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidXsdDataType", "XmlInvalidXsdDataType"); 
  $.Constant({Static:true , Public:false}, "XmlDataTypeMismatch", "XmlDataTypeMismatch"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalTypeContext", "XmlIllegalTypeContext"); 
  $.Constant({Static:true , Public:false}, "XmlUdeclaredXsdType", "XmlUdeclaredXsdType"); 
  $.Constant({Static:true , Public:false}, "XmlAnyElementNamespace", "XmlAnyElementNamespace"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidConstantAttribute", "XmlInvalidConstantAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalDefault", "XmlIllegalDefault"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalAttributesArrayAttribute", "XmlIllegalAttributesArrayAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalElementsArrayAttribute", "XmlIllegalElementsArrayAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalArrayArrayAttribute", "XmlIllegalArrayArrayAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalAttribute", "XmlIllegalAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalType", "XmlIllegalType"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalAttrOrText", "XmlIllegalAttrOrText"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalSoapAttribute", "XmlIllegalSoapAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalAttrOrTextInterface", "XmlIllegalAttrOrTextInterface"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalAttributeFlagsArray", "XmlIllegalAttributeFlagsArray"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalAnyElement", "XmlIllegalAnyElement"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidIsNullable", "XmlInvalidIsNullable"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidNotNullable", "XmlInvalidNotNullable"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidFormUnqualified", "XmlInvalidFormUnqualified"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateNamespace", "XmlDuplicateNamespace"); 
  $.Constant({Static:true , Public:false}, "XmlElementHasNoName", "XmlElementHasNoName"); 
  $.Constant({Static:true , Public:false}, "XmlAttributeHasNoName", "XmlAttributeHasNoName"); 
  $.Constant({Static:true , Public:false}, "XmlElementImportedTwice", "XmlElementImportedTwice"); 
  $.Constant({Static:true , Public:false}, "XmlHiddenMember", "XmlHiddenMember"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidXmlOverride", "XmlInvalidXmlOverride"); 
  $.Constant({Static:true , Public:false}, "XmlMembersDeriveError", "XmlMembersDeriveError"); 
  $.Constant({Static:true , Public:false}, "XmlTypeUsedTwice", "XmlTypeUsedTwice"); 
  $.Constant({Static:true , Public:false}, "XmlMissingGroup", "XmlMissingGroup"); 
  $.Constant({Static:true , Public:false}, "XmlMissingAttributeGroup", "XmlMissingAttributeGroup"); 
  $.Constant({Static:true , Public:false}, "XmlMissingDataType", "XmlMissingDataType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidEncoding", "XmlInvalidEncoding"); 
  $.Constant({Static:true , Public:false}, "XmlMissingElement", "XmlMissingElement"); 
  $.Constant({Static:true , Public:false}, "XmlMissingAttribute", "XmlMissingAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlMissingMethodEnum", "XmlMissingMethodEnum"); 
  $.Constant({Static:true , Public:false}, "XmlNoAttributeHere", "XmlNoAttributeHere"); 
  $.Constant({Static:true , Public:false}, "XmlNeedAttributeHere", "XmlNeedAttributeHere"); 
  $.Constant({Static:true , Public:false}, "XmlElementNameMismatch", "XmlElementNameMismatch"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedDefaultType", "XmlUnsupportedDefaultType"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedDefaultValue", "XmlUnsupportedDefaultValue"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidDefaultValue", "XmlInvalidDefaultValue"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidDefaultEnumValue", "XmlInvalidDefaultEnumValue"); 
  $.Constant({Static:true , Public:false}, "XmlUnknownNode", "XmlUnknownNode"); 
  $.Constant({Static:true , Public:false}, "XmlUnknownConstant", "XmlUnknownConstant"); 
  $.Constant({Static:true , Public:false}, "XmlSerializeError", "XmlSerializeError"); 
  $.Constant({Static:true , Public:false}, "XmlSerializeErrorDetails", "XmlSerializeErrorDetails"); 
  $.Constant({Static:true , Public:false}, "XmlCompilerError", "XmlCompilerError"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaDuplicateNamespace", "XmlSchemaDuplicateNamespace"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaCompiled", "XmlSchemaCompiled"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSchemaExtension", "XmlInvalidSchemaExtension"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArrayDimentions", "XmlInvalidArrayDimentions"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeName", "XmlInvalidArrayTypeName"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeNamespace", "XmlInvalidArrayTypeNamespace"); 
  $.Constant({Static:true , Public:false}, "XmlMissingArrayType", "XmlMissingArrayType"); 
  $.Constant({Static:true , Public:false}, "XmlEmptyArrayType", "XmlEmptyArrayType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArraySyntax", "XmlInvalidArraySyntax"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeSyntax", "XmlInvalidArrayTypeSyntax"); 
  $.Constant({Static:true , Public:false}, "XmlMismatchedArrayBrackets", "XmlMismatchedArrayBrackets"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArrayLength", "XmlInvalidArrayLength"); 
  $.Constant({Static:true , Public:false}, "XmlMissingHref", "XmlMissingHref"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidHref", "XmlInvalidHref"); 
  $.Constant({Static:true , Public:false}, "XmlUnknownType", "XmlUnknownType"); 
  $.Constant({Static:true , Public:false}, "XmlAbstractType", "XmlAbstractType"); 
  $.Constant({Static:true , Public:false}, "XmlMappingsScopeMismatch", "XmlMappingsScopeMismatch"); 
  $.Constant({Static:true , Public:false}, "XmlMethodTypeNameConflict", "XmlMethodTypeNameConflict"); 
  $.Constant({Static:true , Public:false}, "XmlCannotReconcileAccessor", "XmlCannotReconcileAccessor"); 
  $.Constant({Static:true , Public:false}, "XmlCannotReconcileAttributeAccessor", "XmlCannotReconcileAttributeAccessor"); 
  $.Constant({Static:true , Public:false}, "XmlCannotReconcileAccessorDefault", "XmlCannotReconcileAccessorDefault"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidTypeAttributes", "XmlInvalidTypeAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidAttributeUse", "XmlInvalidAttributeUse"); 
  $.Constant({Static:true , Public:false}, "XmlTypesDuplicate", "XmlTypesDuplicate"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSoapArray", "XmlInvalidSoapArray"); 
  $.Constant({Static:true , Public:false}, "XmlCannotIncludeInSchema", "XmlCannotIncludeInSchema"); 
  $.Constant({Static:true , Public:false}, "XmlSoapCannotIncludeInSchema", "XmlSoapCannotIncludeInSchema"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSerializable", "XmlInvalidSerializable"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidUseOfType", "XmlInvalidUseOfType"); 
  $.Constant({Static:true , Public:false}, "XmlUnxpectedType", "XmlUnxpectedType"); 
  $.Constant({Static:true , Public:false}, "XmlUnknownAnyElement", "XmlUnknownAnyElement"); 
  $.Constant({Static:true , Public:false}, "XmlMultipleAttributeOverrides", "XmlMultipleAttributeOverrides"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidEnumAttribute", "XmlInvalidEnumAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidReturnPosition", "XmlInvalidReturnPosition"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidElementAttribute", "XmlInvalidElementAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidVoid", "XmlInvalidVoid"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidContent", "XmlInvalidContent"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSchemaElementType", "XmlInvalidSchemaElementType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSubstitutionGroupUse", "XmlInvalidSubstitutionGroupUse"); 
  $.Constant({Static:true , Public:false}, "XmlElementMissingType", "XmlElementMissingType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidAnyAttributeUse", "XmlInvalidAnyAttributeUse"); 
  $.Constant({Static:true , Public:false}, "XmlSoapInvalidAttributeUse", "XmlSoapInvalidAttributeUse"); 
  $.Constant({Static:true , Public:false}, "XmlSoapInvalidChoice", "XmlSoapInvalidChoice"); 
  $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupRef", "XmlSoapUnsupportedGroupRef"); 
  $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupRepeat", "XmlSoapUnsupportedGroupRepeat"); 
  $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupNested", "XmlSoapUnsupportedGroupNested"); 
  $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupAny", "XmlSoapUnsupportedGroupAny"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidEnumContent", "XmlInvalidEnumContent"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidAttributeType", "XmlInvalidAttributeType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidBaseType", "XmlInvalidBaseType"); 
  $.Constant({Static:true , Public:false}, "XmlPrimitiveBaseType", "XmlPrimitiveBaseType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidIdentifier", "XmlInvalidIdentifier"); 
  $.Constant({Static:true , Public:false}, "XmlGenError", "XmlGenError"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidXmlns", "XmlInvalidXmlns"); 
  $.Constant({Static:true , Public:false}, "XmlCircularReference", "XmlCircularReference"); 
  $.Constant({Static:true , Public:false}, "XmlCircularReference2", "XmlCircularReference2"); 
  $.Constant({Static:true , Public:false}, "XmlAnonymousBaseType", "XmlAnonymousBaseType"); 
  $.Constant({Static:true , Public:false}, "XmlMissingSchema", "XmlMissingSchema"); 
  $.Constant({Static:true , Public:false}, "XmlNoSerializableMembers", "XmlNoSerializableMembers"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalOverride", "XmlIllegalOverride"); 
  $.Constant({Static:true , Public:false}, "XmlReadOnlyCollection", "XmlReadOnlyCollection"); 
  $.Constant({Static:true , Public:false}, "XmlRpcNestedValueType", "XmlRpcNestedValueType"); 
  $.Constant({Static:true , Public:false}, "XmlRpcRefsInValueType", "XmlRpcRefsInValueType"); 
  $.Constant({Static:true , Public:false}, "XmlRpcArrayOfValueTypes", "XmlRpcArrayOfValueTypes"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateElementName", "XmlDuplicateElementName"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateAttributeName", "XmlDuplicateAttributeName"); 
  $.Constant({Static:true , Public:false}, "XmlBadBaseElement", "XmlBadBaseElement"); 
  $.Constant({Static:true , Public:false}, "XmlBadBaseType", "XmlBadBaseType"); 
  $.Constant({Static:true , Public:false}, "XmlUndefinedAlias", "XmlUndefinedAlias"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierType", "XmlChoiceIdentifierType"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierArrayType", "XmlChoiceIdentifierArrayType"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierTypeEnum", "XmlChoiceIdentifierTypeEnum"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferMemberMissing", "XmlChoiceIdentiferMemberMissing"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferAmbiguous", "XmlChoiceIdentiferAmbiguous"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferMissing", "XmlChoiceIdentiferMissing"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceMissingValue", "XmlChoiceMissingValue"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceMissingAnyValue", "XmlChoiceMissingAnyValue"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceMismatchChoiceException", "XmlChoiceMismatchChoiceException"); 
  $.Constant({Static:true , Public:false}, "XmlArrayItemAmbiguousTypes", "XmlArrayItemAmbiguousTypes"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedInterface", "XmlUnsupportedInterface"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedInterfaceDetails", "XmlUnsupportedInterfaceDetails"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedRank", "XmlUnsupportedRank"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedInheritance", "XmlUnsupportedInheritance"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalMultipleText", "XmlIllegalMultipleText"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalMultipleTextMembers", "XmlIllegalMultipleTextMembers"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalArrayTextAttribute", "XmlIllegalArrayTextAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalTypedTextAttribute", "XmlIllegalTypedTextAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlIllegalSimpleContentExtension", "XmlIllegalSimpleContentExtension"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidCast", "XmlInvalidCast"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidCastWithId", "XmlInvalidCastWithId"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidArrayRef", "XmlInvalidArrayRef"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidNullCast", "XmlInvalidNullCast"); 
  $.Constant({Static:true , Public:false}, "XmlMultipleXmlns", "XmlMultipleXmlns"); 
  $.Constant({Static:true , Public:false}, "XmlMultipleXmlnsMembers", "XmlMultipleXmlnsMembers"); 
  $.Constant({Static:true , Public:false}, "XmlXmlnsInvalidType", "XmlXmlnsInvalidType"); 
  $.Constant({Static:true , Public:false}, "XmlSoleXmlnsAttribute", "XmlSoleXmlnsAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlConstructorHasSecurityAttributes", "XmlConstructorHasSecurityAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlPropertyHasSecurityAttributes", "XmlPropertyHasSecurityAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlMethodHasSecurityAttributes", "XmlMethodHasSecurityAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlDefaultAccessorHasSecurityAttributes", "XmlDefaultAccessorHasSecurityAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidChoiceIdentifierValue", "XmlInvalidChoiceIdentifierValue"); 
  $.Constant({Static:true , Public:false}, "XmlAnyElementDuplicate", "XmlAnyElementDuplicate"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdDuplicate", "XmlChoiceIdDuplicate"); 
  $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierMismatch", "XmlChoiceIdentifierMismatch"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedRedefine", "XmlUnsupportedRedefine"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateElementInScope", "XmlDuplicateElementInScope"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateElementInScope1", "XmlDuplicateElementInScope1"); 
  $.Constant({Static:true , Public:false}, "XmlNoPartialTrust", "XmlNoPartialTrust"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidEncodingNotEncoded1", "XmlInvalidEncodingNotEncoded1"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidEncoding3", "XmlInvalidEncoding3"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSpecifiedType", "XmlInvalidSpecifiedType"); 
  $.Constant({Static:true , Public:false}, "XmlUnsupportedOpenGenericType", "XmlUnsupportedOpenGenericType"); 
  $.Constant({Static:true , Public:false}, "XmlMismatchSchemaObjects", "XmlMismatchSchemaObjects"); 
  $.Constant({Static:true , Public:false}, "XmlCircularTypeReference", "XmlCircularTypeReference"); 
  $.Constant({Static:true , Public:false}, "XmlCircularGroupReference", "XmlCircularGroupReference"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitElementNamespace", "XmlRpcLitElementNamespace"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitElementNullable", "XmlRpcLitElementNullable"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitElements", "XmlRpcLitElements"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitArrayElement", "XmlRpcLitArrayElement"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitAttributeAttributes", "XmlRpcLitAttributeAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitAttributes", "XmlRpcLitAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlSequenceMembers", "XmlSequenceMembers"); 
  $.Constant({Static:true , Public:false}, "XmlRpcLitXmlns", "XmlRpcLitXmlns"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateNs", "XmlDuplicateNs"); 
  $.Constant({Static:true , Public:false}, "XmlAnonymousInclude", "XmlAnonymousInclude"); 
  $.Constant({Static:true , Public:false}, "RefSyntaxNotSupportedForElements0", "RefSyntaxNotSupportedForElements0"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaIncludeLocation", "XmlSchemaIncludeLocation"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableSchemaError", "XmlSerializableSchemaError"); 
  $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodName", "XmlGetSchemaMethodName"); 
  $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodMissing", "XmlGetSchemaMethodMissing"); 
  $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodReturnType", "XmlGetSchemaMethodReturnType"); 
  $.Constant({Static:true , Public:false}, "XmlGetSchemaEmptyTypeName", "XmlGetSchemaEmptyTypeName"); 
  $.Constant({Static:true , Public:false}, "XmlGetSchemaTypeMissing", "XmlGetSchemaTypeMissing"); 
  $.Constant({Static:true , Public:false}, "XmlGetSchemaInclude", "XmlGetSchemaInclude"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableAttributes", "XmlSerializableAttributes"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableMergeItem", "XmlSerializableMergeItem"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableBadDerivation", "XmlSerializableBadDerivation"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableMissingClrType", "XmlSerializableMissingClrType"); 
  $.Constant({Static:true , Public:false}, "XmlCircularDerivation", "XmlCircularDerivation"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerAccessDenied", "XmlSerializerAccessDenied"); 
  $.Constant({Static:true , Public:false}, "XmlIdentityAccessDenied", "XmlIdentityAccessDenied"); 
  $.Constant({Static:true , Public:false}, "XmlMelformMapping", "XmlMelformMapping"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaSyntaxErrorDetails", "XmlSchemaSyntaxErrorDetails"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaElementReference", "XmlSchemaElementReference"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaAttributeReference", "XmlSchemaAttributeReference"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaItem", "XmlSchemaItem"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaNamedItem", "XmlSchemaNamedItem"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaContentDef", "XmlSchemaContentDef"); 
  $.Constant({Static:true , Public:false}, "XmlSchema", "XmlSchema"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerCompileFailed", "XmlSerializerCompileFailed"); 
  $.Constant({Static:true , Public:false}, "XmlSerializableRootDupName", "XmlSerializableRootDupName"); 
  $.Constant({Static:true , Public:false}, "XmlDropDefaultAttribute", "XmlDropDefaultAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlDropAttributeValue", "XmlDropAttributeValue"); 
  $.Constant({Static:true , Public:false}, "XmlDropArrayAttributeValue", "XmlDropArrayAttributeValue"); 
  $.Constant({Static:true , Public:false}, "XmlDropNonPrimitiveAttributeValue", "XmlDropNonPrimitiveAttributeValue"); 
  $.Constant({Static:true , Public:false}, "XmlNotKnownDefaultValue", "XmlNotKnownDefaultValue"); 
  $.Constant({Static:true , Public:false}, "XmlRemarks", "XmlRemarks"); 
  $.Constant({Static:true , Public:false}, "XmlCodegenWarningDetails", "XmlCodegenWarningDetails"); 
  $.Constant({Static:true , Public:false}, "XmlExtensionComment", "XmlExtensionComment"); 
  $.Constant({Static:true , Public:false}, "XmlExtensionDuplicateDefinition", "XmlExtensionDuplicateDefinition"); 
  $.Constant({Static:true , Public:false}, "XmlImporterExtensionBadLocalTypeName", "XmlImporterExtensionBadLocalTypeName"); 
  $.Constant({Static:true , Public:false}, "XmlImporterExtensionBadTypeName", "XmlImporterExtensionBadTypeName"); 
  $.Constant({Static:true , Public:false}, "XmlConfigurationDuplicateExtension", "XmlConfigurationDuplicateExtension"); 
  $.Constant({Static:true , Public:false}, "XmlPregenMissingDirectory", "XmlPregenMissingDirectory"); 
  $.Constant({Static:true , Public:false}, "XmlPregenMissingTempDirectory", "XmlPregenMissingTempDirectory"); 
  $.Constant({Static:true , Public:false}, "XmlPregenTypeDynamic", "XmlPregenTypeDynamic"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerExpiredDetails", "XmlSerializerExpiredDetails"); 
  $.Constant({Static:true , Public:false}, "XmlSerializerExpired", "XmlSerializerExpired"); 
  $.Constant({Static:true , Public:false}, "XmlPregenAssemblyDynamic", "XmlPregenAssemblyDynamic"); 
  $.Constant({Static:true , Public:false}, "XmlNotSerializable", "XmlNotSerializable"); 
  $.Constant({Static:true , Public:false}, "XmlPregenOrphanType", "XmlPregenOrphanType"); 
  $.Constant({Static:true , Public:false}, "XmlPregenCannotLoad", "XmlPregenCannotLoad"); 
  $.Constant({Static:true , Public:false}, "XmlPregenInvalidXmlSerializerAssemblyAttribute", "XmlPregenInvalidXmlSerializerAssemblyAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlSequenceInconsistent", "XmlSequenceInconsistent"); 
  $.Constant({Static:true , Public:false}, "XmlSequenceUnique", "XmlSequenceUnique"); 
  $.Constant({Static:true , Public:false}, "XmlSequenceHierarchy", "XmlSequenceHierarchy"); 
  $.Constant({Static:true , Public:false}, "XmlSequenceMatch", "XmlSequenceMatch"); 
  $.Constant({Static:true , Public:false}, "XmlDisallowNegativeValues", "XmlDisallowNegativeValues"); 
  $.Constant({Static:true , Public:false}, "Xml_BadComment", "Xml_BadComment"); 
  $.Constant({Static:true , Public:false}, "Xml_NumEntityOverflow", "Xml_NumEntityOverflow"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedCharacter", "Xml_UnexpectedCharacter"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedToken1", "Xml_UnexpectedToken1"); 
  $.Constant({Static:true , Public:false}, "Xml_TagMismatchFileName", "Xml_TagMismatchFileName"); 
  $.Constant({Static:true , Public:false}, "Xml_ReservedNs", "Xml_ReservedNs"); 
  $.Constant({Static:true , Public:false}, "Xml_BadElementData", "Xml_BadElementData"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedElement", "Xml_UnexpectedElement"); 
  $.Constant({Static:true , Public:false}, "Xml_TagNotInTheSameEntity", "Xml_TagNotInTheSameEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidPartialContentData", "Xml_InvalidPartialContentData"); 
  $.Constant({Static:true , Public:false}, "Xml_CanNotStartWithXmlInNamespace", "Xml_CanNotStartWithXmlInNamespace"); 
  $.Constant({Static:true , Public:false}, "Xml_UnparsedEntity", "Xml_UnparsedEntity"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidContentForThisNode", "Xml_InvalidContentForThisNode"); 
  $.Constant({Static:true , Public:false}, "Xml_MissingEncodingDecl", "Xml_MissingEncodingDecl"); 
  $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogatePair", "Xml_InvalidSurrogatePair"); 
  $.Constant({Static:true , Public:false}, "Sch_ErrorPosition", "Sch_ErrorPosition"); 
  $.Constant({Static:true , Public:false}, "Sch_ReservedNsDecl", "Sch_ReservedNsDecl"); 
  $.Constant({Static:true , Public:false}, "Sch_NotInSchemaCollection", "Sch_NotInSchemaCollection"); 
  $.Constant({Static:true , Public:false}, "Sch_NotationNotAttr", "Sch_NotationNotAttr"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidContent", "Sch_InvalidContent"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidContentExpecting", "Sch_InvalidContentExpecting"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidTextWhiteSpace", "Sch_InvalidTextWhiteSpace"); 
  $.Constant({Static:true , Public:false}, "Sch_XSCHEMA", "Sch_XSCHEMA"); 
  $.Constant({Static:true , Public:false}, "Sch_DubSchema", "Sch_DubSchema"); 
  $.Constant({Static:true , Public:false}, "Xp_TokenExpected", "Xp_TokenExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_NodeTestExpected", "Xp_NodeTestExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_NumberExpected", "Xp_NumberExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_QueryExpected", "Xp_QueryExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidArgument", "Xp_InvalidArgument"); 
  $.Constant({Static:true , Public:false}, "Xp_FunctionExpected", "Xp_FunctionExpected"); 
  $.Constant({Static:true , Public:false}, "Xp_InvalidPatternString", "Xp_InvalidPatternString"); 
  $.Constant({Static:true , Public:false}, "Xp_BadQueryString", "Xp_BadQueryString"); 
  $.Constant({Static:true , Public:false}, "XdomXpNav_NullParam", "XdomXpNav_NullParam"); 
  $.Constant({Static:true , Public:false}, "Xdom_Load_NodeType", "Xdom_Load_NodeType"); 
  $.Constant({Static:true , Public:false}, "XmlMissingMethod", "XmlMissingMethod"); 
  $.Constant({Static:true , Public:false}, "XmlIncludeSerializableError", "XmlIncludeSerializableError"); 
  $.Constant({Static:true , Public:false}, "XmlCompilerDynModule", "XmlCompilerDynModule"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidSchemaType", "XmlInvalidSchemaType"); 
  $.Constant({Static:true , Public:false}, "XmlInvalidAnyUse", "XmlInvalidAnyUse"); 
  $.Constant({Static:true , Public:false}, "XmlSchemaSyntaxError", "XmlSchemaSyntaxError"); 
  $.Constant({Static:true , Public:false}, "XmlDuplicateChoiceElement", "XmlDuplicateChoiceElement"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_BadTimeSpan", "XmlConvert_BadTimeSpan"); 
  $.Constant({Static:true , Public:false}, "XmlConvert_BadBoolean", "XmlConvert_BadBoolean"); 
  $.Constant({Static:true , Public:false}, "Xml_UnexpectedToken", "Xml_UnexpectedToken"); 
  $.Constant({Static:true , Public:false}, "Xml_PartialContentNodeTypeNotSupported", "Xml_PartialContentNodeTypeNotSupported"); 
  $.Constant({Static:true , Public:false}, "Sch_AttributeValueDataType", "Sch_AttributeValueDataType"); 
  $.Constant({Static:true , Public:false}, "Sch_ElementValueDataType", "Sch_ElementValueDataType"); 
  $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAny", "Sch_NonDeterministicAny"); 
  $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespace", "Sch_MismatchTargetNamespace"); 
  $.Constant({Static:true , Public:false}, "Sch_UnionFailed", "Sch_UnionFailed"); 
  $.Constant({Static:true , Public:false}, "Sch_XsiTypeBlocked", "Sch_XsiTypeBlocked"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementInEmpty", "Sch_InvalidElementInEmpty"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidElementInTextOnly", "Sch_InvalidElementInTextOnly"); 
  $.Constant({Static:true , Public:false}, "Sch_InvalidNameAttribute", "Sch_InvalidNameAttribute"); 
  $.Constant({Static:true , Public:false}, "XmlInternalError", "XmlInternalError"); 
  $.Constant({Static:true , Public:false}, "XmlInternalErrorDetails", "XmlInternalErrorDetails"); 
  $.Constant({Static:true , Public:false}, "XmlInternalErrorMethod", "XmlInternalErrorMethod"); 
  $.Constant({Static:true , Public:false}, "XmlInternalErrorReaderAdvance", "XmlInternalErrorReaderAdvance"); 
  $.Constant({Static:true , Public:false}, "Enc_InvalidByteInEncoding", "Enc_InvalidByteInEncoding"); 
  $.Constant({Static:true , Public:false}, "Arg_ExpectingXmlTextReader", "Arg_ExpectingXmlTextReader"); 
  $.Constant({Static:true , Public:false}, "Arg_CannotCreateNode", "Arg_CannotCreateNode"); 
  $.Constant({Static:true , Public:false}, "Arg_IncompatibleParamType", "Arg_IncompatibleParamType"); 
  $.Constant({Static:true , Public:false}, "XmlNonCLSCompliantException", "XmlNonCLSCompliantException"); 
  $.Field({Static:true , Public:false}, "loader", $.Type); 
  $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

});

