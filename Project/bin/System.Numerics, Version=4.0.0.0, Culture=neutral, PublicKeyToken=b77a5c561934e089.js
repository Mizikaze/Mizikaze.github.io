/* Generated by JSIL v0.6.0 build 23610. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm0C = JSIL.DeclareAssembly("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Numerics");
JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Numerics.BigInteger", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1648B, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1648C, null, [$.UInt32], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1648D, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1648E, null, [$.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1648F, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16490, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16491, null, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16492, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x164FB, null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x164FC, null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x164FD, null, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Abs", 
    $sig.make(0x1649A, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x1649B, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
    $sig.make(0x164F9, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:false}, "BitLengthOfUInt", 
    $sig.make(0x1650A, $.Int32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Compare", 
    $sig.make(0x16499, $.Int32, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x16482, $.Int32, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x16483, $.Int32, [$.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x16484, $.Int32, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x16485, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x1649E, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "DivRem", 
    $sig.make(0x164A0, $.Type, [
        $.Type, $.Type, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x16478, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x1647D, $.Boolean, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x16480, $.Boolean, [$.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x16481, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get__Bits", 
    $sig.make(0x16474, $jsilcore.TypeRef("System.Array", [$.UInt32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get__Sign", 
    $sig.make(0x16472, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEven", 
    $sig.make(0x16470, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsOne", 
    $sig.make(0x1646F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsPowerOfTwo", 
    $sig.make(0x1646D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsZero", 
    $sig.make(0x1646E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MinusOne", 
    $sig.make(0x1646C, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_One", 
    $sig.make(0x1646B, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Sign", 
    $sig.make(0x16471, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x1646A, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:false}, "GetDiffLength", 
    $sig.make(0x16510, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x1647A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetPartsForBitManipulation", 
    $sig.make(0x1650C, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GreatestCommonDivisor", 
    $sig.make(0x164A5, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Length", 
    $sig.make(0x16508, $.Int32, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Log", 
    $sig.make(0x164A2, $.Double, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Log", 
    $sig.make(0x164A3, $.Double, [$.Type, $.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Log10", 
    $sig.make(0x164A4, $.Double, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x164A6, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x164A7, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ModPow", 
    $sig.make(0x164A8, $.Type, [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ModPowInner", 
    $sig.make(0x16503, null, [
        $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ModPowInner32", 
    $sig.make(0x16505, null, [
        $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ModPowSquareModValue", 
    $sig.make(0x16502, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ModPowUpdateResult", 
    $sig.make(0x16500, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigIntegerBuilder")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MulLower", 
    $sig.make(0x1650F, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.UInt32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x1649D, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:false}, "MulUpper", 
    $sig.make(0x1650E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.UInt32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x164A1, $.Type, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "ObjectInvariant", 
    $sig.make(0x164F8, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x164CA, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
    $sig.make(0x164C0, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
    $sig.make(0x164C1, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Decrement", 
    $sig.make(0x164C9, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0x164CD, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x164D3, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x164D9, $.Boolean, [$.Type, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x164DF, $.Boolean, [$.Int64, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x164E5, $.Boolean, [$.Type, $.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x164F5, $.Boolean, [$.UInt64, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
    $sig.make(0x164C2, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B2, $.Type, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B3, $.Type, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B4, $.Type, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B5, $.Byte, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B6, $.SByte, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B7, $.Int16, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B8, $.UInt16, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164B9, $.Int32, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164BA, $.UInt32, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164BB, $.Int64, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164BC, $.UInt64, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164BD, $.Single, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164BE, $.Double, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x164BF, $asm06.TypeRef("System.Decimal"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x164D1, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x164D7, $.Boolean, [$.Type, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x164DD, $.Boolean, [$.Int64, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x164E3, $.Boolean, [$.Type, $.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x164EE, $.Boolean, [$.UInt64, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x164D2, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x164D8, $.Boolean, [$.Type, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x164DE, $.Boolean, [$.Int64, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x164E4, $.Boolean, [$.Type, $.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x164F1, $.Boolean, [$.UInt64, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164AA, $.Type, [$.Byte], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164AB, $.Type, [$.SByte], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164AC, $.Type, [$.Int16], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164AD, $.Type, [$.UInt16], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164AE, $.Type, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164AF, $.Type, [$.UInt32], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164B0, $.Type, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x164B1, $.Type, [$.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Increment", 
    $sig.make(0x164C8, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x164D4, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x164DA, $.Boolean, [$.Type, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x164E0, $.Boolean, [$.Int64, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x164E6, $.Boolean, [$.Type, $.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x164F7, $.Boolean, [$.UInt64, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_LeftShift", 
    $sig.make(0x164C3, $.Type, [$.Type, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x164CF, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x164D5, $.Boolean, [$.Type, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x164DB, $.Boolean, [$.Int64, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x164E1, $.Boolean, [$.Type, $.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x164E7, $.Boolean, [$.UInt64, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x164D0, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x164D6, $.Boolean, [$.Type, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x164DC, $.Boolean, [$.Int64, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x164E2, $.Boolean, [$.Type, $.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x164E8, $.Boolean, [$.UInt64, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
    $sig.make(0x164CE, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x164CC, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
    $sig.make(0x164C5, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_RightShift", 
    $sig.make(0x164C4, $.Type, [$.Type, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x164CB, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x164C6, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryPlus", 
    $sig.make(0x164C7, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Parse", 
    $sig.make(0x16493, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Parse", 
    $sig.make(0x16494, $.Type, [$.String, $asm06.TypeRef("System.Globalization.NumberStyles")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Parse", 
    $sig.make(0x16495, $.Type, [$.String, $asm06.TypeRef("System.IFormatProvider")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Parse", 
    $sig.make(0x16496, $.Type, [
        $.String, $asm06.TypeRef("System.Globalization.NumberStyles"), 
        $asm06.TypeRef("System.IFormatProvider")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Pow", 
    $sig.make(0x164A9, $.Type, [$.Type, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Remainder", 
    $sig.make(0x1649F, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "SetBitsFromDouble", 
    $sig.make(0x16507, null, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x1649C, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
    $sig.make(0x16486, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x16487, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x16488, $.String, [$asm06.TypeRef("System.IFormatProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x16489, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x1648A, $.String, [$.String, $asm06.TypeRef("System.IFormatProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToUInt32Array", 
    $sig.make(0x164FA, $jsilcore.TypeRef("System.Array", [$.UInt32]), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryParse", 
    $sig.make(0x16497, $.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryParse", 
    $sig.make(0x16498, $.Boolean, [
        $.String, $asm06.TypeRef("System.Globalization.NumberStyles"), 
        $asm06.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.Field({Static:false, Public:false}, "_sign", $.Int32); 
  $.Field({Static:false, Public:false}, "_bits", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnMinInt", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnOneInt", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnZeroInt", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnMinusOneInt", $.Type); 
  $.Constant({Static:true , Public:false}, "knMaskHighBit", -2147483648); 
  $.Constant({Static:true , Public:false}, "kuMaskHighBit", 2147483648); 
  $.Constant({Static:true , Public:false}, "kcbitUint", 32); 
  $.Constant({Static:true , Public:false}, "kcbitUlong", 64); 
  $.Constant({Static:true , Public:false}, "DecimalScaleFactorMask", 16711680); 
  $.Constant({Static:true , Public:false}, "DecimalSignMask", -2147483648); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AADF, null, [], []), 
    function BigInteger__cctor () {
      $thisType.s_bnMinInt = new $thisType();
      $thisType.s_bnOneInt = new $thisType();
      $thisType.s_bnZeroInt = new $thisType();
      $thisType.s_bnMinusOneInt = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Zero", $.Type);

  $.Property({Static:true , Public:true }, "One", $.Type);

  $.Property({Static:true , Public:true }, "MinusOne", $.Type);

  $.Property({Static:false, Public:true }, "IsPowerOfTwo", $.Boolean);

  $.Property({Static:false, Public:true }, "IsZero", $.Boolean);

  $.Property({Static:false, Public:true }, "IsOne", $.Boolean);

  $.Property({Static:false, Public:true }, "IsEven", $.Boolean);

  $.Property({Static:false, Public:true }, "Sign", $.Int32);

  $.Property({Static:false, Public:false}, "_Sign", $.Int32);

  $.Property({Static:false, Public:false}, "_Bits", $jsilcore.TypeRef("System.Array", [$.UInt32]));

  $.ImplementInterfaces(
      $asm06.TypeRef("System.IFormattable"), $asm06.TypeRef("System.IComparable"), 
      $asm06.TypeRef("System.IComparable`1", [$.Type]), $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Numerics.Complex", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2589B, null, [$.Double, $.Double], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Abs", 
    $sig.make(0x258A9, $.Double, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Acos", 
    $sig.make(0x258DF, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x2589E, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Asin", 
    $sig.make(0x258DB, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Atan", 
    $sig.make(0x258E4, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
    $sig.make(0x258AB, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Cos", 
    $sig.make(0x258DC, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Cosh", 
    $sig.make(0x258DD, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x258A1, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x258B2, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x258B4, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Exp", 
    $sig.make(0x258EA, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromPolarCoordinates", 
    $sig.make(0x2589C, $.Type, [$.Double, $.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Imaginary", 
    $sig.make(0x25898, $.Double, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Magnitude", 
    $sig.make(0x25899, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Phase", 
    $sig.make(0x2589A, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Real", 
    $sig.make(0x25897, $.Double, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x258D8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Log", 
    $sig.make(0x258E5, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Log", 
    $sig.make(0x258E7, $.Type, [$.Type, $.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Log10", 
    $sig.make(0x258E9, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x258A0, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x2589D, $.Type, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x258A5, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0x258A8, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x258AE, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x258C8, $.Type, [$asm0C.TypeRef("System.Numerics.BigInteger")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x258CA, $.Type, [$asm06.TypeRef("System.Decimal")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258B5, $.Type, [$.Int16], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258B6, $.Type, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258B8, $.Type, [$.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258BB, $.Type, [$.UInt16], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258BC, $.Type, [$.UInt32], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258BD, $.Type, [$.UInt64], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258BE, $.Type, [$.SByte], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258C2, $.Type, [$.Byte], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258C6, $.Type, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x258C7, $.Type, [$.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x258B0, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x258A7, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x258A6, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x258A3, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Pow", 
    $sig.make(0x258EC, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Pow", 
    $sig.make(0x258ED, $.Type, [$.Type, $.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reciprocal", 
    $sig.make(0x258AC, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Scale", 
    $sig.make(0x258EE, $.Type, [$.Type, $.Double], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Sin", 
    $sig.make(0x258D9, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Sinh", 
    $sig.make(0x258DA, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Sqrt", 
    $sig.make(0x258EB, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x2589F, $.Type, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Tan", 
    $sig.make(0x258E0, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Tanh", 
    $sig.make(0x258E2, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x258CC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x258CE, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x258D5, $.String, [$asm06.TypeRef("System.IFormatProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x258D7, $.String, [$.String, $asm06.TypeRef("System.IFormatProvider")], [])
  );

  $.Field({Static:false, Public:false}, "m_real", $.Double); 
  $.Field({Static:false, Public:false}, "m_imaginary", $.Double); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "One", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "ImaginaryOne", $.Type); 
  $.Constant({Static:true , Public:false}, "LOG_10_INV", 0.43429448190325); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AAE0, null, [], []), 
    function Complex__cctor () {
      $thisType.Zero = new $thisType();
      $thisType.One = new $thisType();
      $thisType.ImaginaryOne = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "Real", $.Double);

  $.Property({Static:false, Public:true }, "Imaginary", $.Double);

  $.Property({Static:false, Public:true }, "Magnitude", $.Double);

  $.Property({Static:false, Public:true }, "Phase", $.Double);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IFormattable"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Numerics.BigIntegerBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16777, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16778, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16779, null, [$asm0C.TypeRef("System.Numerics.BigInteger")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1677A, null, [$asm0C.TypeRef("System.Numerics.BigInteger"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x16789, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x1678A, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddCarry", 
    $sig.make(0x1679E, $.UInt32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
        $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddMulCarry", 
    $sig.make(0x167A2, $.UInt32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
        $.UInt32, $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ApplyBorrow", 
    $sig.make(0x1679D, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ApplyCarry", 
    $sig.make(0x1679C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
    $sig.make(0x16776, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:false, Public:true }, "CbitLowZero", 
    $sig.make(0x167A5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Div", 
    $sig.make(0x16794, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DivMod", 
    $sig.make(0x16791, $.UInt32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
    $sig.make(0x16784, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
    $sig.make(0x16785, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
    $sig.make(0x16786, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GCD", 
    $sig.make(0x167A3, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CuNonZero", 
    $sig.make(0x16775, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_High", 
    $sig.make(0x16774, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x16773, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetApproxParts", 
    $sig.make(0x1677F, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHigh2", 
    $sig.make(0x1679B, $.UInt64, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetInteger", 
    $sig.make(0x1677B, $asm0C.TypeRef("System.Numerics.BigInteger"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIntegerParts", 
    $sig.make(0x1677C, null, [
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LehmerGcd", 
    $sig.make(0x167A4, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x16787, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x16788, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeOdd", 
    $sig.make(0x167A6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Mod", 
    $sig.make(0x16792, $.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Mod", 
    $sig.make(0x16793, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ModDiv", 
    $sig.make(0x16795, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ModDivCore", 
    $sig.make(0x16796, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Mul", 
    $sig.make(0x1678E, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Mul", 
    $sig.make(0x1678F, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Mul", 
    $sig.make(0x16790, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MulCarry", 
    $sig.make(0x167A1, $.UInt32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
        $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x1677D, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Set", 
    $sig.make(0x1677E, null, [$.UInt64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSizeClear", 
    $sig.make(0x16782, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSizeKeep", 
    $sig.make(0x16783, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSizeLazy", 
    $sig.make(0x16781, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ShiftLeft", 
    $sig.make(0x16799, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ShiftLeft", 
    $sig.make(0x1679A, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ShiftRight", 
    $sig.make(0x16797, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ShiftRight", 
    $sig.make(0x16798, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Sub", 
    $sig.make(0x1678B, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Sub", 
    $sig.make(0x1678C, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SubBorrow", 
    $sig.make(0x1679F, $.UInt32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
        $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SubRev", 
    $sig.make(0x1678D, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SubRevBorrow", 
    $sig.make(0x167A0, $.UInt32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
        $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Trim", 
    $sig.make(0x16780, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "kcbitUint", 32); 
  $.Field({Static:false, Public:false}, "_iuLast", $.Int32); 
  $.Field({Static:false, Public:false}, "_uSmall", $.UInt32); 
  $.Field({Static:false, Public:false}, "_rgu", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
  $.Field({Static:false, Public:false}, "_fWritable", $.Boolean); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "kdblLn2To32", $.Double); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_rgbInv", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "Size", $.Int32);

  $.Property({Static:false, Public:true }, "High", $.UInt32);

  $.Property({Static:false, Public:false}, "CuNonZero", $.Int32);

});

JSIL.MakeStaticClass("System.Numerics.BigNumber", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "FormatBigInteger", 
    $sig.make(0x25875, $.String, [
        $asm0C.TypeRef("System.Numerics.BigInteger"), $.String, 
        $asm06.TypeRef("System.Globalization.NumberFormatInfo")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "FormatBigIntegerToHexString", 
    $sig.make(0x25874, $.String, [
        $asm0C.TypeRef("System.Numerics.BigInteger"), $.Char, 
        $.Int32, $asm06.TypeRef("System.Globalization.NumberFormatInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HexNumberToBigInteger", 
    $sig.make(0x25871, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigNumber/BigNumberBuffer")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NumberToBigInteger", 
    $sig.make(0x25872, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigNumber/BigNumberBuffer")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseBigInteger", 
    $sig.make(0x25870, $asm0C.TypeRef("System.Numerics.BigInteger"), [
        $.String, $asm06.TypeRef("System.Globalization.NumberStyles"), 
        $asm06.TypeRef("System.Globalization.NumberFormatInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParseFormatSpecifier", 
    $sig.make(0x25873, $.Char, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryParseBigInteger", 
    $sig.make(0x2586F, $.Boolean, [
        $.String, $asm06.TypeRef("System.Globalization.NumberStyles"), 
        $asm06.TypeRef("System.Globalization.NumberFormatInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "TryValidateParseStyleInteger", 
    $sig.make(0x2586E, $.Boolean, [$asm06.TypeRef("System.Globalization.NumberStyles"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.ArgumentException")])], [])
  );

  $.Constant({Static:true , Public:false}, "InvalidNumberStyles", -1024); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Numerics.BigNumber/BigNumberBuffer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x25884, $.Type, [], [])
  );

  $.Field({Static:false, Public:true }, "digits", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:true }, "precision", $.Int32); 
  $.Field({Static:false, Public:true }, "scale", $.Int32); 
  $.Field({Static:false, Public:true }, "sign", $.Boolean); 
});

JSIL.MakeStaticClass("System.Numerics.NumericsContracts", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Check", 
    $sig.make(0x25891, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "Fail", 
    $sig.make(0x25892, null, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Numerics.DoubleUlong", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "dbl", $.Double); 
  $.Field({Static:false, Public:true }, "uu", $.UInt64); 
});

JSIL.MakeStaticClass("System.Numerics.NumericsHelpers", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Abs", 
    $sig.make(0x25882, $.UInt32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CbitHighZero", 
    $sig.make(0x25886, $.Int32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CbitHighZero", 
    $sig.make(0x2588A, $.Int32, [$.UInt64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CbitLowZero", 
    $sig.make(0x25888, $.Int32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CombineHash", 
    $sig.make(0x25883, $.UInt32, [$.UInt32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CombineHash", 
    $sig.make(0x25885, $.Int32, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DangerousMakeTwosComplement", 
    $sig.make(0x2587A, $jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GCD", 
    $sig.make(0x2587D, $.UInt32, [$.UInt32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GCD", 
    $sig.make(0x2587E, $.UInt64, [$.UInt64, $.UInt64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDoubleFromParts", 
    $sig.make(0x25879, $.Double, [
        $.Int32, $.Int32, 
        $.UInt64
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDoubleParts", 
    $sig.make(0x25878, null, [
        $.Double, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetHi", 
    $sig.make(0x25881, $.UInt32, [$.UInt64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetLo", 
    $sig.make(0x25880, $.UInt32, [$.UInt64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeUlong", 
    $sig.make(0x2587F, $.UInt64, [$.UInt32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "resize", 
    $sig.make(0x2587B, $jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Swap", 
    $sig.make(0x2587C, null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
  );

  $.Constant({Static:true , Public:false}, "kcbitUint", 32); 
});

JSIL.MakeStaticClass("FXAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
});

JSIL.MakeStaticClass("ThisAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Title", "System.Numerics.dll"); 
  $.Constant({Static:true , Public:false}, "Description", "System.Numerics.dll"); 
  $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Numerics.dll"); 
  $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
  $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.1"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
  $.Constant({Static:true , Public:false}, "BuildRevisionStr", "1"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
});

JSIL.MakeStaticClass("AssemblyRef", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.SR", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x258CD, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0x258C9, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
    $sig.make(0x258CB, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
    $sig.make(0x258CF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x258D3, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x258D0, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x258D1, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x258D2, $.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.Constant({Static:true , Public:false}, "Argument_InvalidNumberStyles", "Argument_InvalidNumberStyles"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidHexStyle", "Argument_InvalidHexStyle"); 
  $.Constant({Static:true , Public:false}, "Argument_ByteArrayLengthMustBeAMultipleOf4", "Argument_ByteArrayLengthMustBeAMultipleOf4"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidCharactersInString", "Argument_InvalidCharactersInString"); 
  $.Constant({Static:true , Public:false}, "Argument_ParsedStringWasInvalid", "Argument_ParsedStringWasInvalid"); 
  $.Constant({Static:true , Public:false}, "Argument_MustBeBigInt", "Argument_MustBeBigInt"); 
  $.Constant({Static:true , Public:false}, "Format_InvalidFormatSpecifier", "Format_InvalidFormatSpecifier"); 
  $.Constant({Static:true , Public:false}, "Format_TooLarge", "Format_TooLarge"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MustBeLessThanUInt32MaxValue", "ArgumentOutOfRange_MustBeLessThanUInt32MaxValue"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MustBeNonNeg", "ArgumentOutOfRange_MustBeNonNeg"); 
  $.Constant({Static:true , Public:false}, "NotSupported_NumberStyle", "NotSupported_NumberStyle"); 
  $.Constant({Static:true , Public:false}, "Overflow_BigIntInfinity", "Overflow_BigIntInfinity"); 
  $.Constant({Static:true , Public:false}, "Overflow_NotANumber", "Overflow_NotANumber"); 
  $.Constant({Static:true , Public:false}, "Overflow_ParseBigInteger", "Overflow_ParseBigInteger"); 
  $.Constant({Static:true , Public:false}, "Overflow_Int32", "Overflow_Int32"); 
  $.Constant({Static:true , Public:false}, "Overflow_Int64", "Overflow_Int64"); 
  $.Constant({Static:true , Public:false}, "Overflow_UInt32", "Overflow_UInt32"); 
  $.Constant({Static:true , Public:false}, "Overflow_UInt64", "Overflow_UInt64"); 
  $.Constant({Static:true , Public:false}, "Overflow_Decimal", "Overflow_Decimal"); 
  $.Field({Static:true , Public:false}, "loader", $.Type); 
  $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

});

