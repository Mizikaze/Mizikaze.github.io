/* Generated by JSIL v0.6.0 build 23610. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm01 = JSIL.DeclareAssembly("Microsoft.Xna.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IProxyProcessHandler", false, [], function ($) {
    $.Method({}, "get_ProxyProcessWantsToTalk", $sig.make(0xD01D, $asm06.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "get_SharedAsyncDataSafeToWrite", $sig.make(0xD01C, $asm06.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "get_AsyncHResult", $sig.make(0xD01A, $.UInt32, [], []));
    $.Method({}, "get_AsyncManagedCallType", $sig.make(0xD019, $asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), [], []));
    $.Method({}, "get_AsyncManagedCallArgument", $sig.make(0xD018, $.UInt32, [], []));
    $.Property({}, "AsyncManagedCallArgument");
    $.Property({}, "AsyncManagedCallType");
    $.Property({}, "AsyncHResult");
    $.Property({}, "SharedAsyncDataSafeToWrite");
    $.Property({}, "ProxyProcessWantsToTalk");
  }, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "NativeToManagedCallback", false, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.WindowsManagedCallbackHandler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "$exWindowsManagedCallbackHandler", 
    $sig.make(0xD0EB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD0EC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$tWindowsManagedCallbackHandler", 
    $sig.make(0xD0EA, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CallManagedFunctionForMe", 
    $sig.make(0xD0E8, $asm06.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $asm06.TypeRef("System.UInt32")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallManagedFunctionForMeImpl", 
    $sig.make(0xD0EE, $asm06.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $asm06.TypeRef("System.UInt32")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD0F1, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD0F2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD0F3, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
    $sig.make(0xD0E4, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HasRoomForAnotherWaitHandle", 
    $sig.make(0xD0F0, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetProxyProcessHandler", 
    $sig.make(0xD0E7, $asm06.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.IProxyProcessHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WaitForAsyncOperationToFinish", 
    $sig.make(0xD0E6, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.UInt32")])], [])
  );

  $.Field({Static:false, Public:false}, "_proxyProcessHandler", $asm01.TypeRef("Microsoft.Xna.Framework.IProxyProcessHandler")); 
  $.Field({Static:false, Public:false}, "_proxyProcessHandlerSyncObject", $.Object); 
  $.Field({Static:true , Public:false}, "instance", $.Type); 
  $.Field({Static:false, Public:false}, "_managedCallType", $asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")); 
  $.Field({Static:false, Public:false}, "_managedCallArgs", $asm06.TypeRef("System.UInt32")); 
  $.Field({Static:false, Public:false}, "nativeToManagedCallbacks", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("NativeToManagedCallback")])); 
  $.Property({Static:true , Public:true }, "Instance", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Audio");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.AudioRendererShutdownHandler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "$exAudioRendererShutdownHandler", 
    $sig.make(0xD23C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD23A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$tAudioRendererShutdownHandler", 
    $sig.make(0xD23B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AppExitingEventHandler", 
    $sig.make(0xD239, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
    $sig.make(0xD238, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD23D, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD23E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD242, null, [], [])
  );

  $.Field({Static:true , Public:false}, "instance", $.Type); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.MicrophoneUnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD26C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DestroyMicrophone", 
    $sig.make(0xD254, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetName", 
    $sig.make(0xD262, $asm06.TypeRef("System.Int32"), [
        $.UInt32, $asm06.TypeRef("System.Text.StringBuilder"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetState", 
    $sig.make(0xD25B, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCaptureState")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetCaptureBufferDuration", 
    $sig.make(0xD26A, $asm06.TypeRef("System.Int32"), [$.UInt32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ShutdownCaptureEngine", 
    $sig.make(0xD250, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Start", 
    $sig.make(0xD256, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Stop", 
    $sig.make(0xD258, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.VoiceState", false, {
    Playing: 1, 
    Stopping: 2, 
    Stopped: 4, 
    Paused: 8
  }, true
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.MicrophoneCaptureState", false, {
    MicStarted: 1, 
    MicStopped: 2
  }, true
);

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Media");
JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Media.MediaState", true, {
    Stopped: 0, 
    Playing: 1, 
    Paused: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.ImagingUnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD489, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CloseKernelStream", 
    $sig.make(0xD47C, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:true }, "ImagingSubsystemSyncObject", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.UniqueBSTRCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD1EA, null, [], [])
  );

  $.Field({Static:false, Public:false}, "seenStrings", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), "Microsoft.Xna.Framework.Media.WmpInterface", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, "$exWmpInterface", 
    $sig.make(0xD40D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD40B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$tWmpInterface", 
    $sig.make(0xD40C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddTrackedMediaHandle", 
    $sig.make(0xD407, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CleanupAllTrackedMediaHandlesAndShutdownWmp", 
    $sig.make(0xD409, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD40E, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD40F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnsureWMPInitialized", 
    $sig.make(0xD40A, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD410, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetArtist", 
    $sig.make(0xD3D1, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetDuration", 
    $sig.make(0xD3D4, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetGenre", 
    $sig.make(0xD3D3, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetSongs", 
    $sig.make(0xD3D2, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaArtist_GetAlbums", 
    $sig.make(0xD3D6, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaArtist_GetSongs", 
    $sig.make(0xD3D5, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaGenre_GetAlbums", 
    $sig.make(0xD3D8, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaGenre_GetSongs", 
    $sig.make(0xD3D7, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaItem_GetName", 
    $sig.make(0xD3C0, $asm06.TypeRef("System.Int32"), [
        $.UInt32, $asm06.TypeRef("System.Text.StringBuilder"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaItem_IsEqual", 
    $sig.make(0xD3C1, $asm06.TypeRef("System.Int32"), [
        $.UInt32, $.UInt32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaItem_Release", 
    $sig.make(0xD3BF, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetAlbums", 
    $sig.make(0xD3B8, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetArtists", 
    $sig.make(0xD3B7, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetGenres", 
    $sig.make(0xD3BB, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetPlaylists", 
    $sig.make(0xD3B9, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetSongs", 
    $sig.make(0xD3B6, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaList_GetCount", 
    $sig.make(0xD3BC, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaList_GetItemAtIndex", 
    $sig.make(0xD3BD, $asm06.TypeRef("System.Int32"), [
        $.UInt32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaList_Release", 
    $sig.make(0xD3BE, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaPlaylist_GetDuration", 
    $sig.make(0xD3DA, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaPlaylist_GetSongs", 
    $sig.make(0xD3D9, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_EnableVisualization", 
    $sig.make(0xD3F0, $asm06.TypeRef("System.Int32"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetActiveSongIndex", 
    $sig.make(0xD3EF, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetPlayPosition", 
    $sig.make(0xD3E2, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetPlayState", 
    $sig.make(0xD3EA, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetRepeat", 
    $sig.make(0xD3E5, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetShuffle", 
    $sig.make(0xD3E3, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetSongAtIndex", 
    $sig.make(0xD3E0, $asm06.TypeRef("System.Int32"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetSongCount", 
    $sig.make(0xD3E1, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetVisualizationData", 
    $sig.make(0xD3F2, $asm06.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetVolume", 
    $sig.make(0xD3EB, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_IsMuted", 
    $sig.make(0xD3ED, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_IsVisualizationEnabled", 
    $sig.make(0xD3F1, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_MoveNext", 
    $sig.make(0xD3DE, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_MovePrev", 
    $sig.make(0xD3DF, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_MoveTo", 
    $sig.make(0xD3DD, $asm06.TypeRef("System.Int32"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_Pause", 
    $sig.make(0xD3E7, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_PlaySong", 
    $sig.make(0xD3DB, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_PlaySongList", 
    $sig.make(0xD3DC, $asm06.TypeRef("System.Int32"), [$.UInt32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_Resume", 
    $sig.make(0xD3E8, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetMute", 
    $sig.make(0xD3EE, $asm06.TypeRef("System.Int32"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetRepeat", 
    $sig.make(0xD3E6, $asm06.TypeRef("System.Int32"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetShuffle", 
    $sig.make(0xD3E4, $asm06.TypeRef("System.Int32"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetVolume", 
    $sig.make(0xD3EC, $asm06.TypeRef("System.Int32"), [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaQueue_Stop", 
    $sig.make(0xD3E9, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_CreateHandle", 
    $sig.make(0xD3C3, $asm06.TypeRef("System.Int32"), [
        $.Boolean, $.String, 
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetAlbum", 
    $sig.make(0xD3C6, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetArtist", 
    $sig.make(0xD3C5, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetDuration", 
    $sig.make(0xD3CA, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetGenre", 
    $sig.make(0xD3C8, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetPlayCount", 
    $sig.make(0xD3CD, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetRating", 
    $sig.make(0xD3CC, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetTrackNumber", 
    $sig.make(0xD3CB, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MediaSong_IsRestricted", 
    $sig.make(0xD3CF, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RemoveTrackedMediaHandle", 
    $sig.make(0xD408, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Create", 
    $sig.make(0xD3F3, $asm06.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_GetPlayPosition", 
    $sig.make(0xD401, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_GetState", 
    $sig.make(0xD3FD, $asm06.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Pause", 
    $sig.make(0xD3F8, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Play", 
    $sig.make(0xD3F5, $asm06.TypeRef("System.Int32"), [
        $.UInt32, $.String, 
        $asm06.TypeRef("System.UInt32"), $asm06.TypeRef("System.UInt32"), 
        $asm06.TypeRef("System.UInt32"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Release", 
    $sig.make(0xD3F4, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Resume", 
    $sig.make(0xD3FA, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_SetLooping", 
    $sig.make(0xD405, $asm06.TypeRef("System.Int32"), [$.UInt32, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_SetMute", 
    $sig.make(0xD3FE, $asm06.TypeRef("System.Int32"), [$.UInt32, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_SetVolume", 
    $sig.make(0xD3FF, $asm06.TypeRef("System.Int32"), [$.UInt32, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Start", 
    $sig.make(0xD3F6, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Stop", 
    $sig.make(0xD3FC, $asm06.TypeRef("System.Int32"), [$.UInt32], [])
  );

  $.Constant({Static:true , Public:true }, "visualizationBufferSize", 256); 
  $.Field({Static:true , Public:false}, "instance", $.Type); 
  $.Field({Static:true , Public:false}, "allMediaHandles", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $.Object])); 
  $.Field({Static:true , Public:false}, "pSyncObject", $.Object); 
  $.Field({Static:true , Public:false}, "playingSongName", $.String, null); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Input");
JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Keyboard", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "GetState", 
    $sig.make(0xC8F2, $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetState", 
    $sig.make(0xC8F4, $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
  );

  $.Field({Static:true , Public:false}, "DisableHomeKey", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Input.WindowMessageHooker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xC9D1, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CollectDeadHooks", 
    $sig.make(0xC9CD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xC9C8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xC9CA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xC9C7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WindowHandle", 
    $sig.make(0xC9C3, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveCurrentHook", 
    $sig.make(0xC9CC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_WindowHandle", 
    $sig.make(0xC9C4, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0xC9CF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WndProc", 
    $sig.make(0xC9C5, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.IntPtr")]), [
        $asm06.TypeRef("System.IntPtr"), $.UInt32, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.Constant({Static:true , Public:false}, "WM_ACTIVATE", 6); 
  $.Constant({Static:true , Public:false}, "WM_SETCURSOR", 32); 
  $.Constant({Static:true , Public:false}, "WM_INPUTLANGCHANGE", 81); 
  $.Constant({Static:true , Public:false}, "WM_NCACTIVATE", 134); 
  $.Constant({Static:true , Public:false}, "WM_KEYDOWN", 256); 
  $.Constant({Static:true , Public:false}, "WM_KEYUP", 257); 
  $.Constant({Static:true , Public:false}, "WM_CHAR", 258); 
  $.Constant({Static:true , Public:false}, "WM_IME_STARTCOMPOSITION", 269); 
  $.Constant({Static:true , Public:false}, "WM_IME_ENDCOMPOSITION", 270); 
  $.Constant({Static:true , Public:false}, "WM_IME_COMPOSITION", 271); 
  $.Constant({Static:true , Public:false}, "WM_IME_SETCONTEXT", 641); 
  $.Constant({Static:true , Public:false}, "WM_IME_NOTIFY", 642); 
  $.Constant({Static:true , Public:false}, "WM_IME_CHAR", 646); 
  $.Constant({Static:true , Public:false}, "WM_MOUSEMOVE", 512); 
  $.Constant({Static:true , Public:false}, "WM_LBUTTONDOWN", 513); 
  $.Constant({Static:true , Public:false}, "WM_LBUTTONUP", 514); 
  $.Constant({Static:true , Public:false}, "WM_LBUTTONDBLCLK", 515); 
  $.Constant({Static:true , Public:false}, "WM_RBUTTONDOWN", 516); 
  $.Constant({Static:true , Public:false}, "WM_RBUTTONUP", 517); 
  $.Constant({Static:true , Public:false}, "WM_RBUTTONDBLCLK", 518); 
  $.Constant({Static:true , Public:false}, "WM_MBUTTONDOWN", 519); 
  $.Constant({Static:true , Public:false}, "WM_MBUTTONUP", 520); 
  $.Constant({Static:true , Public:false}, "WM_MBUTTONDBLCLK", 521); 
  $.Constant({Static:true , Public:false}, "WM_MOUSEWHEEL", 522); 
  $.Constant({Static:true , Public:false}, "WM_XBUTTONDOWN", 523); 
  $.Constant({Static:true , Public:false}, "WM_XBUTTONUP", 524); 
  $.Constant({Static:true , Public:false}, "WM_XBUTTONDBLCLK", 525); 
  $.Constant({Static:true , Public:false}, "VK_HOME", 36); 
  $.Field({Static:false, Public:false}, "currentHook", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook")); 
  $.Field({Static:true , Public:false}, "deadHooks", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook")])); 
  $.Field({Static:true , Public:false}, "clobberDetectionMessage", $.UInt32); 
  $.Property({Static:false, Public:true }, "WindowHandle", $asm06.TypeRef("System.IntPtr"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA05, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryRemove", 
    $sig.make(0xCA06, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WndProc", 
    $sig.make(0xCA07, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.IntPtr"), $.UInt32, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.Field({Static:false, Public:false}, "parent", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker")); 
  $.Field({Static:false, Public:true }, "hWnd", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "previousWndProc", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "wndProcDelegate", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate")); 
  $.Field({Static:false, Public:false}, "wndProcFunction", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "isHookRemoved", $.Boolean); 
  $.Field({Static:false, Public:true }, "isWindowDestroyed", $.Boolean); 
  $.Field({Static:false, Public:true }, "seenClobberDetectionMessage", $.Boolean); 
});

JSIL.MakeDelegate("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate", false, []);

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker"), "Microsoft.Xna.Framework.Input.MouseMessageHooker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC9E5, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CurrentWheel", 
    $sig.make(0xC9E1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WndProc", 
    $sig.make(0xC9E3, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.IntPtr")]), [
        $asm06.TypeRef("System.IntPtr"), $.UInt32, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.Field({Static:true , Public:false}, "currentWheel", $.Int32); 
  $.Property({Static:true , Public:false}, "CurrentWheel", $.Int32);

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Mouse", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "get_WindowHandle", 
    $sig.make(0xCA9E, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetState", 
    $sig.make(0xCAA2, $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_WindowHandle", 
    $sig.make(0xCAA0, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetPosition", 
    $sig.make(0xCAA9, null, [$.Int32, $.Int32], [])
  );

  $.Field({Static:true , Public:false}, "mouseMessageHooker", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseMessageHooker")); 
  $.Property({Static:true , Public:true }, "WindowHandle", $asm06.TypeRef("System.IntPtr"));

});

JSIL.MakeDelegate("Microsoft.Xna.Framework.Media.WmpProxyFunction", false, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.WmpProxyThread", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC9FD, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AppDomainUnloaded", 
    $sig.make(0xC9F5, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DestroyHwnd", 
    $sig.make(0xC9F7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HandleMessage", 
    $sig.make(0xC9F9, $.Boolean, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Initialize", 
    $sig.make(0xC9E8, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ProxyThreadFunc", 
    $sig.make(0xC9F0, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PumpMessages", 
    $sig.make(0xC9F2, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RunInRightApartment", 
    $sig.make(0xC9E6, $asm06.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.Media.WmpProxyFunction")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WaitForProxyThread", 
    $sig.make(0xC9EB, $asm06.TypeRef("System.Int32"), [], [])
  );

  $.Field({Static:true , Public:false}, "m_InitializationState", $asm01.TypeRef("Microsoft.Xna.Framework.Media.WmpProxyThreadState"), function ($pi) {
      return $asm01.Microsoft.Xna.Framework.Media.WmpProxyThreadState.NotInitialized;
    }); 
  $.Field({Static:true , Public:false}, "m_ProxyFunction", $asm01.TypeRef("Microsoft.Xna.Framework.Media.WmpProxyFunction"), null); 
  $.Field({Static:true , Public:false}, "m_ResultOfFunction", $asm06.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false}, "m_CaughtException", $asm06.TypeRef("System.Exception"), null); 
  $.Field({Static:true , Public:false}, "m_FunctionCallMessage", $.UInt32); 
  $.Field({Static:true , Public:false}, "m_WindowClassRegistered", $.Boolean); 
  $.Field({Static:true , Public:false}, "syncObject", $.Object); 
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Media.WmpProxyThreadState", false, {
    Initialized: 0, 
    NotInitialized: 1, 
    InitializationFailure: 2, 
    Shutdown: 3
  }, false
);

JSIL.DeclareNamespace("$lCrtImplementationDetails$g");
JSIL.MakeClass($asm06.TypeRef("System.Exception"), "<CrtImplementationDetails>.ModuleLoadException", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCAD1, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCAD6, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCAD8, null, [$.String], [])
  );

  $.Constant({Static:true , Public:true }, "Nested", "A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n"); 
});

JSIL.MakeClass($asm01.TypeRef("<CrtImplementationDetails>.ModuleLoadException"), "<CrtImplementationDetails>.ModuleLoadExceptionHandlerException", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCBBC, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCBBF, null, [
        $.String, $asm06.TypeRef("System.Exception"), 
        $asm06.TypeRef("System.Exception")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NestedException", 
    $sig.make(0xCBB5, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0xCBC9, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_NestedException", 
    $sig.make(0xCBB8, null, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCBC5, $.String, [], [])
  );

  $.Constant({Static:true , Public:false}, "formatString", "\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n"); 
  $.Field({Static:false, Public:false}, "backing_store$NestedException", $asm06.TypeRef("System.Exception")); 
  $.Property({Static:false, Public:true }, "NestedException", $asm06.TypeRef("System.Exception"));

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Stack"), "<CrtImplementationDetails>.ModuleUninitializer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCC7B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
    $sig.make(0xCC72, null, [$asm06.TypeRef("System.EventHandler")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SingletonDomainUnload", 
    $sig.make(0xCC7E, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

  $.Field({Static:true , Public:false}, "lock", $.Object); 
  $.Field({Static:true , Public:false}, "_ModuleUninitializer", $.Type); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs", false, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs/Windows", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "TokenOnly", "842cf8be1de50553"); 
  $.Constant({Static:true , Public:false}, "PublicKey", "0024000004800000140100000602000000240000525341310008000001000100c7835d93a2bf56c5649c2a0b9af5806803b7a4d0845e70c70f4b57d0d98d308301707d61625955bf0aa34590999324f362aedb9875ec9535a507399cf7dcaf41ab3672a6f2d2de1654fd3bda94c2ac80f7ebf73641c4d57f853a792ba33b442ae010895109171903d1b628caf31d1370fdd8774b3ce58fb2809fbfdb0cfddc7c0fe6ca9ee904c1c001db280b9d583ce3f586a6d7f412104a06a7f183a0c263bb0d9a5984e3c76d2052ad01e0f743ae4b5e19fcc1b2d6c9692de99699b0f7972f4b466f0a53e0ca18de547be55adf43a36564165bfc28de25f8a7b43038b22c07fe211d33cb24ad93fef0de4d67b28236bee129b08b943b1dbf702a6a305a6ab6"); 
  $.Constant({Static:true , Public:false}, "AudioImporters", "Microsoft.Xna.Framework.Content.Pipeline.AudioImporters, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=MSIL"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_ignore", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs/Xbox360", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "TokenOnly", "842cf8be1de50553"); 
  $.Constant({Static:true , Public:false}, "PublicKey", "0024000004800000140100000602000000240000525341310008000001000100c7835d93a2bf56c5649c2a0b9af5806803b7a4d0845e70c70f4b57d0d98d308301707d61625955bf0aa34590999324f362aedb9875ec9535a507399cf7dcaf41ab3672a6f2d2de1654fd3bda94c2ac80f7ebf73641c4d57f853a792ba33b442ae010895109171903d1b628caf31d1370fdd8774b3ce58fb2809fbfdb0cfddc7c0fe6ca9ee904c1c001db280b9d583ce3f586a6d7f412104a06a7f183a0c263bb0d9a5984e3c76d2052ad01e0f743ae4b5e19fcc1b2d6c9692de99699b0f7972f4b466f0a53e0ca18de547be55adf43a36564165bfc28de25f8a7b43038b22c07fe211d33cb24ad93fef0de4d67b28236bee129b08b943b1dbf702a6a305a6ab6"); 
  $.Constant({Static:true , Public:false}, "AudioImporters", "Microsoft.Xna.Framework.Content.Pipeline.AudioImporters, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=MSIL"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_ignore", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs/WindowsMobile", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "TokenOnly", "842cf8be1de50553"); 
  $.Constant({Static:true , Public:false}, "PublicKey", "0024000004800000140100000602000000240000525341310008000001000100c7835d93a2bf56c5649c2a0b9af5806803b7a4d0845e70c70f4b57d0d98d308301707d61625955bf0aa34590999324f362aedb9875ec9535a507399cf7dcaf41ab3672a6f2d2de1654fd3bda94c2ac80f7ebf73641c4d57f853a792ba33b442ae010895109171903d1b628caf31d1370fdd8774b3ce58fb2809fbfdb0cfddc7c0fe6ca9ee904c1c001db280b9d583ce3f586a6d7f412104a06a7f183a0c263bb0d9a5984e3c76d2052ad01e0f743ae4b5e19fcc1b2d6c9692de99699b0f7972f4b466f0a53e0ca18de547be55adf43a36564165bfc28de25f8a7b43038b22c07fe211d33cb24ad93fef0de4d67b28236bee129b08b943b1dbf702a6a305a6ab6"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_ignore", $asm06.TypeRef("System.Type")); 
});

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Content");
JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "Microsoft.Xna.Framework.Content.ContentSerializerAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD9A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xCD9B, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AllowNull", 
    $sig.make(0xCD88, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
    $sig.make(0xCD94, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
    $sig.make(0xCD7E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FlattenContent", 
    $sig.make(0xCD82, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasCollectionItemName", 
    $sig.make(0xCD99, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Optional", 
    $sig.make(0xCD84, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SharedResource", 
    $sig.make(0xCD8D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AllowNull", 
    $sig.make(0xCD8A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CollectionItemName", 
    $sig.make(0xCD97, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
    $sig.make(0xCD80, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FlattenContent", 
    $sig.make(0xCD83, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Optional", 
    $sig.make(0xCD85, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SharedResource", 
    $sig.make(0xCD90, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "elementName", $.String); 
  $.Field({Static:false, Public:false}, "flattenContent", $.Boolean); 
  $.Field({Static:false, Public:false}, "optional", $.Boolean); 
  $.Field({Static:false, Public:false}, "allowNull", $.Boolean); 
  $.Field({Static:false, Public:false}, "sharedResource", $.Boolean); 
  $.Field({Static:false, Public:false}, "collectionItemName", $.String); 
  $.Property({Static:false, Public:true }, "ElementName", $.String);

  $.Property({Static:false, Public:true }, "FlattenContent", $.Boolean);

  $.Property({Static:false, Public:true }, "Optional", $.Boolean);

  $.Property({Static:false, Public:true }, "AllowNull", $.Boolean);

  $.Property({Static:false, Public:true }, "SharedResource", $.Boolean);

  $.Property({Static:false, Public:true }, "CollectionItemName", $.String);

  $.Property({Static:false, Public:true }, "HasCollectionItemName", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Property")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC7C2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
    $sig.make(0xC7C1, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "collectionItemName", $.String); 
  $.Property({Static:false, Public:true }, "CollectionItemName", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Class]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC7CC, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Property")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC7E8, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeVersion", 
    $sig.make(0xC7E7, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "typeVersion", $.Int32); 
  $.Property({Static:false, Public:true }, "TypeVersion", $.Int32);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Struct")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC836, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RuntimeType", 
    $sig.make(0xC835, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "runtimeType", $.String); 
  $.Property({Static:false, Public:true }, "RuntimeType", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Class", "Struct")]; });

JSIL.MakeClass($asm06.TypeRef("System.Exception"), "Microsoft.Xna.Framework.Content.ContentLoadException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC044, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC045, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC046, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xC047, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.IO.Stream"), "Microsoft.Xna.Framework.Content.DecompressStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC8AE, null, [
        $asm06.TypeRef("System.IO.Stream"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DecompressNextBuffer", 
    $sig.make(0xC8BC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xC8B0, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0xC8C8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanRead", 
    $sig.make(0xC89D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanSeek", 
    $sig.make(0xC89F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanWrite", 
    $sig.make(0xC8A2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0xC8A4, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0xC8AA, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xC8B5, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadBufferFromDisk", 
    $sig.make(0xC8C6, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadByte", 
    $sig.make(0xC8B1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadNextBufferFromDisk", 
    $sig.make(0xC8BD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0xC8CA, $.Int64, [$.Int64, $asm06.TypeRef("System.IO.SeekOrigin")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0xC8AC, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetLength", 
    $sig.make(0xC8CC, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xC8CD, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Constant({Static:true , Public:false}, "CompressedBufferSize", 65536); 
  $.Constant({Static:true , Public:false}, "DecompressedBufferSize", 65536); 
  $.Field({Static:false, Public:false}, "baseStream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "compressedTodo", $.Int32); 
  $.Field({Static:false, Public:false}, "compressedSize", $.Int32); 
  $.Field({Static:false, Public:false}, "compressedPosition", $.Int32); 
  $.Field({Static:false, Public:false}, "compressedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "decompressedTodo", $.Int32); 
  $.Field({Static:false, Public:false}, "decompressedSize", $.Int32); 
  $.Field({Static:false, Public:false}, "decompressedPosition", $.Int32); 
  $.Field({Static:false, Public:false}, "decompressedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "decompressionContext", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Content.ContentManager", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x49F, null, [$asm06.TypeRef("System.IServiceProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x4A1, null, [$asm06.TypeRef("System.IServiceProvider"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x4A5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x4A6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RootDirectory", 
    $sig.make(0x49C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ServiceProvider", 
    $sig.make(0x49A, $asm06.TypeRef("System.IServiceProvider"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Load", 
    $sig.make(0x4A9, "!!0", [$.String], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "OpenStream", 
    $sig.make(0x4AB, $asm06.TypeRef("System.IO.Stream"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadAsset", 
    $sig.make(0x4AA, "!!0", [$.String, $asm06.TypeRef("System.Action`1", [$asm06.TypeRef("System.IDisposable")])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "RecordDisposableObject", 
    $sig.make(0x4A4, null, [$asm06.TypeRef("System.IDisposable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RootDirectory", 
    $sig.make(0x49D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Unload", 
    $sig.make(0x4A7, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "contentExtension", ".xnb"); 
  $.Field({Static:false, Public:false}, "serviceProvider", $asm06.TypeRef("System.IServiceProvider")); 
  $.Field({Static:false, Public:false}, "rootDirectory", $.String); 
  $.Field({Static:false, Public:false}, "isRootDirectoryAbsolute", $.Boolean); 
  $.Field({Static:false, Public:false}, "fullRootDirectory", $.String); 
  $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "readAssetRecurseCount", $.Int32); 
  $.Field({Static:false, Public:false}, "loadedAssets", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
  $.Field({Static:false, Public:false}, "disposableAssets", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.IDisposable")])); 
  $.Property({Static:false, Public:true }, "ServiceProvider", $asm06.TypeRef("System.IServiceProvider"));

  $.Property({Static:false, Public:true }, "RootDirectory", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), "Microsoft.Xna.Framework.Content.ResourceContentManager", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC935, null, [$asm06.TypeRef("System.IServiceProvider"), $asm06.TypeRef("System.Resources.ResourceManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OpenStream", 
    $sig.make(0xC936, $asm06.TypeRef("System.IO.Stream"), [$.String], [])
  );

  $.Field({Static:false, Public:false}, "resourceManager", $asm06.TypeRef("System.Resources.ResourceManager")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Content.ContentTypeReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBE92, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanDeserializeIntoExistingObject", 
    $sig.make(0xBE8A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TargetType", 
    $sig.make(0xBE88, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeVersion", 
    $sig.make(0xBE89, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xBE9C, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.Field({Static:false, Public:false}, "targetType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "TargetIsValueType", $.Boolean); 
  $.Property({Static:false, Public:true }, "TargetType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "TypeVersion", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "Microsoft.Xna.Framework.Content.ContentTypeReader`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBECA, null, [], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")])]), "Microsoft.Xna.Framework.Content.ArrayReader`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC9C6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xC9C1, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xC9C2, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")])], [])
  );

  $.Field({Static:false, Public:false}, "elementReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("Key", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("Value", "Microsoft.Xna.Framework.Content.DictionaryReader`2")])]), "Microsoft.Xna.Framework.Content.DictionaryReader`2", false, ["Key", "Value"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC9E9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanDeserializeIntoExistingObject", 
    $sig.make(0xC9E2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xC9E4, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xC9E7, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("Key", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("Value", "Microsoft.Xna.Framework.Content.DictionaryReader`2")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("Key", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("Value", "Microsoft.Xna.Framework.Content.DictionaryReader`2")])], [])
  );

  $.Field({Static:false, Public:false}, "keyReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
  $.Field({Static:false, Public:false}, "valueReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1")]), "Microsoft.Xna.Framework.Content.EnumReader`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA14, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xCA0F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCA12, new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1")], [])
  );

  $.Field({Static:false, Public:false}, "underlyingTypeReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "Microsoft.Xna.Framework.Content.ExternalReferenceReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCBB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCBBB, $.Object, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")])]), "Microsoft.Xna.Framework.Content.ListReader`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCC7F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanDeserializeIntoExistingObject", 
    $sig.make(0xCC76, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xCC79, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCC7C, $asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")])], [])
  );

  $.Field({Static:false, Public:false}, "elementReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), "Microsoft.Xna.Framework.Content.Vector2Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCC99, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCC98, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), "Microsoft.Xna.Framework.Content.Vector3Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCCB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCCB8, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")]), "Microsoft.Xna.Framework.Content.Vector4Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCCD9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCCD8, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), "Microsoft.Xna.Framework.Content.MatrixReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCCF2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCCF0, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), "Microsoft.Xna.Framework.Content.QuaternionReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD0D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCD0C, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), "Microsoft.Xna.Framework.Content.PlaneReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD25, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCD24, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), "Microsoft.Xna.Framework.Content.PointReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE10, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE0F, $asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), "Microsoft.Xna.Framework.Content.RectangleReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE5F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE5D, $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), "Microsoft.Xna.Framework.Content.BoundingBoxReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE7A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE79, $asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), "Microsoft.Xna.Framework.Content.BoundingSphereReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE9C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE9B, $asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), "Microsoft.Xna.Framework.Content.BoundingFrustumReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCEDD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCEDC, $asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), "Microsoft.Xna.Framework.Content.RayReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF04, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCF03, $asm01.TypeRef("Microsoft.Xna.Framework.Ray"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Curve")]), "Microsoft.Xna.Framework.Content.CurveReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF4E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanDeserializeIntoExistingObject", 
    $sig.make(0xCF4C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCF4D, $asm01.TypeRef("Microsoft.Xna.Framework.Curve"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Curve")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), "Microsoft.Xna.Framework.Content.ColorReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD1C7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xD1C6, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")])]), "Microsoft.Xna.Framework.Content.NullableReader`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD20C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xD20A, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xD20B, $asm06.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm06.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")])], [])
  );

  $.Field({Static:false, Public:false}, "underlyingTypeReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "Microsoft.Xna.Framework.Content.ObjectReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD21A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xD21B, $.Object, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.String")]), "Microsoft.Xna.Framework.Content.StringReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD12, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCD10, $.String, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.String], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Byte")]), "Microsoft.Xna.Framework.Content.ByteReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD2D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCD2C, $.Byte, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Byte], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.SByte")]), "Microsoft.Xna.Framework.Content.SByteReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD65, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCD64, $.SByte, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.SByte], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Int16")]), "Microsoft.Xna.Framework.Content.Int16Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCD87, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCD86, $.Int16, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int16], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.UInt16")]), "Microsoft.Xna.Framework.Content.UInt16Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCDB8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCDB7, $.UInt16, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt16], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Int32")]), "Microsoft.Xna.Framework.Content.Int32Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCDDE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCDDC, $.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int32], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.UInt32")]), "Microsoft.Xna.Framework.Content.UInt32Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE2C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE2B, $.UInt32, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt32], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Int64")]), "Microsoft.Xna.Framework.Content.Int64Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE4C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE43, $.Int64, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int64], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.UInt64")]), "Microsoft.Xna.Framework.Content.UInt64Reader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE6F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE6E, $.UInt64, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt64], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Single")]), "Microsoft.Xna.Framework.Content.SingleReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE94, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCE93, $.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Single], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Double")]), "Microsoft.Xna.Framework.Content.DoubleReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCEA4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCEA3, $.Double, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Double], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Boolean")]), "Microsoft.Xna.Framework.Content.BooleanReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCEBD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCEBA, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Boolean], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Char")]), "Microsoft.Xna.Framework.Content.CharReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCEF1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCEF0, $.Char, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Char], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.DateTime")]), "Microsoft.Xna.Framework.Content.DateTimeReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF15, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCF14, $asm06.TypeRef("System.DateTime"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm06.TypeRef("System.DateTime")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.TimeSpan")]), "Microsoft.Xna.Framework.Content.TimeSpanReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF40, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCF3E, $asm06.TypeRef("System.TimeSpan"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm06.TypeRef("System.TimeSpan")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm06.TypeRef("System.Decimal")]), "Microsoft.Xna.Framework.Content.DecimalReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF56, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCF55, $asm06.TypeRef("System.Decimal"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm06.TypeRef("System.Decimal")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), "Microsoft.Xna.Framework.Content.SongReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCDAD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCDAC, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")]), "Microsoft.Xna.Framework.Content.SoundEffectReader", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCFD0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xCFCE, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")], [])
  );

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.UnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "CloseHandle", 
    $sig.make(0xD122, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateEvent", 
    $sig.make(0xD124, $asm06.TypeRef("System.IntPtr"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.UnsafeNativeMethods/SecurityAttributes")]), $.Boolean, 
        $.Boolean, $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MapViewOfFile", 
    $sig.make(0xD128, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetEvent", 
    $sig.make(0xD125, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UnmapViewOfFile", 
    $sig.make(0xD129, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Constant({Static:true , Public:true }, "INFINITE", -1); 
  $.Constant({Static:true , Public:true }, "STATUS_DLL_NOT_FOUND", 3221225781); 
  $.Constant({Static:true , Public:true }, "PAGE_READONLY", 2); 
  $.Constant({Static:true , Public:true }, "PAGE_READWRITE", 4); 
  $.Constant({Static:true , Public:true }, "PAGE_WRITECOPY", 8); 
  $.Constant({Static:true , Public:true }, "FILE_MAP_WRITE", 2); 
  $.Constant({Static:true , Public:true }, "FILE_MAP_READ", 4); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "INVALID_HANDLE_VALUE", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.UnsafeNativeMethods/SecurityAttributes", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD15B, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "Length", $.Int32); 
  $.Field({Static:false, Public:false}, "SecurityDescriptor", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "InheritHandle", $.Int32); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.UserAsyncDispatcher", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AddPendingOperation", 
    $sig.make(0xD1A6, $asm06.TypeRef("System.IAsyncResult"), [
        $.UInt32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddPendingOperation", 
    $sig.make(0xD1A7, $asm06.TypeRef("System.IAsyncResult"), [
        $.UInt32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object, $.Boolean, 
        $asm01.TypeRef("Microsoft.Xna.Framework.AsyncOperationCleanup")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AsyncDispatcherThreadFunction", 
    $sig.make(0xD1A2, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CallbackGoesToDispatcher", 
    $sig.make(0xD1A4, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HandleFinishedOperation", 
    $sig.make(0xD1A5, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HandleManagedCallback", 
    $sig.make(0xD1A3, null, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Initialize", 
    $sig.make(0xD1A1, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnExit", 
    $sig.make(0xD19F, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperationStillPending", 
    $sig.make(0xD1A8, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.XOverlappedAsyncResult")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PlatformSpecificInitialize", 
    $sig.make(0xD19E, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WaitForAsyncOperationToFinish", 
    $sig.make(0xD1A0, $asm01.TypeRef("Microsoft.Xna.Framework.KernelReturnCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
  );

  $.Field({Static:true , Public:false}, "parentExitEvent", $asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PendingOperationsLock", $.Object); 
  $.Field({Static:true , Public:false}, "pendingOperations", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm01.TypeRef("Microsoft.Xna.Framework.PendingOperation")])); 
  $.Field({Static:true , Public:false}, "initialized", $.Boolean, false); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.UserAsyncDispatcher/<>c__DisplayClass3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7E7, null, [], [])
  );

  $.Field({Static:false, Public:true }, "pendingOp", $asm01.TypeRef("Microsoft.Xna.Framework.PendingOperation")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("Microsoft.Xna.Framework.FrameworkDispatcherLinker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "add_DownloadCompleted", 
    $sig.make(0xD288, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "add_StorageDeviceChanged", 
    $sig.make(0xD284, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnDownloadCompleted", 
    $sig.make(0xD290, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnStorageDeviceChanged", 
    $sig.make(0xD28D, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "remove_DownloadCompleted", 
    $sig.make(0xD28A, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "remove_StorageDeviceChanged", 
    $sig.make(0xD285, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.Field({Static:true , Public:false}, "StorageDeviceChanged", $asm06.TypeRef("System.EventHandler")); 
  $.Field({Static:true , Public:false}, "DownloadCompleted", $asm06.TypeRef("System.EventHandler")); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.FrameworkDispatcher", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AddNewPendingCall", 
    $sig.make(0xD2AC, null, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PollForEvents", 
    $sig.make(0xD2AF, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Update", 
    $sig.make(0xD2A9, null, [], [])
  );

  $.Field({Static:true , Public:false}, "UpdateCalledAtLeastOnce", $.Boolean); 
  $.Field({Static:true , Public:false}, "pendingCalls", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg")])); 
  $.Field({Static:true , Public:false}, "pendingCallsCopy", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD806, null, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
  );

  $.Field({Static:false, Public:true }, "ManagedCallType", $asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")); 
  $.Field({Static:false, Public:true }, "ManagedCallArg", $.UInt32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.MediaLibrary", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD2C8, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD2CE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD2C9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD2D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD2D1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
    $sig.make(0xD2C5, $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Artists", 
    $sig.make(0xD2C4, $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Genres", 
    $sig.make(0xD2C7, $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD2C2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MediaSource", 
    $sig.make(0xD2C1, $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Pictures", 
    $sig.make(0xD2BE, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Playlists", 
    $sig.make(0xD2C6, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RootPictureAlbum", 
    $sig.make(0xD2BF, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SavedPictures", 
    $sig.make(0xD2C0, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
    $sig.make(0xD2C3, $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPictureFromToken", 
    $sig.make(0xD2CC, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PickBestMediaSource", 
    $sig.make(0xD2CF, $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SavePicture", 
    $sig.make(0xD2CA, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SavePicture", 
    $sig.make(0xD2CB, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.String, $asm06.TypeRef("System.IO.Stream")], [])
  );

  $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
  $.Field({Static:false, Public:false}, "artists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistCollection")); 
  $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")); 
  $.Field({Static:false, Public:false}, "playlists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection")); 
  $.Field({Static:false, Public:false}, "genres", $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreCollection")); 
  $.Field({Static:false, Public:false}, "pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection")); 
  $.Field({Static:false, Public:false}, "savedPictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection")); 
  $.Field({Static:false, Public:false}, "rootPictureAlbum", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")); 
  $.Field({Static:false, Public:false}, "mediaSource", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource")); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "Pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"));

  $.Property({Static:false, Public:true }, "RootPictureAlbum", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"));

  $.Property({Static:false, Public:true }, "SavedPictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"));

  $.Property({Static:false, Public:true }, "MediaSource", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"));

  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

  $.Property({Static:false, Public:true }, "Artists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistCollection"));

  $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

  $.Property({Static:false, Public:true }, "Playlists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection"));

  $.Property({Static:false, Public:true }, "Genres", $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreCollection"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Media.MediaSourceType", true, {
    LocalDevice: 0, 
    WindowsMediaConnect: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.MediaSource", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD33D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MediaSourceType", 
    $sig.make(0xD33A, $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xD33B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetAvailableMediaSources", 
    $sig.make(0xD33E, $asm06.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD33C, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "mediaSourceType", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Property({Static:false, Public:true }, "MediaSourceType", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType"));

  $.Property({Static:false, Public:true }, "Name", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.VisualizationData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD499, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Frequencies", 
    $sig.make(0xD497, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Samples", 
    $sig.make(0xD498, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]), [], [])
  );

  $.Field({Static:false, Public:false}, "frequencies", $jsilcore.TypeRef("System.Array", [$.Single])); 
  $.Field({Static:false, Public:false}, "samples", $jsilcore.TypeRef("System.Array", [$.Single])); 
  $.Field({Static:false, Public:false}, "frequenciesCollection", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single])); 
  $.Field({Static:false, Public:false}, "samplesCollection", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single])); 
  $.Property({Static:false, Public:true }, "Frequencies", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]));

  $.Property({Static:false, Public:true }, "Samples", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]));

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.TitleLocation", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "get_Path", 
    $sig.make(0xD501, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "_titleLocation", $.String); 
  $.Property({Static:true , Public:true }, "Path", $.String);

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.TitleContainer", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "CollapseParentDirectory", 
    $sig.make(0xD50D, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCleanPath", 
    $sig.make(0xD50C, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCleanPathAbsolute", 
    $sig.make(0xD50E, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsPathAbsolute", 
    $sig.make(0xD50B, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OpenStream", 
    $sig.make(0xD509, $asm06.TypeRef("System.IO.Stream"), [$.String], [])
  );

  $.Field({Static:true , Public:false}, "badCharacters", $jsilcore.TypeRef("System.Array", [$.Char])); 
});

JSIL.DeclareNamespace("Microsoft.Xna.Framework.GamerServices");
JSIL.MakeInterface(
  "Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource", false, [], function ($) {
    $.Method({}, "get_ServiceProvider", $sig.make(0xBFAA, $asm06.TypeRef("System.IServiceProvider"), [], []));
    $.Method({}, "GetDrawingCommandsFromProxy", $sig.make(0xBFAE, $.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []));
    $.Property({}, "ServiceProvider");
  }, []);

JSIL.MakeStaticClass("Microsoft.Xna.Framework.GamerServices.GuideRendererConnector", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "DisposeGuideRenderer", 
    $sig.make(0xD521, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_GuideRendererType", 
    $sig.make(0xD51A, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_ProxySource", 
    $sig.make(0xD51B, null, [$asm01.TypeRef("Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryCreateGuideRenderer", 
    $sig.make(0xD51C, null, [], [])
  );

  $.Field({Static:true , Public:false}, "guideRenderer", $asm06.TypeRef("System.IDisposable")); 
  $.Field({Static:true , Public:false}, "guideRendererType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:true , Public:false}, "proxySource", $asm01.TypeRef("Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource")); 
  $.Property({Static:true , Public:true }, "GuideRendererType", $asm06.TypeRef("System.Type"));

  $.Property({Static:true , Public:true }, "ProxySource", $asm01.TypeRef("Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource"));

});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.MicrophoneState", true, {
    Started: 0, 
    Stopped: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.Microphone", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCFA0, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_BufferReady", 
    $sig.make(0xCF99, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCFA7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_All", 
    $sig.make(0xCF8E, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AllMicrophones", 
    $sig.make(0xCF98, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BufferDuration", 
    $sig.make(0xCF94, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Default", 
    $sig.make(0xCF90, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsHeadset", 
    $sig.make(0xCF97, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SampleRate", 
    $sig.make(0xCF96, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_State", 
    $sig.make(0xCF92, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetData", 
    $sig.make(0xCFB3, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetData", 
    $sig.make(0xCFB5, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetName", 
    $sig.make(0xCFAA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSampleDuration", 
    $sig.make(0xCFAE, $asm06.TypeRef("System.TimeSpan"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSampleRate", 
    $sig.make(0xCFA8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSampleSizeInBytes", 
    $sig.make(0xCFAC, $.Int32, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnBufferReady", 
    $sig.make(0xCFB9, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_BufferReady", 
    $sig.make(0xCF9B, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SafeGetCaptureBufferDuration", 
    $sig.make(0xCFB7, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SafeIsHeadset", 
    $sig.make(0xCFB8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BufferDuration", 
    $sig.make(0xCF95, null, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Start", 
    $sig.make(0xCFAF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Stop", 
    $sig.make(0xCFB1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnsafeGetData", 
    $sig.make(0xCFB6, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "microphoneLock", $.Object); 
  $.Field({Static:true , Public:false}, "microphones", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCollection")); 
  $.Field({Static:false, Public:false}, "captureBufferDuration", $asm06.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Id", $.Int32); 
  $.Field({Static:false, Public:false}, "isHeadset", $.Boolean); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "Name", $.String); 
  $.Field({Static:false, Public:false}, "BufferReady", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])); 
  $.Property({Static:true , Public:true }, "All", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]));

  $.Property({Static:true , Public:true }, "Default", $.Type);

  $.Property({Static:false, Public:true }, "State", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneState"));

  $.Property({Static:false, Public:true }, "BufferDuration", $asm06.TypeRef("System.TimeSpan"));

  $.Property({Static:false, Public:true }, "SampleRate", $.Int32);

  $.Property({Static:false, Public:true }, "IsHeadset", $.Boolean);

  $.Property({Static:true , Public:false}, "AllMicrophones", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCollection"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.MicrophoneCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF75, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMicrophones", 
    $sig.make(0xCF77, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCF76, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_All", 
    $sig.make(0xCF73, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Default", 
    $sig.make(0xCF74, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnBufferReady", 
    $sig.make(0xCF79, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SelectDefaultMicrophone", 
    $sig.make(0xCF78, null, [], [])
  );

  $.Field({Static:false, Public:false}, "allMicrophones", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")])); 
  $.Field({Static:false, Public:false}, "collection", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")])); 
  $.Field({Static:false, Public:false}, "defaultMic", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")); 
  $.Property({Static:false, Public:false}, "All", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")]));

  $.Property({Static:false, Public:false}, "Default", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.SoundEffectFinalizerHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD0D6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD0D7, null, [], [])
  );

});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.AudioChannels", true, {
    Mono: 1, 
    Stereo: 2
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Audio.LoopRegion", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "Start", $.Int32); 
  $.Field({Static:false, Public:false}, "Length", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.SoundEffect", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD027, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD02A, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD02D, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD030, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.TimeSpan")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddToInstancePool", 
    $sig.make(0xD046, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocateFormatAndData", 
    $sig.make(0xD039, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ChildDestroyed", 
    $sig.make(0xD037, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Create", 
    $sig.make(0xD031, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.TimeSpan")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateFinalizerHelper", 
    $sig.make(0xD022, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD03D, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD033, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD035, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD032, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FromBuffer", 
    $sig.make(0xD02F, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromStream", 
    $sig.make(0xD024, $.Type, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DistanceScale", 
    $sig.make(0xD01B, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DopplerScale", 
    $sig.make(0xD010, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
    $sig.make(0xD004, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD00B, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCFFA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Loop", 
    $sig.make(0xCFFB, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MasterVolume", 
    $sig.make(0xD007, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MaxVelocityComponent", 
    $sig.make(0xD01F, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xCFFC, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SpeedOfSound", 
    $sig.make(0xD00E, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFromInstancePool", 
    $sig.make(0xD047, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSampleDuration", 
    $sig.make(0xD043, $asm06.TypeRef("System.TimeSpan"), [
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSampleSizeInBytes", 
    $sig.make(0xD042, $.Int32, [
        $asm06.TypeRef("System.TimeSpan"), $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsStoppedInstance", 
    $sig.make(0xD049, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Play", 
    $sig.make(0xD03F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Play", 
    $sig.make(0xD041, $.Boolean, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RecycleStoppedFireAndForgetInstances", 
    $sig.make(0xD044, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_DistanceScale", 
    $sig.make(0xD01E, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_DopplerScale", 
    $sig.make(0xD016, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_MasterVolume", 
    $sig.make(0xD009, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0xD001, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_SpeedOfSound", 
    $sig.make(0xD00F, null, [$.Single], [])
  );

  $.Constant({Static:true , Public:false}, "defaultVolume", 1); 
  $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
  $.Field({Static:false, Public:false}, "effectName", $.String); 
  $.Field({Static:false, Public:false}, "duration", $asm06.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false}, "loopInfo", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:true , Public:false}, "speedOfSound", $.Single, 343.5); 
  $.Field({Static:true , Public:false}, "dopplerScale", $.Single, 1); 
  $.Field({Static:true , Public:false}, "distanceScale", $.Single, 1); 
  $.Field({Static:true , Public:false}, "maxVelocityComponent", $.Single, 343.49899291992188); 
  $.Field({Static:true , Public:false}, "currentVolume", $.Single, 1); 
  $.Field({Static:true , Public:false}, "fireAndForgetInstances", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "instancePool", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")])); 
  $.Field({Static:false, Public:false}, "children", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.WeakReference")])); 
  $.Field({Static:true , Public:false}, "finalizerHelper", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectFinalizerHelper")); 
  $.Field({Static:true , Public:false}, "instancesToDispose", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")])); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Loop", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Duration", $asm06.TypeRef("System.TimeSpan"));

  $.Property({Static:true , Public:true }, "MasterVolume", $.Single);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:true , Public:true }, "SpeedOfSound", $.Single);

  $.Property({Static:true , Public:true }, "DopplerScale", $.Single);

  $.Property({Static:true , Public:true }, "DistanceScale", $.Single);

  $.Property({Static:true , Public:false}, "MaxVelocityComponent", $.Single);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.SoundState", true, {
    Playing: 0, 
    Paused: 1, 
    Stopped: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.SoundEffectInstance", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD0A2, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD0A4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocateVoice", 
    $sig.make(0xD0AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Apply3D", 
    $sig.make(0xD0C3, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Apply3D", 
    $sig.make(0xD0C5, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeallocateVoice", 
    $sig.make(0xD0B0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD0AA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD0AC, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD0A7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD07B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFireAndForget", 
    $sig.make(0xD072, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLooped", 
    $sig.make(0xD090, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Pan", 
    $sig.make(0xD08A, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Pitch", 
    $sig.make(0xD085, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SoundEffect", 
    $sig.make(0xD07E, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_State", 
    $sig.make(0xD09F, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_VoiceHandle", 
    $sig.make(0xD06F, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_VoiceHandleLock", 
    $sig.make(0xD071, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Volume", 
    $sig.make(0xD082, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Pause", 
    $sig.make(0xD0C0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Play", 
    $sig.make(0xD0B3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Resume", 
    $sig.make(0xD0C2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SafeApply3D", 
    $sig.make(0xD0C6, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsLooped", 
    $sig.make(0xD09C, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Pan", 
    $sig.make(0xD08D, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Pitch", 
    $sig.make(0xD087, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_SoundEffect", 
    $sig.make(0xD080, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_VoiceHandle", 
    $sig.make(0xD070, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Volume", 
    $sig.make(0xD084, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Stop", 
    $sig.make(0xD0B4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Stop", 
    $sig.make(0xD0B7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UnsafeApply3D", 
    $sig.make(0xD0C8, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
  );

  $.Field({Static:false, Public:false}, "effect", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
  $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
  $.Field({Static:false, Public:false}, "looped", $.Boolean); 
  $.Field({Static:false, Public:false}, "currentVolume", $.Single); 
  $.Field({Static:false, Public:false}, "currentPitch", $.Single); 
  $.Field({Static:false, Public:false}, "currentPan", $.Single); 
  $.Field({Static:false, Public:false}, "is3d", $.Boolean); 
  $.Field({Static:false, Public:false}, "isFireAndForget", $.Boolean); 
  $.Field({Static:false, Public:false}, "isPacketSubmitted", $.Boolean); 
  $.Field({Static:false, Public:false}, "listenerData", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA")])); 
  $.Field({Static:false, Public:false}, "voiceHandle", $.UInt32); 
  $.Field({Static:false, Public:false}, "voiceHandleLock", $.Object); 
  $.Property({Static:false, Public:false}, "VoiceHandle", $.UInt32);

  $.Property({Static:false, Public:false}, "VoiceHandleLock", $.Object);

  $.Property({Static:false, Public:false}, "IsFireAndForget", $.Boolean);

  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "SoundEffect", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"));

  $.Property({Static:false, Public:true }, "Volume", $.Single);

  $.Property({Static:false, Public:true }, "Pitch", $.Single);

  $.Property({Static:false, Public:true }, "Pan", $.Single);

  $.Property({Static:false, Public:true , Virtual:true }, "IsLooped", $.Boolean);

  $.Property({Static:false, Public:true }, "State", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundState"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), "Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD132, null, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_BufferNeeded", 
    $sig.make(0xD12F, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocateData", 
    $sig.make(0xD139, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocateVoice", 
    $sig.make(0xD134, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD133, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLooped", 
    $sig.make(0xD123, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PendingBufferCount", 
    $sig.make(0xD12D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPendingBufferCount", 
    $sig.make(0xD13B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSampleDuration", 
    $sig.make(0xD137, $asm06.TypeRef("System.TimeSpan"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSampleSizeInBytes", 
    $sig.make(0xD138, $.Int32, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnBufferNeeded", 
    $sig.make(0xD13D, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Play", 
    $sig.make(0xD13A, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RaiseBufferNeededOnInstance", 
    $sig.make(0xD13C, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_BufferNeeded", 
    $sig.make(0xD130, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsLooped", 
    $sig.make(0xD12B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SubmitBuffer", 
    $sig.make(0xD135, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SubmitBuffer", 
    $sig.make(0xD136, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:true , Public:false}, "allInstances", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm06.TypeRef("System.WeakReference")])); 
  $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat")); 
  $.Field({Static:false, Public:false}, "BufferNeeded", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsLooped", $.Boolean);

  $.Property({Static:false, Public:true }, "PendingBufferCount", $.Int32);

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Audio.AudioHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "Byteswap", 
    $sig.make(0xD1AA, $.Int16, [$.Int16], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Byteswap", 
    $sig.make(0xD1AD, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSampleDuration", 
    $sig.make(0xD1BC, $asm06.TypeRef("System.TimeSpan"), [
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSampleSizeInBytes", 
    $sig.make(0xD1BD, $.Int32, [
        $asm06.TypeRef("System.TimeSpan"), $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LocalizeFormat", 
    $sig.make(0xD1BA, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeFormat", 
    $sig.make(0xD1B9, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), 
        $.Int16
      ], [])
  );

  $.Constant({Static:true , Public:false}, "waveFormatExSize", 18); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.AudioFormat", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD07A, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0xD06D, $.Type, [
        $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), 
        $.Int16
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DurationFromSize", 
    $sig.make(0xD086, $asm06.TypeRef("System.TimeSpan"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsAligned", 
    $sig.make(0xD07D, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SizeFromDuration", 
    $sig.make(0xD088, $.Int32, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.Field({Static:false, Public:true , ReadOnly:true }, "RawBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "FormatTag", $.Int16); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "Channels", $.Int16); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "SampleRate", $.Int32); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "AvgBytesPerSec", $.Int32); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "BlockAlign", $.Int16); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "BitsPerSample", $.Int16); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.WavFile", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD1DE, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Data", 
    $sig.make(0xD1D5, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Duration", 
    $sig.make(0xD1DA, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Format", 
    $sig.make(0xD1D4, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LoopLength", 
    $sig.make(0xD1D8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LoopStart", 
    $sig.make(0xD1D7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SampleLength", 
    $sig.make(0xD1D9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Open", 
    $sig.make(0xD1DB, $.Type, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseData", 
    $sig.make(0xD1E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseFormat", 
    $sig.make(0xD1E4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseLoopRegion", 
    $sig.make(0xD1E7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseSmplChunk", 
    $sig.make(0xD1E9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseWavHeader", 
    $sig.make(0xD1E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseWsmpChunk", 
    $sig.make(0xD1E8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadChunk", 
    $sig.make(0xD1E3, null, [], [])
  );

  $.Field({Static:true , Public:false}, "riff", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "wave", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "fmt", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "smpl", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "wsmp", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:true , Public:false}, "riffId", $.Int32); 
  $.Field({Static:true , Public:false}, "wavId", $.Int32); 
  $.Field({Static:true , Public:false}, "fmtId", $.Int32); 
  $.Field({Static:true , Public:false}, "smplId", $.Int32); 
  $.Field({Static:true , Public:false}, "wsmpId", $.Int32); 
  $.Field({Static:true , Public:false}, "dataId", $.Int32); 
  $.Field({Static:false, Public:false}, "reader", $asm06.TypeRef("System.IO.BinaryReader")); 
  $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat")); 
  $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "smplChunk", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.WavFile/RiffChunk")); 
  $.Field({Static:false, Public:false}, "wsmpChunk", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.WavFile/RiffChunk")); 
  $.Field({Static:false, Public:false}, "loop", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion")); 
  $.Property({Static:false, Public:false}, "Format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat"));

  $.Property({Static:false, Public:false}, "Data", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:false}, "LoopStart", $.Int32);

  $.Property({Static:false, Public:false}, "LoopLength", $.Int32);

  $.Property({Static:false, Public:false}, "SampleLength", $.Int32);

  $.Property({Static:false, Public:false}, "Duration", $asm06.TypeRef("System.TimeSpan"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.WavFile/RiffChunk", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD213, null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.Field({Static:false, Public:true , ReadOnly:true }, "id", $.Int32); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.XOverlappedAsyncResult", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD201, null, [
        $.Object, $.UInt32, 
        $.Boolean, $asm01.TypeRef("Microsoft.Xna.Framework.AsyncOperationCleanup")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD202, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_AsyncWaitHandle", 
    $sig.make(0xD1FC, $asm06.TypeRef("System.Threading.EventWaitHandle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReusable", 
    $sig.make(0xD1FF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_KernelHandle", 
    $sig.make(0xD1FE, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PrepareForEndFunction", 
    $sig.make(0xD203, $.Type, [$asm06.TypeRef("System.IAsyncResult")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsCompleted", 
    $sig.make(0xD1FD, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IAsyncResult.get_AsyncState", 
    $sig.make(0xD1E6, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IAsyncResult.get_AsyncWaitHandle", 
    $sig.make(0xD1EE, $asm06.TypeRef("System.Threading.WaitHandle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IAsyncResult.get_CompletedSynchronously", 
    $sig.make(0xD1F3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IAsyncResult.get_IsCompleted", 
    $sig.make(0xD1F8, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "asyncState", $.Object); 
  $.Field({Static:false, Public:false}, "asyncWaitHandle", $asm06.TypeRef("System.Threading.EventWaitHandle")); 
  $.Field({Static:false, Public:false}, "isCompleted", $.Boolean); 
  $.Field({Static:false, Public:false}, "kernelHandle", $.UInt32); 
  $.Field({Static:false, Public:false}, "endHasBeenCalled", $.Boolean); 
  $.Field({Static:false, Public:false}, "isReusable", $.Boolean); 
  $.Field({Static:false, Public:false}, "kernelHandleCleanup", $asm01.TypeRef("Microsoft.Xna.Framework.AsyncOperationCleanup")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IAsyncResult.AsyncState", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "IAsyncResult.AsyncWaitHandle", $asm06.TypeRef("System.Threading.WaitHandle"));

  $.Property({Static:false, Public:false, Virtual:true }, "IAsyncResult.CompletedSynchronously", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IAsyncResult.IsCompleted", $.Boolean);

  $.Property({Static:false, Public:false}, "AsyncWaitHandle", $asm06.TypeRef("System.Threading.EventWaitHandle"));

  $.Property({Static:false, Public:false}, "IsCompleted", $.Boolean);

  $.Property({Static:false, Public:false}, "KernelHandle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsReusable", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IAsyncResult"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.Album", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCE76, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCE78, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCE7C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCE7E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xCE8A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xCE8B, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCE7B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Artist", 
    $sig.make(0xCE6A, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
    $sig.make(0xCE6D, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Genre", 
    $sig.make(0xCE6C, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCE67, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasArt", 
    $sig.make(0xCE70, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCE66, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xCE68, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xCE69, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
    $sig.make(0xCE6B, $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAlbumArt", 
    $sig.make(0xCE82, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xCE8D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetImageStream", 
    $sig.make(0xCE85, $asm06.TypeRef("System.IO.Stream"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetThumbnail", 
    $sig.make(0xCE83, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xCE87, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xCE89, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xCE80, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCE8C, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")); 
  $.Field({Static:false, Public:false}, "genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")); 
  $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
  $.Field({Static:false, Public:false}, "duration", $asm06.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false}, "hasArt", $.Boolean); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

  $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

  $.Property({Static:false, Public:true }, "Genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

  $.Property({Static:false, Public:true }, "Duration", $asm06.TypeRef("System.TimeSpan"));

  $.Property({Static:false, Public:true }, "HasArt", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.AlbumCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCEB6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCEB7, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCEB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCEBB, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCEB8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xCEB5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCEB2, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCEB1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xCEB3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xCEB4, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xCEBE, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xCEC1, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xCEBC, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.Artist", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCE0C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCE0D, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCE12, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCE13, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xCE19, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xCE1A, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCE0E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
    $sig.make(0xCE0B, $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCE07, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCE06, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xCE08, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xCE09, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
    $sig.make(0xCE0A, $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xCE1F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xCE17, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xCE18, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xCE14, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCE1D, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
  $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

  $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.ArtistCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD298, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD29A, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD2A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD2A1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD29C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD28E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD287, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD286, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD289, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD28B, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD2A3, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xD2A4, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD2A2, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.Genre", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCE46, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCE47, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCE49, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCE4A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xCE55, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xCE56, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCE48, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
    $sig.make(0xCE45, $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCE40, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCE3F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xCE41, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xCE42, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
    $sig.make(0xCE44, $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xCE58, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xCE4D, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xCE4F, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xCE4B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCE57, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
  $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

  $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.GenreCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD257, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD25A, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD25D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD25F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD25C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD255, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD24E, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD24D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD24F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD252, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD263, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xD265, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD261, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.ComStreamWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD369, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xD37D, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Runtime.InteropServices.ComTypes.IStream")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Commit", 
    $sig.make(0xD375, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xD374, null, [
        $asm06.TypeRef("System.Runtime.InteropServices.ComTypes.IStream"), $.Int64, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLength", 
    $sig.make(0xD371, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LockRegion", 
    $sig.make(0xD379, null, [
        $.Int64, $.Int64, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xD36D, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Revert", 
    $sig.make(0xD377, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0xD36F, null, [
        $.Int64, $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSize", 
    $sig.make(0xD372, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Stat", 
    $sig.make(0xD37C, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Runtime.InteropServices.ComTypes.STATSTG")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "UnlockRegion", 
    $sig.make(0xD37B, null, [
        $.Int64, $.Int64, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xD36E, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.IO.Stream")); 
  $.ImplementInterfaces($asm06.TypeRef("System.Runtime.InteropServices.ComTypes.IStream"))
})
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm06.System.Runtime.InteropServices.ClassInterfaceType.None]; });

JSIL.MakeClass($asm06.TypeRef("System.IO.Stream"), "Microsoft.Xna.Framework.Media.ImageStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD436, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD438, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD460, null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), $.Int32, 
        $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateKernelStreamFromStream", 
    $sig.make(0xD462, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD464, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EncodeBuffer", 
    $sig.make(0xD461, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD463, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0xD466, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromColors", 
    $sig.make(0xD435, $.Type, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), $.Int32, 
        $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromStream", 
    $sig.make(0xD434, $.Type, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanRead", 
    $sig.make(0xD42E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanSeek", 
    $sig.make(0xD42B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanWrite", 
    $sig.make(0xD42F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD433, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD429, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0xD430, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0xD431, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xD465, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0xD467, $.Int64, [$.Int64, $asm06.TypeRef("System.IO.SeekOrigin")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0xD432, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetLength", 
    $sig.make(0xD468, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateWidthHeightFormat", 
    $sig.make(0xD437, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0xD469, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.Field({Static:false, Public:false}, "streamLock", $.Object); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
  $.Field({Static:false, Public:false}, "comStreamWrapper", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ComStreamWrapper")); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF36, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF37, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xCF3B, new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCF3C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCF3D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCF38, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0xCF34, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCF35, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0xCF33, new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0xCF31, new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0xCF32, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0xCF39, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0xCF3A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
  $.Field({Static:false, Public:false}, "handleList", $.UInt32); 
  $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.Property({Static:false, Public:false}, "Item", new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"));

  $.Property({Static:false, Public:false}, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), "Microsoft.Xna.Framework.Media.SongLibraryEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF81, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF82, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xCF83, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCF80, $.UInt32, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")]), "Microsoft.Xna.Framework.Media.ArtistEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD2D8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD2D9, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xD2DA, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")]), "Microsoft.Xna.Framework.Media.AlbumEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF69, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF6A, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xCF6B, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")]), "Microsoft.Xna.Framework.Media.GenreEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD344, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD345, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xD347, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), "Microsoft.Xna.Framework.Media.PlaylistEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD471, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD473, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xD475, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture")]), "Microsoft.Xna.Framework.Media.PictureEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD439, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD43A, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xD43B, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")]), "Microsoft.Xna.Framework.Media.PictureAlbumEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD38F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD391, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateItemInstance", 
    $sig.make(0xD393, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [$.UInt32], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Media.MediaPlayer", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "add_ActiveSongChanged", 
    $sig.make(0xD560, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "add_MediaStateChanged", 
    $sig.make(0xD562, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GameHasControl", 
    $sig.make(0xD55F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IsMuted", 
    $sig.make(0xD550, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IsRepeating", 
    $sig.make(0xD53F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IsShuffled", 
    $sig.make(0xD536, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IsVisualizationEnabled", 
    $sig.make(0xD55C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PlayPosition", 
    $sig.make(0xD544, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Queue", 
    $sig.make(0xD542, $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_State", 
    $sig.make(0xD543, $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Volume", 
    $sig.make(0xD54A, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetVisualizationData", 
    $sig.make(0xD56D, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.VisualizationData")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MoveNext", 
    $sig.make(0xD56B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MovePrevious", 
    $sig.make(0xD56C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnActiveSongChanged", 
    $sig.make(0xD56E, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnMediaStateChanged", 
    $sig.make(0xD56F, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Pause", 
    $sig.make(0xD568, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Play", 
    $sig.make(0xD565, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Play", 
    $sig.make(0xD566, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Play", 
    $sig.make(0xD567, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "remove_ActiveSongChanged", 
    $sig.make(0xD561, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "remove_MediaStateChanged", 
    $sig.make(0xD563, null, [$asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Resume", 
    $sig.make(0xD569, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_IsMuted", 
    $sig.make(0xD556, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_IsRepeating", 
    $sig.make(0xD541, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_IsShuffled", 
    $sig.make(0xD537, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_IsVisualizationEnabled", 
    $sig.make(0xD55E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "set_Volume", 
    $sig.make(0xD54C, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Stop", 
    $sig.make(0xD56A, null, [], [])
  );

  $.Field({Static:true , Public:false}, "shuffle", $.Boolean, false); 
  $.Field({Static:true , Public:false}, "repeat", $.Boolean, false); 
  $.Field({Static:true , Public:false}, "queue", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue")); 
  $.Field({Static:true , Public:false}, "ActiveSongChanged", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])); 
  $.Field({Static:true , Public:false}, "MediaStateChanged", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")])); 
  $.Property({Static:true , Public:true }, "IsShuffled", $.Boolean);

  $.Property({Static:true , Public:true }, "IsRepeating", $.Boolean);

  $.Property({Static:true , Public:true }, "Queue", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue"));

  $.Property({Static:true , Public:true }, "State", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState"));

  $.Property({Static:true , Public:true }, "PlayPosition", $asm06.TypeRef("System.TimeSpan"));

  $.Property({Static:true , Public:true }, "Volume", $.Single);

  $.Property({Static:true , Public:true }, "IsMuted", $.Boolean);

  $.Property({Static:true , Public:true }, "IsVisualizationEnabled", $.Boolean);

  $.Property({Static:true , Public:true }, "GameHasControl", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.MediaQueue", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD57E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ActiveSong", 
    $sig.make(0xD578, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ActiveSongIndex", 
    $sig.make(0xD574, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD572, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD57A, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PlayPosition", 
    $sig.make(0xD57D, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0xD58D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MovePrevious", 
    $sig.make(0xD58E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Play", 
    $sig.make(0xD57F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Play", 
    $sig.make(0xD58A, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Play", 
    $sig.make(0xD58C, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ActiveSongIndex", 
    $sig.make(0xD576, null, [$.Int32], [])
  );

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "ActiveSongIndex", $.Int32);

  $.Property({Static:false, Public:true }, "ActiveSong", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"));

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"));

  $.Property({Static:false, Public:false}, "PlayPosition", $asm06.TypeRef("System.TimeSpan"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.Picture", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD2F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD2F1, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD2F3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD2F4, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD2FB, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD2FE, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD2F2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Album", 
    $sig.make(0xD2EC, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Date", 
    $sig.make(0xD2EF, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD2E9, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0xD2EE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD2E8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD2EA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xD2EB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0xD2ED, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD2FD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImage", 
    $sig.make(0xD2F6, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetImageStream", 
    $sig.make(0xD2F8, $asm06.TypeRef("System.IO.Stream"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetThumbnail", 
    $sig.make(0xD2F7, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD2F9, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD2FA, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD2F5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD2FC, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")); 
  $.Field({Static:false, Public:false}, "width", $.Int32); 
  $.Field({Static:false, Public:false}, "height", $.Int32); 
  $.Field({Static:false, Public:false}, "date", $asm06.TypeRef("System.DateTime")); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"));

  $.Property({Static:false, Public:true }, "Width", $.Int32);

  $.Property({Static:false, Public:true }, "Height", $.Int32);

  $.Property({Static:false, Public:true }, "Date", $asm06.TypeRef("System.DateTime"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.PictureAlbum", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD39F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD3A2, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD3A7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD3AA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD3B4, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD3C2, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD3A6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
    $sig.make(0xD397, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD392, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD390, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD394, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xD395, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
    $sig.make(0xD39C, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Pictures", 
    $sig.make(0xD399, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD3BA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD3B0, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD3B2, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD3AD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD3B5, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumCollection")); 
  $.Field({Static:false, Public:false}, "parent", $.Type); 
  $.Field({Static:false, Public:false}, "pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection")); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumCollection"));

  $.Property({Static:false, Public:true }, "Pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"));

  $.Property({Static:false, Public:true }, "Parent", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.PictureAlbumCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD30F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD310, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD312, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD313, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD311, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD30E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD30B, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD30A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD30C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD30D, $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD315, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xD316, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD314, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.PictureCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD323, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD324, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD326, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD327, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD325, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD322, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD31F, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD31E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD320, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD321, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD329, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xD32A, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD328, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.Playlist", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD449, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD44A, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD44C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD44D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD451, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD454, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD44B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
    $sig.make(0xD448, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD444, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD443, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD445, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xD446, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
    $sig.make(0xD447, $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD453, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD44F, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD450, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD44E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD452, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
  $.Field({Static:false, Public:false}, "duration", $asm06.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

  $.Property({Static:false, Public:true }, "Duration", $asm06.TypeRef("System.TimeSpan"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.PlaylistCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD365, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD366, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xD368, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xD36A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xD367, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD364, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xD359, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xD357, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xD362, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD363, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD36C, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xD370, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xD36B, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist"));

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.Song", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCDD9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCDDA, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCDDD, null, [$.String, $asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCDE6, null, [
        $.String, $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCDED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCDEE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xCDF2, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xCDF3, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCDE9, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromUri", 
    $sig.make(0xCDDB, $.Type, [$.String, $asm07.TypeRef("System.Uri")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Album", 
    $sig.make(0xCDCD, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Artist", 
    $sig.make(0xCDC9, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
    $sig.make(0xCDD1, $asm06.TypeRef("System.TimeSpan"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Genre", 
    $sig.make(0xCDCF, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCDC6, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCDC5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsProtected", 
    $sig.make(0xCDD7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsRated", 
    $sig.make(0xCDD3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xCDC7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0xCDC8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PlayCount", 
    $sig.make(0xCDD5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Rating", 
    $sig.make(0xCDD4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TrackNumber", 
    $sig.make(0xCDD6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xCDF9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xCDF0, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xCDF1, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xCDEF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCDF8, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")); 
  $.Field({Static:false, Public:false}, "album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")); 
  $.Field({Static:false, Public:false}, "genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")); 
  $.Field({Static:false, Public:false}, "duration", $asm06.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false}, "rating", $.Int32); 
  $.Field({Static:false, Public:false}, "trackNumber", $.Int32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

  $.Property({Static:false, Public:true }, "Album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"));

  $.Property({Static:false, Public:true }, "Genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

  $.Property({Static:false, Public:true }, "Duration", $asm06.TypeRef("System.TimeSpan"));

  $.Property({Static:false, Public:true }, "IsRated", $.Boolean);

  $.Property({Static:false, Public:true }, "Rating", $.Int32);

  $.Property({Static:false, Public:true }, "PlayCount", $.Int32);

  $.Property({Static:false, Public:true }, "TrackNumber", $.Int32);

  $.Property({Static:false, Public:true }, "IsProtected", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Media.SongCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCEE3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCEE5, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xCEE8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xCEEA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xCEE7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xCEDF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0xCEDA, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
    $sig.make(0xCED9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
    $sig.make(0xCEDB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xCEE1, $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xCEEC, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xCEED, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
    $sig.make(0xCEEB, null, [], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "libraryCollection", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongLibraryEnumerator")); 
  $.Field({Static:false, Public:false}, "handle", $.UInt32); 
  $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

  $.Property({Static:false, Public:false}, "Handle", $.UInt32);

  $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"));

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeDelegate("Microsoft.Xna.Framework.AsyncOperationCleanup", false, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.PendingOperation", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD535, null, [$asm01.TypeRef("Microsoft.Xna.Framework.XOverlappedAsyncResult"), $asm06.TypeRef("System.AsyncCallback")], [])
  );

  $.Field({Static:false, Public:true }, "Async", $asm01.TypeRef("Microsoft.Xna.Framework.XOverlappedAsyncResult")); 
  $.Field({Static:false, Public:true }, "Callback", $asm06.TypeRef("System.AsyncCallback")); 
});

JSIL.MakeClass($asm06.TypeRef("System.IO.BinaryReader"), "Microsoft.Xna.Framework.Content.ContentReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBFF7, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $asm06.TypeRef("System.IO.Stream"), 
        $.String, $asm06.TypeRef("System.Action`1", [$asm06.TypeRef("System.IDisposable")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0xBFF3, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $asm06.TypeRef("System.IO.Stream"), 
        $.String, $asm06.TypeRef("System.Action`1", [$asm06.TypeRef("System.IDisposable")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateContentLoadException", 
    $sig.make(0xC01D, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateContentLoadException", 
    $sig.make(0xC01E, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [
        $asm06.TypeRef("System.Exception"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateContentLoadException", 
    $sig.make(0xC01F, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [
        $.String, $asm06.TypeRef("System.Exception"), 
        $.String, $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AssetName", 
    $sig.make(0xBFF0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContentManager", 
    $sig.make(0xBFEF, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAbsolutePathToReference", 
    $sig.make(0xC019, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPathToReference", 
    $sig.make(0xC018, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InvokeReader", 
    $sig.make(0xC011, "!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), $.Object], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "PrepareStream", 
    $sig.make(0xBFFA, $asm06.TypeRef("System.IO.Stream"), [
        $asm06.TypeRef("System.IO.Stream"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadAsset", 
    $sig.make(0xBFFC, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadByteBuffer", 
    $sig.make(0xC01B, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadColor", 
    $sig.make(0xC025, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadDouble", 
    $sig.make(0xC027, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadExternalReference", 
    $sig.make(0xC016, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadHeader", 
    $sig.make(0xBFFD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadMatrix", 
    $sig.make(0xC023, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
    $sig.make(0xBFFE, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
    $sig.make(0xBFFF, "!!0", ["!!0"], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
    $sig.make(0xC000, "!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
    $sig.make(0xC001, "!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadObjectInternal", 
    $sig.make(0xC006, "!!0", [$.Object], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadObjectInternal", 
    $sig.make(0xC00A, "!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), $.Object], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadQuaternion", 
    $sig.make(0xC024, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
    $sig.make(0xC00B, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
    $sig.make(0xC00C, "!!0", ["!!0"], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
    $sig.make(0xC00D, "!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
    $sig.make(0xC00F, "!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadSharedResource", 
    $sig.make(0xC013, null, [$asm06.TypeRef("System.Action`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReadSharedResources", 
    $sig.make(0xC015, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadSingle", 
    $sig.make(0xC026, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadVector2", 
    $sig.make(0xC020, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadVector3", 
    $sig.make(0xC021, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadVector4", 
    $sig.make(0xC022, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Constant({Static:true , Public:false}, "PlatformLabel", "w"); 
  $.Constant({Static:true , Public:false}, "XnbVersion", 5); 
  $.Constant({Static:true , Public:false}, "XnbCompressedVersion", 32773); 
  $.Constant({Static:true , Public:false}, "XnbVersionProfileMask", 32512); 
  $.Constant({Static:true , Public:false}, "XnbVersionProfileShift", 8); 
  $.Constant({Static:true , Public:false}, "XnbPrologueSize", 10); 
  $.Constant({Static:true , Public:false}, "XnbCompressedPrologueSize", 14); 
  $.Field({Static:false, Public:false}, "contentManager", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
  $.Field({Static:false, Public:false}, "assetName", $.String); 
  $.Field({Static:false, Public:false}, "recordDisposableObject", $asm06.TypeRef("System.Action`1", [$asm06.TypeRef("System.IDisposable")])); 
  $.Field({Static:false, Public:false}, "typeReaders", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
  $.Field({Static:false, Public:false}, "sharedResourceFixups", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Action`1", [$.Object])])])); 
  $.Field({Static:false, Public:false}, "graphicsProfile", $.Int32); 
  $.Property({Static:false, Public:true }, "ContentManager", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

  $.Property({Static:false, Public:true }, "AssetName", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Content.ContentReader/<>c__DisplayClass1`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xDA10, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")); 
  $.Field({Static:false, Public:true }, "fixup", $asm06.TypeRef("System.Action`1", [$.GenericParameter("T")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Content.ContentTypeReaderManager", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xBF9F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddTypeReader", 
    $sig.make(0xBFA6, null, [
        $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ContainsTypeReader", 
    $sig.make(0xBFB4, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTypeReader", 
    $sig.make(0xBFA3, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [
        $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTypeReader", 
    $sig.make(0xBFAD, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [$asm06.TypeRef("System.Type"), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetTypeReader", 
    $sig.make(0xBFAF, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstantiateTypeReader", 
    $sig.make(0xBFA5, $.Boolean, [
        $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReadTypeManifest", 
    $sig.make(0xBFA1, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]), [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RollbackAddReader", 
    $sig.make(0xBFAC, null, [$asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "RollbackAddReaders", 
    $sig.make(0xBFA8, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])], [])
  );

  $.Field({Static:false, Public:false}, "contentReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")); 
  $.Field({Static:true , Public:false}, "nameToReader", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
  $.Field({Static:true , Public:false}, "targetTypeToReader", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm06.TypeRef("System.Type"), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
  $.Field({Static:true , Public:false}, "readerTypeToReader", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm06.TypeRef("System.Type"), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "Microsoft.Xna.Framework.Content.ReflectiveReader`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5A2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanDeserializeIntoExistingObject", 
    $sig.make(0xD59E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeVersion", 
    $sig.make(0xD59F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0xD5A8, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Read", 
    $sig.make(0xD5AA, $.Object, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
  );

  $.Field({Static:false, Public:false}, "baseReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
  $.Field({Static:false, Public:false}, "memberHelpers", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper")])); 
  $.Field({Static:false, Public:false}, "instanceConstructor", $asm06.TypeRef("System.Reflection.ConstructorInfo")); 
  $.Field({Static:false, Public:false}, "typeVersion", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "TypeVersion", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xC5FA, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm06.TypeRef("System.Reflection.FieldInfo"), 
        $asm06.TypeRef("System.Reflection.PropertyInfo"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FixupSharedResource", 
    $sig.make(0xC60E, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSharedResource", 
    $sig.make(0xC60B, $.Boolean, [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0xC60D, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ShouldSerializeMember", 
    $sig.make(0xC608, $.Boolean, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Type"), 
        $.Boolean, $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ShouldSerializeProperty", 
    $sig.make(0xC60A, $.Boolean, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.PropertyInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
    $sig.make(0xC5F5, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.FieldInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
    $sig.make(0xC5F7, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.PropertyInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateSkippedMember", 
    $sig.make(0xC60C, null, [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.Field({Static:false, Public:false}, "typeReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
  $.Field({Static:false, Public:false}, "fieldInfo", $asm06.TypeRef("System.Reflection.FieldInfo")); 
  $.Field({Static:false, Public:false}, "propertyInfo", $asm06.TypeRef("System.Reflection.PropertyInfo")); 
  $.Field({Static:false, Public:false}, "canWrite", $.Boolean); 
  $.Field({Static:false, Public:false}, "sharedResource", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper/<>c__DisplayClass2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xDA24, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper")); 
  $.Field({Static:false, Public:true }, "input", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")); 
  $.Field({Static:false, Public:true }, "parentInstance", $.Object); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("Microsoft.Xna.Framework.RegistryKeys", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "ProductVersion", "v4.0"); 
  $.Constant({Static:true , Public:false}, "FrameworkVersion", "v4.0"); 
  $.Constant({Static:true , Public:false}, "FrameworkKeyBase", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Framework\\"); 
  $.Constant({Static:true , Public:false}, "FrameworkKey", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Framework\\v4.0"); 
  $.Constant({Static:true , Public:false}, "FrameworkNativeLibraryPath", "NativeLibraryPath"); 
  $.Constant({Static:true , Public:false}, "GameStudioKeyBase", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\"); 
  $.Constant({Static:true , Public:false}, "GameStudioKey", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\v4.0"); 
  $.Constant({Static:true , Public:false}, "GameStudioSubkey", "SOFTWARE\\Microsoft\\XNA\\Game Studio\\v4.0"); 
  $.Constant({Static:true , Public:false}, "GameStudioInstalled", "Installed"); 
  $.Constant({Static:true , Public:false}, "GameStudioInstallPath", "InstallPath"); 
  $.Constant({Static:true , Public:false}, "SharedKeyRoot", "HKEY_LOCAL_MACHINE\\"); 
  $.Constant({Static:true , Public:false}, "SharedKeyPart", "SOFTWARE\\Microsoft\\XNA\\Game Studio\\"); 
  $.Constant({Static:true , Public:false}, "SharedKey", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\"); 
  $.Constant({Static:true , Public:false}, "SharedKeyPath", "SharedComponentsPath"); 
  $.Constant({Static:true , Public:false}, "SharedDeployableRuntimes", "DeployableRuntimes"); 
  $.Field({Static:true , Public:false}, "DontRemoveMePlease", $.Boolean); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.EnvironmentVariables", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "XnaGsVersionFolder", "XNAGSv4"); 
  $.Constant({Static:true , Public:false}, "XnaGsSharedFolder", "XNAGSShared"); 
  $.Field({Static:true , Public:false}, "DontRemoveMePlease", $.Boolean); 
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Logger", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "BeginLogEvent", 
    $sig.make(0xC6C6, null, [$asm01.TypeRef("Microsoft.Xna.Framework.LoggingEvent"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EndLogEvent", 
    $sig.make(0xC6C8, null, [$asm01.TypeRef("Microsoft.Xna.Framework.LoggingEvent"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LogEvent", 
    $sig.make(0xC6C4, null, [$asm01.TypeRef("Microsoft.Xna.Framework.LoggingEvent"), $.String], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.AudioEmitter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC6FE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DopplerScale", 
    $sig.make(0xC6FC, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Forward", 
    $sig.make(0xC6F8, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0xC6EF, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Up", 
    $sig.make(0xC6FA, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Velocity", 
    $sig.make(0xC6F4, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DopplerScale", 
    $sig.make(0xC6FD, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Forward", 
    $sig.make(0xC6F9, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0xC6F1, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Up", 
    $sig.make(0xC6FB, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Velocity", 
    $sig.make(0xC6F5, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.Field({Static:false, Public:false}, "emitterData", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_EMITTER_DATA")); 
  $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "DopplerScale", $.Single);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Audio.AudioListener", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC75C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Forward", 
    $sig.make(0xC757, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0xC747, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Up", 
    $sig.make(0xC759, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Velocity", 
    $sig.make(0xC753, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Forward", 
    $sig.make(0xC758, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0xC74F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Up", 
    $sig.make(0xC75A, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Velocity", 
    $sig.make(0xC755, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.Field({Static:false, Public:false}, "listenerData", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA")); 
  $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "FlipHandedness", 
    $sig.make(0xC71F, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "_Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_EMITTER_DATA", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "_Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "_innerRadius", $.Single); 
  $.Field({Static:false, Public:false}, "_innerRadiusAngle", $.Single); 
  $.Field({Static:false, Public:false}, "ChannelCount", $.UInt32); 
  $.Field({Static:false, Public:false}, "ChannelRadius", $.Single); 
  $.Field({Static:false, Public:false}, "CurveDistanceScaler", $.Single); 
  $.Field({Static:false, Public:false}, "_DopplerScale", $.Single); 
});

JSIL.MakeClass($asm06.TypeRef("System.Exception"), "Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC795, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC798, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC79A, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xC79D, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.FrameworkResources", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xC9AA, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AllPlayersFolder", 
    $sig.make(0xC7CD, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AloneInTheParty", 
    $sig.make(0xC7D4, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Apply3DBeforePlaying", 
    $sig.make(0xC7DA, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArrayMultipleFour", 
    $sig.make(0xC7DE, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BackBufferBadSize", 
    $sig.make(0xC7DF, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnb", 
    $sig.make(0xC7E0, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbGraphicsProfile", 
    $sig.make(0xC7E1, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbMagic", 
    $sig.make(0xC7E2, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbPlatform", 
    $sig.make(0xC7EB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbSize", 
    $sig.make(0xC7EE, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbTypeVersion", 
    $sig.make(0xC7F1, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbVersion", 
    $sig.make(0xC7F4, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BadXnbWrongType", 
    $sig.make(0xC7F7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BeginMustBeCalledBeforeDraw", 
    $sig.make(0xC7F9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BeginMustBeCalledBeforeEnd", 
    $sig.make(0xC7FB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BindPoseNotAvailable", 
    $sig.make(0xC7FF, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BlobStreamIsNotExpandable", 
    $sig.make(0xC801, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BoundingBoxZeroPoints", 
    $sig.make(0xC803, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BoundingSphereZeroPoints", 
    $sig.make(0xC804, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BoundStateObject", 
    $sig.make(0xC805, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BuiltInEffectWrongTextureType", 
    $sig.make(0xC806, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CallFrameworkDispatcherUpdate", 
    $sig.make(0xC807, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotCallSpriteBeginTwice", 
    $sig.make(0xC809, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotClearNullDepth", 
    $sig.make(0xC80A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotDrawNoData", 
    $sig.make(0xC80B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotDrawNoShader", 
    $sig.make(0xC80C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotEndTwice", 
    $sig.make(0xC80D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotGetBackBufferActiveRenderTargets", 
    $sig.make(0xC80E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotMixShader2and3", 
    $sig.make(0xC80F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotNextSpriteBeginImmediate", 
    $sig.make(0xC810, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotPresentActiveRenderTargets", 
    $sig.make(0xC811, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotSetAlreadyUsedRenderTarget", 
    $sig.make(0xC812, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotUseFormatTypeAsManualWhenLocking", 
    $sig.make(0xC813, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CantDisableLighting", 
    $sig.make(0xC814, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CantRemoveLocalMachine", 
    $sig.make(0xC815, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CantSerializeMember", 
    $sig.make(0xC816, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CantSerializeReadOnlyNull", 
    $sig.make(0xC817, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CharacterNotInFont", 
    $sig.make(0xC818, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ContentManagerCannotChangeRootDirectory", 
    $sig.make(0xC819, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CouldNotCreateResource", 
    $sig.make(0xC81A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CouldNotDeleteContainerAlreadyInUse", 
    $sig.make(0xC81B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CouldNotReadKeyboard", 
    $sig.make(0xC81C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CueNotFound", 
    $sig.make(0xC81D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0xC7CA, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DataNotAvailable", 
    $sig.make(0xC81E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DecompressionError", 
    $sig.make(0xC81F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DeviceCannotBeNullOnResourceCreate", 
    $sig.make(0xC820, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DriverError", 
    $sig.make(0xC821, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DuplicateVertexElement", 
    $sig.make(0xC822, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DxtNotMultipleOfFour", 
    $sig.make(0xC823, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DynamicSoundEffectInstancePacketLimit", 
    $sig.make(0xC824, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DynamicSoundEffectInvalidBuffer", 
    $sig.make(0xC825, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DynamicSoundEffectInvalidLoopRegion", 
    $sig.make(0xC826, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DynamicSoundEffectInvalidOffset", 
    $sig.make(0xC827, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DynamicSoundEffectInvalidPlayLength", 
    $sig.make(0xC828, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_EmptySongCollectionsCannotBePlayed", 
    $sig.make(0xC829, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_EndMustBeCalledBeforeBegin", 
    $sig.make(0xC82A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Expired", 
    $sig.make(0xC82B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerAlreadyInSession", 
    $sig.make(0xC82C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerInvalid", 
    $sig.make(0xC82D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerNull", 
    $sig.make(0xC82E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesAlreadyInitialized", 
    $sig.make(0xC82F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesCancelButton", 
    $sig.make(0xC830, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesGuideAlreadyVisible", 
    $sig.make(0xC831, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesInitializeFromNonUIThread", 
    $sig.make(0xC832, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesNotInitialized", 
    $sig.make(0xC833, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesOkButton", 
    $sig.make(0xC834, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GesturesNotAvailable", 
    $sig.make(0xC838, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GesturesNotEnabled", 
    $sig.make(0xC84A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_GuideIsShowing", 
    $sig.make(0xC84B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IAsyncNotFromBegin", 
    $sig.make(0xC84C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InCallback", 
    $sig.make(0xC84D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IndexBuffersMustBeSizedCorrectly", 
    $sig.make(0xC84E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InstallingTitleUpdate", 
    $sig.make(0xC84F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InstancePlayFailedDueToLimit", 
    $sig.make(0xC850, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidAccelerometer", 
    $sig.make(0xC854, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidApply3DCall", 
    $sig.make(0xC856, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidBufferSize", 
    $sig.make(0xC858, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidBytesPerCluster", 
    $sig.make(0xC859, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidCacheContainerOpenAsyncResult", 
    $sig.make(0xC85A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidCall", 
    $sig.make(0xC85B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidCategory", 
    $sig.make(0xC85D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidContentVersion", 
    $sig.make(0xC85E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidController", 
    $sig.make(0xC85F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidCue", 
    $sig.make(0xC860, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidDataSize", 
    $sig.make(0xC861, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidDevice", 
    $sig.make(0xC862, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidDisplayOrientation", 
    $sig.make(0xC863, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidEmitterDopplerScale", 
    $sig.make(0xC864, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidEntryCount", 
    $sig.make(0xC865, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidFileCacheSize", 
    $sig.make(0xC866, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidInstanceStreams", 
    $sig.make(0xC867, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidMicrophoneBufferDuration", 
    $sig.make(0xC868, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidNativeHandle", 
    $sig.make(0xC869, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidRectangle", 
    $sig.make(0xC86A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidServiceProvider", 
    $sig.make(0xC86B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidSessionState", 
    $sig.make(0xC86C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidSoundOffsetOrIndex", 
    $sig.make(0xC86D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidStoragePath", 
    $sig.make(0xC86E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidStringFormat", 
    $sig.make(0xC86F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidTitleContainerName", 
    $sig.make(0xC870, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidTotalSize", 
    $sig.make(0xC871, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidTouchPanel", 
    $sig.make(0xC872, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidTrackIndex", 
    $sig.make(0xC873, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidUsage", 
    $sig.make(0xC874, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidVariableIndex", 
    $sig.make(0xC875, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidWaveIndex", 
    $sig.make(0xC876, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidWaveStream", 
    $sig.make(0xC877, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidXactVolume", 
    $sig.make(0xC878, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InviteeNotSignedIn", 
    $sig.make(0xC879, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IsCompleteMustBeCalled", 
    $sig.make(0xC87A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardColumnNotFound", 
    $sig.make(0xC87B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardColumnOverflow", 
    $sig.make(0xC87C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardIsArbitrated", 
    $sig.make(0xC87D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardNotLocal", 
    $sig.make(0xC87E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardReaderCannotPage", 
    $sig.make(0xC87F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardWriteOverflow", 
    $sig.make(0xC880, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEn400BadRequest", 
    $sig.make(0xC881, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEn401Unauthorized", 
    $sig.make(0xC882, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEn500InternalServerError", 
    $sig.make(0xC883, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEn503ServiceUnavailable", 
    $sig.make(0xC884, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnAccountBanned", 
    $sig.make(0xC888, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnAccountSuspended", 
    $sig.make(0xC889, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnCountryNotSupported", 
    $sig.make(0xC88A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnFlashUpdateRequired", 
    $sig.make(0xC886, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnGamertagChangeRequired", 
    $sig.make(0xC88B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnGamertagUpdateRequired", 
    $sig.make(0xC88C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnInvalidUser", 
    $sig.make(0xC892, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnNotSupportedTitle", 
    $sig.make(0xC887, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnServiceNotProvisioned", 
    $sig.make(0xC88F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnTermsOfServiceNotAccepted", 
    $sig.make(0xC895, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnTitleUpdateRequired", 
    $sig.make(0xC885, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnUnexpectedNetworkError", 
    $sig.make(0xC88E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnXBLConnectionUnavailable", 
    $sig.make(0xC88D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LIVEnXBLNotEnabled", 
    $sig.make(0xC898, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LocalDeviceLibrary", 
    $sig.make(0xC89A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MissingNativeDependency", 
    $sig.make(0xC8A1, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MissingVertexShaderInput", 
    $sig.make(0xC8A3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MissingVertexShaderInputDetails", 
    $sig.make(0xC8A6, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MobileNoInstancing", 
    $sig.make(0xC8A7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ModelHasNoEffect", 
    $sig.make(0xC8A8, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ModelHasNoIEffectMatrices", 
    $sig.make(0xC8A9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MoreData", 
    $sig.make(0xC8AB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustBeValidIndex", 
    $sig.make(0xC8AD, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustCallBeginSprite", 
    $sig.make(0xC8AF, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustDrawSomething", 
    $sig.make(0xC8B2, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustResolveRenderTarget", 
    $sig.make(0xC8B7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustRetrieveAtLeastOne", 
    $sig.make(0xC8B9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustUserShaderCode", 
    $sig.make(0xC8BA, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NegativePlaneDistance", 
    $sig.make(0xC8BB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NegativeRadius", 
    $sig.make(0xC8BE, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkError", 
    $sig.make(0xC8C0, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerDisposed", 
    $sig.make(0xC8C1, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerNotLocal", 
    $sig.make(0xC8C3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerRequired", 
    $sig.make(0xC9A9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerWrongSession", 
    $sig.make(0xC8C5, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkNotAvailable", 
    $sig.make(0xC8C9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NetworkSessionPropertiesReadOnly", 
    $sig.make(0xC8CB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoAudioPlaybackDevicesFound", 
    $sig.make(0xC8CE, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoCreatorsClub", 
    $sig.make(0xC8CF, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoDefaultConstructor", 
    $sig.make(0xC8D1, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoDeviceConnected", 
    $sig.make(0xC8D2, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoGraphicsDevice", 
    $sig.make(0xC8D3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoGraphicsDeviceContent", 
    $sig.make(0xC8E0, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoJoinInProgress", 
    $sig.make(0xC8E3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NonZeroInstanceFrequency", 
    $sig.make(0xC8E5, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoProjectGuid", 
    $sig.make(0xC8E6, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoPublicSlots", 
    $sig.make(0xC8E7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotCurrentTechnique", 
    $sig.make(0xC8E8, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughCorners", 
    $sig.make(0xC8E9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughPacketSpace", 
    $sig.make(0xC8EA, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughSourceSize", 
    $sig.make(0xC8EB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughTargetSize", 
    $sig.make(0xC8F0, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotFound", 
    $sig.make(0xC8F3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NotInvited", 
    $sig.make(0xC8F9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoWaveBank", 
    $sig.make(0xC8FA, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NullGraphicsDeviceService", 
    $sig.make(0xC8FB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NullNotAllowed", 
    $sig.make(0xC8FC, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NullWindowHandleNotAllowed", 
    $sig.make(0xC8FD, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NumberVerticesMustBeGreaterZero", 
    $sig.make(0xC8FE, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ObjectDisposedException", 
    $sig.make(0xC8FF, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OffsetNotValid", 
    $sig.make(0xC900, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OnlyOneCacheContainer", 
    $sig.make(0xC901, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OnlySupportedForLIVEn", 
    $sig.make(0xC902, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OnlySupportedForXboxLIVE", 
    $sig.make(0xC903, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OpenResourceNotBinary", 
    $sig.make(0xC905, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OpenResourceNotFound", 
    $sig.make(0xC906, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OpenStreamError", 
    $sig.make(0xC907, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OpenStreamNotFound", 
    $sig.make(0xC908, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OppositePlanes", 
    $sig.make(0xC90A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OutOfMemoryDrawUserPrimitives", 
    $sig.make(0xC90C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OutRangeFieldOfView", 
    $sig.make(0xC910, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PacketArrayTooSmall", 
    $sig.make(0xC911, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PacketQueueFull", 
    $sig.make(0xC912, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PlayerDeviceAlreadyOpened", 
    $sig.make(0xC913, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PlayerFourFolder", 
    $sig.make(0xC914, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PlayerOneFolder", 
    $sig.make(0xC915, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PlayerThreeFolder", 
    $sig.make(0xC916, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PlayerTwoFolder", 
    $sig.make(0xC917, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProFeatureNotSupported", 
    $sig.make(0xC918, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileAspectRatio", 
    $sig.make(0xC91A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataCountRange", 
    $sig.make(0xC91B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataIndexOutOfRange", 
    $sig.make(0xC91C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataOffsetRange", 
    $sig.make(0xC91D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataSizeTooBig", 
    $sig.make(0xC91E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileFeatureNotSupported", 
    $sig.make(0xC91F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileFormatNotSupported", 
    $sig.make(0xC920, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileInvalidBlendFormat", 
    $sig.make(0xC921, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileInvalidDevice", 
    $sig.make(0xC922, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileInvalidFilterFormat", 
    $sig.make(0xC923, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxPrimitiveCount", 
    $sig.make(0xC924, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxRenderTargets", 
    $sig.make(0xC925, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxVertexElements", 
    $sig.make(0xC926, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxVertexStreams", 
    $sig.make(0xC927, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxVertexStride", 
    $sig.make(0xC928, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoIndexElementSize32", 
    $sig.make(0xC929, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoMinMaxSrcDestBlend", 
    $sig.make(0xC92B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoSeparateAlphaBlend", 
    $sig.make(0xC92D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPowerOfTwo", 
    $sig.make(0xC92F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPowerOfTwoDXT", 
    $sig.make(0xC930, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPowerOfTwoMipped", 
    $sig.make(0xC931, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPrivileged", 
    $sig.make(0xC939, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotSignedIn", 
    $sig.make(0xC93C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoWrapNonPow2", 
    $sig.make(0xC93D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfilePixelShaderModel", 
    $sig.make(0xC93F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileTooBig", 
    $sig.make(0xC941, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileVertexShaderModel", 
    $sig.make(0xC943, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProfileVertexTextureFormatNotSupported", 
    $sig.make(0xC946, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProxyAlreadyRunning", 
    $sig.make(0xC94B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProxyCreateFailed", 
    $sig.make(0xC94F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProxyInitializeFailed", 
    $sig.make(0xC952, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProxyMissingDependency", 
    $sig.make(0xC953, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ProxyUpdateFailed", 
    $sig.make(0xC954, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_RankedNoJoinInProgress", 
    $sig.make(0xC955, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ReaderConstructedNewInstance", 
    $sig.make(0xC956, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ReadOnly", 
    $sig.make(0xC957, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ReadOnlySharedResource", 
    $sig.make(0xC958, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ReflectiveReaderTypeNotFound", 
    $sig.make(0xC95B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_RenderTargetsMustMatch", 
    $sig.make(0xC95E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_RequireNonNullAudioEngine", 
    $sig.make(0xC960, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ResourceDataMustBeCorrectSize", 
    $sig.make(0xC962, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ResourceInUse", 
    $sig.make(0xC963, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
    $sig.make(0xC7C9, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ResourcesMustBeGreaterThanZeroSize", 
    $sig.make(0xC964, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ResourceTooLarge", 
    $sig.make(0xC966, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SavedGameFolder", 
    $sig.make(0xC968, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ScissorInvalid", 
    $sig.make(0xC969, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SelectVariation", 
    $sig.make(0xC96A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionAlreadyExists", 
    $sig.make(0xC96B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionEnded", 
    $sig.make(0xC96C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionFindLocal", 
    $sig.make(0xC96D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionFull", 
    $sig.make(0xC96E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionNotFound", 
    $sig.make(0xC96F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionNotHost", 
    $sig.make(0xC970, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SessionNotJoinable", 
    $sig.make(0xC971, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ShaderCodeSizeMustBeDword", 
    $sig.make(0xC972, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ShadersMustBeCompiled", 
    $sig.make(0xC973, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ShowSignInPaneCountInvalid", 
    $sig.make(0xC974, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplacePurchaseCancelString", 
    $sig.make(0xC975, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplacePurchaseOkString", 
    $sig.make(0xC976, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplacePurchaseString", 
    $sig.make(0xC977, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplaceTitleString", 
    $sig.make(0xC978, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SkinnedEffectMaxBones", 
    $sig.make(0xC979, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SkinnedEffectWeightsPerVertex", 
    $sig.make(0xC97A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SongPlaybackFailed", 
    $sig.make(0xC97B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StaleSearchResult", 
    $sig.make(0xC97C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StreamNotSeekable", 
    $sig.make(0xC97D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StreamTooLong", 
    $sig.make(0xC97E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StringCollectionInvalid", 
    $sig.make(0xC97F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StringNullEmptyOrTooLong", 
    $sig.make(0xC980, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StringTooLong", 
    $sig.make(0xC981, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TitleNameNotNull", 
    $sig.make(0xC982, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TooManyOperations", 
    $sig.make(0xC983, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TooManyPendingAsyncOperations", 
    $sig.make(0xC984, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TooManyRegions", 
    $sig.make(0xC985, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TrialMode", 
    $sig.make(0xC986, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TrueSkillNotHost", 
    $sig.make(0xC987, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderDuplicate", 
    $sig.make(0xC988, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderInvalid", 
    $sig.make(0xC989, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderNotFound", 
    $sig.make(0xC98A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderNotRegistered", 
    $sig.make(0xC98B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedError", 
    $sig.make(0xC98C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UnknownError", 
    $sig.make(0xC98D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_WaveBankNotPrepared", 
    $sig.make(0xC99A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexElementBadUsage", 
    $sig.make(0xC98E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexElementOffsetNotMultipleFour", 
    $sig.make(0xC98F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexElementOutsideStride", 
    $sig.make(0xC990, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexElementsOverlap", 
    $sig.make(0xC991, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexStrideTooSmall", 
    $sig.make(0xC992, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeNotIVertexType", 
    $sig.make(0xC993, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeNotValueType", 
    $sig.make(0xC994, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeNullDeclaration", 
    $sig.make(0xC995, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeWrongSize", 
    $sig.make(0xC996, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ViewportInvalid", 
    $sig.make(0xC997, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VisualizationArrayTooSmall", 
    $sig.make(0xC998, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_WmpMediaSource", 
    $sig.make(0xC99B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_VoiceDestructionFailed", 
    $sig.make(0xC999, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_WriteLeaderboardException", 
    $sig.make(0xC99C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_WriteOnlyGetNotSupported", 
    $sig.make(0xC99D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_WrongNumberOfGamers", 
    $sig.make(0xC99E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_WrongTextureFormat", 
    $sig.make(0xC99F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XactReadFile", 
    $sig.make(0xC9A0, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XBLIGFeatureNotSupported", 
    $sig.make(0xC919, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastAchievement", 
    $sig.make(0xC9A1, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastContextValue", 
    $sig.make(0xC9A2, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastGameMode", 
    $sig.make(0xC9A3, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastGamerPicture", 
    $sig.make(0xC9A4, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastLeaderboard", 
    $sig.make(0xC9A5, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastPresenceMode", 
    $sig.make(0xC9A6, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastProperty", 
    $sig.make(0xC9A7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_XlastUnknown", 
    $sig.make(0xC9A8, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
    $sig.make(0xC7CB, null, [$asm06.TypeRef("System.Globalization.CultureInfo")], [])
  );

  $.Field({Static:true , Public:false}, "resourceMan", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Field({Static:true , Public:false}, "resourceCulture", $asm06.TypeRef("System.Globalization.CultureInfo")); 
  $.Property({Static:true , Public:false}, "ResourceManager", $asm06.TypeRef("System.Resources.ResourceManager"))
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"))
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.Property({Static:true , Public:false}, "AllPlayersFolder", $.String);

  $.Property({Static:true , Public:false}, "AloneInTheParty", $.String);

  $.Property({Static:true , Public:false}, "Apply3DBeforePlaying", $.String);

  $.Property({Static:true , Public:false}, "ArrayMultipleFour", $.String);

  $.Property({Static:true , Public:false}, "BackBufferBadSize", $.String);

  $.Property({Static:true , Public:false}, "BadXnb", $.String);

  $.Property({Static:true , Public:false}, "BadXnbGraphicsProfile", $.String);

  $.Property({Static:true , Public:false}, "BadXnbMagic", $.String);

  $.Property({Static:true , Public:false}, "BadXnbPlatform", $.String);

  $.Property({Static:true , Public:false}, "BadXnbSize", $.String);

  $.Property({Static:true , Public:false}, "BadXnbTypeVersion", $.String);

  $.Property({Static:true , Public:false}, "BadXnbVersion", $.String);

  $.Property({Static:true , Public:false}, "BadXnbWrongType", $.String);

  $.Property({Static:true , Public:false}, "BeginMustBeCalledBeforeDraw", $.String);

  $.Property({Static:true , Public:false}, "BeginMustBeCalledBeforeEnd", $.String);

  $.Property({Static:true , Public:false}, "BindPoseNotAvailable", $.String);

  $.Property({Static:true , Public:false}, "BlobStreamIsNotExpandable", $.String);

  $.Property({Static:true , Public:false}, "BoundingBoxZeroPoints", $.String);

  $.Property({Static:true , Public:false}, "BoundingSphereZeroPoints", $.String);

  $.Property({Static:true , Public:false}, "BoundStateObject", $.String);

  $.Property({Static:true , Public:false}, "BuiltInEffectWrongTextureType", $.String);

  $.Property({Static:true , Public:false}, "CallFrameworkDispatcherUpdate", $.String);

  $.Property({Static:true , Public:false}, "CannotCallSpriteBeginTwice", $.String);

  $.Property({Static:true , Public:false}, "CannotClearNullDepth", $.String);

  $.Property({Static:true , Public:false}, "CannotDrawNoData", $.String);

  $.Property({Static:true , Public:false}, "CannotDrawNoShader", $.String);

  $.Property({Static:true , Public:false}, "CannotEndTwice", $.String);

  $.Property({Static:true , Public:false}, "CannotGetBackBufferActiveRenderTargets", $.String);

  $.Property({Static:true , Public:false}, "CannotMixShader2and3", $.String);

  $.Property({Static:true , Public:false}, "CannotNextSpriteBeginImmediate", $.String);

  $.Property({Static:true , Public:false}, "CannotPresentActiveRenderTargets", $.String);

  $.Property({Static:true , Public:false}, "CannotSetAlreadyUsedRenderTarget", $.String);

  $.Property({Static:true , Public:false}, "CannotUseFormatTypeAsManualWhenLocking", $.String);

  $.Property({Static:true , Public:false}, "CantDisableLighting", $.String);

  $.Property({Static:true , Public:false}, "CantRemoveLocalMachine", $.String);

  $.Property({Static:true , Public:false}, "CantSerializeMember", $.String);

  $.Property({Static:true , Public:false}, "CantSerializeReadOnlyNull", $.String);

  $.Property({Static:true , Public:false}, "CharacterNotInFont", $.String);

  $.Property({Static:true , Public:false}, "ContentManagerCannotChangeRootDirectory", $.String);

  $.Property({Static:true , Public:false}, "CouldNotCreateResource", $.String);

  $.Property({Static:true , Public:false}, "CouldNotDeleteContainerAlreadyInUse", $.String);

  $.Property({Static:true , Public:false}, "CouldNotReadKeyboard", $.String);

  $.Property({Static:true , Public:false}, "CueNotFound", $.String);

  $.Property({Static:true , Public:false}, "DataNotAvailable", $.String);

  $.Property({Static:true , Public:false}, "DecompressionError", $.String);

  $.Property({Static:true , Public:false}, "DeviceCannotBeNullOnResourceCreate", $.String);

  $.Property({Static:true , Public:false}, "DriverError", $.String);

  $.Property({Static:true , Public:false}, "DuplicateVertexElement", $.String);

  $.Property({Static:true , Public:false}, "DxtNotMultipleOfFour", $.String);

  $.Property({Static:true , Public:false}, "DynamicSoundEffectInstancePacketLimit", $.String);

  $.Property({Static:true , Public:false}, "DynamicSoundEffectInvalidBuffer", $.String);

  $.Property({Static:true , Public:false}, "DynamicSoundEffectInvalidLoopRegion", $.String);

  $.Property({Static:true , Public:false}, "DynamicSoundEffectInvalidOffset", $.String);

  $.Property({Static:true , Public:false}, "DynamicSoundEffectInvalidPlayLength", $.String);

  $.Property({Static:true , Public:false}, "EmptySongCollectionsCannotBePlayed", $.String);

  $.Property({Static:true , Public:false}, "EndMustBeCalledBeforeBegin", $.String);

  $.Property({Static:true , Public:false}, "Expired", $.String);

  $.Property({Static:true , Public:false}, "GamerAlreadyInSession", $.String);

  $.Property({Static:true , Public:false}, "GamerInvalid", $.String);

  $.Property({Static:true , Public:false}, "GamerNull", $.String);

  $.Property({Static:true , Public:false}, "GamerServicesAlreadyInitialized", $.String);

  $.Property({Static:true , Public:false}, "GamerServicesCancelButton", $.String);

  $.Property({Static:true , Public:false}, "GamerServicesGuideAlreadyVisible", $.String);

  $.Property({Static:true , Public:false}, "GamerServicesInitializeFromNonUIThread", $.String);

  $.Property({Static:true , Public:false}, "GamerServicesNotInitialized", $.String);

  $.Property({Static:true , Public:false}, "GamerServicesOkButton", $.String);

  $.Property({Static:true , Public:false}, "GesturesNotAvailable", $.String);

  $.Property({Static:true , Public:false}, "GesturesNotEnabled", $.String);

  $.Property({Static:true , Public:false}, "GuideIsShowing", $.String);

  $.Property({Static:true , Public:false}, "IAsyncNotFromBegin", $.String);

  $.Property({Static:true , Public:false}, "InCallback", $.String);

  $.Property({Static:true , Public:false}, "IndexBuffersMustBeSizedCorrectly", $.String);

  $.Property({Static:true , Public:false}, "InstallingTitleUpdate", $.String);

  $.Property({Static:true , Public:false}, "InstancePlayFailedDueToLimit", $.String);

  $.Property({Static:true , Public:false}, "InvalidAccelerometer", $.String);

  $.Property({Static:true , Public:false}, "InvalidApply3DCall", $.String);

  $.Property({Static:true , Public:false}, "InvalidBufferSize", $.String);

  $.Property({Static:true , Public:false}, "InvalidBytesPerCluster", $.String);

  $.Property({Static:true , Public:false}, "InvalidCacheContainerOpenAsyncResult", $.String);

  $.Property({Static:true , Public:false}, "InvalidCall", $.String);

  $.Property({Static:true , Public:false}, "InvalidCategory", $.String);

  $.Property({Static:true , Public:false}, "InvalidContentVersion", $.String);

  $.Property({Static:true , Public:false}, "InvalidController", $.String);

  $.Property({Static:true , Public:false}, "InvalidCue", $.String);

  $.Property({Static:true , Public:false}, "InvalidDataSize", $.String);

  $.Property({Static:true , Public:false}, "InvalidDevice", $.String);

  $.Property({Static:true , Public:false}, "InvalidDisplayOrientation", $.String);

  $.Property({Static:true , Public:false}, "InvalidEmitterDopplerScale", $.String);

  $.Property({Static:true , Public:false}, "InvalidEntryCount", $.String);

  $.Property({Static:true , Public:false}, "InvalidFileCacheSize", $.String);

  $.Property({Static:true , Public:false}, "InvalidInstanceStreams", $.String);

  $.Property({Static:true , Public:false}, "InvalidMicrophoneBufferDuration", $.String);

  $.Property({Static:true , Public:false}, "InvalidNativeHandle", $.String);

  $.Property({Static:true , Public:false}, "InvalidRectangle", $.String);

  $.Property({Static:true , Public:false}, "InvalidServiceProvider", $.String);

  $.Property({Static:true , Public:false}, "InvalidSessionState", $.String);

  $.Property({Static:true , Public:false}, "InvalidSoundOffsetOrIndex", $.String);

  $.Property({Static:true , Public:false}, "InvalidStoragePath", $.String);

  $.Property({Static:true , Public:false}, "InvalidStringFormat", $.String);

  $.Property({Static:true , Public:false}, "InvalidTitleContainerName", $.String);

  $.Property({Static:true , Public:false}, "InvalidTotalSize", $.String);

  $.Property({Static:true , Public:false}, "InvalidTouchPanel", $.String);

  $.Property({Static:true , Public:false}, "InvalidTrackIndex", $.String);

  $.Property({Static:true , Public:false}, "InvalidUsage", $.String);

  $.Property({Static:true , Public:false}, "InvalidVariableIndex", $.String);

  $.Property({Static:true , Public:false}, "InvalidWaveIndex", $.String);

  $.Property({Static:true , Public:false}, "InvalidWaveStream", $.String);

  $.Property({Static:true , Public:false}, "InvalidXactVolume", $.String);

  $.Property({Static:true , Public:false}, "InviteeNotSignedIn", $.String);

  $.Property({Static:true , Public:false}, "IsCompleteMustBeCalled", $.String);

  $.Property({Static:true , Public:false}, "LeaderboardColumnNotFound", $.String);

  $.Property({Static:true , Public:false}, "LeaderboardColumnOverflow", $.String);

  $.Property({Static:true , Public:false}, "LeaderboardIsArbitrated", $.String);

  $.Property({Static:true , Public:false}, "LeaderboardNotLocal", $.String);

  $.Property({Static:true , Public:false}, "LeaderboardReaderCannotPage", $.String);

  $.Property({Static:true , Public:false}, "LeaderboardWriteOverflow", $.String);

  $.Property({Static:true , Public:false}, "LIVEn400BadRequest", $.String);

  $.Property({Static:true , Public:false}, "LIVEn401Unauthorized", $.String);

  $.Property({Static:true , Public:false}, "LIVEn500InternalServerError", $.String);

  $.Property({Static:true , Public:false}, "LIVEn503ServiceUnavailable", $.String);

  $.Property({Static:true , Public:false}, "LIVEnTitleUpdateRequired", $.String);

  $.Property({Static:true , Public:false}, "LIVEnFlashUpdateRequired", $.String);

  $.Property({Static:true , Public:false}, "LIVEnNotSupportedTitle", $.String);

  $.Property({Static:true , Public:false}, "LIVEnAccountBanned", $.String);

  $.Property({Static:true , Public:false}, "LIVEnAccountSuspended", $.String);

  $.Property({Static:true , Public:false}, "LIVEnCountryNotSupported", $.String);

  $.Property({Static:true , Public:false}, "LIVEnGamertagChangeRequired", $.String);

  $.Property({Static:true , Public:false}, "LIVEnGamertagUpdateRequired", $.String);

  $.Property({Static:true , Public:false}, "LIVEnXBLConnectionUnavailable", $.String);

  $.Property({Static:true , Public:false}, "LIVEnUnexpectedNetworkError", $.String);

  $.Property({Static:true , Public:false}, "LIVEnServiceNotProvisioned", $.String);

  $.Property({Static:true , Public:false}, "LIVEnInvalidUser", $.String);

  $.Property({Static:true , Public:false}, "LIVEnTermsOfServiceNotAccepted", $.String);

  $.Property({Static:true , Public:false}, "LIVEnXBLNotEnabled", $.String);

  $.Property({Static:true , Public:false}, "LocalDeviceLibrary", $.String);

  $.Property({Static:true , Public:false}, "MissingNativeDependency", $.String);

  $.Property({Static:true , Public:false}, "MissingVertexShaderInput", $.String);

  $.Property({Static:true , Public:false}, "MissingVertexShaderInputDetails", $.String);

  $.Property({Static:true , Public:false}, "MobileNoInstancing", $.String);

  $.Property({Static:true , Public:false}, "ModelHasNoEffect", $.String);

  $.Property({Static:true , Public:false}, "ModelHasNoIEffectMatrices", $.String);

  $.Property({Static:true , Public:false}, "MoreData", $.String);

  $.Property({Static:true , Public:false}, "MustBeValidIndex", $.String);

  $.Property({Static:true , Public:false}, "MustCallBeginSprite", $.String);

  $.Property({Static:true , Public:false}, "MustDrawSomething", $.String);

  $.Property({Static:true , Public:false}, "MustResolveRenderTarget", $.String);

  $.Property({Static:true , Public:false}, "MustRetrieveAtLeastOne", $.String);

  $.Property({Static:true , Public:false}, "MustUserShaderCode", $.String);

  $.Property({Static:true , Public:false}, "NegativePlaneDistance", $.String);

  $.Property({Static:true , Public:false}, "NegativeRadius", $.String);

  $.Property({Static:true , Public:false}, "NetworkError", $.String);

  $.Property({Static:true , Public:false}, "NetworkGamerDisposed", $.String);

  $.Property({Static:true , Public:false}, "NetworkGamerNotLocal", $.String);

  $.Property({Static:true , Public:false}, "NetworkGamerWrongSession", $.String);

  $.Property({Static:true , Public:false}, "NetworkNotAvailable", $.String);

  $.Property({Static:true , Public:false}, "NetworkSessionPropertiesReadOnly", $.String);

  $.Property({Static:true , Public:false}, "NoAudioPlaybackDevicesFound", $.String);

  $.Property({Static:true , Public:false}, "NoCreatorsClub", $.String);

  $.Property({Static:true , Public:false}, "NoDefaultConstructor", $.String);

  $.Property({Static:true , Public:false}, "NoDeviceConnected", $.String);

  $.Property({Static:true , Public:false}, "NoGraphicsDevice", $.String);

  $.Property({Static:true , Public:false}, "NoGraphicsDeviceContent", $.String);

  $.Property({Static:true , Public:false}, "NoJoinInProgress", $.String);

  $.Property({Static:true , Public:false}, "NonZeroInstanceFrequency", $.String);

  $.Property({Static:true , Public:false}, "NoProjectGuid", $.String);

  $.Property({Static:true , Public:false}, "NoPublicSlots", $.String);

  $.Property({Static:true , Public:false}, "NotCurrentTechnique", $.String);

  $.Property({Static:true , Public:false}, "NotEnoughCorners", $.String);

  $.Property({Static:true , Public:false}, "NotEnoughPacketSpace", $.String);

  $.Property({Static:true , Public:false}, "NotEnoughSourceSize", $.String);

  $.Property({Static:true , Public:false}, "NotEnoughTargetSize", $.String);

  $.Property({Static:true , Public:false}, "NotFound", $.String);

  $.Property({Static:true , Public:false}, "NotInvited", $.String);

  $.Property({Static:true , Public:false}, "NoWaveBank", $.String);

  $.Property({Static:true , Public:false}, "NullGraphicsDeviceService", $.String);

  $.Property({Static:true , Public:false}, "NullNotAllowed", $.String);

  $.Property({Static:true , Public:false}, "NullWindowHandleNotAllowed", $.String);

  $.Property({Static:true , Public:false}, "NumberVerticesMustBeGreaterZero", $.String);

  $.Property({Static:true , Public:false}, "ObjectDisposedException", $.String);

  $.Property({Static:true , Public:false}, "OffsetNotValid", $.String);

  $.Property({Static:true , Public:false}, "OnlyOneCacheContainer", $.String);

  $.Property({Static:true , Public:false}, "OnlySupportedForLIVEn", $.String);

  $.Property({Static:true , Public:false}, "OnlySupportedForXboxLIVE", $.String);

  $.Property({Static:true , Public:false}, "OpenResourceNotBinary", $.String);

  $.Property({Static:true , Public:false}, "OpenResourceNotFound", $.String);

  $.Property({Static:true , Public:false}, "OpenStreamError", $.String);

  $.Property({Static:true , Public:false}, "OpenStreamNotFound", $.String);

  $.Property({Static:true , Public:false}, "OppositePlanes", $.String);

  $.Property({Static:true , Public:false}, "OutOfMemoryDrawUserPrimitives", $.String);

  $.Property({Static:true , Public:false}, "OutRangeFieldOfView", $.String);

  $.Property({Static:true , Public:false}, "PacketArrayTooSmall", $.String);

  $.Property({Static:true , Public:false}, "PacketQueueFull", $.String);

  $.Property({Static:true , Public:false}, "PlayerDeviceAlreadyOpened", $.String);

  $.Property({Static:true , Public:false}, "PlayerFourFolder", $.String);

  $.Property({Static:true , Public:false}, "PlayerOneFolder", $.String);

  $.Property({Static:true , Public:false}, "PlayerThreeFolder", $.String);

  $.Property({Static:true , Public:false}, "PlayerTwoFolder", $.String);

  $.Property({Static:true , Public:false}, "ProFeatureNotSupported", $.String);

  $.Property({Static:true , Public:false}, "XBLIGFeatureNotSupported", $.String);

  $.Property({Static:true , Public:false}, "ProfileAspectRatio", $.String);

  $.Property({Static:true , Public:false}, "ProfileDataCountRange", $.String);

  $.Property({Static:true , Public:false}, "ProfileDataIndexOutOfRange", $.String);

  $.Property({Static:true , Public:false}, "ProfileDataOffsetRange", $.String);

  $.Property({Static:true , Public:false}, "ProfileDataSizeTooBig", $.String);

  $.Property({Static:true , Public:false}, "ProfileFeatureNotSupported", $.String);

  $.Property({Static:true , Public:false}, "ProfileFormatNotSupported", $.String);

  $.Property({Static:true , Public:false}, "ProfileInvalidBlendFormat", $.String);

  $.Property({Static:true , Public:false}, "ProfileInvalidDevice", $.String);

  $.Property({Static:true , Public:false}, "ProfileInvalidFilterFormat", $.String);

  $.Property({Static:true , Public:false}, "ProfileMaxPrimitiveCount", $.String);

  $.Property({Static:true , Public:false}, "ProfileMaxRenderTargets", $.String);

  $.Property({Static:true , Public:false}, "ProfileMaxVertexElements", $.String);

  $.Property({Static:true , Public:false}, "ProfileMaxVertexStreams", $.String);

  $.Property({Static:true , Public:false}, "ProfileMaxVertexStride", $.String);

  $.Property({Static:true , Public:false}, "ProfileNoIndexElementSize32", $.String);

  $.Property({Static:true , Public:false}, "ProfileNoMinMaxSrcDestBlend", $.String);

  $.Property({Static:true , Public:false}, "ProfileNoSeparateAlphaBlend", $.String);

  $.Property({Static:true , Public:false}, "ProfileNotPowerOfTwo", $.String);

  $.Property({Static:true , Public:false}, "ProfileNotPowerOfTwoDXT", $.String);

  $.Property({Static:true , Public:false}, "ProfileNotPowerOfTwoMipped", $.String);

  $.Property({Static:true , Public:false}, "ProfileNotPrivileged", $.String);

  $.Property({Static:true , Public:false}, "ProfileNotSignedIn", $.String);

  $.Property({Static:true , Public:false}, "ProfileNoWrapNonPow2", $.String);

  $.Property({Static:true , Public:false}, "ProfilePixelShaderModel", $.String);

  $.Property({Static:true , Public:false}, "ProfileTooBig", $.String);

  $.Property({Static:true , Public:false}, "ProfileVertexShaderModel", $.String);

  $.Property({Static:true , Public:false}, "ProfileVertexTextureFormatNotSupported", $.String);

  $.Property({Static:true , Public:false}, "ProxyAlreadyRunning", $.String);

  $.Property({Static:true , Public:false}, "ProxyCreateFailed", $.String);

  $.Property({Static:true , Public:false}, "ProxyInitializeFailed", $.String);

  $.Property({Static:true , Public:false}, "ProxyMissingDependency", $.String);

  $.Property({Static:true , Public:false}, "ProxyUpdateFailed", $.String);

  $.Property({Static:true , Public:false}, "RankedNoJoinInProgress", $.String);

  $.Property({Static:true , Public:false}, "ReaderConstructedNewInstance", $.String);

  $.Property({Static:true , Public:false}, "ReadOnly", $.String);

  $.Property({Static:true , Public:false}, "ReadOnlySharedResource", $.String);

  $.Property({Static:true , Public:false}, "ReflectiveReaderTypeNotFound", $.String);

  $.Property({Static:true , Public:false}, "RenderTargetsMustMatch", $.String);

  $.Property({Static:true , Public:false}, "RequireNonNullAudioEngine", $.String);

  $.Property({Static:true , Public:false}, "ResourceDataMustBeCorrectSize", $.String);

  $.Property({Static:true , Public:false}, "ResourceInUse", $.String);

  $.Property({Static:true , Public:false}, "ResourcesMustBeGreaterThanZeroSize", $.String);

  $.Property({Static:true , Public:false}, "ResourceTooLarge", $.String);

  $.Property({Static:true , Public:false}, "SavedGameFolder", $.String);

  $.Property({Static:true , Public:false}, "ScissorInvalid", $.String);

  $.Property({Static:true , Public:false}, "SelectVariation", $.String);

  $.Property({Static:true , Public:false}, "SessionAlreadyExists", $.String);

  $.Property({Static:true , Public:false}, "SessionEnded", $.String);

  $.Property({Static:true , Public:false}, "SessionFindLocal", $.String);

  $.Property({Static:true , Public:false}, "SessionFull", $.String);

  $.Property({Static:true , Public:false}, "SessionNotFound", $.String);

  $.Property({Static:true , Public:false}, "SessionNotHost", $.String);

  $.Property({Static:true , Public:false}, "SessionNotJoinable", $.String);

  $.Property({Static:true , Public:false}, "ShaderCodeSizeMustBeDword", $.String);

  $.Property({Static:true , Public:false}, "ShadersMustBeCompiled", $.String);

  $.Property({Static:true , Public:false}, "ShowSignInPaneCountInvalid", $.String);

  $.Property({Static:true , Public:false}, "SimulateMarketplacePurchaseCancelString", $.String);

  $.Property({Static:true , Public:false}, "SimulateMarketplacePurchaseOkString", $.String);

  $.Property({Static:true , Public:false}, "SimulateMarketplacePurchaseString", $.String);

  $.Property({Static:true , Public:false}, "SimulateMarketplaceTitleString", $.String);

  $.Property({Static:true , Public:false}, "SkinnedEffectMaxBones", $.String);

  $.Property({Static:true , Public:false}, "SkinnedEffectWeightsPerVertex", $.String);

  $.Property({Static:true , Public:false}, "SongPlaybackFailed", $.String);

  $.Property({Static:true , Public:false}, "StaleSearchResult", $.String);

  $.Property({Static:true , Public:false}, "StreamNotSeekable", $.String);

  $.Property({Static:true , Public:false}, "StreamTooLong", $.String);

  $.Property({Static:true , Public:false}, "StringCollectionInvalid", $.String);

  $.Property({Static:true , Public:false}, "StringNullEmptyOrTooLong", $.String);

  $.Property({Static:true , Public:false}, "StringTooLong", $.String);

  $.Property({Static:true , Public:false}, "TitleNameNotNull", $.String);

  $.Property({Static:true , Public:false}, "TooManyOperations", $.String);

  $.Property({Static:true , Public:false}, "TooManyPendingAsyncOperations", $.String);

  $.Property({Static:true , Public:false}, "TooManyRegions", $.String);

  $.Property({Static:true , Public:false}, "TrialMode", $.String);

  $.Property({Static:true , Public:false}, "TrueSkillNotHost", $.String);

  $.Property({Static:true , Public:false}, "TypeReaderDuplicate", $.String);

  $.Property({Static:true , Public:false}, "TypeReaderInvalid", $.String);

  $.Property({Static:true , Public:false}, "TypeReaderNotFound", $.String);

  $.Property({Static:true , Public:false}, "TypeReaderNotRegistered", $.String);

  $.Property({Static:true , Public:false}, "UnexpectedError", $.String);

  $.Property({Static:true , Public:false}, "UnknownError", $.String);

  $.Property({Static:true , Public:false}, "VertexElementBadUsage", $.String);

  $.Property({Static:true , Public:false}, "VertexElementOffsetNotMultipleFour", $.String);

  $.Property({Static:true , Public:false}, "VertexElementOutsideStride", $.String);

  $.Property({Static:true , Public:false}, "VertexElementsOverlap", $.String);

  $.Property({Static:true , Public:false}, "VertexStrideTooSmall", $.String);

  $.Property({Static:true , Public:false}, "VertexTypeNotIVertexType", $.String);

  $.Property({Static:true , Public:false}, "VertexTypeNotValueType", $.String);

  $.Property({Static:true , Public:false}, "VertexTypeNullDeclaration", $.String);

  $.Property({Static:true , Public:false}, "VertexTypeWrongSize", $.String);

  $.Property({Static:true , Public:false}, "ViewportInvalid", $.String);

  $.Property({Static:true , Public:false}, "VisualizationArrayTooSmall", $.String);

  $.Property({Static:true , Public:false}, "VoiceDestructionFailed", $.String);

  $.Property({Static:true , Public:false}, "WaveBankNotPrepared", $.String);

  $.Property({Static:true , Public:false}, "WmpMediaSource", $.String);

  $.Property({Static:true , Public:false}, "WriteLeaderboardException", $.String);

  $.Property({Static:true , Public:false}, "WriteOnlyGetNotSupported", $.String);

  $.Property({Static:true , Public:false}, "WrongNumberOfGamers", $.String);

  $.Property({Static:true , Public:false}, "WrongTextureFormat", $.String);

  $.Property({Static:true , Public:false}, "XactReadFile", $.String);

  $.Property({Static:true , Public:false}, "XlastAchievement", $.String);

  $.Property({Static:true , Public:false}, "XlastContextValue", $.String);

  $.Property({Static:true , Public:false}, "XlastGameMode", $.String);

  $.Property({Static:true , Public:false}, "XlastGamerPicture", $.String);

  $.Property({Static:true , Public:false}, "XlastLeaderboard", $.String);

  $.Property({Static:true , Public:false}, "XlastPresenceMode", $.String);

  $.Property({Static:true , Public:false}, "XlastProperty", $.String);

  $.Property({Static:true , Public:false}, "XlastUnknown", $.String);

  $.Property({Static:true , Public:false}, "NetworkGamerRequired", $.String);

})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
  .Attribute($asm07.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"));

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.PlayerIndex", true, {
    One: 0, 
    Two: 1, 
    Three: 2, 
    Four: 3
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.ButtonValues", false, {
    Up: 1, 
    Down: 2, 
    Left: 4, 
    Right: 8, 
    Start: 16, 
    Back: 32, 
    LeftThumb: 64, 
    RightThumb: 128, 
    LeftShoulder: 256, 
    RightShoulder: 512, 
    BigButton: 2048, 
    A: 4096, 
    B: 8192, 
    X: 16384, 
    Y: 32768
  }, true
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.Buttons", true, {
    DPadUp: 1, 
    DPadDown: 2, 
    DPadLeft: 4, 
    DPadRight: 8, 
    Start: 16, 
    Back: 32, 
    LeftStick: 64, 
    RightStick: 128, 
    LeftShoulder: 256, 
    RightShoulder: 512, 
    BigButton: 2048, 
    A: 4096, 
    B: 8192, 
    X: 16384, 
    Y: 32768, 
    LeftThumbstickLeft: 2097152, 
    RightTrigger: 4194304, 
    LeftTrigger: 8388608, 
    RightThumbstickUp: 16777216, 
    RightThumbstickDown: 33554432, 
    RightThumbstickRight: 67108864, 
    RightThumbstickLeft: 134217728, 
    LeftThumbstickUp: 268435456, 
    LeftThumbstickDown: 536870912, 
    LeftThumbstickRight: 1073741824
  }, true
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.ButtonState", true, {
    Released: 0, 
    Pressed: 1
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.GamePadType", true, {
    Unknown: 0, 
    GamePad: 1, 
    Wheel: 2, 
    ArcadeStick: 3, 
    FlightStick: 4, 
    DancePad: 5, 
    Guitar: 6, 
    AlternateGuitar: 7, 
    DrumKit: 8, 
    BigButtonPad: 768
  }, false
);

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.GamePad", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "GetCapabilities", 
    $sig.make(0xCF0A, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadCapabilities"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetState", 
    $sig.make(0xCF06, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetState", 
    $sig.make(0xCF08, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ResetThrottleState", 
    $sig.make(0xCF0F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetVibration", 
    $sig.make(0xCF0B, $.Boolean, [
        $asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ThrottleDisconnectedRetries", 
    $sig.make(0xCF0D, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
  );

  $.Constant({Static:true , Public:false}, "XinputNativeDll", "xinput1_3.dll"); 
  $.Field({Static:true , Public:false}, "_disconnected", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
      return JSIL.Array.New($asm06.System.Boolean, 4);
    }); 
  $.Field({Static:true , Public:false}, "_lastReadTime", $jsilcore.TypeRef("System.Array", [$.Int64]), function ($pi) {
      return JSIL.Array.New($asm06.System.Int64, 4);
    }); 
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.GamePadDeadZone", true, {
    None: 0, 
    IndependentAxes: 1, 
    Circular: 2
  }, false
);

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "ApplyLeftStickDeadZone", 
    $sig.make(0xD62A, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ApplyLinearDeadZone", 
    $sig.make(0xD632, $.Single, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ApplyRightStickDeadZone", 
    $sig.make(0xD62C, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ApplyStickDeadZone", 
    $sig.make(0xD62F, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
        $.Int32, $.Int32, 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ApplyTriggerDeadZone", 
    $sig.make(0xD631, $.Single, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")], [])
  );

  $.Constant({Static:true , Public:false}, "LeftStickDeadZoneSize", 7849); 
  $.Constant({Static:true , Public:false}, "RightStickDeadZoneSize", 8689); 
  $.Constant({Static:true , Public:false}, "TriggerDeadZoneSize", 30); 
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.Keys", true, {
    None: 0, 
    Back: 8, 
    Tab: 9, 
    Enter: 13, 
    Pause: 19, 
    CapsLock: 20, 
    Kana: 21, 
    Kanji: 25, 
    Escape: 27, 
    ImeConvert: 28, 
    ImeNoConvert: 29, 
    Space: 32, 
    PageUp: 33, 
    PageDown: 34, 
    End: 35, 
    Home: 36, 
    Left: 37, 
    Up: 38, 
    Right: 39, 
    Down: 40, 
    Select: 41, 
    Print: 42, 
    Execute: 43, 
    PrintScreen: 44, 
    Insert: 45, 
    Delete: 46, 
    Help: 47, 
    D0: 48, 
    D1: 49, 
    D2: 50, 
    D3: 51, 
    D4: 52, 
    D5: 53, 
    D6: 54, 
    D7: 55, 
    D8: 56, 
    D9: 57, 
    A: 65, 
    B: 66, 
    C: 67, 
    D: 68, 
    E: 69, 
    F: 70, 
    G: 71, 
    H: 72, 
    I: 73, 
    J: 74, 
    K: 75, 
    L: 76, 
    M: 77, 
    N: 78, 
    O: 79, 
    P: 80, 
    Q: 81, 
    R: 82, 
    S: 83, 
    T: 84, 
    U: 85, 
    V: 86, 
    W: 87, 
    X: 88, 
    Y: 89, 
    Z: 90, 
    LeftWindows: 91, 
    RightWindows: 92, 
    Apps: 93, 
    Sleep: 95, 
    NumPad0: 96, 
    NumPad1: 97, 
    NumPad2: 98, 
    NumPad3: 99, 
    NumPad4: 100, 
    NumPad5: 101, 
    NumPad6: 102, 
    NumPad7: 103, 
    NumPad8: 104, 
    NumPad9: 105, 
    Multiply: 106, 
    Add: 107, 
    Separator: 108, 
    Subtract: 109, 
    Decimal: 110, 
    Divide: 111, 
    F1: 112, 
    F2: 113, 
    F3: 114, 
    F4: 115, 
    F5: 116, 
    F6: 117, 
    F7: 118, 
    F8: 119, 
    F9: 120, 
    F10: 121, 
    F11: 122, 
    F12: 123, 
    F13: 124, 
    F14: 125, 
    F15: 126, 
    F16: 127, 
    F17: 128, 
    F18: 129, 
    F19: 130, 
    F20: 131, 
    F21: 132, 
    F22: 133, 
    F23: 134, 
    F24: 135, 
    NumLock: 144, 
    Scroll: 145, 
    LeftShift: 160, 
    RightShift: 161, 
    LeftControl: 162, 
    RightControl: 163, 
    LeftAlt: 164, 
    RightAlt: 165, 
    BrowserBack: 166, 
    BrowserForward: 167, 
    BrowserRefresh: 168, 
    BrowserStop: 169, 
    BrowserSearch: 170, 
    BrowserFavorites: 171, 
    BrowserHome: 172, 
    VolumeMute: 173, 
    VolumeDown: 174, 
    VolumeUp: 175, 
    MediaNextTrack: 176, 
    MediaPreviousTrack: 177, 
    MediaStop: 178, 
    MediaPlayPause: 179, 
    LaunchMail: 180, 
    SelectMedia: 181, 
    LaunchApplication1: 182, 
    LaunchApplication2: 183, 
    OemSemicolon: 186, 
    OemPlus: 187, 
    OemComma: 188, 
    OemMinus: 189, 
    OemPeriod: 190, 
    OemQuestion: 191, 
    OemTilde: 192, 
    ChatPadGreen: 202, 
    ChatPadOrange: 203, 
    OemOpenBrackets: 219, 
    OemPipe: 220, 
    OemCloseBrackets: 221, 
    OemQuotes: 222, 
    Oem8: 223, 
    OemBackslash: 226, 
    ProcessKey: 229, 
    OemCopy: 242, 
    OemAuto: 243, 
    OemEnlW: 244, 
    Attn: 246, 
    Crsel: 247, 
    Exsel: 248, 
    EraseEof: 249, 
    Play: 250, 
    Zoom: 251, 
    Pa1: 253, 
    OemClear: 254
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.KeyState", true, {
    Up: 0, 
    Down: 1
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.KeyboardState", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x471, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddPressedKey", 
    $sig.make(0x472, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckPressedKeys", 
    $sig.make(0x478, null, [
        $.UInt32, $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x47A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x46E, $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyState"), [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x479, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPressedKeys", 
    $sig.make(0x476, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsKeyDown", 
    $sig.make(0x474, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsKeyUp", 
    $sig.make(0x475, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x47C, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x47D, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemovePressedKey", 
    $sig.make(0x473, null, [$.Int32], [])
  );

  $.Field({Static:true , Public:false}, "stateMask0", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask1", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask2", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask3", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask4", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask5", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask6", $.UInt32, -1); 
  $.Field({Static:true , Public:false}, "stateMask7", $.UInt32, -1); 
  $.Field({Static:false, Public:false}, "currentState0", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState1", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState2", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState3", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState4", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState5", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState6", $.UInt32); 
  $.Field({Static:false, Public:false}, "currentState7", $.UInt32); 
  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyState"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.MouseState", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCAF9, null, [
        $.Int32, $.Int32, 
        $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xCAFF, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LeftButton", 
    $sig.make(0xCAD0, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MiddleButton", 
    $sig.make(0xCADF, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RightButton", 
    $sig.make(0xCAD5, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ScrollWheelValue", 
    $sig.make(0xCAF1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0xCAC7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XButton1", 
    $sig.make(0xCAEA, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_XButton2", 
    $sig.make(0xCAED, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0xCACE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xCAFB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xCB01, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xCB03, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCAFD, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "x", $.Int32); 
  $.Field({Static:false, Public:false}, "y", $.Int32); 
  $.Field({Static:false, Public:false}, "leftButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "rightButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "middleButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "xb1", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "xb2", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "wheel", $.Int32); 
  $.Property({Static:false, Public:true }, "X", $.Int32);

  $.Property({Static:false, Public:true }, "Y", $.Int32);

  $.Property({Static:false, Public:true }, "LeftButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "RightButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "MiddleButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "XButton1", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "XButton2", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "ScrollWheelValue", $.Int32);

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.SafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "CallWindowProc", 
    $sig.make(0xD64E, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
        $.UInt32, $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GetFunctionPointerForDelegate", 
    $sig.make(0xD651, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Delegate")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GetWindowLongPtr", 
    $sig.make(0xD64C, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "RegisterWindowMessage", 
    $sig.make(0xD650, $.UInt32, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SendMessage", 
    $sig.make(0xD64F, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.IntPtr"), $.UInt32, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SetWindowLongPtr", 
    $sig.make(0xD64D, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.Constant({Static:true , Public:true }, "GWLP_WNDPROC", -4); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.GamePadButtons", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD10C, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD10D, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_A", 
    $sig.make(0xD101, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_B", 
    $sig.make(0xD102, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Back", 
    $sig.make(0xD103, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BigButton", 
    $sig.make(0xD10B, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LeftShoulder", 
    $sig.make(0xD107, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LeftStick", 
    $sig.make(0xD108, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RightShoulder", 
    $sig.make(0xD109, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RightStick", 
    $sig.make(0xD10A, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Start", 
    $sig.make(0xD106, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0xD104, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0xD105, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD10E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD110, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD112, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD10F, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_a", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_b", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_x", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_y", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_leftStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_rightStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_leftShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_rightShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_back", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_start", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_bigButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Property({Static:false, Public:true }, "A", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "B", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "Back", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "X", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "Y", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "Start", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "LeftShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "LeftStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "RightShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "RightStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "BigButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.GamePadDPad", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD41C, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD41D, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Down", 
    $sig.make(0xD419, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0xD41B, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0xD41A, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Up", 
    $sig.make(0xD418, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD41E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD420, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD421, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD41F, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_up", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_right", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_down", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Field({Static:false, Public:false}, "_left", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
  $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "Down", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

  $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.GamePadThumbSticks", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD224, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD225, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0xD222, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0xD223, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD226, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD228, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD229, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD227, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_left", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "_right", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

  $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.GamePadTriggers", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD148, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD14B, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0xD144, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0xD146, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD14D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD151, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD152, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD14F, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_left", $.Single); 
  $.Field({Static:false, Public:false}, "_right", $.Single); 
  $.Property({Static:false, Public:true }, "Left", $.Single);

  $.Property({Static:false, Public:true }, "Right", $.Single);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.GamePadState", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF22, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF23, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $.Single, $.Single, 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xCF25, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_STATE")]), $asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xCF28, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FillInternalState", 
    $sig.make(0xCF24, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Buttons", 
    $sig.make(0xCF1C, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DPad", 
    $sig.make(0xCF1D, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
    $sig.make(0xCF1E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PacketNumber", 
    $sig.make(0xCF1F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ThumbSticks", 
    $sig.make(0xCF20, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Triggers", 
    $sig.make(0xCF21, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xCF29, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsButtonDown", 
    $sig.make(0xCF26, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsButtonUp", 
    $sig.make(0xCF27, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xCF2B, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xCF2C, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xCF2A, $.String, [], [])
  );

  $.Constant({Static:true , Public:false}, "_normalButtonMask", 64511); 
  $.Field({Static:false, Public:false}, "_connected", $.Boolean); 
  $.Field({Static:false, Public:false}, "_packet", $.Int32); 
  $.Field({Static:false, Public:false}, "_thumbs", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks")); 
  $.Field({Static:false, Public:false}, "_triggers", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers")); 
  $.Field({Static:false, Public:false}, "_buttons", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons")); 
  $.Field({Static:false, Public:false}, "_dpad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")); 
  $.Field({Static:false, Public:false}, "_state", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_STATE")); 
  $.Property({Static:false, Public:true }, "Buttons", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"));

  $.Property({Static:false, Public:true }, "DPad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"));

  $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

  $.Property({Static:false, Public:true }, "PacketNumber", $.Int32);

  $.Property({Static:false, Public:true }, "ThumbSticks", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"));

  $.Property({Static:false, Public:true }, "Triggers", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.GamePadCapabilities", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD0C9, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES")]), $asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GamePadType", 
    $sig.make(0xD073, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasAButton", 
    $sig.make(0xD075, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasBackButton", 
    $sig.make(0xD076, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasBButton", 
    $sig.make(0xD077, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasBigButton", 
    $sig.make(0xD0AD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasDPadDownButton", 
    $sig.make(0xD078, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasDPadLeftButton", 
    $sig.make(0xD079, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasDPadRightButton", 
    $sig.make(0xD07C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasDPadUpButton", 
    $sig.make(0xD07F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasLeftShoulderButton", 
    $sig.make(0xD081, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasLeftStickButton", 
    $sig.make(0xD083, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasLeftTrigger", 
    $sig.make(0xD0BD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasLeftVibrationMotor", 
    $sig.make(0xD0C1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasLeftXThumbStick", 
    $sig.make(0xD0B1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasLeftYThumbStick", 
    $sig.make(0xD0B5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRightShoulderButton", 
    $sig.make(0xD092, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRightStickButton", 
    $sig.make(0xD096, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRightTrigger", 
    $sig.make(0xD0BF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRightVibrationMotor", 
    $sig.make(0xD0C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRightXThumbStick", 
    $sig.make(0xD0B9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasRightYThumbStick", 
    $sig.make(0xD0BB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasStartButton", 
    $sig.make(0xD0A3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasVoiceSupport", 
    $sig.make(0xD0C7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasXButton", 
    $sig.make(0xD0A6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasYButton", 
    $sig.make(0xD0A9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
    $sig.make(0xD074, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "_connected", $.Boolean); 
  $.Field({Static:false, Public:false}, "_caps", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES")); 
  $.Property({Static:false, Public:true }, "GamePadType", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadType"));

  $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

  $.Property({Static:false, Public:true }, "HasAButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasBackButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasBButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasDPadDownButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasDPadLeftButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasDPadRightButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasDPadUpButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasLeftShoulderButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasLeftStickButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasRightShoulderButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasRightStickButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasStartButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasXButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasYButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasBigButton", $.Boolean);

  $.Property({Static:false, Public:true }, "HasLeftXThumbStick", $.Boolean);

  $.Property({Static:false, Public:true }, "HasLeftYThumbStick", $.Boolean);

  $.Property({Static:false, Public:true }, "HasRightXThumbStick", $.Boolean);

  $.Property({Static:false, Public:true }, "HasRightYThumbStick", $.Boolean);

  $.Property({Static:false, Public:true }, "HasLeftTrigger", $.Boolean);

  $.Property({Static:false, Public:true }, "HasRightTrigger", $.Boolean);

  $.Property({Static:false, Public:true }, "HasLeftVibrationMotor", $.Boolean);

  $.Property({Static:false, Public:true }, "HasRightVibrationMotor", $.Boolean);

  $.Property({Static:false, Public:true }, "HasVoiceSupport", $.Boolean);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.XINPUT_STATE", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "PacketNumber", $.Int32); 
  $.Field({Static:false, Public:true }, "GamePad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "Buttons", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonValues")); 
  $.Field({Static:false, Public:true }, "LeftTrigger", $.Byte); 
  $.Field({Static:false, Public:true }, "RightTrigger", $.Byte); 
  $.Field({Static:false, Public:true }, "ThumbLX", $.Int16); 
  $.Field({Static:false, Public:true }, "ThumbLY", $.Int16); 
  $.Field({Static:false, Public:true }, "ThumbRX", $.Int16); 
  $.Field({Static:false, Public:true }, "ThumbRY", $.Int16); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.XINPUT_VIBRATION", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "LeftMotorSpeed", $.Int16); 
  $.Field({Static:false, Public:true }, "RightMotorSpeed", $.Int16); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "Type", $.Byte); 
  $.Field({Static:false, Public:true }, "SubType", $.Byte); 
  $.Field({Static:false, Public:true }, "Flags", $.UInt16); 
  $.Field({Static:false, Public:true }, "GamePad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD")); 
  $.Field({Static:false, Public:true }, "Vibration", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_VIBRATION")); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker"), "Microsoft.Xna.Framework.Input.WindowMessageHookerTester", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD635, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WndProc", 
    $sig.make(0xD636, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.IntPtr")]), [
        $asm06.TypeRef("System.IntPtr"), $.UInt32, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.Field({Static:false, Public:false}, "wndProcDelegate", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate")); 
});

JSIL.MakeDelegate("Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate", false, []);

JSIL.MakeStaticClass("Microsoft.Xna.Framework.MathHelper", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0xD6A9, $.Single, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0xD6AB, $.Single, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0xD6A7, $.Single, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0xD6A4, $.Single, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0xD6AC, $.Single, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0xD6A8, $.Single, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0xD6A6, $.Single, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0xD6A5, $.Single, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0xD6AA, $.Single, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToDegrees", 
    $sig.make(0xD6A3, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToRadians", 
    $sig.make(0xD6A2, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "WrapAngle", 
    $sig.make(0xD6AD, $.Single, [$.Single], [])
  );

  $.Constant({Static:true , Public:true }, "E", 2.7182817459106445); 
  $.Constant({Static:true , Public:true }, "Log2E", 1.4426950216293335); 
  $.Constant({Static:true , Public:true }, "Log10E", 0.43429449200630188); 
  $.Constant({Static:true , Public:true }, "Pi", 3.1415927410125732); 
  $.Constant({Static:true , Public:true }, "TwoPi", 6.2831854820251465); 
  $.Constant({Static:true , Public:true }, "PiOver2", 1.5707963705062866); 
  $.Constant({Static:true , Public:true }, "PiOver4", 0.78539818525314331); 
});

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Design");
JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.PropertyDescriptor"), "Microsoft.Xna.Framework.Design.MemberPropertyDescriptor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6B2, null, [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanResetValue", 
    $sig.make(0xD6B6, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD6B3, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ComponentType", 
    $sig.make(0xD6B1, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xD6B0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD6B4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetValue", 
    $sig.make(0xD6B5, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ShouldSerializeValue", 
    $sig.make(0xD6B7, $.Boolean, [$.Object], [])
  );

  $.Field({Static:false, Public:false}, "_member", $asm06.TypeRef("System.Reflection.MemberInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MemberPropertyDescriptor"), "Microsoft.Xna.Framework.Design.FieldPropertyDescriptor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6E0, null, [$asm06.TypeRef("System.Reflection.FieldInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PropertyType", 
    $sig.make(0xD6DF, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetValue", 
    $sig.make(0xD6E1, $.Object, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetValue", 
    $sig.make(0xD6E2, null, [$.Object, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "_field", $asm06.TypeRef("System.Reflection.FieldInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MemberPropertyDescriptor"), "Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6F3, null, [$asm06.TypeRef("System.Reflection.PropertyInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PropertyType", 
    $sig.make(0xD6F2, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetValue", 
    $sig.make(0xD6F4, $.Object, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetValue", 
    $sig.make(0xD6F5, null, [$.Object, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "_property", $asm06.TypeRef("System.Reflection.PropertyInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter"), "Microsoft.Xna.Framework.Design.MathTypeConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD555, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0xD546, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0xD548, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertFromValues", 
    $sig.make(0xD553, $.String, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $jsilcore.TypeRef("System.Array", ["!!0"])
      ], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertToValues", 
    $sig.make(0xD551, $jsilcore.TypeRef("System.Array", ["!!0"]), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0xD54B, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0xD554, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0xD54E, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.Field({Static:false, Public:false}, "propertyDescriptions", $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection")); 
  $.Field({Static:false, Public:false}, "supportStringConvert", $.Boolean); 
});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.PointConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD71F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD720, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD721, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD722, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.RectangleConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD729, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD72A, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD72B, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.Vector2Converter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD732, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD733, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD734, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD735, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.Vector3Converter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD73C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD73D, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD73E, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD73F, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.Vector4Converter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD748, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD74A, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD74C, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD74D, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.QuaternionConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD767, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD769, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD76A, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD76C, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.MatrixConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD580, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD581, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD582, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.BoundingBoxConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD59B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD59C, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD59D, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD5A1, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.BoundingSphereConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5B6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD5B8, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD5BA, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD5BB, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.PlaneConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5C9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD5CB, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD5CC, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.RayConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD5E4, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD5E5, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD5E6, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.MakeClass($asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), "Microsoft.Xna.Framework.Design.ColorConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD614, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0xD615, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0xD617, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0xD622, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

});

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Graphics");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Graphics.PackedVector");
JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector", true, [], function ($) {
    $.Method({}, "ToVector4", $sig.make(0x1961, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], []));
    $.Method({}, "PackFromVector4", $sig.make(0x1963, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], []));
  }, []);

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", true, ["TPacked"], function ($) {
    $.Method({}, "get_PackedValue", $sig.make(0x1966, new JSIL.GenericParameter("TPacked", "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1"), [], []));
    $.Method({}, "set_PackedValue", $sig.make(0x1968, null, [new JSIL.GenericParameter("TPacked", "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1")], []));
    $.Property({}, "PackedValue");
  }, [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector")]);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD63F, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD646, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD647, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD638, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD645, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD640, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD643, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD648, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD649, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD641, $.Byte, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD63E, null, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToAlpha", 
    $sig.make(0xD642, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD644, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.Byte); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.Byte);

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.Byte]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD680, null, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD681, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD688, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD689, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD67E, $.UInt16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD687, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD682, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD685, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD68A, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD68B, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD683, $.UInt16, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD67F, null, [$.UInt16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD686, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector3", 
    $sig.make(0xD684, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6BD, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6BF, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD6C6, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD6C7, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD6BA, $.UInt16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD6C5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD6C1, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD6C8, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD6C9, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD6C2, $.UInt16, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD6BC, null, [$.UInt16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD6C4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD6C3, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD700, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD702, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD712, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD714, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD6FC, $.UInt16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD70F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD704, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD715, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD716, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD706, $.UInt16, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD6FE, null, [$.UInt16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD70E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD70C, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Byte4", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD749, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD74B, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD756, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD757, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD746, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD755, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD74E, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD758, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD75A, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD74F, $.UInt32, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD747, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD754, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD751, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD77E, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD784, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD785, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD77C, $.UInt16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD783, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD77F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD781, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD786, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD787, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD77D, null, [$.UInt16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
    $sig.make(0xD780, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD782, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD79F, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7A0, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD7A7, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD7A8, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD79D, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD7A6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD7A1, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD7A4, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD7A9, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD7AA, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD7A2, $.UInt32, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD79E, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD7A5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
    $sig.make(0xD7A3, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7C3, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7C4, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD7CA, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD7CB, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD7C1, $.UInt64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD7C9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD7C5, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD7CC, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD7CD, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD7C6, $.UInt64, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD7C2, null, [$.UInt64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD7C8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD7C7, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5B7, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5B9, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD5D9, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD5DC, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD5B4, $.UInt16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD5D6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD5BC, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD5D1, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD5DD, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD5DE, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD5C0, $.UInt16, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD5B5, null, [$.UInt16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD5D4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
    $sig.make(0xD5C8, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD60D, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD60F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD61A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD61D, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD609, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD618, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD611, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD621, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD623, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD612, $.UInt32, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD60B, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD616, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD613, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD692, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD693, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD69A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD69B, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD690, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD699, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD694, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD697, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD69C, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD69D, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD695, $.UInt32, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD691, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD698, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
    $sig.make(0xD696, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6D0, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD6D1, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD6D7, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD6D8, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD6CE, $.UInt64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD6D6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD6D2, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD6D9, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD6DA, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD6D3, $.UInt64, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD6CF, null, [$.UInt64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD6D5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD6D4, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "ClampAndRound", 
    $sig.make(0xD6EF, $.Double, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PackSigned", 
    $sig.make(0xD6EA, $.UInt32, [$.UInt32, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PackSNorm", 
    $sig.make(0xD6ED, $.UInt32, [$.UInt32, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PackUNorm", 
    $sig.make(0xD6EB, $.UInt32, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PackUnsigned", 
    $sig.make(0xD6E9, $.UInt32, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UnpackSNorm", 
    $sig.make(0xD6EE, $.Single, [$.UInt32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UnpackUNorm", 
    $sig.make(0xD6EC, $.Single, [$.UInt32, $.UInt32], [])
  );

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Rg32", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD701, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD703, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD70D, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD710, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD6FD, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD70B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD705, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD709, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD711, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD713, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD707, $.UInt32, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD6FF, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD70A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
    $sig.make(0xD708, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD763, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD764, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD770, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD772, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD761, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD76D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD765, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD774, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD776, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD766, $.UInt32, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD762, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD76B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD768, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD78E, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD78F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD795, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD796, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD78C, $.UInt64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD794, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD790, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD797, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD798, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD791, $.UInt64, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD78D, null, [$.UInt64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD793, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD792, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Short2", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7B1, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7B2, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD7B9, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD7BA, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD7AF, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD7B8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD7B3, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.ToVector4", 
    $sig.make(0xD7B6, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD7BB, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD7BC, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD7B4, $.UInt32, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD7B0, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD7B7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
    $sig.make(0xD7B5, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Graphics.PackedVector.Short4", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7D4, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7D5, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD7DB, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD7DC, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0xD7D2, $.UInt64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD7DA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0xD7D6, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD7DD, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD7DE, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0xD7D7, $.UInt64, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0xD7D3, null, [$.UInt64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xD7D9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0xD7D8, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.ManagedCallType", false, {
    NoManagedCall: 1, 
    RunUnitTestDelegate: 2, 
    AsyncOperationCompleted: 3, 
    Media_ActiveSongChanged: 4, 
    Media_PlayStateChanged: 5, 
    Net_WriteLeaderboards: 6, 
    System_DeviceChanged: 7, 
    System_DownloadCompleted: 8, 
    CaptureBufferReady: 9, 
    PlaybackBufferNeeded: 10
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.LoggingEvent", false, {
    ApplicationConstruction: 0, 
    ApplicationStartup: 1, 
    DevicePresent: 2, 
    Update: 3, 
    Draw: 4, 
    LoadContent: 5, 
    AwardAchievement: 6, 
    GamerServicesInitialize: 7, 
    GetAchievements: 8, 
    GetProfile: 9, 
    GetFromGamertag: 10, 
    GetPartnerToken: 11, 
    LeaderboardRead: 12, 
    LeaderboardWrite: 13, 
    ShowGameInvite: 14, 
    ShowGamercard: 15, 
    ShowMessageBox: 16
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.KernelReturnCode", false, {
    OutputBufferTooSmall: 2147746304, 
    TooManyPendingAsyncOperations: 2147746305, 
    BeginEndPairDoesNotMatch: 2147746306, 
    AsyncShutdown: 2147746307, 
    TitleUpdate: 2147746308, 
    ProFeatureNotSupported: 2147746309, 
    ProfileNotSignedIn: 2147746310, 
    ProfileNotPrivileged: 2147746311, 
    GuideAlreadyVisible: 2147746312, 
    NetworkError: 2147746313, 
    PacketQueueFull: 2147746314, 
    SessionAlreadyExists: 2147746315, 
    SessionNotFound: 2147746316, 
    SessionNotJoinable: 2147746317, 
    SessionFull: 2147746318, 
    StaleSearchResult: 2147746319, 
    QualityOfServiceNotComplete: 2147746320, 
    NotInvited: 2147746321, 
    InviteeNotSignedIn: 2147746322, 
    TrialMode: 2147746323, 
    NetworkNotAvailable: 2147746324, 
    LIVEn400BadRequest: 2147746325, 
    LIVEn401Unauthorized: 2147746326, 
    LIVEn500InternalServerError: 2147746327, 
    LIVEn503ServiceUnavailable: 2147746328, 
    LIVEnTitleUpdateRequired: 2147746329, 
    LIVEnFlashUpdateRequired: 2147746330, 
    LIVEnNotSupportedTitle: 2147746331, 
    LIVEnAccountBanned: 2147746332, 
    LIVEnAccountSuspended: 2147746333, 
    LIVEnCountryNotSupported: 2147746334, 
    LIVEnGamertagChangeRequired: 2147746335, 
    LIVEnGamertagUpdateRequired: 2147746336, 
    LIVEnXBLConnectionUnavailable: 2147746337, 
    LIVEnUnexpectedNetworkError: 2147746338, 
    LIVEnServiceNotProvisioned: 2147746339, 
    LIVEnInvalidUser: 2147746340, 
    LIVEnTermsOfServiceNotAccepted: 2147746341, 
    LIVEnXBLNotEnabled: 2147746342
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.XnaImageFormat", false, {
    Jpeg: 0, 
    Gif: 1, 
    Png: 2
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.XnaImageOperation", false, {
    Nothing: 0, 
    Scale: 1, 
    Crop: 2
  }, true
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.DisplayOrientation", true, {
    Default: 0, 
    LandscapeLeft: 1, 
    LandscapeRight: 2, 
    Portrait: 4
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.ExternalException"), "Microsoft.Xna.Framework.Audio.NoAudioHardwareException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5C4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5C5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5C6, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD5C7, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.ExternalException"), "Microsoft.Xna.Framework.Audio.InstancePlayLimitException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5ED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5EE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD5F1, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD5F4, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Helpers", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "CheckDisposed", 
    $sig.make(0xD661, null, [$.Object, $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ChooseOrientation", 
    $sig.make(0xD664, $asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), $.Int32, 
        $.Int32, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Failed", 
    $sig.make(0xD658, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Failed", 
    $sig.make(0xD659, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetExceptionFromResult", 
    $sig.make(0xD660, $asm06.TypeRef("System.Exception"), [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSizeOf", 
    $sig.make(0xD65C, $.UInt32, [], ["T"])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsLandscape", 
    $sig.make(0xD663, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmartGetHashCode", 
    $sig.make(0xD65A, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Succeeded", 
    $sig.make(0xD656, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Succeeded", 
    $sig.make(0xD657, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionFromErrorCode", 
    $sig.make(0xD65D, null, [$asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionFromErrorCode", 
    $sig.make(0xD65E, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionFromResult", 
    $sig.make(0xD65F, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ValidateCopyParameters", 
    $sig.make(0xD65B, null, [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ValidateOrientation", 
    $sig.make(0xD662, null, [$asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
  );

  $.Constant({Static:true , Public:true }, "InvalidHandle", 4294967295); 
  $.Constant({Static:true , Public:true }, "MaximumStringLength", 260); 
  $.Constant({Static:true , Public:true }, "Guide_MessageBox_MaxButtons", 3); 
  $.Constant({Static:true , Public:true }, "MaxNumberOfSignedInPlayers", 1); 
  $.Constant({Static:true , Public:false}, "PlayerAnyIndex", 255); 
  $.Field({Static:true , Public:false}, "KeepKernelReturnCode", $.Object); 
});

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.ErrorCodes", false, {
    Success: 0, 
    AccessDenied: 5, 
    Busy: 170, 
    AlreadyExists: 183, 
    Pending: 997, 
    NotConnected: 1167, 
    Empty: 4306, 
    E_NOTIMPL: 2147500033, 
    E_ABORT: 2147500036, 
    E_FAIL: 2147500037, 
    REGDB_E_CLASSNOTREG: 2147746132, 
    VFW_E_NO_AUDIO_HARDWARE: 2147746390, 
    E_ACCESSDENIED: 2147942405, 
    E_OUTOFMEMORY: 2147942414, 
    ERROR_SHARING_VIOLATION: 2147942432, 
    E_INVALIDARG: 2147942487, 
    STRSAFE_E_INSUFFICIENT_BUFFER: 2147942522, 
    D3DERR_OUTOFVIDEOMEMORY: 2289435004, 
    D3DERR_WRONGTEXTUREFORMAT: 2289436696, 
    D3DERR_TOOMANYOPERATIONS: 2289436701, 
    D3DERR_DRIVERINTERNALERROR: 2289436711, 
    D3DERR_NOTFOUND: 2289436774, 
    D3DERR_MOREDATA: 2289436775, 
    D3DERR_DEVICELOST: 2289436776, 
    D3DERR_DEVICENOTRESET: 2289436777, 
    D3DERR_NOTAVAILABLE: 2289436784, 
    D3DERR_INVALIDCALL: 2289436786, 
    XACTENGINE_E_ALREADYINITIALIZED: 2328297473, 
    XACTENGINE_E_NOTINITIALIZED: 2328297474, 
    XACTENGINE_E_EXPIRED: 2328297475, 
    XACTENGINE_E_NONOTIFICATIONCALLBACK: 2328297476, 
    XACTENGINE_E_NOTIFICATIONREGISTERED: 2328297477, 
    XACTENGINE_E_INVALIDUSAGE: 2328297478, 
    XACTENGINE_E_INVALIDDATA: 2328297479, 
    XACTENGINE_E_INSTANCELIMITFAILTOPLAY: 2328297480, 
    XACTENGINE_E_NOGLOBALSETTINGS: 2328297481, 
    XACTENGINE_E_INVALIDVARIABLEINDEX: 2328297482, 
    XACTENGINE_E_INVALIDCATEGORY: 2328297483, 
    XACTENGINE_E_INVALIDCUEINDEX: 2328297484, 
    XACTENGINE_E_INVALIDWAVEINDEX: 2328297485, 
    XACTENGINE_E_INVALIDTRACKINDEX: 2328297486, 
    XACTENGINE_E_INVALIDSOUNDOFFSETORINDEX: 2328297487, 
    XACTENGINE_E_READFILE: 2328297488, 
    XACTENGINE_E_UNKNOWNEVENT: 2328297489, 
    XACTENGINE_E_INCALLBACK: 2328297490, 
    XACTENGINE_E_NOWAVEBANK: 2328297491, 
    XACTENGINE_E_SELECTVARIATION: 2328297492, 
    XACTENGINE_E_MULTIPLEAUDITIONENGINES: 2328297493, 
    XACTENGINE_E_WAVEBANKNOTPREPARED: 2328297494, 
    XACTENGINE_E_NORENDERER: 2328297495, 
    XACTENGINE_E_INVALIDENTRYCOUNT: 2328297496, 
    XACTENGINE_E_SEEKTIMEBEYONDCUEEND: 2328297497, 
    XACTENGINE_E_AUDITION_WRITEFILE: 2328297729, 
    XACTENGINE_E_AUDITION_NOSOUNDBANK: 2328297730, 
    XACTENGINE_E_AUDITION_INVALIDRPCINDEX: 2328297731, 
    XACTENGINE_E_AUDITION_MISSINGDATA: 2328297732, 
    XACTENGINE_E_AUDITION_UNKNOWNCOMMAND: 2328297733, 
    XACTENGINE_E_AUDITION_INVALIDDSPINDEX: 2328297734, 
    XACTENGINE_E_AUDITION_MISSINGWAVE: 2328297735, 
    XACTENGINE_E_AUDITION_CREATEDIRECTORYFAILED: 2328297736, 
    XACTENGINE_E_AUDITION_INVALIDSESSION: 2328297737, 
    ZDKSYSTEM_E_AUDIO_INSTANCELIMIT: 2343370753, 
    ZDKSYSTEM_E_AUDIO_INVALIDSTATE: 2343370754, 
    ZDKSYSTEM_E_AUDIO_INVALIDDATA: 2343370755, 
    CAPTURE_ENGINE_E_DEVICEGONE: 2364407809
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.ContainmentType", true, {
    Disjoint: 0, 
    Contains: 1, 
    Intersects: 2
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.BoundingBox", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x3C97, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CB5, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CB7, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CB8, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CB9, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CBA, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CBC, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3CBF, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromPoints", 
    $sig.make(0x3CA6, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromSphere", 
    $sig.make(0x3CA4, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromSphere", 
    $sig.make(0x3CA5, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
    $sig.make(0x3CA2, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
    $sig.make(0x3CA3, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x3C99, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x3C9C, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
    $sig.make(0x3C91, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
    $sig.make(0x3C94, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x3C9E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CA7, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CA8, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CA9, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CAA, $asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CAB, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CAC, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CB0, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CB2, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3CB3, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x3CC2, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x3CC4, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SupportMapping", 
    $sig.make(0x3CC0, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x3CA0, $.String, [], [])
  );

  $.Constant({Static:true , Public:true }, "CornerCount", 8); 
  $.Field({Static:false, Public:true }, "Min", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:true }, "Max", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.BoundingBoxConverter")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.BoundingFrustum", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x3D2E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x3D2F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ComputeIntersection", 
    $sig.make(0x3D32, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ComputeIntersectionLine", 
    $sig.make(0x3D31, $asm01.TypeRef("Microsoft.Xna.Framework.Ray"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D3C, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D3D, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D3E, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D3F, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D40, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D41, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3D42, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x3D2A, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x3D2B, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
    $sig.make(0x3D25, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Far", 
    $sig.make(0x3D20, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x3D22, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix", 
    $sig.make(0x3D26, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Near", 
    $sig.make(0x3D1A, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x3D23, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Top", 
    $sig.make(0x3D24, $asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
    $sig.make(0x3D28, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
    $sig.make(0x3D29, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x3D2C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D33, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D34, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D35, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D36, $asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D37, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D38, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D39, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D3A, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3D3B, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x3D44, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x3D45, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix", 
    $sig.make(0x3D27, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMatrix", 
    $sig.make(0x3D30, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SupportMapping", 
    $sig.make(0x3D43, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x3D2D, $.String, [], [])
  );

  $.Constant({Static:true , Public:true }, "CornerCount", 8); 
  $.Constant({Static:true , Public:false}, "NearPlaneIndex", 0); 
  $.Constant({Static:true , Public:false}, "FarPlaneIndex", 1); 
  $.Constant({Static:true , Public:false}, "LeftPlaneIndex", 2); 
  $.Constant({Static:true , Public:false}, "RightPlaneIndex", 3); 
  $.Constant({Static:true , Public:false}, "TopPlaneIndex", 4); 
  $.Constant({Static:true , Public:false}, "BottomPlaneIndex", 5); 
  $.Constant({Static:true , Public:false}, "NumPlanes", 6); 
  $.Field({Static:false, Public:false}, "matrix", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")); 
  $.Field({Static:false, Public:false}, "planes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")])); 
  $.Field({Static:false, Public:false}, "cornerArray", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
  $.Field({Static:false, Public:false}, "gjk", $asm01.TypeRef("Microsoft.Xna.Framework.Gjk")); 
  $.Property({Static:false, Public:true }, "Near", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

  $.Property({Static:false, Public:true }, "Far", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

  $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

  $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

  $.Property({Static:false, Public:true }, "Top", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

  $.Property({Static:false, Public:true }, "Bottom", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

  $.Property({Static:false, Public:true }, "Matrix", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.BoundingSphere", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x3D7B, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DAE, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DAF, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DB0, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DB1, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DB2, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DB3, $asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x3DB4, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromBoundingBox", 
    $sig.make(0x3D9C, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromBoundingBox", 
    $sig.make(0x3D9E, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFrustum", 
    $sig.make(0x3DA2, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromPoints", 
    $sig.make(0x3DA0, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
    $sig.make(0x3D98, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
    $sig.make(0x3D9B, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x3D83, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x3D87, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x3D8B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DA4, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DA6, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DA7, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DA8, $asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DA9, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DAA, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DAB, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DAC, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x3DAD, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x3DB8, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x3DB9, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SupportMapping", 
    $sig.make(0x3DB5, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x3D92, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x3DB6, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x3DB7, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.Field({Static:false, Public:true }, "Center", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:true }, "Radius", $.Single); 
  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.BoundingSphereConverter")]; });

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.CurveLoopType", true, {
    Constant: 0, 
    Cycle: 1, 
    CycleOffset: 2, 
    Oscillate: 3, 
    Linear: 4
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.CurveTangent", true, {
    Flat: 0, 
    Linear: 1, 
    Smooth: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Curve", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF9A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CalcCycle", 
    $sig.make(0xCFA4, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xCF9C, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComputeTangent", 
    $sig.make(0xCF9E, null, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComputeTangent", 
    $sig.make(0xCF9F, null, [
        $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComputeTangents", 
    $sig.make(0xCFA1, null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ComputeTangents", 
    $sig.make(0xCFA2, null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent"), $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
    $sig.make(0xCFA3, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindSegment", 
    $sig.make(0xCFA5, $.Single, [
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsConstant", 
    $sig.make(0xCF93, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
    $sig.make(0xCF91, $asm01.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PostLoop", 
    $sig.make(0xCF8D, $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PreLoop", 
    $sig.make(0xCF8B, $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Hermite", 
    $sig.make(0xCFA6, $.Single, [
        $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"), $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"), 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PostLoop", 
    $sig.make(0xCF8F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PreLoop", 
    $sig.make(0xCF8C, null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")], [])
  );

  $.Field({Static:false, Public:false}, "preLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")); 
  $.Field({Static:false, Public:false}, "postLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")); 
  $.Field({Static:false, Public:false}, "keys", $asm01.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection")); 
  $.Property({Static:false, Public:true }, "PreLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"));

  $.Property({Static:false, Public:true }, "PostLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"));

  $.Property({Static:false, Public:true }, "Keys", $asm01.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection"));

  $.Property({Static:false, Public:true }, "IsConstant", $.Boolean);

})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter")]; });

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.CurveContinuity", true, {
    Smooth: 0, 
    Step: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.CurveKey", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD16A, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD16D, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD170, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xD172, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
    $sig.make(0xD180, $.Int32, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xD175, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xD178, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Continuity", 
    $sig.make(0xD158, $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0xD145, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TangentIn", 
    $sig.make(0xD14A, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TangentOut", 
    $sig.make(0xD14E, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xD147, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xD17A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xD17C, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xD17E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Continuity", 
    $sig.make(0xD164, null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TangentIn", 
    $sig.make(0xD14C, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TangentOut", 
    $sig.make(0xD150, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0xD149, null, [$.Single], [])
  );

  $.Field({Static:false, Public:false}, "position", $.Single); 
  $.Field({Static:false, Public:false}, "internalValue", $.Single); 
  $.Field({Static:false, Public:false}, "tangentOut", $.Single); 
  $.Field({Static:false, Public:false}, "tangentIn", $.Single); 
  $.Field({Static:false, Public:false}, "continuity", $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity")); 
  $.Property({Static:false, Public:true }, "Position", $.Single);

  $.Property({Static:false, Public:true }, "Value", $.Single);

  $.Property({Static:false, Public:true }, "TangentIn", $.Single);

  $.Property({Static:false, Public:true }, "TangentOut", $.Single);

  $.Property({Static:false, Public:true }, "Continuity", $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]), $asm06.TypeRef("System.IComparable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.CurveKeyCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD0AE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0xD099, null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0xD09B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0xD0A8, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputeCacheValues", 
    $sig.make(0xD0AB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0xD09D, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xD09E, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0xD08F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xD093, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD089, $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD0A1, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xD095, $.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0xD0A0, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xD097, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0xD08B, null, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xD0A5, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "Keys", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")])); 
  $.Field({Static:false, Public:false}, "TimeRange", $.Single); 
  $.Field({Static:false, Public:false}, "InvTimeRange", $.Single); 
  $.Field({Static:false, Public:false}, "IsCacheAvailable", $.Boolean); 
  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "Microsoft.Xna.Framework.Gjk", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x50E0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddSupportPoint", 
    $sig.make(0x50E2, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputeClosestPoint", 
    $sig.make(0x50E9, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Dot", 
    $sig.make(0x50E4, $.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ClosestPoint", 
    $sig.make(0x50DF, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FullSimplex", 
    $sig.make(0x50DD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxLengthSquared", 
    $sig.make(0x50DE, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsSatisfiesRule", 
    $sig.make(0x50EA, $.Boolean, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x50E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateDeterminant", 
    $sig.make(0x50E6, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateSimplex", 
    $sig.make(0x50E8, $.Boolean, [$.Int32], [])
  );

  $.Field({Static:true , Public:false}, "BitsToIndices", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "closestPoint", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:false}, "y", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
  $.Field({Static:false, Public:false}, "yLengthSq", $jsilcore.TypeRef("System.Array", [$.Single])); 
  $.Field({Static:false, Public:false}, "edges", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])])); 
  $.Field({Static:false, Public:false}, "edgeLengthSq", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])])); 
  $.Field({Static:false, Public:false}, "det", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])])); 
  $.Field({Static:false, Public:false}, "simplexBits", $.Int32); 
  $.Field({Static:false, Public:false}, "maxLengthSq", $.Single); 
  $.Property({Static:false, Public:true }, "FullSimplex", $.Boolean);

  $.Property({Static:false, Public:true }, "MaxLengthSquared", $.Single);

  $.Property({Static:false, Public:true }, "ClosestPoint", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Matrix", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA75, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0xAE2, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0xAE8, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateBillboard", 
    $sig.make(0xA76, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateBillboard", 
    $sig.make(0xA79, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateConstrainedBillboard", 
    $sig.make(0xA7B, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateConstrainedBillboard", 
    $sig.make(0xA7C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
    $sig.make(0xA8D, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
    $sig.make(0xA8E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromQuaternion", 
    $sig.make(0xA9D, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromQuaternion", 
    $sig.make(0xA9E, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
    $sig.make(0xAA2, $.Type, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
    $sig.make(0xAA3, null, [
        $.Single, $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateLookAt", 
    $sig.make(0xA99, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateLookAt", 
    $sig.make(0xA9A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateOrthographic", 
    $sig.make(0xA95, $.Type, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateOrthographic", 
    $sig.make(0xA96, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateOrthographicOffCenter", 
    $sig.make(0xA97, $.Type, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateOrthographicOffCenter", 
    $sig.make(0xA98, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePerspective", 
    $sig.make(0xA91, $.Type, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePerspective", 
    $sig.make(0xA92, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
    $sig.make(0xA8F, $.Type, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
    $sig.make(0xA90, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
    $sig.make(0xA93, $.Type, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
    $sig.make(0xA94, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateReflection", 
    $sig.make(0xAA7, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateReflection", 
    $sig.make(0xAA9, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRotationX", 
    $sig.make(0xA87, $.Type, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRotationX", 
    $sig.make(0xA88, null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRotationY", 
    $sig.make(0xA89, $.Type, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRotationY", 
    $sig.make(0xA8A, null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRotationZ", 
    $sig.make(0xA8B, $.Type, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRotationZ", 
    $sig.make(0xA8C, null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
    $sig.make(0xA81, $.Type, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
    $sig.make(0xA82, null, [
        $.Single, $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
    $sig.make(0xA83, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
    $sig.make(0xA84, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
    $sig.make(0xA85, $.Type, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
    $sig.make(0xA86, null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateShadow", 
    $sig.make(0xAA4, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateShadow", 
    $sig.make(0xAA6, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
    $sig.make(0xA7D, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
    $sig.make(0xA7E, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
    $sig.make(0xA7F, $.Type, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
    $sig.make(0xA80, null, [
        $.Single, $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateWorld", 
    $sig.make(0xA9B, $.Type, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateWorld", 
    $sig.make(0xA9C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Decompose", 
    $sig.make(0xAB0, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Determinant", 
    $sig.make(0xAC4, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0xB0D, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0xB19, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0xB1E, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0xB23, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xABA, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xABC, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Backward", 
    $sig.make(0xA6E, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Down", 
    $sig.make(0xA66, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Forward", 
    $sig.make(0xA6C, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
    $sig.make(0xA63, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0xA6A, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0xA68, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Translation", 
    $sig.make(0xA70, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Up", 
    $sig.make(0xA64, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xABE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Invert", 
    $sig.make(0xAC5, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Invert", 
    $sig.make(0xACD, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0xAD1, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0xAD4, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0xAF4, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0xAF5, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0xAF6, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0xAFF, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0xAD8, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0xADF, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0xB35, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0xB4A, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0xB4D, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xB2D, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xB32, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0xB3A, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0xB40, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0xB46, $.Type, [$.Single, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0xB36, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0xB28, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Backward", 
    $sig.make(0xA6F, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Down", 
    $sig.make(0xA67, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Forward", 
    $sig.make(0xA6D, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Left", 
    $sig.make(0xA6B, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Right", 
    $sig.make(0xA69, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Translation", 
    $sig.make(0xA71, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Up", 
    $sig.make(0xA65, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0xAEC, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0xAF0, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xAB7, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0xAB2, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0xAB4, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transpose", 
    $sig.make(0xAC1, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transpose", 
    $sig.make(0xAC2, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.Field({Static:false, Public:true }, "M11", $.Single); 
  $.Field({Static:false, Public:true }, "M12", $.Single); 
  $.Field({Static:false, Public:true }, "M13", $.Single); 
  $.Field({Static:false, Public:true }, "M14", $.Single); 
  $.Field({Static:false, Public:true }, "M21", $.Single); 
  $.Field({Static:false, Public:true }, "M22", $.Single); 
  $.Field({Static:false, Public:true }, "M23", $.Single); 
  $.Field({Static:false, Public:true }, "M24", $.Single); 
  $.Field({Static:false, Public:true }, "M31", $.Single); 
  $.Field({Static:false, Public:true }, "M32", $.Single); 
  $.Field({Static:false, Public:true }, "M33", $.Single); 
  $.Field({Static:false, Public:true }, "M34", $.Single); 
  $.Field({Static:false, Public:true }, "M41", $.Single); 
  $.Field({Static:false, Public:true }, "M42", $.Single); 
  $.Field({Static:false, Public:true }, "M43", $.Single); 
  $.Field({Static:false, Public:true }, "M44", $.Single); 
  $.Field({Static:true , Public:false}, "_identity", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA56, null, [], []), 
    function Matrix__cctor () {
      $thisType._identity = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Identity", $.Type);

  $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Down", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Backward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.Property({Static:false, Public:true }, "Translation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.MatrixConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Matrix/CanonicalBasis", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "Row0", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:true }, "Row1", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:true }, "Row2", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Matrix/VectorBasis", false, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Color", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1AFB, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1B05, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1B10, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ClampToByte32", 
    $sig.make(0x1B1A, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ClampToByte64", 
    $sig.make(0x1B1C, $.Int32, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x1B31, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x1B34, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromNonPremultiplied", 
    $sig.make(0x1B14, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromNonPremultiplied", 
    $sig.make(0x1B16, $.Type, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_A", 
    $sig.make(0x19A5, $.Byte, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
    $sig.make(0x19B3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
    $sig.make(0x19B6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
    $sig.make(0x19B7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
    $sig.make(0x19B8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
    $sig.make(0x19B9, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_B", 
    $sig.make(0x19A2, $.Byte, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
    $sig.make(0x19BA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
    $sig.make(0x19BB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Black", 
    $sig.make(0x19BD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
    $sig.make(0x19BE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
    $sig.make(0x19BF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
    $sig.make(0x19C0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
    $sig.make(0x19C1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
    $sig.make(0x19C3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
    $sig.make(0x19C5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
    $sig.make(0x19C7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
    $sig.make(0x19C9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
    $sig.make(0x19D1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
    $sig.make(0x19D3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
    $sig.make(0x19D5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
    $sig.make(0x19DC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
    $sig.make(0x19DF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
    $sig.make(0x19E1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
    $sig.make(0x19E6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
    $sig.make(0x19E9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
    $sig.make(0x19EA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
    $sig.make(0x19EC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
    $sig.make(0x19EE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
    $sig.make(0x19EF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
    $sig.make(0x19F0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
    $sig.make(0x19F1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
    $sig.make(0x19F2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
    $sig.make(0x19F4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
    $sig.make(0x19F6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
    $sig.make(0x19F8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
    $sig.make(0x19FB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
    $sig.make(0x19FC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
    $sig.make(0x19FE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
    $sig.make(0x1A00, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
    $sig.make(0x1A02, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
    $sig.make(0x1A05, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
    $sig.make(0x1A0D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
    $sig.make(0x1A0F, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
    $sig.make(0x1A12, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
    $sig.make(0x1A14, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
    $sig.make(0x1A17, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
    $sig.make(0x1A18, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_G", 
    $sig.make(0x19A0, $.Byte, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
    $sig.make(0x1A19, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
    $sig.make(0x1A1A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
    $sig.make(0x1A1B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
    $sig.make(0x1A1D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
    $sig.make(0x1A26, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Green", 
    $sig.make(0x1A28, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
    $sig.make(0x1A2A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
    $sig.make(0x1A2D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
    $sig.make(0x1A37, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
    $sig.make(0x1A3B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
    $sig.make(0x1A42, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
    $sig.make(0x1A45, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
    $sig.make(0x1A47, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
    $sig.make(0x1A4B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
    $sig.make(0x1A4D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
    $sig.make(0x1A54, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
    $sig.make(0x1A55, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
    $sig.make(0x1A56, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
    $sig.make(0x1A58, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
    $sig.make(0x1A5B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
    $sig.make(0x1A5D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
    $sig.make(0x1A60, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
    $sig.make(0x1A5E, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
    $sig.make(0x1A71, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
    $sig.make(0x1A7C, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
    $sig.make(0x1A88, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
    $sig.make(0x1A8B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
    $sig.make(0x1A8D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
    $sig.make(0x1A90, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
    $sig.make(0x1A92, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
    $sig.make(0x1A94, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
    $sig.make(0x1A95, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
    $sig.make(0x1A97, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
    $sig.make(0x1A99, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
    $sig.make(0x1A9B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
    $sig.make(0x1A9E, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
    $sig.make(0x1AA0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
    $sig.make(0x1AA1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
    $sig.make(0x1AA9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
    $sig.make(0x1AAB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
    $sig.make(0x1AAD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
    $sig.make(0x1AAF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
    $sig.make(0x1AB1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
    $sig.make(0x1AB4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
    $sig.make(0x1ABC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
    $sig.make(0x1ABE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
    $sig.make(0x1AC0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
    $sig.make(0x1AC2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
    $sig.make(0x1AC3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
    $sig.make(0x1AC6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
    $sig.make(0x1AC8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
    $sig.make(0x1AC9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
    $sig.make(0x1ACF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
    $sig.make(0x1AD1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
    $sig.make(0x1AD2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
    $sig.make(0x1AD3, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PackedValue", 
    $sig.make(0x19A9, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
    $sig.make(0x1AD4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
    $sig.make(0x1AD5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
    $sig.make(0x1AD6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
    $sig.make(0x1AD7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
    $sig.make(0x1AD8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
    $sig.make(0x1AD9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
    $sig.make(0x1ADA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
    $sig.make(0x1ADB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
    $sig.make(0x1ADC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
    $sig.make(0x1ADD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
    $sig.make(0x1ADE, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_R", 
    $sig.make(0x199E, $.Byte, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Red", 
    $sig.make(0x1ADF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
    $sig.make(0x1AE0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
    $sig.make(0x1AE1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
    $sig.make(0x1AE2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
    $sig.make(0x1AE3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
    $sig.make(0x1AE4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
    $sig.make(0x1AE5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
    $sig.make(0x1AE6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
    $sig.make(0x1AE7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
    $sig.make(0x1AE8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
    $sig.make(0x1AE9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
    $sig.make(0x1AEA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
    $sig.make(0x1AEB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
    $sig.make(0x1AEC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
    $sig.make(0x1AED, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
    $sig.make(0x1AEE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
    $sig.make(0x1AEF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
    $sig.make(0x1AF0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
    $sig.make(0x1AF1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
    $sig.make(0x1AF2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
    $sig.make(0x19AD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
    $sig.make(0x1AF3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
    $sig.make(0x1AF6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_White", 
    $sig.make(0x1AF7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
    $sig.make(0x1AF8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
    $sig.make(0x1AF4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
    $sig.make(0x1AF9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
    $sig.make(0x1AFA, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x1B2D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x1B22, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IPackedVector.PackFromVector4", 
    $sig.make(0x1B12, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x1B23, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x1B35, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x1B37, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x1B25, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
    $sig.make(0x1B18, $.UInt32, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_A", 
    $sig.make(0x19A6, null, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_B", 
    $sig.make(0x19A3, null, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_G", 
    $sig.make(0x19A1, null, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PackedValue", 
    $sig.make(0x19AB, null, [$.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_R", 
    $sig.make(0x199F, null, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1B27, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector3", 
    $sig.make(0x1B1E, $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToVector4", 
    $sig.make(0x1B1F, $asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
  );

  $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
  $.Property({Static:false, Public:true }, "R", $.Byte);

  $.Property({Static:false, Public:true }, "G", $.Byte);

  $.Property({Static:false, Public:true }, "B", $.Byte);

  $.Property({Static:false, Public:true }, "A", $.Byte);

  $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Property({Static:true , Public:true }, "Transparent", $.Type);

  $.Property({Static:true , Public:true }, "AliceBlue", $.Type);

  $.Property({Static:true , Public:true }, "AntiqueWhite", $.Type);

  $.Property({Static:true , Public:true }, "Aqua", $.Type);

  $.Property({Static:true , Public:true }, "Aquamarine", $.Type);

  $.Property({Static:true , Public:true }, "Azure", $.Type);

  $.Property({Static:true , Public:true }, "Beige", $.Type);

  $.Property({Static:true , Public:true }, "Bisque", $.Type);

  $.Property({Static:true , Public:true }, "Black", $.Type);

  $.Property({Static:true , Public:true }, "BlanchedAlmond", $.Type);

  $.Property({Static:true , Public:true }, "Blue", $.Type);

  $.Property({Static:true , Public:true }, "BlueViolet", $.Type);

  $.Property({Static:true , Public:true }, "Brown", $.Type);

  $.Property({Static:true , Public:true }, "BurlyWood", $.Type);

  $.Property({Static:true , Public:true }, "CadetBlue", $.Type);

  $.Property({Static:true , Public:true }, "Chartreuse", $.Type);

  $.Property({Static:true , Public:true }, "Chocolate", $.Type);

  $.Property({Static:true , Public:true }, "Coral", $.Type);

  $.Property({Static:true , Public:true }, "CornflowerBlue", $.Type);

  $.Property({Static:true , Public:true }, "Cornsilk", $.Type);

  $.Property({Static:true , Public:true }, "Crimson", $.Type);

  $.Property({Static:true , Public:true }, "Cyan", $.Type);

  $.Property({Static:true , Public:true }, "DarkBlue", $.Type);

  $.Property({Static:true , Public:true }, "DarkCyan", $.Type);

  $.Property({Static:true , Public:true }, "DarkGoldenrod", $.Type);

  $.Property({Static:true , Public:true }, "DarkGray", $.Type);

  $.Property({Static:true , Public:true }, "DarkGreen", $.Type);

  $.Property({Static:true , Public:true }, "DarkKhaki", $.Type);

  $.Property({Static:true , Public:true }, "DarkMagenta", $.Type);

  $.Property({Static:true , Public:true }, "DarkOliveGreen", $.Type);

  $.Property({Static:true , Public:true }, "DarkOrange", $.Type);

  $.Property({Static:true , Public:true }, "DarkOrchid", $.Type);

  $.Property({Static:true , Public:true }, "DarkRed", $.Type);

  $.Property({Static:true , Public:true }, "DarkSalmon", $.Type);

  $.Property({Static:true , Public:true }, "DarkSeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "DarkSlateBlue", $.Type);

  $.Property({Static:true , Public:true }, "DarkSlateGray", $.Type);

  $.Property({Static:true , Public:true }, "DarkTurquoise", $.Type);

  $.Property({Static:true , Public:true }, "DarkViolet", $.Type);

  $.Property({Static:true , Public:true }, "DeepPink", $.Type);

  $.Property({Static:true , Public:true }, "DeepSkyBlue", $.Type);

  $.Property({Static:true , Public:true }, "DimGray", $.Type);

  $.Property({Static:true , Public:true }, "DodgerBlue", $.Type);

  $.Property({Static:true , Public:true }, "Firebrick", $.Type);

  $.Property({Static:true , Public:true }, "FloralWhite", $.Type);

  $.Property({Static:true , Public:true }, "ForestGreen", $.Type);

  $.Property({Static:true , Public:true }, "Fuchsia", $.Type);

  $.Property({Static:true , Public:true }, "Gainsboro", $.Type);

  $.Property({Static:true , Public:true }, "GhostWhite", $.Type);

  $.Property({Static:true , Public:true }, "Gold", $.Type);

  $.Property({Static:true , Public:true }, "Goldenrod", $.Type);

  $.Property({Static:true , Public:true }, "Gray", $.Type);

  $.Property({Static:true , Public:true }, "Green", $.Type);

  $.Property({Static:true , Public:true }, "GreenYellow", $.Type);

  $.Property({Static:true , Public:true }, "Honeydew", $.Type);

  $.Property({Static:true , Public:true }, "HotPink", $.Type);

  $.Property({Static:true , Public:true }, "IndianRed", $.Type);

  $.Property({Static:true , Public:true }, "Indigo", $.Type);

  $.Property({Static:true , Public:true }, "Ivory", $.Type);

  $.Property({Static:true , Public:true }, "Khaki", $.Type);

  $.Property({Static:true , Public:true }, "Lavender", $.Type);

  $.Property({Static:true , Public:true }, "LavenderBlush", $.Type);

  $.Property({Static:true , Public:true }, "LawnGreen", $.Type);

  $.Property({Static:true , Public:true }, "LemonChiffon", $.Type);

  $.Property({Static:true , Public:true }, "LightBlue", $.Type);

  $.Property({Static:true , Public:true }, "LightCoral", $.Type);

  $.Property({Static:true , Public:true }, "LightCyan", $.Type);

  $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $.Type);

  $.Property({Static:true , Public:true }, "LightGreen", $.Type);

  $.Property({Static:true , Public:true }, "LightGray", $.Type);

  $.Property({Static:true , Public:true }, "LightPink", $.Type);

  $.Property({Static:true , Public:true }, "LightSalmon", $.Type);

  $.Property({Static:true , Public:true }, "LightSeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "LightSkyBlue", $.Type);

  $.Property({Static:true , Public:true }, "LightSlateGray", $.Type);

  $.Property({Static:true , Public:true }, "LightSteelBlue", $.Type);

  $.Property({Static:true , Public:true }, "LightYellow", $.Type);

  $.Property({Static:true , Public:true }, "Lime", $.Type);

  $.Property({Static:true , Public:true }, "LimeGreen", $.Type);

  $.Property({Static:true , Public:true }, "Linen", $.Type);

  $.Property({Static:true , Public:true }, "Magenta", $.Type);

  $.Property({Static:true , Public:true }, "Maroon", $.Type);

  $.Property({Static:true , Public:true }, "MediumAquamarine", $.Type);

  $.Property({Static:true , Public:true }, "MediumBlue", $.Type);

  $.Property({Static:true , Public:true }, "MediumOrchid", $.Type);

  $.Property({Static:true , Public:true }, "MediumPurple", $.Type);

  $.Property({Static:true , Public:true }, "MediumSeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "MediumSlateBlue", $.Type);

  $.Property({Static:true , Public:true }, "MediumSpringGreen", $.Type);

  $.Property({Static:true , Public:true }, "MediumTurquoise", $.Type);

  $.Property({Static:true , Public:true }, "MediumVioletRed", $.Type);

  $.Property({Static:true , Public:true }, "MidnightBlue", $.Type);

  $.Property({Static:true , Public:true }, "MintCream", $.Type);

  $.Property({Static:true , Public:true }, "MistyRose", $.Type);

  $.Property({Static:true , Public:true }, "Moccasin", $.Type);

  $.Property({Static:true , Public:true }, "NavajoWhite", $.Type);

  $.Property({Static:true , Public:true }, "Navy", $.Type);

  $.Property({Static:true , Public:true }, "OldLace", $.Type);

  $.Property({Static:true , Public:true }, "Olive", $.Type);

  $.Property({Static:true , Public:true }, "OliveDrab", $.Type);

  $.Property({Static:true , Public:true }, "Orange", $.Type);

  $.Property({Static:true , Public:true }, "OrangeRed", $.Type);

  $.Property({Static:true , Public:true }, "Orchid", $.Type);

  $.Property({Static:true , Public:true }, "PaleGoldenrod", $.Type);

  $.Property({Static:true , Public:true }, "PaleGreen", $.Type);

  $.Property({Static:true , Public:true }, "PaleTurquoise", $.Type);

  $.Property({Static:true , Public:true }, "PaleVioletRed", $.Type);

  $.Property({Static:true , Public:true }, "PapayaWhip", $.Type);

  $.Property({Static:true , Public:true }, "PeachPuff", $.Type);

  $.Property({Static:true , Public:true }, "Peru", $.Type);

  $.Property({Static:true , Public:true }, "Pink", $.Type);

  $.Property({Static:true , Public:true }, "Plum", $.Type);

  $.Property({Static:true , Public:true }, "PowderBlue", $.Type);

  $.Property({Static:true , Public:true }, "Purple", $.Type);

  $.Property({Static:true , Public:true }, "Red", $.Type);

  $.Property({Static:true , Public:true }, "RosyBrown", $.Type);

  $.Property({Static:true , Public:true }, "RoyalBlue", $.Type);

  $.Property({Static:true , Public:true }, "SaddleBrown", $.Type);

  $.Property({Static:true , Public:true }, "Salmon", $.Type);

  $.Property({Static:true , Public:true }, "SandyBrown", $.Type);

  $.Property({Static:true , Public:true }, "SeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "SeaShell", $.Type);

  $.Property({Static:true , Public:true }, "Sienna", $.Type);

  $.Property({Static:true , Public:true }, "Silver", $.Type);

  $.Property({Static:true , Public:true }, "SkyBlue", $.Type);

  $.Property({Static:true , Public:true }, "SlateBlue", $.Type);

  $.Property({Static:true , Public:true }, "SlateGray", $.Type);

  $.Property({Static:true , Public:true }, "Snow", $.Type);

  $.Property({Static:true , Public:true }, "SpringGreen", $.Type);

  $.Property({Static:true , Public:true }, "SteelBlue", $.Type);

  $.Property({Static:true , Public:true }, "Tan", $.Type);

  $.Property({Static:true , Public:true }, "Teal", $.Type);

  $.Property({Static:true , Public:true }, "Thistle", $.Type);

  $.Property({Static:true , Public:true }, "Tomato", $.Type);

  $.Property({Static:true , Public:true }, "Turquoise", $.Type);

  $.Property({Static:true , Public:true }, "Violet", $.Type);

  $.Property({Static:true , Public:true }, "Wheat", $.Type);

  $.Property({Static:true , Public:true }, "White", $.Type);

  $.Property({Static:true , Public:true }, "WhiteSmoke", $.Type);

  $.Property({Static:true , Public:true }, "Yellow", $.Type);

  $.Property({Static:true , Public:true }, "YellowGreen", $.Type);

  $.ImplementInterfaces(
      $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      $asm06.TypeRef("System.IEquatable`1", [$.Type])
  )
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.ColorConverter")]; });

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.PlaneIntersectionType", true, {
    Front: 0, 
    Back: 1, 
    Intersecting: 2
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Plane", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x266E, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2670, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2672, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2674, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dot", 
    $sig.make(0x2683, $.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dot", 
    $sig.make(0x2684, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DotCoordinate", 
    $sig.make(0x2685, $.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DotCoordinate", 
    $sig.make(0x2686, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DotNormal", 
    $sig.make(0x2687, $.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DotNormal", 
    $sig.make(0x2688, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x2676, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x2679, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x267A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x2689, $asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x268A, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x268B, $asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x268C, $asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x268D, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0x267C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x267D, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x267E, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x268E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x268F, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x267B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x267F, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x2680, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x2681, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x2682, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.Field({Static:false, Public:true }, "Normal", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:true }, "D", $.Single); 
  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.PlaneConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Point", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x24DC, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x24DD, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x24DE, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x24DB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x24DF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x24E1, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x24E2, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x24E0, $.String, [], [])
  );

  $.Field({Static:false, Public:true }, "X", $.Int32); 
  $.Field({Static:false, Public:true }, "Y", $.Int32); 
  $.Field({Static:true , Public:false}, "_zero", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA57, null, [], []), 
    function Point__cctor () {
      $thisType._zero = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Zero", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.PointConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Quaternion", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1352, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1353, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x1392, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x1394, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Concatenate", 
    $sig.make(0x138B, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Concatenate", 
    $sig.make(0x138D, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Conjugate", 
    $sig.make(0x136C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
    $sig.make(0x136F, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
    $sig.make(0x1372, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
    $sig.make(0x1379, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
    $sig.make(0x137B, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromRotationMatrix", 
    $sig.make(0x1381, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromRotationMatrix", 
    $sig.make(0x1382, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
    $sig.make(0x137D, $.Type, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
    $sig.make(0x137F, null, [
        $.Single, $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x13AC, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x13AE, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0x1383, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0x1384, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x1355, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x1356, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
    $sig.make(0x1351, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x1359, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Inverse", 
    $sig.make(0x1374, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Inverse", 
    $sig.make(0x1377, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Length", 
    $sig.make(0x1363, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
    $sig.make(0x1360, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x1387, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x1388, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x1399, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x13A0, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x13A3, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x13A7, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x138F, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x1391, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0x1365, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x1367, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x1369, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x13B2, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0x13B6, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x13B0, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x13B1, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x13B4, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x13B5, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x13B3, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x13AF, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Slerp", 
    $sig.make(0x1385, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Slerp", 
    $sig.make(0x1386, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x1396, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x1398, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1354, $.String, [], [])
  );

  $.Field({Static:false, Public:true }, "X", $.Single); 
  $.Field({Static:false, Public:true }, "Y", $.Single); 
  $.Field({Static:false, Public:true }, "Z", $.Single); 
  $.Field({Static:false, Public:true }, "W", $.Single); 
  $.Field({Static:true , Public:false}, "_identity", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA58, null, [], []), 
    function Quaternion__cctor () {
      $thisType._identity = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Identity", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.QuaternionConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Ray", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x5074, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x5075, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x5076, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x5077, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x5079, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x507A, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x507B, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x507C, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x507D, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x507E, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x507F, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x5080, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x5081, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x5078, $.String, [], [])
  );

  $.Field({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.Field({Static:false, Public:true }, "Direction", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.RayConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Rectangle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1839, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x1845, $.Boolean, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ContainsPoint", 
    $sig.make(0x184B, $.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ContainsPoint", 
    $sig.make(0x1850, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ContainsRectangle", 
    $sig.make(0x1853, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ContainsRectangle", 
    $sig.make(0x1857, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x1867, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x1869, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
    $sig.make(0x1831, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Center", 
    $sig.make(0x1835, $asm01.TypeRef("Microsoft.Xna.Framework.Point"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
    $sig.make(0x1836, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x1837, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x182D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Location", 
    $sig.make(0x1833, $asm01.TypeRef("Microsoft.Xna.Framework.Point"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x182E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Top", 
    $sig.make(0x182F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x186C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Inflate", 
    $sig.make(0x1842, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x1860, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x1862, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x185A, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersects", 
    $sig.make(0x185D, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OffsetPoint", 
    $sig.make(0x183C, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x1840, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x186D, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x186E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Location", 
    $sig.make(0x1834, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x186B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x1864, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x1866, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.Field({Static:false, Public:true }, "X", $.Int32); 
  $.Field({Static:false, Public:true }, "Y", $.Int32); 
  $.Field({Static:false, Public:true }, "Width", $.Int32); 
  $.Field({Static:false, Public:true }, "Height", $.Int32); 
  $.Field({Static:true , Public:false}, "_empty", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA59, null, [], []), 
    function Rectangle__cctor () {
      $thisType._empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "Left", $.Int32);

  $.Property({Static:false, Public:true }, "Right", $.Int32);

  $.Property({Static:false, Public:true }, "Top", $.Int32);

  $.Property({Static:false, Public:true }, "Bottom", $.Int32);

  $.Property({Static:false, Public:true }, "Location", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

  $.Property({Static:false, Public:true }, "Center", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

  $.Property({Static:true , Public:true }, "Empty", $.Type);

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.RectangleConverter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Vector2", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xDA, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xDB, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x117, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x118, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0x100, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0x102, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0x105, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0x106, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0xFB, $.Type, [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0xFC, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0xE2, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0xE3, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
    $sig.make(0xE4, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
    $sig.make(0xE5, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x11F, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x120, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
    $sig.make(0x121, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
    $sig.make(0x122, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0xE6, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0xE9, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0xDD, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xDE, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_One", 
    $sig.make(0xD7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
    $sig.make(0xD8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
    $sig.make(0xD9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0xD6, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xDF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0x107, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0x108, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Length", 
    $sig.make(0xE0, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
    $sig.make(0xE1, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0xFD, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0xFF, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0xF9, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0xFA, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0xF7, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0xF8, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x11B, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x11C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
    $sig.make(0x11D, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
    $sig.make(0x11E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x115, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x116, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0xEB, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0xF3, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0xF4, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x126, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0x12F, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_DivisionScalar", 
    $sig.make(0x130, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x124, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x125, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x129, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalar", 
    $sig.make(0x12C, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalarLeft", 
    $sig.make(0x12E, $.Type, [$.Single, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x128, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x123, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reflect", 
    $sig.make(0xF5, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reflect", 
    $sig.make(0xF6, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0x103, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0x104, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x119, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x11A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xDC, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x109, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x10A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x10D, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x10E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x10F, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x110, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x113, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x114, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x10B, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x10C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x111, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x112, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:false, Public:true }, "X", $.Single); 
  $.Field({Static:false, Public:true }, "Y", $.Single); 
  $.Field({Static:true , Public:false}, "_zero", $.Type); 
  $.Field({Static:true , Public:false}, "_one", $.Type); 
  $.Field({Static:true , Public:false}, "_unitX", $.Type); 
  $.Field({Static:true , Public:false}, "_unitY", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA5A, null, [], []), 
    function Vector2__cctor () {
      $thisType._zero = new $thisType();
      $thisType._one = new $thisType();
      $thisType._unitX = new $thisType();
      $thisType._unitY = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Zero", $.Type);

  $.Property({Static:true , Public:true }, "One", $.Type);

  $.Property({Static:true , Public:true }, "UnitX", $.Type);

  $.Property({Static:true , Public:true }, "UnitY", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.Vector2Converter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Vector3", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x23C6, null, [
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x23C8, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x23CA, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x2422, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x2423, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0x23FD, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0x23FF, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0x2405, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0x2406, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0x23F5, $.Type, [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0x23F8, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Cross", 
    $sig.make(0x23EB, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Cross", 
    $sig.make(0x23ED, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0x23D1, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0x23D2, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
    $sig.make(0x23D3, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
    $sig.make(0x23D6, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x242D, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x2430, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
    $sig.make(0x2433, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
    $sig.make(0x2437, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0x23D9, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0x23DC, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x23CC, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x23CD, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Backward", 
    $sig.make(0x23C5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Down", 
    $sig.make(0x23BB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Forward", 
    $sig.make(0x23C4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Left", 
    $sig.make(0x23C2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_One", 
    $sig.make(0x23AE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Right", 
    $sig.make(0x23BE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
    $sig.make(0x23B0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
    $sig.make(0x23B3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitZ", 
    $sig.make(0x23B6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Up", 
    $sig.make(0x23B8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x23AC, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x23CE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0x2407, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0x2408, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Length", 
    $sig.make(0x23CF, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
    $sig.make(0x23D0, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x23F9, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x23FB, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x23F2, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x23F4, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x23F0, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x23F1, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x2426, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x2427, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
    $sig.make(0x2428, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
    $sig.make(0x242A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x2420, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x2421, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0x23DF, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x23E4, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x23E8, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x243D, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0x2447, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_DivisionScalar", 
    $sig.make(0x244C, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x2439, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x243A, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x2440, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalar", 
    $sig.make(0x2442, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalarLeft", 
    $sig.make(0x2444, $.Type, [$.Single, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x243E, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x2438, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reflect", 
    $sig.make(0x23EE, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reflect", 
    $sig.make(0x23EF, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0x2401, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0x2403, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x2424, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x2425, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x23CB, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x2409, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x240A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x240E, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x240F, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x2411, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x2417, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x241E, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x241F, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x240B, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x240D, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x2419, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
    $sig.make(0x241B, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:false, Public:true }, "X", $.Single); 
  $.Field({Static:false, Public:true }, "Y", $.Single); 
  $.Field({Static:false, Public:true }, "Z", $.Single); 
  $.Field({Static:true , Public:false}, "_zero", $.Type); 
  $.Field({Static:true , Public:false}, "_one", $.Type); 
  $.Field({Static:true , Public:false}, "_unitX", $.Type); 
  $.Field({Static:true , Public:false}, "_unitY", $.Type); 
  $.Field({Static:true , Public:false}, "_unitZ", $.Type); 
  $.Field({Static:true , Public:false}, "_up", $.Type); 
  $.Field({Static:true , Public:false}, "_down", $.Type); 
  $.Field({Static:true , Public:false}, "_right", $.Type); 
  $.Field({Static:true , Public:false}, "_left", $.Type); 
  $.Field({Static:true , Public:false}, "_forward", $.Type); 
  $.Field({Static:true , Public:false}, "_backward", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA5B, null, [], []), 
    function Vector3__cctor () {
      $thisType._zero = new $thisType();
      $thisType._one = new $thisType();
      $thisType._unitX = new $thisType();
      $thisType._unitY = new $thisType();
      $thisType._unitZ = new $thisType();
      $thisType._up = new $thisType();
      $thisType._down = new $thisType();
      $thisType._right = new $thisType();
      $thisType._left = new $thisType();
      $thisType._forward = new $thisType();
      $thisType._backward = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Zero", $.Type);

  $.Property({Static:true , Public:true }, "One", $.Type);

  $.Property({Static:true , Public:true }, "UnitX", $.Type);

  $.Property({Static:true , Public:true }, "UnitY", $.Type);

  $.Property({Static:true , Public:true }, "UnitZ", $.Type);

  $.Property({Static:true , Public:true }, "Up", $.Type);

  $.Property({Static:true , Public:true }, "Down", $.Type);

  $.Property({Static:true , Public:true }, "Right", $.Type);

  $.Property({Static:true , Public:true }, "Left", $.Type);

  $.Property({Static:true , Public:true }, "Forward", $.Type);

  $.Property({Static:true , Public:true }, "Backward", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.Vector3Converter")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "Microsoft.Xna.Framework.Vector4", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1C0D, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1C0F, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1C10, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1C12, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x1C4B, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x1C4C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0x1C2B, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
    $sig.make(0x1C2C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0x1C2F, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
    $sig.make(0x1C30, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0x1C27, $.Type, [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Clamp", 
    $sig.make(0x1C28, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0x1C1A, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distance", 
    $sig.make(0x1C1B, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
    $sig.make(0x1C1C, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
    $sig.make(0x1C1D, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x1C54, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x1C55, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
    $sig.make(0x1C58, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
    $sig.make(0x1C5A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0x1C1E, $.Single, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dot", 
    $sig.make(0x1C1F, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x1C15, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x1C16, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_One", 
    $sig.make(0x1BFF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitW", 
    $sig.make(0x1C0A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
    $sig.make(0x1C01, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
    $sig.make(0x1C06, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UnitZ", 
    $sig.make(0x1C08, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x1BFD, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x1C17, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0x1C31, $.Type, [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Hermite", 
    $sig.make(0x1C32, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Length", 
    $sig.make(0x1C18, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
    $sig.make(0x1C19, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x1C29, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lerp", 
    $sig.make(0x1C2A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x1C25, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x1C26, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1C23, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1C24, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x1C4F, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x1C50, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
    $sig.make(0x1C51, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
    $sig.make(0x1C52, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x1C46, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x1C49, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Normalize", 
    $sig.make(0x1C20, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x1C21, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Normalize", 
    $sig.make(0x1C22, null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x1C6B, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Division", 
    $sig.make(0x1C7F, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_DivisionScalar", 
    $sig.make(0x1C84, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x1C62, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x1C65, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
    $sig.make(0x1C70, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalar", 
    $sig.make(0x1C72, $.Type, [$.Type, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalarLeft", 
    $sig.make(0x1C76, $.Type, [$.Single, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x1C6D, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x1C61, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0x1C2D, $.Type, [
        $.Type, $.Type, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
    $sig.make(0x1C2E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x1C4D, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x1C4E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1C14, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C33, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C34, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C35, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C36, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C37, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C38, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C39, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C3A, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C3B, $.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C3C, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C3D, $.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C3E, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C3F, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C40, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C41, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Transform", 
    $sig.make(0x1C45, null, [
        $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Int32, $.Int32
      ], [])
  );

  $.Field({Static:false, Public:true }, "X", $.Single); 
  $.Field({Static:false, Public:true }, "Y", $.Single); 
  $.Field({Static:false, Public:true }, "Z", $.Single); 
  $.Field({Static:false, Public:true }, "W", $.Single); 
  $.Field({Static:true , Public:false}, "_zero", $.Type); 
  $.Field({Static:true , Public:false}, "_one", $.Type); 
  $.Field({Static:true , Public:false}, "_unitX", $.Type); 
  $.Field({Static:true , Public:false}, "_unitY", $.Type); 
  $.Field({Static:true , Public:false}, "_unitZ", $.Type); 
  $.Field({Static:true , Public:false}, "_unitW", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA5C, null, [], []), 
    function Vector4__cctor () {
      $thisType._zero = new $thisType();
      $thisType._one = new $thisType();
      $thisType._unitX = new $thisType();
      $thisType._unitY = new $thisType();
      $thisType._unitZ = new $thisType();
      $thisType._unitW = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Zero", $.Type);

  $.Property({Static:true , Public:true }, "One", $.Type);

  $.Property({Static:true , Public:true }, "UnitX", $.Type);

  $.Property({Static:true , Public:true }, "UnitY", $.Type);

  $.Property({Static:true , Public:true }, "UnitZ", $.Type);

  $.Property({Static:true , Public:true }, "UnitW", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.TypeRef("Microsoft.Xna.Framework.Design.Vector4Converter")]; });

JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Pack", 
    $sig.make(0xD5FD, $.UInt16, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Unpack", 
    $sig.make(0xD5FE, $.Single, [$.UInt16], [])
  );

  $.Constant({Static:true , Public:false}, "cFracBits", 10); 
  $.Constant({Static:true , Public:false}, "cExpBits", 5); 
  $.Constant({Static:true , Public:false}, "cSignBit", 15); 
  $.Constant({Static:true , Public:false}, "cSignMask", 32768); 
  $.Constant({Static:true , Public:false}, "cFracMask", 1023); 
  $.Constant({Static:true , Public:false}, "cExpBias", 15); 
  $.Constant({Static:true , Public:false}, "cRoundBit", 4096); 
  $.Constant({Static:true , Public:false}, "eMax", 16); 
  $.Constant({Static:true , Public:false}, "eMin", -14); 
  $.Constant({Static:true , Public:false}, "wMaxNormal", 1207955455); 
  $.Constant({Static:true , Public:false}, "wMinNormal", 947912704); 
  $.Constant({Static:true , Public:false}, "BiasDiffo", 3355443200); 
  $.Constant({Static:true , Public:false}, "cFracBitsDiff", 13); 
});

