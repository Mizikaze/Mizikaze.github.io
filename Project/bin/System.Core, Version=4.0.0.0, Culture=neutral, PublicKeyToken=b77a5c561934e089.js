/* Generated by JSIL v0.6.0 build 23610. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm09 = JSIL.DeclareAssembly("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Diagnostics");
JSIL.DeclareNamespace("System.Diagnostics.Eventing");
JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Diagnostics.Eventing.EventDescriptor", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14EAF, null, [
        $.Int32, $.Byte, 
        $.Byte, $.Byte, 
        $.Byte, $.Int32, 
        $.Int64
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
    $sig.make(0x14EA7, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EventId", 
    $sig.make(0x14EA1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
    $sig.make(0x14EAB, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Level", 
    $sig.make(0x14EA8, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
    $sig.make(0x14EA9, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Task", 
    $sig.make(0x14EAA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x14EA5, $.Byte, [], [])
  );

  $.Field({Static:false, Public:false}, "m_id", $.UInt16); 
  $.Field({Static:false, Public:false}, "m_version", $.Byte); 
  $.Field({Static:false, Public:false}, "m_channel", $.Byte); 
  $.Field({Static:false, Public:false}, "m_level", $.Byte); 
  $.Field({Static:false, Public:false}, "m_opcode", $.Byte); 
  $.Field({Static:false, Public:false}, "m_task", $.UInt16); 
  $.Field({Static:false, Public:false}, "m_keywords", $.Int64); 
  $.Property({Static:false, Public:true }, "EventId", $.Int32);

  $.Property({Static:false, Public:true }, "Version", $.Byte);

  $.Property({Static:false, Public:true }, "Channel", $.Byte);

  $.Property({Static:false, Public:true }, "Level", $.Byte);

  $.Property({Static:false, Public:true }, "Opcode", $.Byte);

  $.Property({Static:false, Public:true }, "Task", $.Int32);

  $.Property({Static:false, Public:true }, "Keywords", $.Int64);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.EventProvider", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15121, null, [$asm06.TypeRef("System.Guid")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x1512A, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateActivityId", 
    $sig.make(0x1514A, $asm06.TypeRef("System.Guid"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Deregister", 
    $sig.make(0x1512E, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15126, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15129, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "EtwRegister", 
    $sig.make(0x15123, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x1512C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
    $sig.make(0x15146, $asm06.TypeRef("System.Guid"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GetLastWriteEventError", 
    $sig.make(0x15134, $asm09.TypeRef("System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
    $sig.make(0x15131, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
    $sig.make(0x15133, $.Boolean, [$.Byte, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
    $sig.make(0x15148, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetLastError", 
    $sig.make(0x15135, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
    $sig.make(0x15139, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
    $sig.make(0x1513C, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
    $sig.make(0x1513E, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
    $sig.make(0x15137, $.Boolean, [
        $.String, $.Byte, 
        $.Int64
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
    $sig.make(0x15138, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteTransferEvent", 
    $sig.make(0x15141, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm06.TypeRef("System.Guid"), 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
    $sig.make(0x15144, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm06.TypeRef("System.Guid"), 
        $.Int32, $asm06.TypeRef("System.IntPtr")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Constant({Static:true , Public:false}, "s_basicTypeAllocationBufferSize", 16); 
  $.Constant({Static:true , Public:false}, "s_etwMaxMumberArguments", 32); 
  $.Constant({Static:true , Public:false}, "s_etwAPIMaxStringCount", 8); 
  $.Constant({Static:true , Public:false}, "s_maxEventDataDescriptors", 128); 
  $.Constant({Static:true , Public:false}, "s_traceEventMaximumSize", 65482); 
  $.Constant({Static:true , Public:false}, "s_traceEventMaximumStringSize", 32724); 
  $.Field({Static:false, Public:false}, "m_regHandle", $.Int64); 
  $.Field({Static:false, Public:false}, "m_level", $.Byte); 
  $.Field({Static:false, Public:false}, "m_anyKeywordMask", $.Int64); 
  $.Field({Static:false, Public:false}, "m_allKeywordMask", $.Int64); 
  $.Field({Static:false, Public:false}, "m_enabled", $.Int32); 
  $.Field({Static:false, Public:false}, "m_providerId", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "m_disposed", $.Int32); 
  $.Field({Static:true , Public:false}, "s_returnCodeSlot", $asm06.TypeRef("System.LocalDataStoreSlot")); 
  $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean); 
  $.Field({Static:true , Public:false}, "s_preWin7", $.Boolean); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode", false, {
    NoError: 0, 
    NoFreeBuffers: 1, 
    EventTooBig: 2
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Diagnostics.Eventing.EventProvider/EventData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "DataPointer", $.UInt64); 
  $.Field({Static:false, Public:false}, "Size", $.UInt32); 
  $.Field({Static:false, Public:false}, "Reserved", $.Int32); 
});

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.EventProvider/ActivityControl", false, {
    EVENT_ACTIVITY_CTRL_GET_ID: 1, 
    EVENT_ACTIVITY_CTRL_SET_ID: 2, 
    EVENT_ACTIVITY_CTRL_CREATE_ID: 3, 
    EVENT_ACTIVITY_CTRL_GET_SET_ID: 4, 
    EVENT_ACTIVITY_CTRL_CREATE_SET_ID: 5
  }, false
);

JSIL.MakeClass($asm07.TypeRef("System.Diagnostics.TraceListener"), "System.Diagnostics.Eventing.EventProviderTraceListener", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1521F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15220, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15221, null, [
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x1522A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Fail", 
    $sig.make(0x1523B, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x15224, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
    $sig.make(0x15216, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsThreadSafe", 
    $sig.make(0x1521A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSupportedAttributes", 
    $sig.make(0x1521E, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitProvider", 
    $sig.make(0x15223, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Delimiter", 
    $sig.make(0x15218, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceData", 
    $sig.make(0x15232, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceData", 
    $sig.make(0x15235, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceEvent", 
    $sig.make(0x15237, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceEvent", 
    $sig.make(0x15239, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceEvent", 
    $sig.make(0x1523A, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $.String, $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceTransfer", 
    $sig.make(0x1523D, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $.Int32, $.String, 
        $asm06.TypeRef("System.Guid")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x1522C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteLine", 
    $sig.make(0x1522D, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "s_nullStringValue", "null"); 
  $.Constant({Static:true , Public:false}, "s_nullStringComaValue", "null,"); 
  $.Constant({Static:true , Public:false}, "s_nullCStringValue", ": null"); 
  $.Constant({Static:true , Public:false}, "s_activityIdString", "activityId="); 
  $.Constant({Static:true , Public:false}, "s_relatedActivityIdString", "relatedActivityId="); 
  $.Constant({Static:true , Public:false}, "s_callStackString", " : CallStack:"); 
  $.Constant({Static:true , Public:false}, "s_optionDelimiter", "delimiter"); 
  $.Constant({Static:true , Public:false}, "s_keyWordMask", 4294967040); 
  $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", 512); 
  $.Field({Static:false, Public:false}, "m_provider", $asm09.TypeRef("System.Diagnostics.Eventing.EventProvider")); 
  $.Field({Static:false, Public:false}, "m_delimiter", $.String); 
  $.Field({Static:false, Public:false}, "m_initializedDelim", $.Int32); 
  $.Field({Static:false, Public:false}, "m_Lock", $.Object); 
  $.Property({Static:false, Public:true }, "Delimiter", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

});

JSIL.DeclareNamespace("System.Management");
JSIL.DeclareNamespace("System.Management.Instrumentation");
JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementEntityAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1533D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_External", 
    $sig.make(0x15332, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15328, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Singleton", 
    $sig.make(0x15339, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_External", 
    $sig.make(0x15336, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x1532A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Singleton", 
    $sig.make(0x1533B, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "_nounName", $.String); 
  $.Field({Static:false, Public:false}, "_isExternalClass", $.Boolean); 
  $.Field({Static:false, Public:false}, "_isSingleton", $.Boolean); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "External", $.Boolean);

  $.Property({Static:false, Public:true }, "Singleton", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Class]; });

JSIL.MakeEnum(
  "System.Management.Instrumentation.ManagementHostingModel", true, {
    Decoupled: 0, 
    NetworkService: 1, 
    LocalService: 2, 
    LocalSystem: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Management.Instrumentation.WmiConfigurationAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x153A5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HostingGroup", 
    $sig.make(0x1539F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HostingModel", 
    $sig.make(0x1539A, $asm09.TypeRef("System.Management.Instrumentation.ManagementHostingModel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IdentifyLevel", 
    $sig.make(0x15397, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NamespaceSecurity", 
    $sig.make(0x15393, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
    $sig.make(0x153A2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SecurityRestriction", 
    $sig.make(0x15391, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HostingGroup", 
    $sig.make(0x153A1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HostingModel", 
    $sig.make(0x1539C, null, [$asm09.TypeRef("System.Management.Instrumentation.ManagementHostingModel")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IdentifyLevel", 
    $sig.make(0x15399, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NamespaceSecurity", 
    $sig.make(0x15394, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SecurityRestriction", 
    $sig.make(0x15392, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "_Scope", $.String); 
  $.Field({Static:false, Public:false}, "_SecurityRestriction", $.String); 
  $.Field({Static:false, Public:false}, "_NamespaceSecurity", $.String); 
  $.Field({Static:false, Public:false}, "_HostingModel", $asm09.TypeRef("System.Management.Instrumentation.ManagementHostingModel")); 
  $.Field({Static:false, Public:false}, "_HostingGroup", $.String); 
  $.Field({Static:false, Public:false}, "_IdentifyLevel", $.Boolean); 
  $.Property({Static:false, Public:true }, "SecurityRestriction", $.String);

  $.Property({Static:false, Public:true }, "NamespaceSecurity", $.String);

  $.Property({Static:false, Public:true }, "IdentifyLevel", $.Boolean);

  $.Property({Static:false, Public:true }, "HostingModel", $asm09.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

  $.Property({Static:false, Public:true }, "HostingGroup", $.String);

  $.Property({Static:false, Public:true }, "Scope", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Assembly]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementMemberAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x153CE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x153CC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Name", 
    $sig.make(0x153CD, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "_Name", $.String); 
  $.Property({Static:false, Public:true }, "Name", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementNewInstanceAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15451, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Constructor", "Method")]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), "System.Management.Instrumentation.ManagementBindAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15482, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x15478, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x1547F, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "_schema", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Schema", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Constructor", "Method")]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), "System.Management.Instrumentation.ManagementCreateAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15498, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Constructor", "Method")]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementRemoveAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x154AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x154AD, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x154AE, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "_schema", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Schema", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Method]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), "System.Management.Instrumentation.ManagementEnumeratorAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x154C0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x154BB, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x154BE, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "_schema", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Schema", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Constructor", "Method")]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementProbeAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15538, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x15533, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x15535, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "_schema", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Schema", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Property")]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementTaskAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1556C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x15569, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x1556B, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "_schema", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Schema", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Method]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementKeyAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15579, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Property")]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementReferenceAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1559D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1559A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x1559C, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "_Type", $.String); 
  $.Property({Static:false, Public:true }, "Type", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

JSIL.MakeEnum(
  "System.Management.Instrumentation.ManagementConfigurationType", true, {
    Apply: 0, 
    OnCommit: 1
  }, false
);

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementConfigurationAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x155B4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
    $sig.make(0x155B0, $asm09.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
    $sig.make(0x155B2, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
    $sig.make(0x155B1, null, [$asm09.TypeRef("System.Management.Instrumentation.ManagementConfigurationType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
    $sig.make(0x155B3, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false}, "updateMode", $asm09.TypeRef("System.Management.Instrumentation.ManagementConfigurationType")); 
  $.Field({Static:false, Public:false}, "_schema", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Mode", $asm09.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

  $.Property({Static:false, Public:true }, "Schema", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Field", "Property")]; });

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementCommitAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x155C1, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Method]; });

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementNameAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x155E3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x155E1, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_Name", $.String); 
  $.Property({Static:false, Public:true }, "Name", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Parameter]; });

JSIL.MakeClass($asm06.TypeRef("System.Exception"), "System.Management.Instrumentation.InstrumentationBaseException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1565F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15660, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15661, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15662, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.InstrumentationBaseException"), "System.Management.Instrumentation.InstrumentationException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x156EF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x156F0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x156F1, null, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x156F2, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x156F3, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Management.Instrumentation.InstrumentationException"), "System.Management.Instrumentation.InstanceNotFoundException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15740, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15741, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15743, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15745, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

});

JSIL.DeclareNamespace("System.Diagnostics.Eventing.Reader");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventBookmark", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15742, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15744, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_BookmarkText", 
    $sig.make(0x1573F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
    $sig.make(0x15747, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "ISerializable.GetObjectData", 
    $sig.make(0x15746, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "bookmark", $.String); 
  $.Property({Static:false, Public:false}, "BookmarkText", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.Runtime.Serialization.ISerializable"))
});

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogType", true, {
    Administrative: 0, 
    Operational: 1, 
    Analytical: 2, 
    Debug: 3
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogIsolation", true, {
    Application: 0, 
    System: 1, 
    Custom: 2
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogMode", true, {
    Circular: 0, 
    AutoBackup: 1, 
    Retain: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogConfiguration", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15819, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1581A, null, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x1581E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15820, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_IsClassicLog", 
    $sig.make(0x157F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEnabled", 
    $sig.make(0x157F4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogFilePath", 
    $sig.make(0x157FE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogIsolation", 
    $sig.make(0x157F1, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogMode", 
    $sig.make(0x15806, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
    $sig.make(0x157EC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogType", 
    $sig.make(0x157F0, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaximumSizeInBytes", 
    $sig.make(0x15802, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OwningProviderName", 
    $sig.make(0x15809, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderBufferSize", 
    $sig.make(0x15813, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderControlGuid", 
    $sig.make(0x15817, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderKeywords", 
    $sig.make(0x15811, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderLatency", 
    $sig.make(0x15816, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderLevel", 
    $sig.make(0x1580E, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderMaximumNumberOfBuffers", 
    $sig.make(0x15815, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderMinimumNumberOfBuffers", 
    $sig.make(0x15814, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderNames", 
    $sig.make(0x1580C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SecurityDescriptor", 
    $sig.make(0x157FB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SaveChanges", 
    $sig.make(0x1581D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsEnabled", 
    $sig.make(0x157F7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LogFilePath", 
    $sig.make(0x15800, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LogMode", 
    $sig.make(0x15807, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaximumSizeInBytes", 
    $sig.make(0x15803, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ProviderKeywords", 
    $sig.make(0x15812, null, [$asm06.TypeRef("System.Nullable`1", [$.Int64])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ProviderLevel", 
    $sig.make(0x1580F, null, [$asm06.TypeRef("System.Nullable`1", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SecurityDescriptor", 
    $sig.make(0x157FD, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "session", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
  $.Field({Static:false, Public:false}, "channelName", $.String); 
  $.Property({Static:false, Public:true }, "LogName", $.String);

  $.Property({Static:false, Public:true }, "LogType", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"));

  $.Property({Static:false, Public:true }, "LogIsolation", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"));

  $.Property({Static:false, Public:true }, "IsEnabled", $.Boolean);

  $.Property({Static:false, Public:true }, "IsClassicLog", $.Boolean);

  $.Property({Static:false, Public:true }, "SecurityDescriptor", $.String);

  $.Property({Static:false, Public:true }, "LogFilePath", $.String);

  $.Property({Static:false, Public:true }, "MaximumSizeInBytes", $.Int64);

  $.Property({Static:false, Public:true }, "LogMode", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"));

  $.Property({Static:false, Public:true }, "OwningProviderName", $.String);

  $.Property({Static:false, Public:true }, "ProviderNames", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

  $.Property({Static:false, Public:true }, "ProviderLevel", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true }, "ProviderKeywords", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true }, "ProviderBufferSize", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true }, "ProviderMinimumNumberOfBuffers", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true }, "ProviderMaximumNumberOfBuffers", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true }, "ProviderLatency", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true }, "ProviderControlGuid", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogLink", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A5F, null, [$.UInt32, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A60, null, [
        $.String, $.Boolean, 
        $.String, $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ChannelId", 
    $sig.make(0x15A5E, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x15A5D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsImported", 
    $sig.make(0x15A5C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
    $sig.make(0x15A5B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
    $sig.make(0x15A61, null, [], [])
  );

  $.Field({Static:false, Public:false}, "channelName", $.String); 
  $.Field({Static:false, Public:false}, "isImported", $.Boolean); 
  $.Field({Static:false, Public:false}, "displayName", $.String); 
  $.Field({Static:false, Public:false}, "channelId", $.UInt32); 
  $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "pmReference", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Property({Static:false, Public:true }, "LogName", $.String);

  $.Property({Static:false, Public:true }, "IsImported", $.Boolean);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

  $.Property({Static:false, Public:false}, "ChannelId", $.UInt32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogStatus", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B49, null, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
    $sig.make(0x15B45, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
    $sig.make(0x15B47, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "channelName", $.String); 
  $.Field({Static:false, Public:false}, "win32ErrorCode", $.Int32); 
  $.Property({Static:false, Public:true }, "LogName", $.String);

  $.Property({Static:false, Public:true }, "StatusCode", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventProperty", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x156B7, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x156B6, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "value", $.Object); 
  $.Property({Static:false, Public:true }, "Value", $.Object);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogPropertySelector", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x156D9, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x156DA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x156DB, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0x156D8, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
  );

  $.Field({Static:false, Public:false}, "renderContextHandleValues", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Property({Static:false, Public:false}, "Handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventRecord", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15732, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15730, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15731, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FormatDescription", 
    $sig.make(0x1572D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FormatDescription", 
    $sig.make(0x1572E, $.String, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ActivityId", 
    $sig.make(0x15724, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bookmark", 
    $sig.make(0x1572B, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0x15715, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
    $sig.make(0x1571A, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeywordsDisplayNames", 
    $sig.make(0x1572A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Level", 
    $sig.make(0x15717, $asm06.TypeRef("System.Nullable`1", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LevelDisplayName", 
    $sig.make(0x15727, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
    $sig.make(0x1571E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
    $sig.make(0x15721, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
    $sig.make(0x15719, $asm06.TypeRef("System.Nullable`1", [$.Int16]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OpcodeDisplayName", 
    $sig.make(0x15728, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProcessId", 
    $sig.make(0x1571F, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x1572C, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderId", 
    $sig.make(0x1571D, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
    $sig.make(0x1571C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Qualifiers", 
    $sig.make(0x15726, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecordId", 
    $sig.make(0x1571B, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RelatedActivityId", 
    $sig.make(0x15725, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Task", 
    $sig.make(0x15718, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TaskDisplayName", 
    $sig.make(0x15729, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ThreadId", 
    $sig.make(0x15720, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TimeCreated", 
    $sig.make(0x15723, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UserId", 
    $sig.make(0x15722, $asm06.TypeRef("System.Security.Principal.SecurityIdentifier"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x15716, $asm06.TypeRef("System.Nullable`1", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXml", 
    $sig.make(0x1572F, $.String, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm06.TypeRef("System.Nullable`1", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm06.TypeRef("System.Nullable`1", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm06.TypeRef("System.Nullable`1", [$.Int16]));

  $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm06.TypeRef("System.Security.Principal.SecurityIdentifier"));

  $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]));

  $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

  $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventKeyword", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15768, null, [$.Int64, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15769, null, [
        $.String, $.Int64, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x15767, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15764, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x15766, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
    $sig.make(0x1576B, null, [], [])
  );

  $.Field({Static:false, Public:false}, "value", $.Int64); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "displayName", $.String); 
  $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "pmReference", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Value", $.Int64);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLevel", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A52, null, [$.Int32, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A53, null, [
        $.String, $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x15A51, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15A4F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x15A50, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
    $sig.make(0x15A54, null, [], [])
  );

  $.Field({Static:false, Public:false}, "value", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "displayName", $.String); 
  $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "pmReference", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Value", $.Int32);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

});

JSIL.MakeClass($asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), "System.Diagnostics.Eventing.Reader.EventLogRecord", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15AD6, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15ADC, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "FormatDescription", 
    $sig.make(0x15AD8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FormatDescription", 
    $sig.make(0x15AD9, $.String, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ActivityId", 
    $sig.make(0x15ACC, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bookmark", 
    $sig.make(0x15AD0, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_ContainerLog", 
    $sig.make(0x15ACE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0x15ABB, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0x15ABC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
    $sig.make(0x15AC2, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeywordsDisplayNames", 
    $sig.make(0x15AD4, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Level", 
    $sig.make(0x15ABF, $asm06.TypeRef("System.Nullable`1", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LevelDisplayName", 
    $sig.make(0x15AD1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
    $sig.make(0x15AC6, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
    $sig.make(0x15AC9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MatchedQueryIds", 
    $sig.make(0x15ACF, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
    $sig.make(0x15AC1, $asm06.TypeRef("System.Nullable`1", [$.Int16]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OpcodeDisplayName", 
    $sig.make(0x15AD2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProcessId", 
    $sig.make(0x15AC7, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x15AD5, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderId", 
    $sig.make(0x15AC5, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
    $sig.make(0x15AC4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Qualifiers", 
    $sig.make(0x15ABE, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecordId", 
    $sig.make(0x15AC3, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RelatedActivityId", 
    $sig.make(0x15ACD, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Task", 
    $sig.make(0x15AC0, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TaskDisplayName", 
    $sig.make(0x15AD3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ThreadId", 
    $sig.make(0x15AC8, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TimeCreated", 
    $sig.make(0x15ACB, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UserId", 
    $sig.make(0x15ACA, $asm06.TypeRef("System.Security.Principal.SecurityIdentifier"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x15ABD, $asm06.TypeRef("System.Nullable`1", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetBookmarkHandleFromBookmark", 
    $sig.make(0x15ADD, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetPropertyValues", 
    $sig.make(0x15ADA, $asm06.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogPropertySelector")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareSystemData", 
    $sig.make(0x15AD7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXml", 
    $sig.make(0x15ADB, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.Constant({Static:true , Public:false}, "SYSTEM_PROPERTY_COUNT", 18); 
  $.Field({Static:false, Public:false}, "handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute")); 
  $.Field({Static:false, Public:false}, "session", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
  $.Field({Static:false, Public:false}, "systemProperties", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties")); 
  $.Field({Static:false, Public:false}, "containerChannel", $.String); 
  $.Field({Static:false, Public:false}, "matchedQueryIds", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Field({Static:false, Public:false}, "levelName", $.String); 
  $.Field({Static:false, Public:false}, "taskName", $.String); 
  $.Field({Static:false, Public:false}, "opcodeName", $.String); 
  $.Field({Static:false, Public:false}, "keywordsNames", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])); 
  $.Field({Static:false, Public:false}, "levelNameReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "taskNameReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "opcodeNameReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
  $.Property({Static:false, Public:false}, "Handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

  $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm06.TypeRef("System.Nullable`1", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm06.TypeRef("System.Nullable`1", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm06.TypeRef("System.Nullable`1", [$.Int16]));

  $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm06.TypeRef("System.Security.Principal.SecurityIdentifier"));

  $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]));

  $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")]));

  $.Property({Static:false, Public:true }, "ContainerLog", $.String);

  $.Property({Static:false, Public:true }, "MatchedQueryIds", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]));

  $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

  $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

  $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogReader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CED, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CEE, null, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CEF, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CF0, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CancelReading", 
    $sig.make(0x15CFB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15CF4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15CF5, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_BatchSize", 
    $sig.make(0x15CEA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogStatus", 
    $sig.make(0x15CEC, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "GetNextBatch", 
    $sig.make(0x15CF1, $.Boolean, [$asm06.TypeRef("System.TimeSpan")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
    $sig.make(0x15CF2, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
    $sig.make(0x15CF3, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [$asm06.TypeRef("System.TimeSpan")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x15CF8, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x15CF9, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), $.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x15CFA, null, [$asm06.TypeRef("System.IO.SeekOrigin"), $.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SeekCommon", 
    $sig.make(0x15CF7, null, [$.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SeekReset", 
    $sig.make(0x15CF6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_BatchSize", 
    $sig.make(0x15CEB, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "eventQuery", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")); 
  $.Field({Static:false, Public:false}, "batchSize", $.Int32); 
  $.Field({Static:false, Public:false}, "handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")])); 
  $.Field({Static:false, Public:false}, "currentIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "eventCount", $.Int32); 
  $.Field({Static:false, Public:false}, "isEof", $.Boolean); 
  $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
  $.Property({Static:false, Public:true }, "BatchSize", $.Int32);

  $.Property({Static:false, Public:true }, "LogStatus", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogWatcher", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D86, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D87, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D88, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D89, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_EventRecordWritten", 
    $sig.make(0x15D84, null, [$asm06.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15D90, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15D91, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
    $sig.make(0x15D82, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HandleEventsRequestCompletion", 
    $sig.make(0x15D8F, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IssueCallback", 
    $sig.make(0x15D8E, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_EventRecordWritten", 
    $sig.make(0x15D85, null, [$asm06.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RequestEvents", 
    $sig.make(0x15D8D, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
    $sig.make(0x15D83, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StartSubscribing", 
    $sig.make(0x15D8B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "StopSubscribing", 
    $sig.make(0x15D8A, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SubscribedEventsAvailableCallback", 
    $sig.make(0x15D8C, null, [$.Object, $.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "EventRecordWritten", $asm06.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])); 
  $.Field({Static:false, Public:false}, "eventQuery", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")); 
  $.Field({Static:false, Public:false}, "bookmark", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")); 
  $.Field({Static:false, Public:false}, "readExistingEvents", $.Boolean); 
  $.Field({Static:false, Public:false}, "handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")])); 
  $.Field({Static:false, Public:false}, "numEventsInBuffer", $.Int32); 
  $.Field({Static:false, Public:false}, "isSubscribing", $.Boolean); 
  $.Field({Static:false, Public:false}, "callbackThreadId", $.Int32); 
  $.Field({Static:false, Public:false}, "subscriptionWaitHandle", $asm06.TypeRef("System.Threading.AutoResetEvent")); 
  $.Field({Static:false, Public:false}, "unregisterDoneHandle", $asm06.TypeRef("System.Threading.AutoResetEvent")); 
  $.Field({Static:false, Public:false}, "registeredWaitHandle", $asm06.TypeRef("System.Threading.RegisteredWaitHandle")); 
  $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
  $.Field({Static:false, Public:false}, "asyncException", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException")); 
  $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DB2, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogRecord")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DB5, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EventException", 
    $sig.make(0x15DAE, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EventRecord", 
    $sig.make(0x15DAB, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [], [])
  );

  $.Field({Static:false, Public:false}, "record", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord")); 
  $.Field({Static:false, Public:false}, "exception", $asm06.TypeRef("System.Exception")); 
  $.Property({Static:false, Public:true }, "EventRecord", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

  $.Property({Static:false, Public:true }, "EventException", $asm06.TypeRef("System.Exception"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogQuery", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D2B, null, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D2C, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Path", 
    $sig.make(0x15D28, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Query", 
    $sig.make(0x15D2A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReverseDirection", 
    $sig.make(0x15D26, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Session", 
    $sig.make(0x15D22, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ThePathType", 
    $sig.make(0x15D29, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TolerateQueryErrors", 
    $sig.make(0x15D24, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ReverseDirection", 
    $sig.make(0x15D27, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Session", 
    $sig.make(0x15D23, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TolerateQueryErrors", 
    $sig.make(0x15D25, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "query", $.String); 
  $.Field({Static:false, Public:false}, "path", $.String); 
  $.Field({Static:false, Public:false}, "session", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
  $.Field({Static:false, Public:false}, "pathType", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType")); 
  $.Field({Static:false, Public:false}, "tolerateErrors", $.Boolean); 
  $.Field({Static:false, Public:false}, "reverseDirection", $.Boolean); 
  $.Property({Static:false, Public:true }, "Session", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

  $.Property({Static:false, Public:true }, "TolerateQueryErrors", $.Boolean);

  $.Property({Static:false, Public:true }, "ReverseDirection", $.Boolean);

  $.Property({Static:false, Public:false}, "Path", $.String);

  $.Property({Static:false, Public:false}, "ThePathType", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

  $.Property({Static:false, Public:false}, "Query", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Diagnostics.Eventing.Reader.EventLogHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15291, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15294, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInvalid", 
    $sig.make(0x1528D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x1528F, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15295, $.Boolean, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

  $.Property({Static:true , Public:true }, "Zero", $.Type);

})
  .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogPermissionHolder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15DE5, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetEventLogPermission", 
    $sig.make(0x15DE6, $asm07.TypeRef("System.Diagnostics.EventLogPermission"), [], [])
  );

});

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.SessionAuthentication", true, {
    Default: 0, 
    Negotiate: 1, 
    Kerberos: 2, 
    Ntlm: 3
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.PathType", true, {
    LogName: 1, 
    FilePath: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogSession", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15860, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15862, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15864, null, [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Security.SecureString"), 
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CancelCurrentOperations", 
    $sig.make(0x15869, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
    $sig.make(0x1587A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
    $sig.make(0x1587B, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15865, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15867, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
    $sig.make(0x15873, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
    $sig.make(0x15875, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
        $.String, $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
    $sig.make(0x15877, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
    $sig.make(0x15878, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
        $.String, $.String, 
        $.Boolean, $asm06.TypeRef("System.Globalization.CultureInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GlobalSession", 
    $sig.make(0x1585C, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0x1585B, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLogInformation", 
    $sig.make(0x15872, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogInformation"), [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLogNames", 
    $sig.make(0x1586D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetProviderNames", 
    $sig.make(0x1586B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SetupSystemContext", 
    $sig.make(0x1585D, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SetupUserContext", 
    $sig.make(0x1585E, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.Field({Static:false, Public:false}, "renderContextHandleSystem", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "renderContextHandleUser", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Field({Static:false, Public:false}, "server", $.String); 
  $.Field({Static:false, Public:false}, "user", $.String); 
  $.Field({Static:false, Public:false}, "domain", $.String); 
  $.Field({Static:false, Public:false}, "logOnType", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")); 
  $.Field({Static:false, Public:false}, "handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:true , Public:false}, "globalSession", $.Type); 
  $.Property({Static:false, Public:false}, "Handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

  $.Property({Static:true , Public:true }, "GlobalSession", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventMetadata", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B75, null, [
        $.UInt32, $.Byte, 
        $.Byte, $.Byte, 
        $.Byte, $.Int16, 
        $.Int64, $.String, 
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x15B74, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0x15B6C, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
    $sig.make(0x15B72, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Level", 
    $sig.make(0x15B6F, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogLink", 
    $sig.make(0x15B6E, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
    $sig.make(0x15B70, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Task", 
    $sig.make(0x15B71, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Template", 
    $sig.make(0x15B73, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x15B6D, $.Byte, [], [])
  );

  $.Field({Static:false, Public:false}, "id", $.Int64); 
  $.Field({Static:false, Public:false}, "version", $.Byte); 
  $.Field({Static:false, Public:false}, "channelId", $.Byte); 
  $.Field({Static:false, Public:false}, "level", $.Byte); 
  $.Field({Static:false, Public:false}, "opcode", $.Int16); 
  $.Field({Static:false, Public:false}, "task", $.Int32); 
  $.Field({Static:false, Public:false}, "keywords", $.Int64); 
  $.Field({Static:false, Public:false}, "template", $.String); 
  $.Field({Static:false, Public:false}, "description", $.String); 
  $.Field({Static:false, Public:false}, "pmReference", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Property({Static:false, Public:true }, "Id", $.Int64);

  $.Property({Static:false, Public:true }, "Version", $.Byte);

  $.Property({Static:false, Public:true }, "LogLink", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"));

  $.Property({Static:false, Public:true }, "Level", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"));

  $.Property({Static:false, Public:true }, "Opcode", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"));

  $.Property({Static:false, Public:true }, "Task", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"));

  $.Property({Static:false, Public:true }, "Keywords", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

  $.Property({Static:false, Public:true }, "Template", $.String);

  $.Property({Static:false, Public:true }, "Description", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventOpcode", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B9F, null, [$.Int32, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15BA0, null, [
        $.String, $.Int32, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x15B9D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15B95, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x15B9B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
    $sig.make(0x15BA1, null, [], [])
  );

  $.Field({Static:false, Public:false}, "value", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "displayName", $.String); 
  $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "pmReference", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Value", $.Int32);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventTask", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15BE4, null, [$.Int32, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15BE5, null, [
        $.String, $.Int32, 
        $.String, $asm06.TypeRef("System.Guid")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x15BE2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EventGuid", 
    $sig.make(0x15BE3, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15BE0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x15BE1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
    $sig.make(0x15BE6, null, [], [])
  );

  $.Field({Static:false, Public:false}, "value", $.Int32); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "displayName", $.String); 
  $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
  $.Field({Static:false, Public:false}, "pmReference", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Value", $.Int32);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

  $.Property({Static:false, Public:true }, "EventGuid", $asm06.TypeRef("System.Guid"));

});

JSIL.MakeClass($asm06.TypeRef("System.Exception"), "System.Diagnostics.Eventing.Reader.EventLogException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15C71, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15C72, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15C73, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15C74, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15C75, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Message", 
    $sig.make(0x15C6F, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x15C76, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Throw", 
    $sig.make(0x15C70, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "errorCode", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.Runtime.Serialization.ISerializable"))
});

JSIL.MakeClass($asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogNotFoundException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CDF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CE0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CE1, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15CE2, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15CE3, null, [$.Int32], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogReadingException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D0B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D0C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D0F, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D11, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D14, null, [$.Int32], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D66, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D67, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15D68, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D69, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D6A, null, [$.Int32], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogInvalidDataException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15DA1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15DA2, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15DA3, null, [$.String, $asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DA6, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DA8, null, [$.Int32], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogInformation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A3C, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x15A31, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CreationTime", 
    $sig.make(0x15A27, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FileSize", 
    $sig.make(0x15A2D, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLogFull", 
    $sig.make(0x15A38, $asm06.TypeRef("System.Nullable`1", [$.Boolean]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LastAccessTime", 
    $sig.make(0x15A29, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LastWriteTime", 
    $sig.make(0x15A2A, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OldestRecordNumber", 
    $sig.make(0x15A36, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
    $sig.make(0x15A34, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [], [])
  );

  $.Field({Static:false, Public:false}, "creationTime", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")])); 
  $.Field({Static:false, Public:false}, "lastAccessTime", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")])); 
  $.Field({Static:false, Public:false}, "lastWriteTime", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")])); 
  $.Field({Static:false, Public:false}, "fileSize", $asm06.TypeRef("System.Nullable`1", [$.Int64])); 
  $.Field({Static:false, Public:false}, "fileAttributes", $asm06.TypeRef("System.Nullable`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "recordCount", $asm06.TypeRef("System.Nullable`1", [$.Int64])); 
  $.Field({Static:false, Public:false}, "oldestRecordNumber", $asm06.TypeRef("System.Nullable`1", [$.Int64])); 
  $.Field({Static:false, Public:false}, "isLogFull", $asm06.TypeRef("System.Nullable`1", [$.Boolean])); 
  $.Property({Static:false, Public:true }, "CreationTime", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]));

  $.Property({Static:false, Public:true }, "LastAccessTime", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]));

  $.Property({Static:false, Public:true }, "LastWriteTime", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")]));

  $.Property({Static:false, Public:true }, "FileSize", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true }, "Attributes", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:true }, "RecordCount", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true }, "OldestRecordNumber", $asm06.TypeRef("System.Nullable`1", [$.Int64]));

  $.Property({Static:false, Public:true }, "IsLogFull", $asm06.TypeRef("System.Nullable`1", [$.Boolean]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.NativeWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15B21, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EvtArchiveExportedLog", 
    $sig.make(0x15AFD, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $.Int32, $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtCancel", 
    $sig.make(0x15AF1, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtClearLog", 
    $sig.make(0x15AFE, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $.String, $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtClose", 
    $sig.make(0x15AF2, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtCreateBookmark", 
    $sig.make(0x15B02, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtExportLog", 
    $sig.make(0x15AFC, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $.String, $.String, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessage", 
    $sig.make(0x15B08, $.String, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.UInt32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageFormatDescription", 
    $sig.make(0x15B15, $.String, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArrayProperty", 
    $sig.make(0x15B09, $.Object, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArraySize", 
    $sig.make(0x15AF4, $.Int32, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtNext", 
    $sig.make(0x15AF0, $.Boolean, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtNextChannelPath", 
    $sig.make(0x15B0D, $.String, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtNextEventMetadata", 
    $sig.make(0x15AF6, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtNextPublisherId", 
    $sig.make(0x15B0E, $.String, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelConfig", 
    $sig.make(0x15AF9, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelEnum", 
    $sig.make(0x15AF7, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtOpenEventMetadataEnum", 
    $sig.make(0x15AF5, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtOpenLog", 
    $sig.make(0x15AFB, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderEnum", 
    $sig.make(0x15AF8, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderMetadata", 
    $sig.make(0x15AF3, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $.String, $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtQuery", 
    $sig.make(0x15AED, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
        $.String, $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtRenderBookmark", 
    $sig.make(0x15B14, $.String, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextUserOrValues", 
    $sig.make(0x15B11, $asm06.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtSaveChannelConfig", 
    $sig.make(0x15AFA, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtSubscribe", 
    $sig.make(0x15AEF, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
        $.String, $.String, 
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "EvtUpdateBookmark", 
    $sig.make(0x15B03, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15B3E, null, [], [])
  );

  $.Field({Static:false, Public:true }, "filled", $.Boolean); 
  $.Field({Static:false, Public:true }, "Id", $asm06.TypeRef("System.Nullable`1", [$.UInt16])); 
  $.Field({Static:false, Public:true }, "Version", $asm06.TypeRef("System.Nullable`1", [$.Byte])); 
  $.Field({Static:false, Public:true }, "Qualifiers", $asm06.TypeRef("System.Nullable`1", [$.UInt16])); 
  $.Field({Static:false, Public:true }, "Level", $asm06.TypeRef("System.Nullable`1", [$.Byte])); 
  $.Field({Static:false, Public:true }, "Task", $asm06.TypeRef("System.Nullable`1", [$.UInt16])); 
  $.Field({Static:false, Public:true }, "Opcode", $asm06.TypeRef("System.Nullable`1", [$.Byte])); 
  $.Field({Static:false, Public:true }, "Keywords", $asm06.TypeRef("System.Nullable`1", [$.UInt64])); 
  $.Field({Static:false, Public:true }, "RecordId", $asm06.TypeRef("System.Nullable`1", [$.UInt64])); 
  $.Field({Static:false, Public:true }, "ProviderName", $.String); 
  $.Field({Static:false, Public:true }, "ProviderId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")])); 
  $.Field({Static:false, Public:true }, "ChannelName", $.String); 
  $.Field({Static:false, Public:true }, "ProcessId", $asm06.TypeRef("System.Nullable`1", [$.UInt32])); 
  $.Field({Static:false, Public:true }, "ThreadId", $asm06.TypeRef("System.Nullable`1", [$.UInt32])); 
  $.Field({Static:false, Public:true }, "ComputerName", $.String); 
  $.Field({Static:false, Public:true }, "UserId", $asm06.TypeRef("System.Security.Principal.SecurityIdentifier")); 
  $.Field({Static:false, Public:true }, "TimeCreated", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.DateTime")])); 
  $.Field({Static:false, Public:true }, "ActivityId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")])); 
  $.Field({Static:false, Public:true }, "RelatedActivityId", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Guid")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadata", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x157DD, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x157DF, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
        $asm06.TypeRef("System.Globalization.CultureInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x157E1, null, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
        $asm06.TypeRef("System.Globalization.CultureInfo"), $.String
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckReleased", 
    $sig.make(0x157EB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x157ED, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x157EF, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "FindStandardKeywordDisplayName", 
    $sig.make(0x157E8, $.String, [$.String, $.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindStandardLevelDisplayName", 
    $sig.make(0x157E4, $.String, [$.String, $.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindStandardOpcodeDisplayName", 
    $sig.make(0x157E6, $.String, [$.String, $.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindStandardTaskDisplayName", 
    $sig.make(0x157E9, $.String, [$.String, $.UInt32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x157D0, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Events", 
    $sig.make(0x157DC, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
    $sig.make(0x157C0, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HelpLink", 
    $sig.make(0x157CE, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0x157CA, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
    $sig.make(0x157D7, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Levels", 
    $sig.make(0x157D3, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogLinks", 
    $sig.make(0x157D1, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_MessageFilePath", 
    $sig.make(0x157CB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x157C8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Opcodes", 
    $sig.make(0x157D5, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParameterFilePath", 
    $sig.make(0x157CD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ProviderMessageID", 
    $sig.make(0x157CF, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ResourceFilePath", 
    $sig.make(0x157CC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Tasks", 
    $sig.make(0x157DB, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]), [], [])
  );

  $.Field({Static:false, Public:false}, "handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "defaultProviderHandle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
  $.Field({Static:false, Public:false}, "session", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
  $.Field({Static:false, Public:false}, "providerName", $.String); 
  $.Field({Static:false, Public:false}, "cultureInfo", $asm06.TypeRef("System.Globalization.CultureInfo")); 
  $.Field({Static:false, Public:false}, "logFilePath", $.String); 
  $.Field({Static:false, Public:false}, "levels", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")])); 
  $.Field({Static:false, Public:false}, "opcodes", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")])); 
  $.Field({Static:false, Public:false}, "tasks", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")])); 
  $.Field({Static:false, Public:false}, "keywords", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")])); 
  $.Field({Static:false, Public:false}, "standardLevels", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")])); 
  $.Field({Static:false, Public:false}, "standardOpcodes", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")])); 
  $.Field({Static:false, Public:false}, "standardTasks", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")])); 
  $.Field({Static:false, Public:false}, "standardKeywords", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")])); 
  $.Field({Static:false, Public:false}, "channelReferences", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")])); 
  $.Field({Static:false, Public:false}, "syncObject", $.Object); 
  $.Property({Static:false, Public:false}, "Handle", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Id", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true }, "MessageFilePath", $.String);

  $.Property({Static:false, Public:true }, "ResourceFilePath", $.String);

  $.Property({Static:false, Public:true }, "ParameterFilePath", $.String);

  $.Property({Static:false, Public:true }, "HelpLink", $asm07.TypeRef("System.Uri"));

  $.Property({Static:false, Public:false}, "ProviderMessageID", $.UInt32);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

  $.Property({Static:false, Public:true }, "LogLinks", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

  $.Property({Static:false, Public:true }, "Levels", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

  $.Property({Static:false, Public:true }, "Opcodes", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

  $.Property({Static:false, Public:true }, "Keywords", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

  $.Property({Static:false, Public:true }, "Tasks", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

  $.Property({Static:false, Public:true }, "Events", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.ProviderMetadata/ObjectTypeName", false, {
    Level: 0, 
    Opcode: 1, 
    Task: 2, 
    Keyword: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15B53, null, [
        $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
    $sig.make(0x15B5A, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeleteCacheEntry", 
    $sig.make(0x15B58, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushOldestEntry", 
    $sig.make(0x15B5C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
    $sig.make(0x15B60, $.String, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
    $sig.make(0x15B61, $.String, [
        $.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
        $jsilcore.TypeRef("System.Array", [$.String])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetKeywordDisplayNames", 
    $sig.make(0x15B65, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetLevelDisplayName", 
    $sig.make(0x15B62, $.String, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetOpcodeDisplayName", 
    $sig.make(0x15B63, $.String, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "GetProviderMetadata", 
    $sig.make(0x15B5F, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetTaskDisplayName", 
    $sig.make(0x15B64, $.String, [$.String, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IsCacheFull", 
    $sig.make(0x15B55, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsProviderinCache", 
    $sig.make(0x15B57, $.Boolean, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UpdateCacheValueInfoForHit", 
    $sig.make(0x15B5D, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem")], [])
  );

  $.Field({Static:false, Public:false}, "cache", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId"), $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem")])); 
  $.Field({Static:false, Public:false}, "maximumCacheSize", $.Int32); 
  $.Field({Static:false, Public:false}, "session", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
  $.Field({Static:false, Public:false}, "logfile", $.String); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15C97, null, [$.String, $asm06.TypeRef("System.Globalization.CultureInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x15C98, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
    $sig.make(0x15C95, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TheCultureInfo", 
    $sig.make(0x15C96, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x15C99, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "providerName", $.String); 
  $.Field({Static:false, Public:false}, "cultureInfo", $asm06.TypeRef("System.Globalization.CultureInfo")); 
  $.Property({Static:false, Public:true }, "ProviderName", $.String);

  $.Property({Static:false, Public:true }, "TheCultureInfo", $asm06.TypeRef("System.Globalization.CultureInfo"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15CA2, null, [$asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderMetadata", 
    $sig.make(0x15CA1, $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TheTime", 
    $sig.make(0x15C9F, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TheTime", 
    $sig.make(0x15CA0, null, [$asm06.TypeRef("System.DateTime")], [])
  );

  $.Field({Static:false, Public:false}, "pm", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
  $.Field({Static:false, Public:false}, "theTime", $asm06.TypeRef("System.DateTime")); 
  $.Property({Static:false, Public:true }, "TheTime", $asm06.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "ProviderMetadata", $asm09.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

});

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1567E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1567F, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInvalid", 
    $sig.make(0x1567C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x1567D, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
    $sig.make(0x15681, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x1568F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
    $sig.make(0x15680, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

  $.Property({Static:true , Public:true }, "Zero", $.Type);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15E1A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInvalid", 
    $sig.make(0x15E14, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
    $sig.make(0x15E17, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
    $sig.make(0x15E1E, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15E20, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
    $sig.make(0x15E1C, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

  $.Property({Static:true , Public:true }, "Zero", $.Type);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventLevel", true, {
    LogAlways: 0, 
    Critical: 1, 
    Error: 2, 
    Warning: 3, 
    Informational: 4, 
    Verbose: 5
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventTask", true, {
    None: 0
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventOpcode", true, {
    Info: 0, 
    Start: 1, 
    Stop: 2, 
    DataCollectionStart: 3, 
    DataCollectionStop: 4, 
    Extension: 5, 
    Reply: 6, 
    Resume: 7, 
    Suspend: 8, 
    Send: 9, 
    Receive: 240
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventKeywords", true, {
    None: 0, 
    WdiContext: 562949953421312, 
    WdiDiagnostic: 1125899906842624, 
    Sqm: 2251799813685248, 
    AuditFailure: 4503599627370496, 
    CorrelationHint: 4503599627370496, 
    AuditSuccess: 9007199254740992, 
    EventLogClassic: 36028797018963968
  }, true
);

JSIL.DeclareNamespace("System.Linq");
JSIL.DeclareNamespace("System.Linq.Expressions");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.OldExpressionVisitor", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15E98, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Visit", 
    $sig.make(0x15E99, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBinary", 
    $sig.make(0x15E9D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBinding", 
    $sig.make(0x15E9A, $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBindingList", 
    $sig.make(0x15EA8, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConditional", 
    $sig.make(0x15EA0, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConstant", 
    $sig.make(0x15E9F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitElementInitializer", 
    $sig.make(0x15E9B, $asm09.TypeRef("System.Linq.Expressions.ElementInit"), [$asm09.TypeRef("System.Linq.Expressions.ElementInit")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitElementInitializerList", 
    $sig.make(0x15EA9, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExpressionList", 
    $sig.make(0x15EA4, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitInvocation", 
    $sig.make(0x15EAF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x15EAA, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitListInit", 
    $sig.make(0x15EAD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberAccess", 
    $sig.make(0x15EA2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberAssignment", 
    $sig.make(0x15EA5, $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm09.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberInit", 
    $sig.make(0x15EAC, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberListBinding", 
    $sig.make(0x15EA7, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberMemberBinding", 
    $sig.make(0x15EA6, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMethodCall", 
    $sig.make(0x15EA3, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNew", 
    $sig.make(0x15EAB, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNewArray", 
    $sig.make(0x15EAE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x15EA1, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTypeIs", 
    $sig.make(0x15E9E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitUnary", 
    $sig.make(0x15E9C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

});

JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "ToReadOnlyCollection", 
    $sig.make(0x15EE9, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
    $sig.make(0x17BF4, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1")]), [], [])
  );

  $.Field({Static:true , Public:false}, "_defaultCollection", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")])); 
  $.GenericProperty({Static:true , Public:false}, "Empty", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1")]));

});

JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
    $sig.make(0x15FB2, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
    $sig.make(0x15FAB, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
    $sig.make(0x15F7D, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
    $sig.make(0x15F7C, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
    $sig.make(0x15F72, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
    $sig.make(0x15F70, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
    $sig.make(0x15F77, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
    $sig.make(0x15F78, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
    $sig.make(0x15FBA, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
    $sig.make(0x15FB4, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
    $sig.make(0x15F6C, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
    $sig.make(0x15F68, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
    $sig.make(0x15F6D, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
    $sig.make(0x15F6F, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
    $sig.make(0x15F6E, $.String, [
        $.Object, $.Object, 
        $.Object, $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
    $sig.make(0x15F9A, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
    $sig.make(0x15F76, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
    $sig.make(0x15F7A, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
    $sig.make(0x15F81, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
    $sig.make(0x15F7B, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
    $sig.make(0x15F82, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
    $sig.make(0x15F7E, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
    $sig.make(0x15F7F, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
    $sig.make(0x15F80, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
    $sig.make(0x15F83, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
    $sig.make(0x15F69, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
    $sig.make(0x15F86, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
    $sig.make(0x15F84, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
    $sig.make(0x15FA8, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveByRefArgs", 
    $sig.make(0x15F19, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveVarArgs", 
    $sig.make(0x15F18, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AllCaseBodiesMustHaveSameType", 
    $sig.make(0x15F2C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AllTestValuesMustHaveSameType", 
    $sig.make(0x15F2B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgCntMustBeGreaterThanNameCnt", 
    $sig.make(0x15F11, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentCannotBeOfTypeVoid", 
    $sig.make(0x15F53, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArray", 
    $sig.make(0x15F39, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArrayIndexType", 
    $sig.make(0x15F3F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeBoolean", 
    $sig.make(0x15F3A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfo", 
    $sig.make(0x15F3B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
    $sig.make(0x15F3C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInstanceMember", 
    $sig.make(0x15F3D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInteger", 
    $sig.make(0x15F3E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeSingleDimensionalArrayType", 
    $sig.make(0x15F40, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustNotHaveValueType", 
    $sig.make(0x15F29, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypeCannotBeVoid", 
    $sig.make(0x15F30, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypesMustMatch", 
    $sig.make(0x15F41, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArrayTypeMustBeArray", 
    $sig.make(0x15F1E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BindingCannotBeNull", 
    $sig.make(0x15F56, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
    $sig.make(0x15F37, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BothAccessorsMustBeStatic", 
    $sig.make(0x15F21, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_BoundsCannotBeLessThanOne", 
    $sig.make(0x15F1A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CannotCompileDynamic", 
    $sig.make(0x15F5D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CoalesceUsedOnNonNullType", 
    $sig.make(0x15F42, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CollectionModifiedWhileEnumerating", 
    $sig.make(0x15F63, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CollectionReadOnly", 
    $sig.make(0x15F60, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterExpression", 
    $sig.make(0x15F5B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterTry", 
    $sig.make(0x15F5A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFilterTest", 
    $sig.make(0x15F59, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFinally", 
    $sig.make(0x15F58, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ConversionIsNotSupportedForArithmeticTypes", 
    $sig.make(0x15F38, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CountCannotBeNegative", 
    $sig.make(0x15F1D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DefaultBodyMustBeSupplied", 
    $sig.make(0x15F2D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodNotAdd", 
    $sig.make(0x15F4B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodStatic", 
    $sig.make(0x15F4D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodWithZeroArgs", 
    $sig.make(0x15F4C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_EnumerationIsDone", 
    $sig.make(0x15F64, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeReadable", 
    $sig.make(0x15F27, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeWriteable", 
    $sig.make(0x15F28, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ExtensionNotReduced", 
    $sig.make(0x15F5C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_FaultCannotHaveCatchOrFinally", 
    $sig.make(0x15F35, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_FirstArgumentMustBeCallSite", 
    $sig.make(0x15F55, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_HomogenousAppDomainRequired", 
    $sig.make(0x15F65, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfArgumentsForMembers", 
    $sig.make(0x15F48, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfConstructorArguments", 
    $sig.make(0x15F46, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfIndexes", 
    $sig.make(0x15F43, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaArguments", 
    $sig.make(0x15F44, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaDeclarationParameters", 
    $sig.make(0x15F45, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfMembersForGivenConstructor", 
    $sig.make(0x15F47, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForAction", 
    $sig.make(0x15F52, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForFunc", 
    $sig.make(0x15F51, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IndexesOfSetGetMustMatch", 
    $sig.make(0x15F17, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidArgumentValue", 
    $sig.make(0x15F0F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidAsmNameOrExtension", 
    $sig.make(0x15F5F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidOutputDir", 
    $sig.make(0x15F5E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidUnboxType", 
    $sig.make(0x15F26, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LabelMustBeVoidOrHaveExpression", 
    $sig.make(0x15F31, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LabelTypeMustBeVoid", 
    $sig.make(0x15F32, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_LambdaTypeMustBeDerivedFromSystemDelegate", 
    $sig.make(0x15F49, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ListInitializerWithZeroMembers", 
    $sig.make(0x15F4A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MethodBuilderDoesNotHaveTypeBuilder", 
    $sig.make(0x15F2E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MethodPreconditionViolated", 
    $sig.make(0x15F0E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustBeReducible", 
    $sig.make(0x15F2A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MustReduceToDifferent", 
    $sig.make(0x15F13, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NonEmptyCollectionRequired", 
    $sig.make(0x15F10, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoOrInvalidRuleProduced", 
    $sig.make(0x15F54, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticFieldsHaveNullInstance", 
    $sig.make(0x15F22, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticMethodsHaveNullInstance", 
    $sig.make(0x15F24, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticPropertiesHaveNullInstance", 
    $sig.make(0x15F23, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PdbGeneratorNeedsExpressionCompiler", 
    $sig.make(0x15F66, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PropertyCannotHaveRefType", 
    $sig.make(0x15F16, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PropertyTyepMustMatchSetter", 
    $sig.make(0x15F20, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PropertyTypeCannotBeVoid", 
    $sig.make(0x15F25, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_QueueEmpty", 
    $sig.make(0x15F57, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_QuotedExpressionMustBeLambda", 
    $sig.make(0x15F33, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ReducedNotCompatible", 
    $sig.make(0x15F14, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ReducibleMustOverrideReduce", 
    $sig.make(0x15F12, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_RethrowRequiresCatch", 
    $sig.make(0x15F61, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SetterHasNoParams", 
    $sig.make(0x15F15, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SetterMustBeVoid", 
    $sig.make(0x15F1F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_StartEndMustBeOrdered", 
    $sig.make(0x15F34, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TryMustHaveCatchFinallyOrFault", 
    $sig.make(0x15F36, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TryNotAllowedInFilter", 
    $sig.make(0x15F62, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeDoesNotHaveConstructorForTheSignature", 
    $sig.make(0x15F1C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeMustBeDerivedFromSystemDelegate", 
    $sig.make(0x15F2F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_TypeMustNotBeByRef", 
    $sig.make(0x15F1B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedCoalesceOperator", 
    $sig.make(0x15F4E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UnhandledBinding", 
    $sig.make(0x15F4F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_UnknownBindingType", 
    $sig.make(0x15F50, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
    $sig.make(0x15FB8, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
    $sig.make(0x15F87, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
    $sig.make(0x15F79, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
    $sig.make(0x15F96, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
    $sig.make(0x15F85, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
    $sig.make(0x15F93, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
    $sig.make(0x15F94, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
    $sig.make(0x15F95, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
    $sig.make(0x15F9D, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
    $sig.make(0x15FB5, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
    $sig.make(0x15FB6, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
    $sig.make(0x15FC5, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidNullValue", 
    $sig.make(0x15FBF, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidObjectType", 
    $sig.make(0x15FC0, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
    $sig.make(0x15FAE, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
    $sig.make(0x15FAD, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
    $sig.make(0x15FB0, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
    $sig.make(0x15FB1, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
    $sig.make(0x15FA5, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
    $sig.make(0x15F88, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
    $sig.make(0x15F89, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
    $sig.make(0x15FA6, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
    $sig.make(0x15F8A, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
    $sig.make(0x15F8B, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
    $sig.make(0x15FA7, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
    $sig.make(0x15FA9, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
    $sig.make(0x15FBD, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
    $sig.make(0x15FBC, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
    $sig.make(0x15FBE, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
    $sig.make(0x15FB3, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
    $sig.make(0x15F8F, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
    $sig.make(0x15F74, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
    $sig.make(0x15F90, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
    $sig.make(0x15FAF, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
    $sig.make(0x15F75, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
    $sig.make(0x15F91, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
    $sig.make(0x15F8E, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
    $sig.make(0x15F8C, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
    $sig.make(0x15F8D, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
    $sig.make(0x15F92, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
    $sig.make(0x15FAA, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
    $sig.make(0x15F73, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
    $sig.make(0x15FAC, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
    $sig.make(0x15FC4, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
    $sig.make(0x15FC3, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
    $sig.make(0x15FC1, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
    $sig.make(0x15FC2, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
    $sig.make(0x15F97, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
    $sig.make(0x15F98, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
    $sig.make(0x15F99, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
    $sig.make(0x15F9B, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
    $sig.make(0x15F9C, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
    $sig.make(0x15F71, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
    $sig.make(0x15FB9, $.String, [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
    $sig.make(0x15FBB, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
    $sig.make(0x15F9E, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
    $sig.make(0x15F9F, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
    $sig.make(0x15FA0, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
    $sig.make(0x15FA1, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
    $sig.make(0x15FA2, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
    $sig.make(0x15FB7, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
    $sig.make(0x15F6A, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
    $sig.make(0x15F6B, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
    $sig.make(0x15FA3, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
    $sig.make(0x15FA4, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
    $sig.make(0x15F67, $.String, [$.Object, $.Object], [])
  );

  $.Property({Static:true , Public:false}, "MethodPreconditionViolated", $.String);

  $.Property({Static:true , Public:false}, "InvalidArgumentValue", $.String);

  $.Property({Static:true , Public:false}, "NonEmptyCollectionRequired", $.String);

  $.Property({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", $.String);

  $.Property({Static:true , Public:false}, "ReducibleMustOverrideReduce", $.String);

  $.Property({Static:true , Public:false}, "MustReduceToDifferent", $.String);

  $.Property({Static:true , Public:false}, "ReducedNotCompatible", $.String);

  $.Property({Static:true , Public:false}, "SetterHasNoParams", $.String);

  $.Property({Static:true , Public:false}, "PropertyCannotHaveRefType", $.String);

  $.Property({Static:true , Public:false}, "IndexesOfSetGetMustMatch", $.String);

  $.Property({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", $.String);

  $.Property({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", $.String);

  $.Property({Static:true , Public:false}, "BoundsCannotBeLessThanOne", $.String);

  $.Property({Static:true , Public:false}, "TypeMustNotBeByRef", $.String);

  $.Property({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", $.String);

  $.Property({Static:true , Public:false}, "CountCannotBeNegative", $.String);

  $.Property({Static:true , Public:false}, "ArrayTypeMustBeArray", $.String);

  $.Property({Static:true , Public:false}, "SetterMustBeVoid", $.String);

  $.Property({Static:true , Public:false}, "PropertyTyepMustMatchSetter", $.String);

  $.Property({Static:true , Public:false}, "BothAccessorsMustBeStatic", $.String);

  $.Property({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", $.String);

  $.Property({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", $.String);

  $.Property({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", $.String);

  $.Property({Static:true , Public:false}, "PropertyTypeCannotBeVoid", $.String);

  $.Property({Static:true , Public:false}, "InvalidUnboxType", $.String);

  $.Property({Static:true , Public:false}, "ExpressionMustBeReadable", $.String);

  $.Property({Static:true , Public:false}, "ExpressionMustBeWriteable", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustNotHaveValueType", $.String);

  $.Property({Static:true , Public:false}, "MustBeReducible", $.String);

  $.Property({Static:true , Public:false}, "AllTestValuesMustHaveSameType", $.String);

  $.Property({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", $.String);

  $.Property({Static:true , Public:false}, "DefaultBodyMustBeSupplied", $.String);

  $.Property({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", $.String);

  $.Property({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", $.String);

  $.Property({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", $.String);

  $.Property({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", $.String);

  $.Property({Static:true , Public:false}, "LabelTypeMustBeVoid", $.String);

  $.Property({Static:true , Public:false}, "QuotedExpressionMustBeLambda", $.String);

  $.Property({Static:true , Public:false}, "StartEndMustBeOrdered", $.String);

  $.Property({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", $.String);

  $.Property({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", $.String);

  $.Property({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", $.String);

  $.Property({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeArray", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeInteger", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String);

  $.Property({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String);

  $.Property({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String);

  $.Property({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String);

  $.Property({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String);

  $.Property({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String);

  $.Property({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String);

  $.Property({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String);

  $.Property({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String);

  $.Property({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String);

  $.Property({Static:true , Public:false}, "UnhandledBinding", $.String);

  $.Property({Static:true , Public:false}, "UnknownBindingType", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String);

  $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String);

  $.Property({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String);

  $.Property({Static:true , Public:false}, "NoOrInvalidRuleProduced", $.String);

  $.Property({Static:true , Public:false}, "FirstArgumentMustBeCallSite", $.String);

  $.Property({Static:true , Public:false}, "BindingCannotBeNull", $.String);

  $.Property({Static:true , Public:false}, "QueueEmpty", $.String);

  $.Property({Static:true , Public:false}, "ControlCannotLeaveFinally", $.String);

  $.Property({Static:true , Public:false}, "ControlCannotLeaveFilterTest", $.String);

  $.Property({Static:true , Public:false}, "ControlCannotEnterTry", $.String);

  $.Property({Static:true , Public:false}, "ControlCannotEnterExpression", $.String);

  $.Property({Static:true , Public:false}, "ExtensionNotReduced", $.String);

  $.Property({Static:true , Public:false}, "CannotCompileDynamic", $.String);

  $.Property({Static:true , Public:false}, "InvalidOutputDir", $.String);

  $.Property({Static:true , Public:false}, "InvalidAsmNameOrExtension", $.String);

  $.Property({Static:true , Public:false}, "CollectionReadOnly", $.String);

  $.Property({Static:true , Public:false}, "RethrowRequiresCatch", $.String);

  $.Property({Static:true , Public:false}, "TryNotAllowedInFilter", $.String);

  $.Property({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", $.String);

  $.Property({Static:true , Public:false}, "EnumerationIsDone", $.String);

  $.Property({Static:true , Public:false}, "HomogenousAppDomainRequired", $.String);

  $.Property({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", $.String);

});

JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", 
    $sig.make(0x16055, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", 
    $sig.make(0x16054, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
    $sig.make(0x160FB, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
    $sig.make(0x160EE, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", 
    $sig.make(0x1604D, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", 
    $sig.make(0x160ED, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
    $sig.make(0x160A5, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArray", 
    $sig.make(0x1608A, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", 
    $sig.make(0x16092, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeBoolean", 
    $sig.make(0x1608B, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", 
    $sig.make(0x1608D, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
    $sig.make(0x1608E, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInstanceMember", 
    $sig.make(0x1608F, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInteger", 
    $sig.make(0x16091, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", 
    $sig.make(0x16094, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentMustNotHaveValueType", 
    $sig.make(0x16061, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
    $sig.make(0x1611A, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
    $sig.make(0x1611B, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", 
    $sig.make(0x16066, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
    $sig.make(0x160A4, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentTypesMustMatch", 
    $sig.make(0x16095, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArrayTypeMustBeArray", 
    $sig.make(0x1605A, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
    $sig.make(0x16080, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
    $sig.make(0x1607D, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BindingCannotBeNull", 
    $sig.make(0x160F3, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
    $sig.make(0x1606F, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BothAccessorsMustBeStatic", 
    $sig.make(0x1605D, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BoundsCannotBeLessThanOne", 
    $sig.make(0x16056, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
    $sig.make(0x1609A, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
    $sig.make(0x1609B, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
    $sig.make(0x1610A, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
    $sig.make(0x16100, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CannotCompileDynamic", 
    $sig.make(0x16101, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CoalesceUsedOnNonNullType", 
    $sig.make(0x1609E, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
    $sig.make(0x16073, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", 
    $sig.make(0x16113, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CollectionReadOnly", 
    $sig.make(0x16107, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterExpression", 
    $sig.make(0x160FD, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterTry", 
    $sig.make(0x160FC, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFilterTest", 
    $sig.make(0x160FA, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFinally", 
    $sig.make(0x160F9, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", 
    $sig.make(0x16088, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CountCannotBeNegative", 
    $sig.make(0x16059, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DefaultBodyMustBeSupplied", 
    $sig.make(0x16063, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
    $sig.make(0x1606B, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
    $sig.make(0x16077, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
    $sig.make(0x1607B, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
    $sig.make(0x16079, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object, $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
    $sig.make(0x160D5, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNotAdd", 
    $sig.make(0x160D4, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodStatic", 
    $sig.make(0x160D7, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", 
    $sig.make(0x160D6, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnumerationIsDone", 
    $sig.make(0x16114, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
    $sig.make(0x1608C, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
    $sig.make(0x160A0, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
    $sig.make(0x160AB, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
    $sig.make(0x160A2, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
    $sig.make(0x160AD, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
    $sig.make(0x160A6, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
    $sig.make(0x160A7, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
    $sig.make(0x160A9, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
    $sig.make(0x160AF, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
    $sig.make(0x16070, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExtensionNotReduced", 
    $sig.make(0x160FF, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", 
    $sig.make(0x1606D, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
    $sig.make(0x160B3, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
    $sig.make(0x160B0, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FirstArgumentMustBeCallSite", 
    $sig.make(0x160F2, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
    $sig.make(0x160E8, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HomogenousAppDomainRequired", 
    $sig.make(0x16115, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
    $sig.make(0x16108, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", 
    $sig.make(0x160BC, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", 
    $sig.make(0x160BA, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfIndexes", 
    $sig.make(0x160B5, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", 
    $sig.make(0x160B7, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", 
    $sig.make(0x160B8, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", 
    $sig.make(0x160BB, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
    $sig.make(0x160B9, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", 
    $sig.make(0x160EC, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", 
    $sig.make(0x160EB, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
    $sig.make(0x1609D, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IndexesOfSetGetMustMatch", 
    $sig.make(0x16053, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
    $sig.make(0x160CF, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
    $sig.make(0x160B1, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
    $sig.make(0x160CC, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
    $sig.make(0x160CD, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
    $sig.make(0x160CE, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidAsmNameOrExtension", 
    $sig.make(0x16106, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
    $sig.make(0x160DB, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
    $sig.make(0x16102, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
    $sig.make(0x16103, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
    $sig.make(0x16118, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
    $sig.make(0x160F4, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidOutputDir", 
    $sig.make(0x16105, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidUnboxType", 
    $sig.make(0x16060, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
    $sig.make(0x160F0, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", 
    $sig.make(0x16067, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
    $sig.make(0x160F7, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
    $sig.make(0x160F8, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LabelTypeMustBeVoid", 
    $sig.make(0x16068, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", 
    $sig.make(0x160BD, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ListInitializerWithZeroMembers", 
    $sig.make(0x160D3, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
    $sig.make(0x160E5, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
    $sig.make(0x160BF, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", 
    $sig.make(0x16064, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
    $sig.make(0x160C1, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
    $sig.make(0x160E6, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
    $sig.make(0x160C2, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
    $sig.make(0x160C3, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
    $sig.make(0x160E7, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
    $sig.make(0x160E9, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustBeReducible", 
    $sig.make(0x16062, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustReduceToDifferent", 
    $sig.make(0x1604F, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
    $sig.make(0x1610F, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
    $sig.make(0x1610E, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
    $sig.make(0x16110, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
    $sig.make(0x160FE, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoOrInvalidRuleProduced", 
    $sig.make(0x160F1, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
    $sig.make(0x160C8, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
    $sig.make(0x1611C, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
    $sig.make(0x1611D, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", 
    $sig.make(0x1605E, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
    $sig.make(0x16084, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
    $sig.make(0x160C9, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
    $sig.make(0x160F5, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
    $sig.make(0x16086, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
    $sig.make(0x160CA, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", 
    $sig.make(0x16119, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyCannotHaveRefType", 
    $sig.make(0x16052, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
    $sig.make(0x160C7, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
    $sig.make(0x160C5, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
    $sig.make(0x160C6, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
    $sig.make(0x160CB, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyTyepMustMatchSetter", 
    $sig.make(0x1605C, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyTypeCannotBeVoid", 
    $sig.make(0x1605F, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
    $sig.make(0x160EA, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QueueEmpty", 
    $sig.make(0x160F6, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QuotedExpressionMustBeLambda", 
    $sig.make(0x16069, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReducedNotCompatible", 
    $sig.make(0x16050, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReducibleMustOverrideReduce", 
    $sig.make(0x1604E, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
    $sig.make(0x16082, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RethrowRequiresCatch", 
    $sig.make(0x1610C, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
    $sig.make(0x160EF, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SetterHasNoParams", 
    $sig.make(0x16051, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SetterMustBeVoid", 
    $sig.make(0x1605B, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StartEndMustBeOrdered", 
    $sig.make(0x1606C, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
    $sig.make(0x16117, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
    $sig.make(0x16116, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", 
    $sig.make(0x1606E, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryNotAllowedInFilter", 
    $sig.make(0x1610D, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
    $sig.make(0x16111, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
    $sig.make(0x16112, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
    $sig.make(0x160D0, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", 
    $sig.make(0x16058, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
    $sig.make(0x160D1, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
    $sig.make(0x160D2, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", 
    $sig.make(0x16065, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeMustNotBeByRef", 
    $sig.make(0x16057, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
    $sig.make(0x160D8, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
    $sig.make(0x160D9, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
    $sig.make(0x1607E, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
    $sig.make(0x16109, $asm06.TypeRef("System.Exception"), [
        $.Object, $.Object, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnexpectedCoalesceOperator", 
    $sig.make(0x160DA, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
    $sig.make(0x1610B, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
    $sig.make(0x160DC, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledBinding", 
    $sig.make(0x160DD, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
    $sig.make(0x160DE, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
    $sig.make(0x160DF, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
    $sig.make(0x160E0, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
    $sig.make(0x160E1, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnknownBindingType", 
    $sig.make(0x160E2, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
    $sig.make(0x16104, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
    $sig.make(0x16071, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
    $sig.make(0x16072, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
    $sig.make(0x160E3, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
    $sig.make(0x160E4, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
    $sig.make(0x1606A, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

});

JSIL.MakeInterface(
  "System.Linq.IQueryable", true, [], function ($) {
    $.Method({}, "get_Expression", $sig.make(0x161C1, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], []));
    $.Method({}, "get_ElementType", $sig.make(0x161C2, $asm06.TypeRef("System.Type"), [], []));
    $.Method({}, "get_Provider", $sig.make(0x161C3, $asm09.TypeRef("System.Linq.IQueryProvider"), [], []));
    $.Property({}, "Expression");
    $.Property({}, "ElementType");
    $.Property({}, "Provider");
  }, [$asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["T"], function ($) {
  }, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1")]), $asm09.TypeRef("System.Linq.IQueryable"), $asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IQueryProvider", true, [], function ($) {
    $.Method({}, "CreateQuery", $sig.make(0x161C4, $asm09.TypeRef("System.Linq.IQueryable"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], []));
    $.Method({}, "CreateQuery", $sig.make(0x161C5, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.Expressions.Expression")], ["TElement"]));
    $.Method({}, "Execute", $sig.make(0x161C6, $.Object, [$asm09.TypeRef("System.Linq.Expressions.Expression")], []));
    $.Method({}, "Execute", $sig.make(0x161C7, "!!0", [$asm09.TypeRef("System.Linq.Expressions.Expression")], ["TResult"]));
  }, []);

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable", true, [], function ($) {
  }, [$asm09.TypeRef("System.Linq.IQueryable"), $asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable`1", true, ["T"], function ($) {
  }, [$asm09.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1")]), $asm09.TypeRef("System.Linq.IOrderedQueryable"), $asm09.TypeRef("System.Linq.IQueryable"), $asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeStaticClass("System.Linq.Queryable", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x16291, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x16292, "!!1", [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])])
      ], ["TSource", "TAccumulate"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x16293, "!!2", [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!1", "!!2"])])
      ], ["TSource", "TAccumulate", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "All", 
    $sig.make(0x1624C, $.Boolean, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Any", 
    $sig.make(0x16239, $.Boolean, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Any", 
    $sig.make(0x1624B, $.Boolean, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
    $sig.make(0x161C8, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
    $sig.make(0x161D7, $asm09.TypeRef("System.Linq.IQueryable"), [$asm06.TypeRef("System.Collections.IEnumerable")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16272, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16273, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16274, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16275, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16276, $.Single, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16277, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16278, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16279, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1627A, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1627B, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1627C, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1627D, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1627E, $.Single, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1627F, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16280, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16281, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16282, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16286, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16289, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16290, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Cast", 
    $sig.make(0x161DB, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Concat", 
    $sig.make(0x1621C, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Contains", 
    $sig.make(0x16234, $.Boolean, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Contains", 
    $sig.make(0x16235, $.Boolean, [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0", 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x1624D, $.Int32, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x1624E, $.Int32, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
    $sig.make(0x16232, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
    $sig.make(0x16233, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Distinct", 
    $sig.make(0x1621A, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Distinct", 
    $sig.make(0x1621B, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
    $sig.make(0x16230, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
    $sig.make(0x16231, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x16222, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x16223, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "First", 
    $sig.make(0x16224, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "First", 
    $sig.make(0x16225, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
    $sig.make(0x16226, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
    $sig.make(0x16227, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetSourceExpression", 
    $sig.make(0x161EE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16209, $asm09.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1620A, $asm09.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1620B, $asm09.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1620C, $asm09.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1620D, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])])
      ], ["TSource", "TKey", "TElement", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1620F, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])])
      ], ["TSource", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16213, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16218, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x161F9, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x161FA, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x16220, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x16221, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x161F4, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x161F7, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Last", 
    $sig.make(0x16228, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Last", 
    $sig.make(0x16229, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
    $sig.make(0x1622A, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
    $sig.make(0x1622B, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LongCount", 
    $sig.make(0x1624F, $.Int64, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LongCount", 
    $sig.make(0x16250, $.Int64, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x16253, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x16254, "!!1", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16251, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16252, "!!1", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OfType", 
    $sig.make(0x161DA, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
    $sig.make(0x161FB, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
    $sig.make(0x161FC, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
    $sig.make(0x161FD, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
    $sig.make(0x161FE, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Reverse", 
    $sig.make(0x16236, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Select", 
    $sig.make(0x161DC, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Select", 
    $sig.make(0x161DD, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x161DE, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x161DF, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x161E0, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])])
      ], ["TSource", "TCollection", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x161E4, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])])
      ], ["TSource", "TCollection", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x16237, $.Boolean, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x16238, $.Boolean, [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Single", 
    $sig.make(0x1622C, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Single", 
    $sig.make(0x1622D, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
    $sig.make(0x1622E, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
    $sig.make(0x1622F, "!!0", [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Skip", 
    $sig.make(0x16206, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
    $sig.make(0x16207, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
    $sig.make(0x16208, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16255, $.Int32, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16256, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16257, $.Int64, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16258, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16259, $.Single, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1625A, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1625B, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1625C, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1625D, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1625E, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.IQueryable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16260, $.Int32, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16266, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1626A, $.Int64, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1626B, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1626C, $.Single, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1626D, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1626E, $.Double, [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1626F, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16270, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16271, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Take", 
    $sig.make(0x16203, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
    $sig.make(0x16204, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
    $sig.make(0x16205, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
    $sig.make(0x161FF, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
    $sig.make(0x16200, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
    $sig.make(0x16201, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
    $sig.make(0x16202, $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x1621E, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x1621F, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Where", 
    $sig.make(0x161D8, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Where", 
    $sig.make(0x161D9, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Zip", 
    $sig.make(0x1621D, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression`1", [$asm06.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])])
      ], ["TFirst", "TSecond", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x163A8, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", "!!0", 
          "!!0"
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x163A9, "!!1", [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ])
      ], ["TSource", "TAccumulate"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x163AA, "!!2", [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"])
      ], ["TSource", "TAccumulate", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "All", 
    $sig.make(0x163A1, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Any", 
    $sig.make(0x1639F, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Any", 
    $sig.make(0x163A0, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
    $sig.make(0x1637A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163F9, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163FA, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163FB, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163FC, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163FD, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163FE, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x163FF, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16400, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16401, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16402, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16403, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16404, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16409, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16410, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16416, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1641D, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x16425, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1642B, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1642C, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x1642D, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Cast", 
    $sig.make(0x1638A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.IEnumerable")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
    $sig.make(0x1638B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.IEnumerable")], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
    $sig.make(0x16334, $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm06.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
    $sig.make(0x16335, $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Concat", 
    $sig.make(0x16366, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
    $sig.make(0x16367, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Contains", 
    $sig.make(0x163A6, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Contains", 
    $sig.make(0x163A7, $.Boolean, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x163A2, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x163A3, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
    $sig.make(0x16385, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
    $sig.make(0x16386, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DefaultIfEmptyIterator", 
    $sig.make(0x16387, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distinct", 
    $sig.make(0x1636A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Distinct", 
    $sig.make(0x1636B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
    $sig.make(0x1636C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
    $sig.make(0x16398, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
    $sig.make(0x16399, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Empty", 
    $sig.make(0x1639E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x16373, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x16374, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
    $sig.make(0x16375, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "First", 
    $sig.make(0x1638C, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "First", 
    $sig.make(0x1638D, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
    $sig.make(0x1638E, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
    $sig.make(0x1638F, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1635E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1635F, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16360, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16361, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16362, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
            "!!2"
          ])
      ], ["TSource", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16363, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
            "!!3"
          ])
      ], ["TSource", "TKey", "TElement", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16364, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
            "!!2"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16365, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
            "!!3"
          ]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x16353, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x16354, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GroupJoinIterator", 
    $sig.make(0x16355, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x16370, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x16371, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "IntersectIterator", 
    $sig.make(0x16372, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x16350, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x16351, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "JoinIterator", 
    $sig.make(0x16352, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Last", 
    $sig.make(0x16390, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Last", 
    $sig.make(0x16391, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
    $sig.make(0x16392, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
    $sig.make(0x16393, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LongCount", 
    $sig.make(0x163A4, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LongCount", 
    $sig.make(0x163A5, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E3, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E4, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E5, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E6, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E7, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E8, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163E9, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163EA, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163EB, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163EC, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163ED, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163EE, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163EF, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F0, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F1, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F2, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F3, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F4, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F5, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F6, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F7, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x163F8, "!!1", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163C5, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163C6, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163C7, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163C8, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163C9, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163CA, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163CB, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163CC, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163CD, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163CE, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163CF, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163D0, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163D1, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163D2, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163D3, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163D4, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163D5, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163DE, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163DF, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163E0, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163E1, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x163E2, "!!1", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OfType", 
    $sig.make(0x16388, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.IEnumerable")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
    $sig.make(0x16389, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.IEnumerable")], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
    $sig.make(0x16356, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
    $sig.make(0x16357, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
    $sig.make(0x16358, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
    $sig.make(0x16359, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Range", 
    $sig.make(0x1639A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RangeIterator", 
    $sig.make(0x1639B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Repeat", 
    $sig.make(0x1639C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:false}, "RepeatIterator", 
    $sig.make(0x1639D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reverse", 
    $sig.make(0x16376, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
    $sig.make(0x16377, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Select", 
    $sig.make(0x16331, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Select", 
    $sig.make(0x16332, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          "!!1"
        ])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SelectIterator", 
    $sig.make(0x16333, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          "!!1"
        ])], ["TSource", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16336, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x1633B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
        ])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16340, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TSource", "TCollection", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16342, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TSource", "TCollection", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
    $sig.make(0x16337, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
    $sig.make(0x1633E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
        ])], ["TSource", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
    $sig.make(0x16341, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TSource", "TCollection", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
    $sig.make(0x16343, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TSource", "TCollection", "TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x16378, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x16379, $.Boolean, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Single", 
    $sig.make(0x16394, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Single", 
    $sig.make(0x16395, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
    $sig.make(0x16396, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
    $sig.make(0x16397, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Skip", 
    $sig.make(0x1634A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
    $sig.make(0x1634B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
    $sig.make(0x1634C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
    $sig.make(0x1634E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
    $sig.make(0x1634D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
    $sig.make(0x1634F, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163AB, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163AC, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163AD, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163AE, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163AF, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B0, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B1, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B2, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B3, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B4, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B5, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B6, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163B8, $.Int64, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163BE, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163BF, $.Single, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163C0, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163C1, $.Double, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163C2, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163C3, $asm06.TypeRef("System.Decimal"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x163C4, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Take", 
    $sig.make(0x16344, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
    $sig.make(0x16345, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
    $sig.make(0x16346, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
    $sig.make(0x16348, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
    $sig.make(0x16347, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
    $sig.make(0x16349, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
    $sig.make(0x1635A, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
    $sig.make(0x1635B, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
    $sig.make(0x1635C, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
    $sig.make(0x1635D, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToArray", 
    $sig.make(0x1637B, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x1637D, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x1637E, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x1637F, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x16380, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToList", 
    $sig.make(0x1637C, $asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x16381, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x16382, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x16383, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x16384, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x1636D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x1636E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "UnionIterator", 
    $sig.make(0x1636F, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Where", 
    $sig.make(0x1632E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Where", 
    $sig.make(0x1632F, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "WhereIterator", 
    $sig.make(0x16330, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Zip", 
    $sig.make(0x16368, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TFirst", "TSecond", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ZipIterator", 
    $sig.make(0x16369, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TFirst", "TSecond", "TResult"])
  );

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/Iterator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17C08, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17C09, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17C0A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x17C06, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x17C0B, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17C0C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17C0D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), "!!0"])], ["TResult"])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17C10, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17C07, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17C1A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17C0F, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "threadId", $.Int32); 
  $.Field({Static:false, Public:false}, "state", $.Int32); 
  $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), "System.Linq.Enumerable/WhereEnumerableIterator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17C5C, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17C5D, $asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17C5E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17C5F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17C60, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), "!!0"])], ["TResult"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17C61, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "enumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), "System.Linq.Enumerable/WhereArrayIterator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17C71, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17C74, $asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17C76, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17C78, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), "!!0"])], ["TResult"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17C79, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), "System.Linq.Enumerable/WhereListIterator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17C97, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17C98, $asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17C99, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17C9A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), "!!0"])], ["TResult"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17C9C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "enumerator", $asm06.TypeRef("System.Collections.Generic.List`1/Enumerator", [$.GenericParameter("TSource")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), "System.Linq.Enumerable/WhereSelectEnumerableIterator`2", false, ["TSource", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17CC3, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), $.Boolean]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17CC5, $asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17CCA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17CCC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17CCD, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), "!!0"])], ["TResult2"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17CCE, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
  $.Field({Static:false, Public:false}, "enumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), "System.Linq.Enumerable/WhereSelectArrayIterator`2", false, ["TSource", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17D0B, null, [
        $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), $.Boolean]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17D0C, $asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17D0D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17D0E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), "!!0"])], ["TResult2"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17D0F, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), "System.Linq.Enumerable/WhereSelectListIterator`2", false, ["TSource", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17D16, null, [
        $asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2"), $.Boolean]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x17D17, $asm09.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17D18, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Select", 
    $sig.make(0x17D19, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2"), "!!0"])], ["TResult2"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Where", 
    $sig.make(0x17D1A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), [$asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2"), $.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
  $.Field({Static:false, Public:false}, "enumerator", $asm06.TypeRef("System.Collections.Generic.List`1/Enumerator", [$.GenericParameter("TSource")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<WhereIterator>d__0`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17D72, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
    $sig.make(0x17D73, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17D6F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17D6D, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17D6B, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17D6E, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17D6C, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17D70, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17D71, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:true }, "$predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:true }, "index", $.Int32); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap3", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectIterator>d__7`2", false, ["TSource", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17DC8, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb", 
    $sig.make(0x17DC9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17DC4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17DC1, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17DBD, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17DC2, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17DBF, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17DC6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17DC7, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "selector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$selector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "index", $.Int32); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrapa", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<>c__DisplayClassf`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E06, null, [], [])
  );

  $.Field({Static:false, Public:true }, "predicate1", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "predicate2", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<>c__DisplayClass12`3", false, ["TSource", "TMiddle", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E39, null, [], [])
  );

  $.Field({Static:false, Public:true }, "selector1", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")])); 
  $.Field({Static:false, Public:true }, "selector2", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__14`2", false, ["TSource", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E96, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally18", 
    $sig.make(0x17E99, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1a", 
    $sig.make(0x17E9A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17E84, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17E7E, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17E78, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17E7F, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17E7A, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17E87, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17E92, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])])); 
  $.Field({Static:false, Public:true }, "$selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])])); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:true }, "$wrap17", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$wrap19", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__1d`2", false, ["TSource", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F37, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally22", 
    $sig.make(0x17F38, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally24", 
    $sig.make(0x17F39, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17F2F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17F29, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17F23, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17F2B, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17F27, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17F32, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17F35, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "selector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
      ])); 
  $.Field({Static:false, Public:true }, "$selector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
      ])); 
  $.Field({Static:false, Public:true }, "index$1e", $.Int32); 
  $.Field({Static:false, Public:true }, "element$1f", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:true }, "$wrap21", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$wrap23", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__27`3", false, ["TSource", "TCollection", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F8C, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2c", 
    $sig.make(0x17F8D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2e", 
    $sig.make(0x17F8E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17F89, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17F87, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17F85, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17F88, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17F86, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17F8A, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17F8B, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "collectionSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
      ])); 
  $.Field({Static:false, Public:true }, "$collectionSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
      ])); 
  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "index", $.Int32); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "subElement$2a", $.GenericParameter("TCollection")); 
  $.Field({Static:false, Public:true }, "$wrap2b", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$wrap2d", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__31`3", false, ["TSource", "TCollection", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17FB6, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally35", 
    $sig.make(0x17FB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally37", 
    $sig.make(0x17FBC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17FAA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17FA8, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17FA5, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17FA9, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17FA7, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17FAC, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17FB4, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "collectionSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])])); 
  $.Field({Static:false, Public:true }, "$collectionSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])])); 
  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TCollection")); 
  $.Field({Static:false, Public:true }, "$wrap34", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$wrap36", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<TakeIterator>d__3a`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18044, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3d", 
    $sig.make(0x18046, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1803D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18038, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18036, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1803B, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18037, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1803F, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18041, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "count", $.Int32); 
  $.Field({Static:false, Public:true }, "$count", $.Int32); 
  $.Field({Static:false, Public:true }, "element$3b", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap3c", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<TakeWhileIterator>d__40`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1806C, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally43", 
    $sig.make(0x1806D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18069, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18067, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18065, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x18068, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18066, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1806A, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1806B, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "$predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap42", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<TakeWhileIterator>d__46`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1809E, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4a", 
    $sig.make(0x1809F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1809B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18099, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18097, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1809A, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18098, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1809C, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1809D, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:true }, "$predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:true }, "index", $.Int32); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap49", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SkipIterator>d__4d`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x180D3, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4f", 
    $sig.make(0x180D4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x180CF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x180CD, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x180CA, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x180CE, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x180CB, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x180D1, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x180D2, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "count", $.Int32); 
  $.Field({Static:false, Public:true }, "$count", $.Int32); 
  $.Field({Static:false, Public:true }, "e$4e", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SkipWhileIterator>d__52`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1810D, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally56", 
    $sig.make(0x1810E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18108, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18106, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18102, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x18107, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18104, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1810B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1810C, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "$predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "yielding", $.Boolean); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap55", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<SkipWhileIterator>d__59`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x181A1, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally5e", 
    $sig.make(0x181A3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1819C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18199, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18193, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1819A, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18197, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1819E, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x181A0, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:true }, "$predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TSource"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:true }, "index$5a", $.Int32); 
  $.Field({Static:false, Public:true }, "yielding$5b", $.Boolean); 
  $.Field({Static:false, Public:true }, "element$5c", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap5d", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<JoinIterator>d__61`4", false, ["TOuter", "TInner", "TKey", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x181E5, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally67", 
    $sig.make(0x181E6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x181E0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x181DA, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x181D2, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x181DD, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x181D5, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x181E2, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x181E4, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "outer", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
  $.Field({Static:false, Public:true }, "$outer", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
  $.Field({Static:false, Public:true }, "inner", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "$inner", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "outerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "$outerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "innerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "$innerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "$comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "lookup", $asm09.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "item", $.GenericParameter("TOuter")); 
  $.Field({Static:false, Public:true }, "g", $asm09.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Field({Static:false, Public:true }, "$wrap66", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4", false, ["TOuter", "TInner", "TKey", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1821A, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally6e", 
    $sig.make(0x1821C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18214, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18212, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1820D, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x18213, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18210, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18216, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18218, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "outer", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
  $.Field({Static:false, Public:true }, "$outer", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
  $.Field({Static:false, Public:true }, "inner", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "$inner", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "outerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "$outerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "innerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "$innerKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TOuter"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TOuter"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "$comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:true }, "lookup$6b", $asm09.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
  $.Field({Static:false, Public:true }, "item$6c", $.GenericParameter("TOuter")); 
  $.Field({Static:false, Public:true }, "$wrap6d", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<ConcatIterator>d__71`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18261, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally75", 
    $sig.make(0x18263, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally77", 
    $sig.make(0x18264, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18252, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x1824B, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1823F, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1824F, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18242, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1825C, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1825E, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap74", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$wrap76", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<ZipIterator>d__7a`3", false, ["TFirst", "TSecond", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18285, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally7d", 
    $sig.make(0x18286, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally7e", 
    $sig.make(0x18287, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18282, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18280, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1827E, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x18281, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x1827F, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18283, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18284, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")])); 
  $.Field({Static:false, Public:true }, "$first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")])); 
  $.Field({Static:false, Public:true }, "second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")])); 
  $.Field({Static:false, Public:true }, "$second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")])); 
  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "e1$7b", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TFirst")])); 
  $.Field({Static:false, Public:true }, "e2$7c", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSecond")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<DistinctIterator>d__81`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F4E, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally85", 
    $sig.make(0x17F50, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17F48, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17F45, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17F42, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17F46, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17F44, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17F4A, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17F4C, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "set", $asm09.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap84", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<UnionIterator>d__88`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17FD1, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally8d", 
    $sig.make(0x17FD3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally8f", 
    $sig.make(0x17FD4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17FCB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17FC8, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17FC2, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17FC9, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17FC5, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17FCD, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17FCF, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "set", $asm09.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "element$8a", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "element$8b", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap8c", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$wrap8e", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<IntersectIterator>d__92`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17FF8, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally96", 
    $sig.make(0x17FF9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17FF5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17FF2, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17FEC, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17FF4, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17FEF, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17FF6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17FF7, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "set", $asm09.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap95", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<ExceptIterator>d__99`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18025, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally9d", 
    $sig.make(0x18026, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18022, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18020, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1801E, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x18021, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x1801F, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18023, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18024, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$first", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$second", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "set$9a", $asm09.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "element$9b", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$wrap9c", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<ReverseIterator>d__a0`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x180E0, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x180DD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x180DA, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x180CC, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x180DC, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x180D0, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x180DE, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x180DF, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "buffer$a1", $asm09.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "i$a2", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x178CF, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallya7", 
    $sig.make(0x178D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x178CB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x178BF, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x178BA, new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x178C0, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x178BD, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x178CC, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x178CD, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:true }, "defaultValue", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "$defaultValue", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:true }, "e$a6", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<OfTypeIterator>d__aa`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x178FC, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyae", 
    $sig.make(0x178FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x178F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x178F6, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x178F1, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x178F7, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x178F4, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x178FA, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x178FB, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.IEnumerable")); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.IEnumerable")); 
  $.Field({Static:false, Public:true }, "obj$ab", $.Object); 
  $.Field({Static:false, Public:true }, "$wrapac", $asm06.TypeRef("System.Collections.IEnumerator")); 
  $.Field({Static:false, Public:true }, "$wrapad", $asm06.TypeRef("System.IDisposable")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<CastIterator>d__b1`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17925, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb5", 
    $sig.make(0x17927, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17922, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x1791F, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1791B, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17920, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x1791D, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17923, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17924, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.IEnumerable")); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.IEnumerable")); 
  $.Field({Static:false, Public:true }, "obj$b2", $.Object); 
  $.Field({Static:false, Public:true }, "$wrapb3", $asm06.TypeRef("System.Collections.IEnumerator")); 
  $.Field({Static:false, Public:true }, "$wrapb4", $asm06.TypeRef("System.IDisposable")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<RangeIterator>d__b8", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1798B, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17983, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x1797F, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17979, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17982, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x1797D, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17985, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17987, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.Int32); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "start", $.Int32); 
  $.Field({Static:false, Public:true }, "$start", $.Int32); 
  $.Field({Static:false, Public:true }, "count", $.Int32); 
  $.Field({Static:false, Public:true }, "$count", $.Int32); 
  $.Field({Static:false, Public:true }, "i$b9", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Enumerable/<RepeatIterator>d__bc`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x179C3, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x179C0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x179BE, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x179B9, new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x179BF, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x179BC, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x179C1, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x179C2, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:true }, "$element", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:true }, "count", $.Int32); 
  $.Field({Static:false, Public:true }, "$count", $.Int32); 
  $.Field({Static:false, Public:true }, "i$bd", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.EmptyEnumerable`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16093, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
    $sig.make(0x16090, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.EmptyEnumerable`1")]), [], [])
  );

  $.Field({Static:true , Public:false}, "instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
  $.GenericProperty({Static:true , Public:true }, "Instance", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.EmptyEnumerable`1")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.IdentityFunction`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1612D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
    $sig.make(0x1612C, $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1"), new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1")]), [], [])
  );

  $.GenericProperty({Static:true , Public:true }, "Instance", $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1"), new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1")]));

});

JSIL.MakeInterface(
  "System.Linq.IOrderedEnumerable`1", true, ["TElement"], function ($) {
    $.Method({}, "CreateOrderedEnumerable", $sig.make(0x16147, $.Type, [
          $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1"), "!!0"]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"]));
  }, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1")]), $asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Key", $sig.make(0x16148, new JSIL.GenericParameter("TKey", "System.Linq.IGrouping`2"), [], []));
    $.Property({}, "Key");
  }, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2")]), $asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.ILookup`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Count", $sig.make(0x16149, $.Int32, [], []));
    $.Method({}, "get_Item", $sig.make(0x1614A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2")], []));
    $.Method({}, "Contains", $sig.make(0x1614B, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2")], []));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")])]), $asm06.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Lookup`2", true, ["TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1615D, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ApplyResultSelector", 
    $sig.make(0x16165, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Func`3", [
          new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), 
          "!!0"
        ])], ["TResult"])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x16160, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x1615B, $.Type, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")]), 
        $asm06.TypeRef("System.Func`2", ["!!0", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])
      ], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateForJoin", 
    $sig.make(0x1615C, $.Type, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x16155, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x16159, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16163, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetGrouping", 
    $sig.make(0x16169, $asm09.TypeRef("System.Linq.Lookup`2/Grouping", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
    $sig.make(0x16168, $.Int32, [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Resize", 
    $sig.make(0x1616A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16167, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "groupings", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
  $.Field({Static:false, Public:false}, "lastGrouping", $asm09.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]));

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.ILookup`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")])]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Lookup`2/Grouping", false, ["TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1618A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x1617A, null, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x16173, new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16180, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x16182, null, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0x16183, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Contains", 
    $sig.make(0x16184, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.CopyTo", 
    $sig.make(0x16185, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_Count", 
    $sig.make(0x16174, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x16175, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x16186, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.get_Item", 
    $sig.make(0x16177, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.IndexOf", 
    $sig.make(0x16187, $.Int32, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.Insert", 
    $sig.make(0x16188, null, [$.Int32, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.RemoveAt", 
    $sig.make(0x16189, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.set_Item", 
    $sig.make(0x16178, null, [$.Int32, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16181, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "hashNext", $.Type); 
  $.Field({Static:false, Public:false}, "next", $.Type); 
  $.Property({Static:false, Public:true , Virtual:true }, "Key", new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IList`1.Item", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping"));

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), $asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7", false, ["TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1838D, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1837A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18376, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18378, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18387, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1838A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Lookup`2/<GetEnumerator>d__0", false, ["TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17A78, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17A75, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17A73, $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17A74, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17A76, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17A77, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "g", $asm09.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")])]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1", false, ["TKey", "TElement", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17AB8, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17AB5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17AB3, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17AB1, new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17AB4, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17AB2, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17AB6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17AB7, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "$resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
        $.GenericParameter("TResult")
      ])); 
  $.Field({Static:false, Public:true }, "g", $asm09.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Set`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1619B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1619C, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x1619D, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x1619E, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Find", 
    $sig.make(0x161A0, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
    $sig.make(0x161A2, $.Int32, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x1619F, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Resize", 
    $sig.make(0x161A1, null, [], [])
  );

  $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Set`1/Slot", [$.GenericParameter("TElement")])])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "freeList", $.Int32); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Set`1/Slot", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "next", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.GroupedEnumerable`4", false, ["TSource", "TKey", "TElement", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x161AF, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4"), new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`4")]), $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`4")]), 
            new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")
          ]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x161B0, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x161B1, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "elementSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
        $.GenericParameter("TResult")
      ])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")]), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.GroupedEnumerable`3", false, ["TSource", "TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16242, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16243, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16244, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "elementSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")])]), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.OrderedEnumerable`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16288, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumerableSorter", 
    $sig.make(0x16284, $asm09.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [$asm09.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16283, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16285, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IOrderedEnumerable`1.CreateOrderedEnumerable", 
    $sig.make(0x16287, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1"), "!!0"]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
        $.Boolean
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17B5C, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17B59, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17B57, new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17B58, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17B5A, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17B5B, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "buffer", $asm09.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "sorter", $asm09.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "map", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.OrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), "System.Linq.OrderedEnumerable`2", false, ["TElement", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162B2, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2"), new JSIL.GenericParameter("TKey", "System.Linq.OrderedEnumerable`2")]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.OrderedEnumerable`2")]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumerableSorter", 
    $sig.make(0x162B3, $asm09.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), [$asm09.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")])], [])
  );

  $.Field({Static:false, Public:false}, "parent", $asm09.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "descending", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.EnumerableSorter`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1629A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompareKeys", 
    $sig.make(0x16297, $.Int32, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputeKeys", 
    $sig.make(0x16296, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
    $sig.make(0x16299, null, [
        $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Sort", 
    $sig.make(0x16298, $jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`1")]), $.Int32], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), "System.Linq.EnumerableSorter`2", false, ["TElement", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162DD, null, [
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2"), new JSIL.GenericParameter("TKey", "System.Linq.EnumerableSorter`2")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.EnumerableSorter`2")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompareKeys", 
    $sig.make(0x162DF, $.Int32, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputeKeys", 
    $sig.make(0x162DE, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "descending", $.Boolean); 
  $.Field({Static:false, Public:false}, "next", $asm09.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Buffer`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162EE, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Buffer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToArray", 
    $sig.make(0x162EF, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.Buffer`1")]), [], [])
  );

  $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.SystemCore_EnumerableDebugView`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x163D7, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x163D6, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")]), [], [])
  );

  $.Field({Static:false, Public:false}, "enumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
  $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
  $.Field({Static:false, Public:false}, "count", $.Int32)
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Exception"), "System.Linq.SystemCore_EnumerableDebugViewEmptyException", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x164FF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
    $sig.make(0x164FE, $.String, [], [])
  );

  $.Property({Static:false, Public:true }, "Empty", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.SystemCore_EnumerableDebugView", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1651C, null, [$asm06.TypeRef("System.Collections.IEnumerable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x1651A, $jsilcore.TypeRef("System.Array", [$.Object]), [], [])
  );

  $.Field({Static:false, Public:false}, "enumerable", $asm06.TypeRef("System.Collections.IEnumerable"))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
  $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.Object]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
  $.Field({Static:false, Public:false}, "count", $.Int32)
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeStaticClass("System.Linq.ParallelEnumerable", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x16569, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", "!!0", 
          "!!0"
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
    $sig.make(0x1656A, "!!0", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ]), 
        $asm09.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x1656B, "!!1", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ])
      ], ["TSource", "TAccumulate"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
    $sig.make(0x1656C, "!!1", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ]), $asm09.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
      ], ["TSource", "TAccumulate"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x1656D, "!!2", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"])
      ], ["TSource", "TAccumulate", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x1656E, "!!2", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ]), $asm06.TypeRef("System.Func`3", [
            "!!1", "!!1", 
            "!!1"
          ]), 
        $asm06.TypeRef("System.Func`2", ["!!1", "!!2"])
      ], ["TSource", "TAccumulate", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
    $sig.make(0x1656F, "!!2", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ]), $asm06.TypeRef("System.Func`3", [
            "!!1", "!!1", 
            "!!1"
          ]), 
        $asm06.TypeRef("System.Func`2", ["!!1", "!!2"])
      ], ["TSource", "TAccumulate", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "All", 
    $sig.make(0x165D3, $.Boolean, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Any", 
    $sig.make(0x165D1, $.Boolean, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Any", 
    $sig.make(0x165D2, $.Boolean, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
    $sig.make(0x165F1, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
    $sig.make(0x1652A, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
    $sig.make(0x1652B, $asm09.TypeRef("System.Linq.ParallelQuery"), [$asm09.TypeRef("System.Linq.ParallelQuery")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
    $sig.make(0x16528, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
    $sig.make(0x16529, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Concurrent.Partitioner`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
    $sig.make(0x1652D, $asm09.TypeRef("System.Linq.ParallelQuery"), [$asm06.TypeRef("System.Collections.IEnumerable")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsSequential", 
    $sig.make(0x1652E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "AsUnordered", 
    $sig.make(0x1652C, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165BD, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165BE, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165BF, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C0, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C1, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C2, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C3, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C4, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C5, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C6, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C7, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C8, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165C9, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165CA, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165CB, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165CC, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165CD, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165CE, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165CF, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Average", 
    $sig.make(0x165D0, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Cast", 
    $sig.make(0x165FE, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Concat", 
    $sig.make(0x165DC, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Concat", 
    $sig.make(0x165DD, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

  $.ExternalMethod({Static:true , Public:true }, "Contains", 
    $sig.make(0x165D4, $.Boolean, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Contains", 
    $sig.make(0x165D5, $.Boolean, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0", 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x16570, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Count", 
    $sig.make(0x16571, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
    $sig.make(0x1660C, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
    $sig.make(0x1660D, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DisposeEnumerator", 
    $sig.make(0x165E1, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!0"]), $asm09.TypeRef("System.Linq.Parallel.CancellationState")], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Distinct", 
    $sig.make(0x165E3, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Distinct", 
    $sig.make(0x165E4, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
    $sig.make(0x1660E, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
    $sig.make(0x1660F, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Empty", 
    $sig.make(0x16536, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x165ED, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x165EE, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x165EF, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Except", 
    $sig.make(0x165F0, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

  $.ExternalMethod({Static:true , Public:true }, "First", 
    $sig.make(0x16600, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "First", 
    $sig.make(0x16601, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
    $sig.make(0x16602, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
    $sig.make(0x16603, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ForAll", 
    $sig.make(0x16537, null, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Action`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetOneWithPossibleDefault", 
    $sig.make(0x165FF, "!!0", [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", ["!!0"]), $.Boolean, 
        $.Boolean
      ], ["TSource"])
  );

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1655C, $asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1655D, $asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1655E, $asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x1655F, $asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16562, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
            "!!2"
          ])
      ], ["TSource", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16564, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
            "!!2"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16565, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
            "!!3"
          ])
      ], ["TSource", "TKey", "TElement", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
    $sig.make(0x16566, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`3", [
            "!!1", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
            "!!3"
          ]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x1654C, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x1654D, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x1654E, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
    $sig.make(0x1654F, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x165E9, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x165EA, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x165EB, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x165EC, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x16548, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x16549, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x1654A, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Join", 
    $sig.make(0x1654B, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!1", "!!2"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!3"
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
      ], ["TOuter", "TInner", "TKey", "TResult"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Last", 
    $sig.make(0x16604, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Last", 
    $sig.make(0x16605, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
    $sig.make(0x16606, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
    $sig.make(0x16607, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LongCount", 
    $sig.make(0x16572, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "LongCount", 
    $sig.make(0x16573, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x1659E, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165A1, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165A8, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165AA, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165AB, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165AC, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165AD, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165AE, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165AF, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B0, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B1, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B2, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B3, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B4, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B5, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B6, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B7, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B8, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165B9, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165BA, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165BB, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Max", 
    $sig.make(0x165BC, "!!1", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16588, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16589, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1658A, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1658B, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1658C, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1658D, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1658E, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1658F, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16590, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16591, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16592, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16593, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16594, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16595, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16596, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16597, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16598, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x16599, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1659A, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1659B, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1659C, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x1659D, "!!1", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OfType", 
    $sig.make(0x165FD, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
    $sig.make(0x16554, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
    $sig.make(0x16555, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
    $sig.make(0x16556, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
    $sig.make(0x16557, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "PerformAggregation", 
    $sig.make(0x16567, "!!0", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ]), 
        "!!0", $.Boolean, 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
      ], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "PerformSequentialAggregation", 
    $sig.make(0x16568, "!!1", [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
        $.Boolean, $asm06.TypeRef("System.Func`3", [
            "!!1", "!!0", 
            "!!1"
          ])
      ], ["TSource", "TAccumulate"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Range", 
    $sig.make(0x16534, $asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int32]), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Repeat", 
    $sig.make(0x16535, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Reverse", 
    $sig.make(0x165FC, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Select", 
    $sig.make(0x1653A, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Select", 
    $sig.make(0x1653E, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          "!!1"
        ])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16550, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16551, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
        ])], ["TSource", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16552, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TSource", "TCollection", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
    $sig.make(0x16553, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TSource", "TCollection", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x165DE, $.Boolean, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x165DF, $.Boolean, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x165E0, $.Boolean, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
    $sig.make(0x165E2, $.Boolean, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Single", 
    $sig.make(0x16608, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Single", 
    $sig.make(0x16609, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
    $sig.make(0x1660A, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
    $sig.make(0x1660B, "!!0", [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Skip", 
    $sig.make(0x165D9, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
    $sig.make(0x165DA, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
    $sig.make(0x165DB, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16574, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16575, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16576, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16577, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16578, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16579, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1657A, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1657B, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1657C, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Decimal")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1657D, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1657E, $.Int32, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x1657F, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16580, $.Int64, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16581, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16582, $.Single, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16583, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16584, $.Double, [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16585, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16586, $asm06.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Decimal")])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Sum", 
    $sig.make(0x16587, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Take", 
    $sig.make(0x165D6, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
    $sig.make(0x165D7, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
    $sig.make(0x165D8, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
    $sig.make(0x16558, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
    $sig.make(0x16559, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
    $sig.make(0x1655A, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
    $sig.make(0x1655B, $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToArray", 
    $sig.make(0x165F2, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x165F4, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x165F5, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x165F6, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
    $sig.make(0x165F7, $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToList", 
    $sig.make(0x165F3, $asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x165F8, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x165F9, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x165FA, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
    $sig.make(0x165FB, $asm09.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
      ], ["TSource", "TKey", "TElement"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x165E5, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x165E6, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x165E7, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x165E8, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
      ], ["TSource"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Where", 
    $sig.make(0x16538, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Where", 
    $sig.make(0x16539, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Func`3", [
          "!!0", $.Int32, 
          $.Boolean
        ])], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "WithCancellation", 
    $sig.make(0x16531, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Threading.CancellationToken")], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "WithDegreeOfParallelism", 
    $sig.make(0x16530, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "WithExecutionMode", 
    $sig.make(0x16532, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelExecutionMode")], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "WithMergeOptions", 
    $sig.make(0x16533, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelMergeOptions")], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "WithTaskScheduler", 
    $sig.make(0x1652F, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")], ["TSource"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Zip", 
    $sig.make(0x16540, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TFirst", "TSecond", "TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Zip", 
    $sig.make(0x16545, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
        $asm06.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])
      ], ["TFirst", "TSecond", "TResult"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Constant({Static:true , Public:false}, "RIGHT_SOURCE_NOT_PARALLEL_STR", "The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."); 
})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.ParallelEnumerable/<>c__DisplayClass3`3", false, ["TSource", "TKey", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17B7B, null, [], [])
  );

  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
        $.GenericParameter("TResult")
      ])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.ParallelEnumerable/<>c__DisplayClass6`3", false, ["TSource", "TKey", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17B9B, null, [], [])
  );

  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
        $.GenericParameter("TResult")
      ])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.ParallelEnumerable/<>c__DisplayClass9`4", false, ["TSource", "TKey", "TElement", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17BCA, null, [], [])
  );

  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
        $.GenericParameter("TResult")
      ])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.ParallelEnumerable/<>c__DisplayClassc`4", false, ["TSource", "TKey", "TElement", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17BD8, null, [], [])
  );

  $.Field({Static:false, Public:true }, "resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TKey"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
        $.GenericParameter("TResult")
      ])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.ExecutionScope", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16802, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateDelegate", 
    $sig.make(0x16804, $asm06.TypeRef("System.Delegate"), [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateHoistedLocals", 
    $sig.make(0x16803, $jsilcore.TypeRef("System.Array", [$.Object]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsolateExpression", 
    $sig.make(0x16805, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.Field({Static:false, Public:true }, "Parent", $.Type); 
  $.Field({Static:false, Public:true }, "Globals", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
})
  .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this type", true]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.EnumerableQuery", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16837, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x16835, $asm09.TypeRef("System.Linq.IQueryable"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.IEnumerable")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x16836, $asm09.TypeRef("System.Linq.IQueryable"), [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Enumerable", 
    $sig.make(0x16834, $asm06.TypeRef("System.Collections.IEnumerable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Expression", 
    $sig.make(0x16833, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm06.TypeRef("System.Collections.IEnumerable"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.EnumerableQuery"), "System.Linq.EnumerableQuery`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16857, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1685A, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Enumerable", 
    $sig.make(0x16851, $asm06.TypeRef("System.Collections.IEnumerable"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Expression", 
    $sig.make(0x1684E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
    $sig.make(0x1686B, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x1686A, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16869, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryable.get_ElementType", 
    $sig.make(0x16856, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryable.get_Expression", 
    $sig.make(0x16853, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryable.get_Provider", 
    $sig.make(0x16848, $asm09.TypeRef("System.Linq.IQueryProvider"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryProvider.CreateQuery", 
    $sig.make(0x16860, $asm09.TypeRef("System.Linq.IQueryable"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryProvider.CreateQuery", 
    $sig.make(0x16863, $asm09.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.Expressions.Expression")], ["S"])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryProvider.Execute", 
    $sig.make(0x16865, $.Object, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IQueryProvider.Execute", 
    $sig.make(0x16868, "!!0", [$asm09.TypeRef("System.Linq.Expressions.Expression")], ["S"])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1686C, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false}, "enumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IQueryable.Provider", $asm09.TypeRef("System.Linq.IQueryProvider"));

  $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm06.TypeRef("System.Collections.IEnumerable"));

  $.Property({Static:false, Public:false, Virtual:true }, "IQueryable.Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:false, Virtual:true }, "IQueryable.ElementType", $asm06.TypeRef("System.Type"));

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.IOrderedQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), $asm09.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      $asm09.TypeRef("System.Linq.IOrderedQueryable"), $asm09.TypeRef("System.Linq.IQueryable"), 
      $asm09.TypeRef("System.Linq.IQueryProvider"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.EnumerableExecutor", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x168A7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x168A6, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExecuteBoxed", 
    $sig.make(0x168A5, $.Object, [], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.EnumerableExecutor"), "System.Linq.EnumerableExecutor`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x168C0, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Execute", 
    $sig.make(0x168C3, new JSIL.GenericParameter("T", "System.Linq.EnumerableExecutor`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExecuteBoxed", 
    $sig.make(0x168C2, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false}, "func", $asm06.TypeRef("System.Func`1", [$.GenericParameter("T")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.OldExpressionVisitor"), "System.Linq.EnumerableRewriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x168E9, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgsMatch", 
    $sig.make(0x168F3, $.Boolean, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindEnumerableMethod", 
    $sig.make(0x168F1, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $.String, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
    $sig.make(0x168F2, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), 
        $asm06.TypeRef("System.Reflection.BindingFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FixupQuotedArgs", 
    $sig.make(0x168EB, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FixupQuotedExpression", 
    $sig.make(0x168EC, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetPublicType", 
    $sig.make(0x168EE, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StripExpression", 
    $sig.make(0x168F4, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConstant", 
    $sig.make(0x168EF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x168ED, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMethodCall", 
    $sig.make(0x168EA, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x168F0, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.Field({Static:true , Public:false}, "_seqMethods", $asm09.TypeRef("System.Linq.ILookup`2", [$.String, $asm06.TypeRef("System.Reflection.MethodInfo")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.EnumerableRewriter/<>c__DisplayClass3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17BE6, null, [], [])
  );

  $.Field({Static:false, Public:true }, "args", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.EnumerableRewriter/<>c__DisplayClass7", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17BFD, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$name", $.String); 
  $.Field({Static:false, Public:true }, "args", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("System.Linq.TypeHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
    $sig.make(0x16928, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
    $sig.make(0x16927, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
    $sig.make(0x1692A, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsEnumerableType", 
    $sig.make(0x16925, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsKindOfGeneric", 
    $sig.make(0x16926, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
    $sig.make(0x16929, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

});

JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidId", 
    $sig.make(0x16983, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidSerializedString", 
    $sig.make(0x16984, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
    $sig.make(0x1697A, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
    $sig.make(0x1697B, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
    $sig.make(0x1697E, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
    $sig.make(0x1697C, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
    $sig.make(0x1697D, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesAmbiguousOverlap", 
    $sig.make(0x16947, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesInvalidOverlap", 
    $sig.make(0x1694A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesNoNulls", 
    $sig.make(0x16942, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesOutOfOrder", 
    $sig.make(0x16944, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlap", 
    $sig.make(0x16948, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", 
    $sig.make(0x16949, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_ConvertMismatch", 
    $sig.make(0x1694B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTicks", 
    $sig.make(0x16954, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTimeOfDay", 
    $sig.make(0x1694D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsInvalid", 
    $sig.make(0x1694F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsNotAmbiguous", 
    $sig.make(0x16951, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeKindMustBeUnspecified", 
    $sig.make(0x16953, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeOffsetIsNotAmbiguous", 
    $sig.make(0x16952, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_InvalidREG_TZI_FORMAT", 
    $sig.make(0x16955, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_OutOfOrderDateTimes", 
    $sig.make(0x16956, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeSpanHasSeconds", 
    $sig.make(0x16957, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoBadTZif", 
    $sig.make(0x16958, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoInvalidTZif", 
    $sig.make(0x16959, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Argument_TransitionTimesAreIdentical", 
    $sig.make(0x1695A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DateTimeBadTicks", 
    $sig.make(0x16962, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayOfWeek", 
    $sig.make(0x1695C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayParam", 
    $sig.make(0x1695B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_MonthParam", 
    $sig.make(0x1695D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffset", 
    $sig.make(0x1695E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffsetAndDaylightDelta", 
    $sig.make(0x1695F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_Week", 
    $sig.make(0x16960, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_EmptyEnumerable", 
    $sig.make(0x16940, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_IncompatibleElementTypes", 
    $sig.make(0x16937, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidTimeZone_InvalidWin32APIData", 
    $sig.make(0x16961, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneElement", 
    $sig.make(0x16938, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneMatch", 
    $sig.make(0x16939, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
    $sig.make(0x1693A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
    $sig.make(0x1693E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
    $sig.make(0x16936, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_BinaryOpMustUseAsParallel", 
    $sig.make(0x1696D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_ToArray_DimensionRequired", 
    $sig.make(0x1696A, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithCancellation_TokenSourceDisposed", 
    $sig.make(0x1696E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithMergeOptions_InvalidOptions", 
    $sig.make(0x1696C, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithQueryExecutionMode_InvalidMode", 
    $sig.make(0x1696B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_IncorretElementCount", 
    $sig.make(0x16969, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullElement", 
    $sig.make(0x16968, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullReturn", 
    $sig.make(0x16967, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateDOP", 
    $sig.make(0x16973, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateExecutionMode", 
    $sig.make(0x16975, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateMergeOptions", 
    $sig.make(0x16976, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateTaskScheduler", 
    $sig.make(0x16972, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateWithCancellation", 
    $sig.make(0x16974, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidAsOrderedCall", 
    $sig.make(0x1696F, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidNonGenericAsOrderedCall", 
    $sig.make(0x16970, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_PartitionerNotOrderable", 
    $sig.make(0x16971, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartition", 
    $sig.make(0x16979, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartitionList", 
    $sig.make(0x16977, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_WrongNumberOfPartitions", 
    $sig.make(0x16978, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_CommonEnumerator_Current_NotStarted", 
    $sig.make(0x16963, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_DisposeRequested", 
    $sig.make(0x16965, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_EnumerationPreviouslyFailed", 
    $sig.make(0x16966, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_ExternalCancellationRequested", 
    $sig.make(0x16964, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", 
    $sig.make(0x16985, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
    $sig.make(0x1697F, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
    $sig.make(0x16980, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
    $sig.make(0x16981, $.String, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
    $sig.make(0x16982, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Security_CannotReadRegistryData", 
    $sig.make(0x16986, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Serialization_CorruptField", 
    $sig.make(0x16987, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", 
    $sig.make(0x16988, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", 
    $sig.make(0x16989, $.String, [$.Object], [])
  );

  $.Property({Static:true , Public:false}, "OwningTeam", $.String);

  $.Property({Static:true , Public:false}, "IncompatibleElementTypes", $.String);

  $.Property({Static:true , Public:false}, "MoreThanOneElement", $.String);

  $.Property({Static:true , Public:false}, "MoreThanOneMatch", $.String);

  $.Property({Static:true , Public:false}, "NoElements", $.String);

  $.Property({Static:true , Public:false}, "NoMatch", $.String);

  $.Property({Static:true , Public:false}, "EmptyEnumerable", $.String);

  $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", $.String);

  $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", $.String);

  $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", $.String);

  $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", $.String);

  $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", $.String);

  $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", $.String);

  $.Property({Static:true , Public:false}, "Argument_ConvertMismatch", $.String);

  $.Property({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", $.String);

  $.Property({Static:true , Public:false}, "Argument_DateTimeIsInvalid", $.String);

  $.Property({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", $.String);

  $.Property({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", $.String);

  $.Property({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", $.String);

  $.Property({Static:true , Public:false}, "Argument_DateTimeHasTicks", $.String);

  $.Property({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", $.String);

  $.Property({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", $.String);

  $.Property({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", $.String);

  $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", $.String);

  $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", $.String);

  $.Property({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_Week", $.String);

  $.Property({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", $.String);

  $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", $.String);

  $.Property({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", $.String);

  $.Property({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", $.String);

  $.Property({Static:true , Public:false}, "PLINQ_DisposeRequested", $.String);

  $.Property({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", $.String);

  $.Property({Static:true , Public:false}, "ParallelPartitionable_NullReturn", $.String);

  $.Property({Static:true , Public:false}, "ParallelPartitionable_NullElement", $.String);

  $.Property({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", $.String);

  $.Property({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", $.String);

  $.Property({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", $.String);

  $.Property({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", $.String);

  $.Property({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", $.String);

  $.Property({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", $.String);

  $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", $.String);

  $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", $.String);

  $.Property({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", $.String);

  $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", $.String);

});

JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
    $sig.make(0x16A12, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
    $sig.make(0x16A13, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
    $sig.make(0x16A17, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
    $sig.make(0x16A14, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
    $sig.make(0x16A15, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
    $sig.make(0x16A20, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
    $sig.make(0x16A21, $asm06.TypeRef("System.Exception"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncompatibleElementTypes", 
    $sig.make(0x16A16, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MoreThanOneElement", 
    $sig.make(0x16A18, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MoreThanOneMatch", 
    $sig.make(0x16A19, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
    $sig.make(0x16A1A, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoElements", 
    $sig.make(0x16A1B, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
    $sig.make(0x16A1C, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
    $sig.make(0x16A1D, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
    $sig.make(0x16A1E, $asm06.TypeRef("System.Exception"), [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
    $sig.make(0x16A1F, $asm06.TypeRef("System.Exception"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
    $sig.make(0x16A22, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
    $sig.make(0x16A23, $asm06.TypeRef("System.Exception"), [], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.DynamicAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16A3A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16A3C, null, [$jsilcore.TypeRef("System.Array", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TransformFlags", 
    $sig.make(0x16A35, $asm06.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_transformFlags", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Property({Static:false, Public:true }, "TransformFlags", $asm06.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "Class", "Field", "Parameter", "Property", 
        "ReturnValue", "Struct"
    )]; });

JSIL.MakeEnum(
  "System.Linq.ParallelMergeOptions", true, {
    Default: 0, 
    NotBuffered: 1, 
    AutoBuffered: 2, 
    FullyBuffered: 3
  }, false
);

JSIL.MakeEnum(
  "System.Linq.ParallelExecutionMode", true, {
    Default: 0, 
    ForceParallelism: 1
  }, false
);

JSIL.DeclareNamespace("System.Linq.Parallel");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.AsynchronousChannel`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A84, null, [$.Int32, $asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A85, null, [
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x16A92, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DoneWithDequeueWait", 
    $sig.make(0x16A91, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
    $sig.make(0x16A88, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnqueueChunk", 
    $sig.make(0x16A89, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushBuffers", 
    $sig.make(0x16A86, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushCachedChunk", 
    $sig.make(0x16A8B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsChunkBufferEmpty", 
    $sig.make(0x16A82, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsDone", 
    $sig.make(0x16A83, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
    $sig.make(0x16A81, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalDequeueChunk", 
    $sig.make(0x16A90, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDone", 
    $sig.make(0x16A87, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
    $sig.make(0x16A8C, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
    $sig.make(0x16A8E, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Threading.ManualResetEventSlim")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
    $sig.make(0x16A8D, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
    $sig.make(0x16A8F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Threading.ManualResetEventSlim")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WaitUntilNonFull", 
    $sig.make(0x16A8A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_buffer", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])); 
  $.Field({Static:false, Public:false}, "m_producerBufferIndex", $asm06.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_consumerBufferIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_done", $asm06.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "m_producerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_producerChunkIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_consumerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_consumerChunkIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_chunkSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_producerEvent", $asm06.TypeRef("System.Threading.ManualResetEventSlim")); 
  $.Field({Static:false, Public:false}, "m_consumerEvent", $asm06.TypeRef("System.Threading.ManualResetEventSlim")); 
  $.Field({Static:false, Public:false}, "m_producerIsWaiting", $asm06.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_consumerIsWaiting", $asm06.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Property({Static:false, Public:false}, "IsFull", $.Boolean);

  $.Property({Static:false, Public:false}, "IsChunkBufferEmpty", $.Boolean);

  $.Property({Static:false, Public:false}, "IsDone", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SynchronousChannel`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16AA1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
    $sig.make(0x16AA6, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannel`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
    $sig.make(0x16AA4, new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannel`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
    $sig.make(0x16AA3, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannel`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x16AA0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x16AA2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetDone", 
    $sig.make(0x16AA5, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_queue", $asm07.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:false}, "Count", $.Int32);

});

JSIL.MakeStaticClass("System.Linq.AggregationMinMaxHelpers`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "MakeFinalReduceFunction", 
    $sig.make(0x165A4, $asm06.TypeRef("System.Func`3", [
          $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), 
          $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])
        ]), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeIntermediateReduceFunction", 
    $sig.make(0x165A3, $asm06.TypeRef("System.Func`3", [
          $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), 
          $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])
        ]), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeResultSelectorFunction", 
    $sig.make(0x165A5, $asm06.TypeRef("System.Func`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Reduce", 
    $sig.make(0x1659F, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReduceMax", 
    $sig.make(0x165A2, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReduceMin", 
    $sig.make(0x165A0, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.AggregationMinMaxHelpers`1/<>c__DisplayClass1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17DFD, null, [], [])
  );

  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "sign", $.Int32); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.AggregationMinMaxHelpers`1/<>c__DisplayClass4", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E5F, null, [], [])
  );

  $.Field({Static:false, Public:true }, "comparer", $asm06.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "sign", $.Int32); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.ParallelQuery", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14E8D, null, [$asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Cast", 
    $sig.make(0x14E95, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [], ["TCastTo"])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SpecifiedQuerySettings", 
    $sig.make(0x14E8C, $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumeratorUntyped", 
    $sig.make(0x14E9A, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OfType", 
    $sig.make(0x14E97, $asm09.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [], ["TCastTo"])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x14E9E, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_specifiedSettings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.Property({Static:false, Public:false}, "SpecifiedQuerySettings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings"));

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery"), "System.Linq.ParallelQuery`1", true, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14FE0, null, [$asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Cast", 
    $sig.make(0x14FE1, $.Type, [], ["TCastTo"])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x14FE6, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.ParallelQuery`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumeratorUntyped", 
    $sig.make(0x14FE4, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OfType", 
    $sig.make(0x14FE2, $.Type, [], ["TCastTo"])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.ParallelQuery`1")]), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerable`1")]), "System.Linq.Parallel.EmptyEnumerable`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x166CE, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
    $sig.make(0x166CD, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x166CF, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerable`1")]), [], [])
  );

  $.Field({Static:true , Public:false}, "s_instance", $.Type); 
  $.Field({Static:true , Public:false}, "s_enumeratorInstance", $asm09.TypeRef("System.Linq.Parallel.EmptyEnumerator`1", [$.GenericParameter("T")])); 
  $.GenericProperty({Static:true , Public:false}, "Instance", $.Type);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryOperatorEnumerator`2", false, ["TElement", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1536A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsClassicEnumerator", 
    $sig.make(0x15369, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15366, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15367, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x15365, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.QueryOperatorEnumerator`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x15368, null, [], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator", false, ["TElement", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17E7B, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17E82, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x17E77, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17E7D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x17E85, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17E79, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "m_operatorEnumerator", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_current", $.GenericParameter("TElement")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.EmptyEnumerator`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16719, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x16714, new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x16716, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x16717, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x16715, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x16718, null, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.EnumerableWrapperWeakToStrong", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16732, null, [$asm06.TypeRef("System.Collections.IEnumerable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16734, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16733, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm06.TypeRef("System.Collections.IEnumerable")); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.EnumerableWrapperWeakToStrong/WrapperEnumeratorWeakToStrong", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17F13, null, [$asm06.TypeRef("System.Collections.IEnumerator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17F12, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17F11, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17F15, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17F16, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17F14, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_wrappedEnumerator", $asm06.TypeRef("System.Collections.IEnumerator")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeInterface(
  "System.Linq.Parallel.IParallelPartitionable`1", false, ["T"], function ($) {
    $.Method({}, "GetPartitions", $sig.make(0x167C9, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.IParallelPartitionable`1"), $.Int32])]), [$.Int32], []));
  }, []);

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Object")]), "System.Linq.Parallel.ParallelEnumerableWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x167CD, null, [$asm06.TypeRef("System.Collections.IEnumerable")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x167CF, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumeratorUntyped", 
    $sig.make(0x167CE, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm06.TypeRef("System.Collections.IEnumerable")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), "System.Linq.Parallel.ParallelEnumerableWrapper`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x167DE, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_WrappedEnumerable", 
    $sig.make(0x167DC, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x167DF, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:false}, "WrappedEnumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]));

});

JSIL.MakeEnum(
  "System.Linq.Parallel.QueryAggregationOptions", false, {
    None: 0, 
    Associative: 1, 
    Commutative: 2, 
    AssociativeCommutative: 3
  }, true
);

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [$asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.RangeEnumerable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1682A, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x1682C, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPartitions", 
    $sig.make(0x1682B, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32])]), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "m_from", $.Int32); 
  $.Field({Static:false, Public:false}, "m_count", $.Int32); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [$.Int32]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.RangeEnumerable/RangeEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17F64, null, [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17F66, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x17F67, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_from", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_initialIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]), "System.Linq.Parallel.RepeatEnumerable`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1683E, null, [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16840, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPartitions", 
    $sig.make(0x1683F, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1"), $.Int32])]), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "m_element", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false}, "m_count", $.Int32); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17F7C, null, [
        new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17F7D, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x17F7E, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_element", $.GenericParameter("TResult")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.MergeEnumerator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x168B7, null, [$asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x168BA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x168B5, new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeEnumerator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x168B8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x168B9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x168B6, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "m_taskGroupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeEnumerator`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeEnumerator`1")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1")]), "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16912, null, [$asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1")])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x1690F, new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x16913, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
    $sig.make(0x16915, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WaitAny", 
    $sig.make(0x16916, $.Int32, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Threading.ManualResetEventSlim")])], [])
  );

  $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("T")])])); 
  $.Field({Static:false, Public:false}, "m_channelEvents", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Threading.ManualResetEventSlim")])); 
  $.Field({Static:false, Public:false}, "m_done", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1"));

});

JSIL.MakeInterface(
  "System.Linq.Parallel.IMergeHelper`1", false, ["TInputOutput"], function ($) {
    $.Method({}, "Execute", $sig.make(0x158DF, null, [], []));
    $.Method({}, "GetEnumerator", $sig.make(0x158E3, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IMergeHelper`1")]), [], []));
    $.Method({}, "GetResultsAsArray", $sig.make(0x158E5, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IMergeHelper`1")]), [], []));
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ArrayMergeHelper`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x169A4, null, [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Execute", 
    $sig.make(0x169AA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x169AC, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetResultsAsArray", 
    $sig.make(0x169AE, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToArrayElement", 
    $sig.make(0x169A7, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "m_queryResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_outputArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.DefaultMergeHelper`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x169D8, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.DefaultMergeHelper`2")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.ParallelMergeOptions"), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), 
        $asm09.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetResultsAsArray", 
    $sig.make(0x169DF, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IMergeHelper`1.Execute", 
    $sig.make(0x169DA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IMergeHelper`1.GetEnumerator", 
    $sig.make(0x169DB, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2")]), [], [])
  );

  $.Field({Static:false, Public:false}, "m_taskGroupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:false}, "m_partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:false}, "m_asyncChannels", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:false}, "m_syncChannels", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:false}, "m_channelEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.Field({Static:false, Public:false}, "m_ignoreOutput", $.Boolean); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2")]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.MergeExecutor`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x158B5, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Execute", 
    $sig.make(0x158B6, $.Type, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1"), "!!0"]), $.Boolean, 
        $asm09.TypeRef("System.Linq.ParallelMergeOptions"), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.CancellationState"), 
        $.Int32
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "Execute", 
    $sig.make(0x158B7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x158B9, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetResultsAsArray", 
    $sig.make(0x158BA, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeAsynchronousChannels", 
    $sig.make(0x158BB, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")])]), [
        $.Int32, $asm09.TypeRef("System.Linq.ParallelMergeOptions"), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeSynchronousChannels", 
    $sig.make(0x158BC, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")])]), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x158B8, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_mergeHelper", $asm09.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")]), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderPreservingMergeHelper`2", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A00, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), 
        $asm09.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetResultsAsArray", 
    $sig.make(0x16A03, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IMergeHelper`1.Execute", 
    $sig.make(0x16A01, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IMergeHelper`1.GetEnumerator", 
    $sig.make(0x16A02, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]), [], [])
  );

  $.Field({Static:false, Public:false}, "m_taskGroupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:false}, "m_partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_results", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:false}, "m_taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A26, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1"), $.Int32]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), 
        $asm09.TypeRef("System.Linq.Parallel.CancellationState"), $.Boolean, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetResultsAsArray", 
    $sig.make(0x16A29, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IMergeHelper`1.Execute", 
    $sig.make(0x16A27, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IMergeHelper`1.GetEnumerator", 
    $sig.make(0x16A28, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1")]), [], [])
  );

  $.Constant({Static:true , Public:false}, "INITIAL_BUFFER_SIZE", 128); 
  $.Constant({Static:true , Public:false}, "STEAL_BUFFER_SIZE", 1024); 
  $.Constant({Static:true , Public:false}, "MAX_BUFFER_SIZE", 8192); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:true , Public:false}, "s_producerComparer", $asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer", [$.GenericParameter("TOutput")])); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1")]))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A99, null, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "MaxKey", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "ProducerIndex", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16A5C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x16A5A, $.Int32, [$asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer")]), $asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer")])], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IComparer`1", [$asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer")])]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")]), "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17FFF, null, [$asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x18005, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x17FFE, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x18001, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ThrowIfInTearDown", 
    $sig.make(0x18002, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryGetPrivateElement", 
    $sig.make(0x18004, $.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryWaitForElement", 
    $sig.make(0x18003, $.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")])])], [])
  );

  $.Field({Static:false, Public:false}, "m_mergeHelper", $asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerHeap", $asm09.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$asm09.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [$.GenericParameter("TOutput")])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerNextElement", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_privateBuffer", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
  $.Field({Static:false, Public:false}, "m_initialized", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1")]), "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16AC1, null, [$asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1")])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x16ABF, new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x16AC2, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("T")])])); 
  $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.HashRepartitionEnumerator`3", false, ["TInputOutput", "THashKey", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16AFD, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), 
        $asm09.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
            new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3"), 
            $.Int32
          ]), $asm06.TypeRef("System.Threading.CountdownEvent"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")])])]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x16B00, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
    $sig.make(0x16AFF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x16AFE, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", -1); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm09.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
        $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
        $.Int32
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:false}, "m_barrier", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.HashRepartitionEnumerator`3/Mutables", [
        $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
        $.GenericParameter("TIgnoreKey")
      ])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.HashRepartitionEnumerator`3/Mutables", false, ["TInputOutput", "THashKey", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16BE5, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentBuffer", $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])); 
  $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PartitionedStream`2", false, ["TElement", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1526A, null, [
        $.Int32, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]), 
        $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x15265, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionedStream`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
    $sig.make(0x15268, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x15269, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PartitionCount", 
    $sig.make(0x15267, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x15266, null, [$.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionedStream`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")])], [])
  );

  $.Field({Static:false, Public:false}, "m_partitions", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
  $.Property({Static:false, Public:false}, "Item", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionedStream`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]));

  $.Property({Static:false, Public:true }, "PartitionCount", $.Int32);

  $.Property({Static:false, Public:false}, "KeyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]));

  $.Property({Static:false, Public:false}, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.HashRepartitionStream`3")]), "System.Linq.Parallel.HashRepartitionStream`3", false, ["TInputOutput", "THashKey", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16B09, null, [
        $.Int32, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.HashRepartitionStream`3")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
    $sig.make(0x16B0B, $.Int32, [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
    $sig.make(0x16B0E, $.Int32, [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")], [])
  );

  $.Constant({Static:true , Public:false}, "NULL_ELEMENT_HASH_CODE", 0); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_distributionMod", $.Int32); 
});

JSIL.MakeInterface(
  "System.Linq.Parallel.IPartitionedStreamRecipient`1", false, ["TElement"], function ($) {
    $.Method({}, "Receive", $sig.make(0x15364, null, [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.IPartitionedStreamRecipient`1"), "!!0"])], ["TKey"]));
  }, []);

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3", false, ["TInputOutput", "THashKey", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C1F, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), 
        $asm09.TypeRef("System.Linq.Parallel.OrderedHashRepartitionStream`3", [
            new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), 
            new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")
          ]), $asm06.TypeRef("System.Threading.CountdownEvent"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])])]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x16C26, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
    $sig.make(0x16C24, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x16C22, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])], [])
  );

  $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", -1); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm09.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
        $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
        $.GenericParameter("TOrderKey")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")])); 
  $.Field({Static:false, Public:false}, "m_barrier", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.OrderedHashRepartitionEnumerator`3/Mutables", [
        $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
        $.GenericParameter("TOrderKey")
      ])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3/Mutables", false, ["TInputOutput", "THashKey", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C40, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentBuffer", $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])); 
  $.Field({Static:false, Public:false}, "m_currentKeyBuffer", $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")])); 
  $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), 
      new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")
    ]), "System.Linq.Parallel.OrderedHashRepartitionStream`3", false, ["TInputOutput", "THashKey", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C47, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionedDataSource`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C61, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1")]), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializePartitions", 
    $sig.make(0x16C62, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1")]), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakePartitions", 
    $sig.make(0x16C64, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1"), $.Int32])]), [$asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1")]), $.Int32], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18039, null, [
        $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator")]), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x1803A, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
    $sig.make(0x1803C, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator/Mutables", [$.GenericParameter("T")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator/Mutables", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18074, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentSection", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1808F, null, [
        $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator")]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x18090, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x180C1, null, [
        $asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator")]), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x180C2, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
    $sig.make(0x180C3, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm06.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator/Mutables", [$.GenericParameter("T")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator/Mutables", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18133, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentSection", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18149, null, [
        $asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator")]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x1814A, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm06.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x180F3, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator")]), $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), 
        $.Object, $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x180F5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x180F4, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Constant({Static:true , Public:false}, "chunksPerChunkSize", 7); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sourceSyncLock", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_currentIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_activeEnumeratorsCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_exceptionTracker", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator/Mutables", [$.GenericParameter("T")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator/Mutables", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18129, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_chunkBuffer", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_nextChunkMaxSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentChunkIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_chunkBaseIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_chunkCounter", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), 
      $asm06.TypeRef("System.Int32")
    ]), "System.Linq.Parallel.UnorderedHashRepartitionStream`3", false, ["TInputOutput", "THashKey", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C77, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), "System.Linq.Parallel.QueryOperator`1", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15024, null, [$asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15026, null, [$.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AsQueryOperator", 
    $sig.make(0x15037, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x15033, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExecuteAndCollectResults", 
    $sig.make(0x15036, $asm09.TypeRef("System.Linq.Parallel.ListQueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1"), "!!0"]), $.Int32, 
        $.Boolean, $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExecuteAndGetResultsAsArray", 
    $sig.make(0x15030, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x1501F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x15022, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OutputOrdered", 
    $sig.make(0x1501D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x15029, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x1502A, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
    $sig.make(0x1502B, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOpenedEnumerator", 
    $sig.make(0x1502C, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [
        $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean, 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetQueryResults", 
    $sig.make(0x1502E, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x15028, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "m_outputOrdered", $.Boolean); 
  $.Property({Static:false, Public:false}, "OutputOrdered", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2")]), "System.Linq.Parallel.UnaryQueryOperator`2", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15935, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15937, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1593A, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15943, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15945, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Child", 
    $sig.make(0x15930, $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x15932, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndexState", 
    $sig.make(0x1594C, null, [$asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x1594F, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_child", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")])); 
  $.Field({Static:false, Public:false}, "m_indexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
  $.Property({Static:false, Public:false}, "Child", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]));

  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryResults`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1512F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x15119, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x15115, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x15114, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x15116, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x1511D, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x1511C, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x15118, null, [$.Int32, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x15122, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0x15124, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Contains", 
    $sig.make(0x15125, $.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.CopyTo", 
    $sig.make(0x15127, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x1511B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x15128, $.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x1512B, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.IndexOf", 
    $sig.make(0x1511E, $.Int32, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.Insert", 
    $sig.make(0x1511F, null, [$.Int32, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList`1.RemoveAt", 
    $sig.make(0x15120, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1512D, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.DeclareNamespace("$lSystem");
JSIL.DeclareNamespace("$lSystem.Collections");
JSIL.DeclareNamespace("$lSystem.Collections.Generic");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lT$g");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17C27, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17C21, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17C19, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17C1E, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17C24, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17C26, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("T")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "index", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")]), "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17CB8, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x17CB9, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")])], [])
  );

  $.Field({Static:false, Public:false}, "m_childQueryResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")])); 
  $.Field({Static:false, Public:false}, "m_op", $asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x183B5, null, [
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient")]), $asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Receive", 
    $sig.make(0x183B6, null, [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient"), "!!0"])], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_outputRecipient", $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_op", $asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient")]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), "System.Linq.Parallel.AssociativeAggregationOperator`3", false, ["TInput", "TIntermediate", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16B94, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), 
        $asm06.TypeRef("System.Func`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), $.Boolean, 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), 
            new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")
          ]), $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), 
            new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")
          ]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
    $sig.make(0x16B96, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16B9C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16B8F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16B98, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16B9B, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_seed", $.GenericParameter("TIntermediate")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_seedIsSpecified", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_throwIfEmpty", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_intermediateReduce", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TIntermediate"), $.GenericParameter("TInput"), 
        $.GenericParameter("TIntermediate")
      ])); 
  $.Field({Static:false, Public:false}, "m_finalReduce", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TIntermediate"), $.GenericParameter("TIntermediate"), 
        $.GenericParameter("TIntermediate")
      ])); 
  $.Field({Static:false, Public:false}, "m_resultSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TIntermediate"), $.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_seedFactory", $asm06.TypeRef("System.Func`1", [$.GenericParameter("TIntermediate")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1", false, ["TInput", "TIntermediate", "TOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17C44, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1")]), $asm09.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
            new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1")
          ]), 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17C46, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17C45, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_reduceOperator", $asm09.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
        $.GenericParameter("TInput"), $.GenericParameter("TIntermediate"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_accumulated", $.Boolean); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), "System.Linq.Parallel.PartitionerQueryOperator`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x150B2, null, [$asm06.TypeRef("System.Collections.Concurrent.Partitioner`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x150B4, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x150B1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Orderable", 
    $sig.make(0x150AF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x150B0, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetOrdinalIndexState", 
    $sig.make(0x150B5, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm06.TypeRef("System.Collections.Concurrent.Partitioner`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x150B3, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "m_partitioner", $asm06.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:false}, "Orderable", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults")]), "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x178B9, null, [$asm06.TypeRef("System.Collections.Concurrent.Partitioner`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x178BB, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults")])], [])
  );

  $.Field({Static:false, Public:false}, "m_partitioner", $asm06.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x178E6, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x178E8, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x178E7, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, $.GenericParameter("TElement")])])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17904, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17906, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17905, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1794D, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
    $sig.make(0x1794F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17943, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17941, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1793F, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17942, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17940, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17948, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1794A, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.PartitionerQueryOperator`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "enumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), "System.Linq.Parallel.ScanQueryOperator`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1539B, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x153A0, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Data", 
    $sig.make(0x15395, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x15398, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x15396, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
    $sig.make(0x1539E, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x1539D, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:true }, "Data", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]));

  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults")]), "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1790B, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x17913, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults")])], [])
  );

  $.Field({Static:false, Public:false}, "m_data", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3")]), "System.Linq.Parallel.BinaryQueryOperator`3", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x153F6, null, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x153F8, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LeftChild", 
    $sig.make(0x153F3, $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x153F5, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_RightChild", 
    $sig.make(0x153F4, $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndex", 
    $sig.make(0x153FA, null, [$asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x153FD, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false}, "m_indexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
  $.Property({Static:false, Public:false}, "LeftChild", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]));

  $.Property({Static:false, Public:false}, "RightChild", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")]));

  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")]), "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17931, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")
          ]), $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x17932, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftChildQueryResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")])); 
  $.Field({Static:false, Public:false}, "m_rightChildQueryResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false}, "m_op", $asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1837F, null, [
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient")]), $asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient")
          ]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Receive", 
    $sig.make(0x18382, null, [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient"), "!!0"])], ["TLeftKey"])
  );

  $.Field({Static:false, Public:false}, "m_outputRecipient", $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_results", $asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient")]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1", false, ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x183A5, null, [
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")]), $asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")
          ]), 
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Receive", 
    $sig.make(0x183A6, null, [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), "!!0"])], ["TRightKey"])
  );

  $.Field({Static:false, Public:false}, "m_outputRecipient", $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_leftPartitionedStream", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_op", $asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), 
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")
    ]), "System.Linq.Parallel.ExceptQueryOperator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15446, null, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1544A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x15445, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x15447, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x15448, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
    $sig.make(0x15449, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1", false, ["TInputOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17958, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1795A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17959, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1", false, ["TInputOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17972, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17975, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17974, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])])])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
      new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), 
      new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")
    ]), "System.Linq.Parallel.GroupJoinQueryOperator`4", false, ["TLeftInput", "TRightInput", "TKey", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1546A, null, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1547C, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x15467, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x1546C, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x15476, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
    $sig.make(0x1547A, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5", false, [
    "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
    "TOutput"
  ], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15511, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $.Int32]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")
          ]), $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")
          ]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15513, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x15512, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("THashKey")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $.GenericParameter("THashKey")]), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_singleResultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_groupResultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5/Mutables", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey"), 
        $.GenericParameter("TRightInput"), $.GenericParameter("THashKey"), 
        $.GenericParameter("TOutput")
      ])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5/Mutables", false, [
    "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
    "TOutput"
  ], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15520, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentLeft", $.GenericParameter("TLeftInput")); 
  $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey")); 
  $.Field({Static:false, Public:false}, "m_rightHashLookup", $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$.GenericParameter("THashKey"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")])])])); 
  $.Field({Static:false, Public:false}, "m_currentRightMatches", $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false}, "m_currentRightMatchesIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), 
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")
    ]), "System.Linq.Parallel.IntersectQueryOperator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1560C, null, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x15615, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x1560B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x15610, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x15611, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
    $sig.make(0x15613, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1", false, ["TInputOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x179B3, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x179B5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x179B4, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1", false, ["TInputOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17961, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17963, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17962, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_hashLookup", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
      new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), 
      new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")
    ]), "System.Linq.Parallel.JoinQueryOperator`4", false, ["TLeftInput", "TRightInput", "TKey", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15683, null, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")
          ]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1568D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x15682, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x1568B, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x15684, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
    $sig.make(0x15685, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), 
      new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")
    ]), "System.Linq.Parallel.UnionQueryOperator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15709, null, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1570E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x15708, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x1570A, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x1570B, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedBothTypes", 
    $sig.make(0x1570D, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TLeftKey", "TRightKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedLeftType", 
    $sig.make(0x1570C, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2", false, ["TInputOutput", "TLeftKey", "TRightKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x179AA, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), 
        $.Int32, $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x179AC, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x179AB, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")])]), "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2", false, ["TInputOutput", "TLeftKey", "TRightKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x179D3, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), 
        $.Boolean, $.Boolean, 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")])]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x179D5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x179D4, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")])])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")])); 
  $.Field({Static:false, Public:false}, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])); 
  $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])])); 
  $.Field({Static:false, Public:false}, "m_leftOrdered", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_rightOrdered", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), "System.Linq.Parallel.ZipQueryOperator`3", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x157A6, null, [
        $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")
          ])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x157A7, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")
          ])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x157A9, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x157A5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x157A4, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x157A8, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")]), "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A07, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")
          ]), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x17A05, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x17A06, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x17A08, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x17A09, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChildResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_preferStriping", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x179EE, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
    $sig.make(0x179F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
    $sig.make(0x179F3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x179E8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x179E4, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x179DE, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x179E6, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x179E1, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x179EB, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x179EC, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TOutput")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.ZipQueryOperator`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:true }, "token", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:true }, "$token", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:true }, "leftEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TLeftInput")])); 
  $.Field({Static:false, Public:true }, "rightEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PartitionedStreamMerger`1", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x158A1, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.ParallelMergeOptions"), 
        $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MergeExecutor", 
    $sig.make(0x158A0, $asm09.TypeRef("System.Linq.Parallel.MergeExecutor`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Receive", 
    $sig.make(0x158A2, null, [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1"), "!!0"])], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_forEffectMerge", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_mergeOptions", $asm09.TypeRef("System.Linq.ParallelMergeOptions")); 
  $.Field({Static:false, Public:false}, "m_isOrdered", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_mergeExecutor", $asm09.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.Field({Static:false, Public:false}, "m_queryId", $.Int32); 
  $.Field({Static:false, Public:false}, "m_cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Property({Static:false, Public:false}, "MergeExecutor", $asm09.TypeRef("System.Linq.Parallel.MergeExecutor`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1")]));

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1")]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryOpeningEnumerator`1", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15902, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1")]), $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x15903, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x158FE, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x15904, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OpenQuery", 
    $sig.make(0x15906, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x15907, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x15901, $.Object, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_queryOperator", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_openedQueryEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_querySettings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_mergeOptions", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_suppressOrderPreservation", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_moveNextIteration", $.Int32); 
  $.Field({Static:false, Public:false}, "m_hasQueryOpeningFailed", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelDisposedFlag", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelCancellationTokenSource", $asm06.TypeRef("System.Threading.CancellationTokenSource")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), "System.Linq.Parallel.InlinedAggregationOperator`3", false, ["TSource", "TIntermediate", "TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x159A0, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
    $sig.make(0x159A1, new JSIL.GenericParameter("TResult", "System.Linq.Parallel.InlinedAggregationOperator`3"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x159A6, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x159A5, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3"), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x1599F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x159A2, new JSIL.GenericParameter("TResult", "System.Linq.Parallel.InlinedAggregationOperator`3"), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x159A3, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x159A4, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1"), $asm06.TypeRef("System.Int32"), 
      $asm06.TypeRef("System.Int32")
    ]), "System.Linq.Parallel.CountAggregationOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x159CD, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x159CF, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1"), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x159CE, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", false, ["TIntermediate"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x159F6, null, [$.Int32, $asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x159F7, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x159F8, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1", false, ["TSource", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A43, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A45, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17A44, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1"), $asm06.TypeRef("System.Int64"), 
      $asm06.TypeRef("System.Int64")
    ]), "System.Linq.Parallel.LongCountAggregationOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A1A, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15A1D, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1"), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15A1B, $.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Int64")]), "System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1", false, ["TSource", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A52, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A57, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17A53, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Decimal"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Decimal")
    ]), "System.Linq.Parallel.DecimalAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A26, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15A2B, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15A28, $asm06.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.DecimalAverageAggregationOperator/DecimalAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A88, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DecimalAverageAggregationOperator/DecimalAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A8A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17A89, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal"), 
      $asm06.TypeRef("System.Decimal")
    ]), "System.Linq.Parallel.DecimalMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A68, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15A6A, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15A69, $asm06.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Decimal")]), "System.Linq.Parallel.DecimalMinMaxAggregationOperator/DecimalMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17AA8, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DecimalMinMaxAggregationOperator/DecimalMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17AAA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17AA9, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Decimal"), 
      $asm06.TypeRef("System.Decimal")
    ]), "System.Linq.Parallel.DecimalSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A7B, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Decimal")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15A7F, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15A7D, $asm06.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Decimal")]), "System.Linq.Parallel.DecimalSumAggregationOperator/DecimalSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17AE9, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DecimalSumAggregationOperator/DecimalSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17AEB, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17AEA, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Decimal")])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Decimal"), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Double"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Double")
    ]), "System.Linq.Parallel.DoubleAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A8B, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15A8F, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15A8D, $.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.DoubleAverageAggregationOperator/DoubleAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17AF8, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DoubleAverageAggregationOperator/DoubleAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17AFA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17AF9, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Double"), 
      $asm06.TypeRef("System.Double")
    ]), "System.Linq.Parallel.DoubleMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15AAC, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15AB0, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15AAD, $.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Double")]), "System.Linq.Parallel.DoubleMinMaxAggregationOperator/DoubleMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A10, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DoubleMinMaxAggregationOperator/DoubleMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A12, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17A11, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Double"), 
      $asm06.TypeRef("System.Double")
    ]), "System.Linq.Parallel.DoubleSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15AE4, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15AE6, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15AE5, $.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Double")]), "System.Linq.Parallel.DoubleSumAggregationOperator/DoubleSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A7F, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DoubleSumAggregationOperator/DoubleSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A81, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17A80, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Single"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Single")
    ]), "System.Linq.Parallel.FloatAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B29, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15B2C, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15B2A, $.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.FloatAverageAggregationOperator/FloatAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A91, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.FloatAverageAggregationOperator/FloatAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A93, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17A92, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single"), 
      $asm06.TypeRef("System.Single")
    ]), "System.Linq.Parallel.FloatMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B87, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15B89, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15B88, $.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Single")]), "System.Linq.Parallel.FloatMinMaxAggregationOperator/FloatMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17ABF, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.FloatMinMaxAggregationOperator/FloatMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17AC1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17AC0, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Double"), 
      $asm06.TypeRef("System.Single")
    ]), "System.Linq.Parallel.FloatSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15BF7, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15BFA, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15BF9, $.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Double")]), "System.Linq.Parallel.FloatSumAggregationOperator/FloatSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17AD3, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.FloatSumAggregationOperator/FloatSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17AD5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17AD4, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Int32"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Double")
    ]), "System.Linq.Parallel.IntAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15C20, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15C2B, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15C22, $.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.IntAverageAggregationOperator/IntAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B01, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.IntAverageAggregationOperator/IntAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B03, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B02, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32"), 
      $asm06.TypeRef("System.Int32")
    ]), "System.Linq.Parallel.IntMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15C66, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15C68, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15C67, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.IntMinMaxAggregationOperator/IntMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B29, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.IntMinMaxAggregationOperator/IntMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B2B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B2A, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32"), 
      $asm06.TypeRef("System.Int32")
    ]), "System.Linq.Parallel.IntSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15C7D, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15C7F, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15C7E, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.IntSumAggregationOperator/IntSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B6D, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.IntSumAggregationOperator/IntSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B70, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B6F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Int64"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Double")
    ]), "System.Linq.Parallel.LongAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15C8C, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15C8E, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15C8D, $.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.LongAverageAggregationOperator/LongAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B20, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongAverageAggregationOperator/LongAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B22, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B21, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64"), 
      $asm06.TypeRef("System.Int64")
    ]), "System.Linq.Parallel.LongMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15CA9, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15CAB, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15CAA, $.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Int64")]), "System.Linq.Parallel.LongMinMaxAggregationOperator/LongMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B3A, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongMinMaxAggregationOperator/LongMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B3E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B3C, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64"), 
      $asm06.TypeRef("System.Int64")
    ]), "System.Linq.Parallel.LongSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D02, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15D04, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15D03, $.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Int64")]), "System.Linq.Parallel.LongSumAggregationOperator/LongSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B4E, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongSumAggregationOperator/LongSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B50, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B4F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])
    ]), "System.Linq.Parallel.NullableDecimalAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D3C, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15D3E, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15D3D, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableDecimalAverageAggregationOperator/NullableDecimalAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B89, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDecimalAverageAggregationOperator/NullableDecimalAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B8B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B8A, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Decimal"), $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])
    ]), "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D5D, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15D5F, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15D5E, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])]), "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator/NullableDecimalMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17C39, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator/NullableDecimalMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17C3B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17C3A, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])
    ]), "System.Linq.Parallel.NullableDecimalSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D98, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15D9A, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15D99, $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])]), "System.Linq.Parallel.NullableDecimalSumAggregationOperator/NullableDecimalSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17C4D, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDecimalSumAggregationOperator/NullableDecimalSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17C4F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17C4E, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")])])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Decimal")]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])
    ]), "System.Linq.Parallel.NullableDoubleAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DBB, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15DBF, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15DBD, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableDoubleAverageAggregationOperator/NullableDoubleAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17C82, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDoubleAverageAggregationOperator/NullableDoubleAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17C85, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17C84, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])
    ]), "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15E8F, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15E91, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15E90, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])]), "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator/NullableDoubleMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D45, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator/NullableDoubleMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17D48, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17D47, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])
    ]), "System.Linq.Parallel.NullableDoubleSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15EC7, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15EC9, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15EC8, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])]), "System.Linq.Parallel.NullableDoubleSumAggregationOperator/NullableDoubleSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D8E, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDoubleSumAggregationOperator/NullableDoubleSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17D90, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17D8F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")])
    ]), "System.Linq.Parallel.NullableFloatAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15FCF, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15FD2, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15FD0, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Double"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableFloatAverageAggregationOperator/NullableFloatAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17DA1, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableFloatAverageAggregationOperator/NullableFloatAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17DA4, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17DA3, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")])
    ]), "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15FF6, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x15FF8, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x15FF7, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")])]), "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator/NullableFloatMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17DE4, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator/NullableFloatMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17DE6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17DE5, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Single")])
    ]), "System.Linq.Parallel.NullableFloatSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1600B, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Single])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x1600D, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x1600C, $asm06.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])]), "System.Linq.Parallel.NullableFloatSumAggregationOperator/NullableFloatSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17E1C, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableFloatSumAggregationOperator/NullableFloatSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17E1E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17E1D, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Double])])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])
    ]), "System.Linq.Parallel.NullableIntAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16120, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x16122, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x16121, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableIntAverageAggregationOperator/NullableIntAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17E4B, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableIntAverageAggregationOperator/NullableIntAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17E4D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17E4C, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")])
    ]), "System.Linq.Parallel.NullableIntMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16171, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x16176, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x16172, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")])]), "System.Linq.Parallel.NullableIntMinMaxAggregationOperator/NullableIntMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17EB2, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableIntMinMaxAggregationOperator/NullableIntMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17EB5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17EB3, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")])
    ]), "System.Linq.Parallel.NullableIntSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x161B8, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x161BA, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x161B9, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int32")])]), "System.Linq.Parallel.NullableIntSumAggregationOperator/NullableIntSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17ED2, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableIntSumAggregationOperator/NullableIntSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17EE5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17EE2, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Int32])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Double")])
    ]), "System.Linq.Parallel.NullableLongAverageAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1620E, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x16211, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x16210, $asm06.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int64"), $asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableLongAverageAggregationOperator/NullableLongAverageAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17F19, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableLongAverageAggregationOperator/NullableLongAverageAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17F1E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17F1B, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")])
    ]), "System.Linq.Parallel.NullableLongMinMaxAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1625F, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x16262, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x16261, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableLongMinMaxAggregationOperator/NullableLongMinMaxAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B92, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableLongMinMaxAggregationOperator/NullableLongMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B94, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17B93, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")]), $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")]), 
      $asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")])
    ]), "System.Linq.Parallel.NullableLongSumAggregationOperator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162A1, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateEnumerator", 
    $sig.make(0x162A3, $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalAggregate", 
    $sig.make(0x162A2, $asm06.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Exception")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm06.TypeRef("System.Nullable`1", [$asm06.TypeRef("System.Int64")])]), "System.Linq.Parallel.NullableLongSumAggregationOperator/NullableLongSumAggregationOperatorEnumerator`1", false, ["TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17BB2, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableLongSumAggregationOperator/NullableLongSumAggregationOperatorEnumerator`1")]), $.Int32, 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17BB4, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNextCore", 
    $sig.make(0x17BB3, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Nullable`1", [$.Int64])])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")]), "System.Linq.Parallel.ListQueryResults`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15185, null, [
        $asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")]), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x15184, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x15183, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x15187, new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPartitionedStream", 
    $sig.make(0x15188, $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1"), $.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x15186, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm06.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_useStriping", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

});

JSIL.MakeEnum(
  "System.Linq.Parallel.OrdinalIndexState", false, {
    Indexible: 0, 
    Correct: 1, 
    Increasing: 2, 
    Shuffled: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.QuerySettings", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x150F4, null, [
        $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm06.TypeRef("System.Nullable`1", [$.Int32]), 
        $asm06.TypeRef("System.Threading.CancellationToken"), $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelExecutionMode")]), 
        $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CleanStateAtQueryEnd", 
    $sig.make(0x150FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
    $sig.make(0x150E0, $asm09.TypeRef("System.Linq.Parallel.CancellationState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DegreeOfParallelism", 
    $sig.make(0x150E7, $asm06.TypeRef("System.Nullable`1", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
    $sig.make(0x150F0, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExecutionMode", 
    $sig.make(0x150EA, $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelExecutionMode")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MergeOptions", 
    $sig.make(0x150EC, $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
    $sig.make(0x150EE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_TaskScheduler", 
    $sig.make(0x150E3, $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Merge", 
    $sig.make(0x150F6, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_CancellationState", 
    $sig.make(0x150E1, null, [$asm09.TypeRef("System.Linq.Parallel.CancellationState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DegreeOfParallelism", 
    $sig.make(0x150E8, null, [$asm06.TypeRef("System.Nullable`1", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_ExecutionMode", 
    $sig.make(0x150EB, null, [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelExecutionMode")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_MergeOptions", 
    $sig.make(0x150ED, null, [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_TaskScheduler", 
    $sig.make(0x150E4, null, [$asm06.TypeRef("System.Threading.Tasks.TaskScheduler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WithDefaults", 
    $sig.make(0x150FB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
    $sig.make(0x150F7, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
    $sig.make(0x150F9, $.Type, [$asm06.TypeRef("System.Threading.CancellationTokenSource"), $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])], [])
  );

  $.Field({Static:false, Public:false}, "m_taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.Field({Static:false, Public:false}, "m_degreeOfParallelism", $asm06.TypeRef("System.Nullable`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "m_cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Field({Static:false, Public:false}, "m_executionMode", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelExecutionMode")])); 
  $.Field({Static:false, Public:false}, "m_mergeOptions", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")])); 
  $.Field({Static:false, Public:false}, "m_queryId", $.Int32); 
  $.Property({Static:false, Public:false}, "CancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState"));

  $.Property({Static:false, Public:false}, "TaskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"));

  $.Property({Static:false, Public:false}, "DegreeOfParallelism", $asm06.TypeRef("System.Nullable`1", [$.Int32]));

  $.Property({Static:false, Public:false}, "ExecutionMode", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelExecutionMode")]));

  $.Property({Static:false, Public:false}, "MergeOptions", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]));

  $.Property({Static:false, Public:false}, "QueryId", $.Int32);

  $.Property({Static:true , Public:false}, "Empty", $.Type);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), "System.Linq.Parallel.OrderingQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x162BC, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x162BF, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x162BA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x162BB, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
    $sig.make(0x162BE, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x162BD, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "m_orderOn", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_child", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "m_ordinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), "System.Linq.Parallel.QueryExecutionOption`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16304, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), $asm09.TypeRef("System.Linq.Parallel.QuerySettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1630B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16302, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
    $sig.make(0x16301, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16309, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "m_child", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "m_indexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
  $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), $asm06.TypeRef("System.Boolean")]), "System.Linq.Parallel.AnyAllSearchOperator`1", false, ["TInput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16435, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1")]), $.Boolean, 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), $.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
    $sig.make(0x16437, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1643E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16432, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16439, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x1643C, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Boolean"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1", false, ["TInput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A1F, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1")]), $.Boolean, 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1"), $.Boolean]), $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A21, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17A20, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), 
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")
    ]), "System.Linq.Parallel.ConcatQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x164EA, null, [$asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), $asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x164ED, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x164E9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x164EB, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WrapPartitionedStream", 
    $sig.make(0x164EC, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), "!!1"]), 
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey", "TRightKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")])]), "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2", false, ["TSource", "TLeftKey", "TRightKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A3A, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")]), $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17A3C, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17A3B, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")])])], [])
  );

  $.Field({Static:false, Public:false}, "m_firstSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_secondSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TRightKey")])); 
  $.Field({Static:false, Public:false}, "m_begunSecond", $.Boolean); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults"), 
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")
    ]), "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A5D, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x17A56, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x17A54, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x17A60, new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewResults", 
    $sig.make(0x17A59, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "m_concatOp", $asm09.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")])); 
  $.Field({Static:false, Public:false}, "m_leftChildCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_rightChildCount", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.ConcatKey`2", false, ["TLeftKey", "TRightKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1653B, null, [
        new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeComparer", 
    $sig.make(0x1653F, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.Type]), [$asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeLeft", 
    $sig.make(0x1653C, $.Type, [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeRight", 
    $sig.make(0x1653D, $.Type, [new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKey", $.GenericParameter("TLeftKey")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKey", $.GenericParameter("TRightKey")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_isLeft", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer", false, ["TLeftKey", "TRightKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17A9F, null, [$asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x17AA1, $.Int32, [$asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")]), $asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")])], [])
  );

  $.Field({Static:false, Public:false}, "m_leftComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false}, "m_rightComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IComparer`1", [$asm09.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")])]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), $asm06.TypeRef("System.Boolean")]), "System.Linq.Parallel.ContainsSearchOperator`1", false, ["TInput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x166FE, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1")]), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
    $sig.make(0x166FF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16702, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x166FD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16700, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16701, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm06.TypeRef("System.Boolean"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1", false, ["TInput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17AC8, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1")]), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1"), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1")]), $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17ACA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17AC9, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1670A, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1670D, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16709, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x1670B, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x1670C, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_defaultValue", $.GenericParameter("TSource")); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")]), "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1", false, ["TSource", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17ADC, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")]), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1"), 
        $.Int32, $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm06.TypeRef("System.Threading.CountdownEvent"), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17ADE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17ADD, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_lookedForEmpty", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_defaultValue", $.GenericParameter("TSource")); 
  $.Field({Static:false, Public:false}, "m_sharedEmptyCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "m_sharedLatch", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false}, "m_cancelToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), "System.Linq.Parallel.DistinctQueryOperator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16727, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1672B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16726, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16728, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16729, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
    $sig.make(0x1672A, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B0C, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B0E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17B0D, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B45, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B47, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17B46, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm09.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_hashLookup", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_hashLookupEnumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")])])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), "System.Linq.Parallel.ElementAtQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16750, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
    $sig.make(0x16754, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16753, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x1674F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16751, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16752, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_index", $.Int32); 
  $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17B69, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator"), $.Int32]), $.Int32, 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17B6B, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17B6A, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_index", $.Int32); 
  $.Field({Static:false, Public:false}, "m_resultFoundFlag", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), "System.Linq.Parallel.FirstQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x167AF, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x167B2, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x167AE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x167B0, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x167B1, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17BA9, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator"), $.Int32]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator"), $.Boolean]), 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm06.TypeRef("System.Threading.CountdownEvent"), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17BAB, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17BAA, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_sharedFirstCandidate", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1"), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), "System.Linq.Parallel.ForAllOperator`1", false, ["TInput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x167E0, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), $asm06.TypeRef("System.Action`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x167E7, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x167DD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x167E3, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
    $sig.make(0x167E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x167E5, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm06.TypeRef("System.Action`1", [$.GenericParameter("TInput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1", false, ["TInput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17BC1, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1")]), $asm06.TypeRef("System.Action`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17BC3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17BC2, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm06.TypeRef("System.Action`1", [$.GenericParameter("TInput")])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), "System.Linq.Parallel.GroupByQueryOperator`3", false, ["TSource", "TGroupKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16858, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x1685E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16847, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x1685D, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16859, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
    $sig.make(0x1685B, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")]), "!!1"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TIgnoreKey", "TKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelperOrdered", 
    $sig.make(0x1685C, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")]), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1687D, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildHashLookup", 
    $sig.make(0x16880, $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x16881, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x1687F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")])]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4/Mutables", [
        $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
        $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
      ])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4/Mutables", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x168AE, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])])); 
  $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), 
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")
    ]), "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3", false, ["TSource", "TGroupKey", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x168CA, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildHashLookup", 
    $sig.make(0x168CB, $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")])]), [], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), 
      new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")
    ]), "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16907, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildHashLookup", 
    $sig.make(0x16908, $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")])]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16998, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildHashLookup", 
    $sig.make(0x1699A, $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
            new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), 
            new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")
          ])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1699D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x16999, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")])]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_orderComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/Mutables", [
        $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
        $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
      ])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/Mutables", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x169BE, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ])])); 
  $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18130, null, [
        new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData"), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData")])
      ], [])
  );

  $.Field({Static:false, Public:false}, "m_orderKey", $.GenericParameter("TOrderKey")); 
  $.Field({Static:false, Public:false}, "m_grouping", $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
        $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
        $.GenericParameter("TElement")
      ])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), 
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")
    ]), "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3", false, ["TSource", "TGroupKey", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x169DE, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildHashLookup", 
    $sig.make(0x169E1, $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
            new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), 
            new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")
          ])]), [], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
      new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), 
      new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")
    ]), "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4", false, ["TSource", "TGroupKey", "TElement", "TOrderKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A0A, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), 
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildHashLookup", 
    $sig.make(0x16A0B, $asm09.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
            new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), 
            new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")
          ])]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.GroupByGrouping`2", false, ["TGroupKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A32, null, [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16A33, null, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2")]), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x16A34, null, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x16A36, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16A37, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IGrouping`2.get_Key", 
    $sig.make(0x16A31, new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_keyValues", $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IGrouping`2.Key", new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2"));

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderedGroupByGrouping`3", false, ["TGroupKey", "TOrderKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16AB5, null, [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByGrouping`3")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x16AB8, null, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByGrouping`3")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DoneAdding", 
    $sig.make(0x16AB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x16AB6, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16AB7, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IGrouping`2.get_Key", 
    $sig.make(0x16AB4, new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_groupKey", $.GenericParameter("TGroupKey")); 
  $.Field({Static:false, Public:false}, "m_values", $asm09.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "m_orderKeys", $asm09.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TOrderKey")])); 
  $.Field({Static:false, Public:false}, "m_orderComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IGrouping`2.Key", new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"));

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lTElement$g");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0", false, ["TGroupKey", "TOrderKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18171, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1816A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18166, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18168, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1816C, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1816E, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
        $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
        $.GenericParameter("TElement")
      ])); 
  $.Field({Static:false, Public:true }, "valueCount", $.Int32); 
  $.Field({Static:false, Public:true }, "valueArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), "System.Linq.Parallel.IndexedSelectQueryOperator`2", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16B7F, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), $asm06.TypeRef("System.Func`3", [
          new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), $.Int32, 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")
        ])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16B85, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16B7C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
    $sig.make(0x16B80, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16B82, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16B84, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_selector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TInput"), $.Int32, 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1818D, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator"), $.Int32]), $asm06.TypeRef("System.Func`3", [
          new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator"), $.Int32, 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator")
        ])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x18191, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x1818F, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TInput"), $.Int32, 
        $.GenericParameter("TOutput")
      ])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x181C9, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x181C6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x181C7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x181CA, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewResults", 
    $sig.make(0x181C8, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "m_selectOp", $asm09.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_childCount", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), "System.Linq.Parallel.IndexedWhereQueryOperator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C2A, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), $asm06.TypeRef("System.Func`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), $.Int32, 
          $.Boolean
        ])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16C33, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16C1C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
    $sig.make(0x16C2C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16C2F, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16C31, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TInputOutput"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x181F5, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator"), $.Int32]), $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator"), $.Int32, 
            $.Boolean
          ]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x181F7, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x181F6, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TInputOutput"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), "System.Linq.Parallel.LastQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CA3, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16CA8, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16CA2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16CA4, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16CA7, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1", false, ["TSource", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x181FE, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1"), $.Int32]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1"), $.Boolean]), 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm06.TypeRef("System.Threading.CountdownEvent"), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x18200, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x181FF, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32])); 
  $.Field({Static:false, Public:false}, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_sharedLastCandidate", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), "System.Linq.Parallel.ReverseQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D1E, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16D21, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16D1D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16D20, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16D1F, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")]), "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1", false, ["TSource", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x182A7, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x182A9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x182A8, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_buffer", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])])); 
  $.Field({Static:false, Public:false}, "m_bufferIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x182C7, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x182C5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x182C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x182C8, new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewResults", 
    $sig.make(0x182C6, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "m_count", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), "System.Linq.Parallel.SelectManyQueryOperator`3", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D92, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3")])]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), $.Int32, 
            $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3")])
          ]), $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")
          ])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16D98, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16D91, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitOrderIndex", 
    $sig.make(0x16D93, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16D97, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16D94, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamIndexed", 
    $sig.make(0x16D96, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), $.Int32]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamNotIndexed", 
    $sig.make(0x16D95, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TLeftKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildSelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedRightChildSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $.Int32, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [$asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32")])]), "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x182DB, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), $.Int32]), $asm09.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator")
          ]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x182DD, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x182DC, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.Int32])])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm09.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_currentRightSource", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator/Mutables", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator/Mutables", false, ["TLeftInput", "TRightInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x182F2, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput")); 
  $.Field({Static:false, Public:false}, "m_currentLeftSourceIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")])]), "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1", false, ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18306, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
            new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1")
          ]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x18308, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x18307, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), $.Int32])])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm09.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput")
      ])); 
  $.Field({Static:false, Public:false}, "m_currentRightSource", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")])); 
  $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_mutables", $asm09.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1/Mutables", [
        $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
        $.GenericParameter("TOutput"), $.GenericParameter("TLeftKey")
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1/Mutables", false, ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1830F, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput")); 
  $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey")); 
  $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), "System.Linq.Parallel.SelectQueryOperator`2", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16DFF, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16E05, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16DF6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16E03, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16E01, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")]), "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1", false, ["TInput", "TOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18321, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x18324, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x18323, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults", false, ["TInput", "TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18337, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x18335, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x18334, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x18338, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewResults", 
    $sig.make(0x18336, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "m_selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
  $.Field({Static:false, Public:false}, "m_childCount", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), "System.Linq.Parallel.SingleQueryOperator`1", false, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16EB4, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16EBB, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16EB3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16EB5, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16EB6, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1", false, ["TSource", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1835D, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1"), $.Boolean]), 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1835F, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x1835E, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_yieldExtra", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_totalElementCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), "System.Linq.Parallel.SortQueryOperator`2", false, ["TInputOutput", "TSortKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F4C, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16F53, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
    $sig.make(0x16F4A, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_KeySelector", 
    $sig.make(0x16F49, $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16F4B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16F4F, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IOrderedEnumerable`1.CreateOrderedEnumerable", 
    $sig.make(0x16F4D, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), [
        $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), "!!0"]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
        $.Boolean
      ], ["TKey2"])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16F51, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")])); 
  $.Property({Static:false, Public:false}, "KeySelector", $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]));

  $.Property({Static:false, Public:false}, "KeyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]));

  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1", false, ["TInputOutput", "TSortKey", "TKey2"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x181BE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateOrderedEnumerable$gb__0", 
    $sig.make(0x181BF, $asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1"), new JSIL.GenericParameter("TKey2", "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1")]), [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1")], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
  $.Field({Static:false, Public:true }, "key2Selector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey2")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")]), "System.Linq.Parallel.SortQueryOperatorResults`2", false, ["TInputOutput", "TSortKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16FEB, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")]), $asm09.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorResults`2")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x16FEA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GivePartitionedStream", 
    $sig.make(0x16FEC, null, [$asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")])], [])
  );

  $.Field({Static:false, Public:false}, "m_childQueryResults", $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_op", $asm09.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient", false, ["TInputOutput", "TSortKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x181D4, null, [
        $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient")]), $asm09.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Receive", 
    $sig.make(0x181D6, null, [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient"), "!!0"])], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_outputRecipient", $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_op", $asm09.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
  $.Field({Static:false, Public:false}, "m_settings", $asm09.TypeRef("System.Linq.Parallel.QuerySettings")); 
  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient")]))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), "System.Linq.Parallel.SortQueryOperatorEnumerator`3", false, ["TInputOutput", "TKey", "TSortKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17025, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17027, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeyComparer", 
    $sig.make(0x17024, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17026, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")])); 
  $.Property({Static:false, Public:true }, "KeyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), "System.Linq.Parallel.TakeOrSkipQueryOperator`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16BF6, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), $.Int32, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16BFA, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16BF5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16BF9, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OutputOrdinalIndexState", 
    $sig.make(0x16BF7, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16BF8, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17C68, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator"), $.Int32]), $.Int32, 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.Int32]), 
        $asm06.TypeRef("System.Threading.CountdownEvent"), $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17C6A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17C69, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedIndices", $asm09.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_buffer", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.Int32])])); 
  $.Field({Static:false, Public:false}, "m_bufferIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17CF2, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ElementsCount", 
    $sig.make(0x17CF0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsIndexible", 
    $sig.make(0x17CEE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetElement", 
    $sig.make(0x17CF3, new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewResults", 
    $sig.make(0x17CF1, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), [
        $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), $asm09.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), 
        $asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "m_takeOrSkipOp", $asm09.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")])); 
  $.Field({Static:false, Public:false}, "m_childCount", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C90, null, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), $.Boolean]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), $.Int32, 
            $.Boolean
          ]), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16C94, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16C8F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16C93, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OutputOrderIndexState", 
    $sig.make(0x16C91, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16C92, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "m_indexedPredicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TResult"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D21, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $.Int32]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $.Boolean]), 
        $asm06.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $.Int32, 
            $.Boolean
          ]), $.Boolean, 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm06.TypeRef("System.Threading.CountdownEvent"), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17D23, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17D22, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedPredicate", $asm06.TypeRef("System.Func`3", [
        $.GenericParameter("TResult"), $.Int32, 
        $.Boolean
      ])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedLowFalse", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm06.TypeRef("System.Threading.CountdownEvent")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_buffer", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.Int32])])); 
  $.Field({Static:false, Public:false}, "m_bufferIndex", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), "System.Linq.Parallel.WhereQueryOperator`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CDE, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), $.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsSequentialQuery", 
    $sig.make(0x16CE4, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LimitsParallelism", 
    $sig.make(0x16CDA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Open", 
    $sig.make(0x16CE3, $asm09.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), [$asm09.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStream", 
    $sig.make(0x16CE1, null, [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), "!!0"]), $asm09.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), 
        $.Boolean, $asm09.TypeRef("System.Linq.Parallel.QuerySettings")
      ], ["TKey"])
  );

  $.Field({Static:false, Public:false}, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean])); 
  $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")]), "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D33, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")]), $asm06.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1"), $.Boolean]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17D35, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
    $sig.make(0x17D34, $.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm06.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean])); 
  $.Field({Static:false, Public:false}, "m_cancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.CancellationState", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15324, null, [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MergedCancellationToken", 
    $sig.make(0x15323, $asm06.TypeRef("System.Threading.CancellationToken"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ThrowIfCanceled", 
    $sig.make(0x15327, null, [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ThrowWithStandardMessageIfCanceled", 
    $sig.make(0x15329, null, [$asm06.TypeRef("System.Threading.CancellationToken")], [])
  );

  $.Constant({Static:true , Public:false}, "POLL_INTERVAL", 63); 
  $.Field({Static:false, Public:false}, "InternalCancellationTokenSource", $asm06.TypeRef("System.Threading.CancellationTokenSource")); 
  $.Field({Static:false, Public:false}, "ExternalCancellationToken", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:false}, "MergedCancellationTokenSource", $asm06.TypeRef("System.Threading.CancellationTokenSource")); 
  $.Field({Static:false, Public:false}, "TopLevelDisposedFlag", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
  $.Property({Static:false, Public:false}, "MergedCancellationToken", $asm06.TypeRef("System.Threading.CancellationToken"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryTask", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16DA9, null, [$.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BaseWork", 
    $sig.make(0x16DAD, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RunAsynchronously", 
    $sig.make(0x16DAC, $asm06.TypeRef("System.Threading.Tasks.Task"), [$asm06.TypeRef("System.Threading.Tasks.TaskScheduler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
    $sig.make(0x16DAB, $asm06.TypeRef("System.Threading.Tasks.Task"), [$asm06.TypeRef("System.Threading.Tasks.TaskScheduler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RunTaskSynchronously", 
    $sig.make(0x16DAA, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Work", 
    $sig.make(0x16DAE, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_taskIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:true , Public:false}, "s_runTaskSynchronouslyDelegate", $asm06.TypeRef("System.Action`1", [$.Object]), function ($pi) {
      return $asm06.System.Action$b1.Of($asm06.System.Object).New($pi, $pi.RunTaskSynchronously);
    }); 
  $.Field({Static:true , Public:false}, "s_baseWorkDelegate", $asm06.TypeRef("System.Action`1", [$.Object])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.QueryTask"), "System.Linq.Parallel.SpoolingTaskBase", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16DFE, null, [$.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingFinally", 
    $sig.make(0x16E04, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingWork", 
    $sig.make(0x16E02, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Work", 
    $sig.make(0x16E00, null, [], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), "System.Linq.Parallel.OrderPreservingSpoolingTask`2", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16E28, null, [
        $.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")])]), $asm09.TypeRef("System.Linq.Parallel.SortHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Spool", 
    $sig.make(0x16E2B, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")]), 
        $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")])]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingWork", 
    $sig.make(0x16E33, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_results", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:false}, "m_sortHelper", $asm09.TypeRef("System.Linq.Parallel.SortHelper`1", [$.GenericParameter("TInputOutput")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderPreservingSpoolingTask`2/<>c__DisplayClass3", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17D59, null, [], [])
  );

  $.Field({Static:false, Public:true }, "maxToRunInParallel", $.Int32); 
  $.Field({Static:false, Public:true }, "sortHelpers", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SortHelper`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])])); 
  $.Field({Static:false, Public:true }, "groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:true }, "results", $asm09.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:true }, "taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16E6E, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1"), $.Int32]), $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
        $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
        $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1")])])]), $.Object, 
        $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Spool", 
    $sig.make(0x16E70, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1"), $.Int32]), 
        $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
        $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1")])])]), 
        $jsilcore.TypeRef("System.Array", [$.Object]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingFinally", 
    $sig.make(0x16E71, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingWork", 
    $sig.make(0x16E6F, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "PRODUCER_BUFFER_AUTO_SIZE", 16); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partition", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TOutput"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLock", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1/<>c__DisplayClass2", false, ["TOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17D97, null, [], [])
  );

  $.Field({Static:false, Public:true }, "degreeOfParallelism", $.Int32); 
  $.Field({Static:false, Public:true }, "groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:true }, "partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.Int32])); 
  $.Field({Static:false, Public:true }, "consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:true }, "producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:true }, "producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
  $.Field({Static:false, Public:true }, "buffers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
  $.Field({Static:false, Public:true }, "bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:true }, "taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
  $.Field({Static:false, Public:true }, "autoBuffered", $.Boolean); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("System.Linq.Parallel.QueryLifecycle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionBegin", 
    $sig.make(0x16E78, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionEnd", 
    $sig.make(0x16E79, null, [$.Int32], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.QueryTaskGroupState", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x168E0, null, [$asm09.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
    $sig.make(0x168DE, $asm09.TypeRef("System.Linq.Parallel.CancellationState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAlreadyEnded", 
    $sig.make(0x168DD, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
    $sig.make(0x168DF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "QueryBegin", 
    $sig.make(0x168E1, null, [$asm06.TypeRef("System.Threading.Tasks.Task")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "QueryEnd", 
    $sig.make(0x168E2, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "m_rootTask", $asm06.TypeRef("System.Threading.Tasks.Task")); 
  $.Field({Static:false, Public:false}, "m_alreadyEnded", $.Int32); 
  $.Field({Static:false, Public:false}, "m_cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Field({Static:false, Public:false}, "m_queryId", $.Int32); 
  $.Property({Static:false, Public:false}, "IsAlreadyEnded", $.Boolean);

  $.Property({Static:false, Public:false}, "CancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState"));

  $.Property({Static:false, Public:false}, "QueryId", $.Int32);

});

JSIL.MakeStaticClass("System.Linq.Parallel.Scheduling", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "GetDefaultChunkSize", 
    $sig.make(0x16E85, $.Int32, [], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDefaultDegreeOfParallelism", 
    $sig.make(0x16E84, $.Int32, [], [])
  );

  $.Constant({Static:true , Public:false}, "DefaultPreserveOrder", false); 
  $.Constant({Static:true , Public:false}, "DEFAULT_BOUNDED_BUFFER_CAPACITY", 512); 
  $.Constant({Static:true , Public:false}, "DEFAULT_BYTES_PER_CHUNK", 512); 
  $.Constant({Static:true , Public:false}, "ZOMBIED_PRODUCER_TIMEOUT", -1); 
  $.Constant({Static:true , Public:false}, "MAX_SUPPORTED_DOP", 63); 
  $.Field({Static:true , Public:false}, "DefaultDegreeOfParallelism", $.Int32); 
});

JSIL.MakeStaticClass("System.Linq.Parallel.SpoolingTask", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "SpoolForAll", 
    $sig.make(0x16E9F, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")
      ], ["TInputOutput", "TIgnoreKey"])
  );

  $.ExternalMethod({Static:true , Public:false}, "SpoolPipeline", 
    $sig.make(0x16E9E, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", ["!!0"])]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")
      ], ["TInputOutput", "TIgnoreKey"])
  );

  $.ExternalMethod({Static:true , Public:false}, "SpoolStopAndGo", 
    $sig.make(0x16E9D, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", ["!!0"])]), $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")
      ], ["TInputOutput", "TIgnoreKey"])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SpoolingTask/<>c__DisplayClass1`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17DB4, null, [], [])
  );

  $.Field({Static:false, Public:true }, "groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:true }, "partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:true }, "taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SpoolingTask/<>c__DisplayClass4`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17DDC, null, [], [])
  );

  $.Field({Static:false, Public:true }, "groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:true }, "partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:true }, "taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SpoolingTask/<>c__DisplayClass7`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17DF3, null, [], [])
  );

  $.Field({Static:false, Public:true }, "groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:true }, "partitions", $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:true }, "taskScheduler", $asm06.TypeRef("System.Threading.Tasks.TaskScheduler")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), "System.Linq.Parallel.StopAndGoSpoolingTask`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16EB7, null, [
        $.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.StopAndGoSpoolingTask`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.StopAndGoSpoolingTask`2")]), $asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.StopAndGoSpoolingTask`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingFinally", 
    $sig.make(0x16EB9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingWork", 
    $sig.make(0x16EB8, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:false}, "m_destination", $asm09.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), "System.Linq.Parallel.PipelineSpoolingTask`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F38, null, [
        $.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.PipelineSpoolingTask`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.PipelineSpoolingTask`2")]), $asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.PipelineSpoolingTask`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingFinally", 
    $sig.make(0x16F3A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingWork", 
    $sig.make(0x16F39, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:false}, "m_destination", $asm09.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), "System.Linq.Parallel.ForAllSpoolingTask`2", false, ["TInputOutput", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F52, null, [
        $.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ForAllSpoolingTask`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.ForAllSpoolingTask`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingFinally", 
    $sig.make(0x16F5A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SpoolingWork", 
    $sig.make(0x16F57, null, [], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
});

JSIL.MakeStaticClass("System.Linq.Parallel.CancellableEnumerable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "Wrap", 
    $sig.make(0x16F7B, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Threading.CancellationToken")], ["TElement"])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E14, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
    $sig.make(0x17E15, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17E0D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17E0A, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17E05, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17E0B, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17E08, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17E12, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17E13, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "token", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:true }, "$token", $asm06.TypeRef("System.Threading.CancellationToken")); 
  $.Field({Static:false, Public:true }, "count", $.Int32); 
  $.Field({Static:false, Public:true }, "element", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:true }, "$wrap3", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("System.Linq.Parallel.ExchangeUtilities", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "HashRepartition", 
    $sig.make(0x16C9C, $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), $.Int32]), [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TElement", "THashKey", "TIgnoreKey"])
  );

  $.ExternalMethod({Static:true , Public:false}, "HashRepartitionOrdered", 
    $sig.make(0x16C9D, $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), "!!2"]), [
        $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], ["TElement", "THashKey", "TOrderKey"])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsWorseThan", 
    $sig.make(0x16C9F, $.Boolean, [$asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "PartitionDataSource", 
    $sig.make(0x16C9B, $asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", $.Int32]), [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32, 
        $.Boolean
      ], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "Worse", 
    $sig.make(0x16C9E, $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.NoKeyMemoizationRequired", false, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.FixedMaxHeap`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CDD, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CEA, null, [$.Int32, $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0x16CEC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x16CD6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_MaxValue", 
    $sig.make(0x16CDB, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Size", 
    $sig.make(0x16CD8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HeapifyLastLeaf", 
    $sig.make(0x16CF5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "HeapifyRoot", 
    $sig.make(0x16CF4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Insert", 
    $sig.make(0x16CEE, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RemoveMax", 
    $sig.make(0x16CF1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReplaceMax", 
    $sig.make(0x16CF0, null, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Swap", 
    $sig.make(0x16CF3, null, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "m_elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "m_count", $.Int32); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:false}, "Count", $.Int32);

  $.Property({Static:false, Public:false}, "Size", $.Int32);

  $.Property({Static:false, Public:false}, "MaxValue", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.GrowingArray`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16B48, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x16B4A, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
    $sig.make(0x16B4E, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x16B47, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InternalArray", 
    $sig.make(0x16B45, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GrowArray", 
    $sig.make(0x16B4C, null, [$.Int32], [])
  );

  $.Constant({Static:true , Public:false}, "DEFAULT_ARRAY_SIZE", 1024); 
  $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_count", $.Int32); 
  $.Property({Static:false, Public:false}, "InternalArray", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")]));

  $.Property({Static:false, Public:false}, "Count", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.HashLookup`2", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15575, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15577, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x15583, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AreKeysEqual", 
    $sig.make(0x15587, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Find", 
    $sig.make(0x1558B, $.Boolean, [
        new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), $.Boolean, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x15570, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x15572, $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")]), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetKeyHashCode", 
    $sig.make(0x15586, $.Int32, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Remove", 
    $sig.make(0x15589, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Resize", 
    $sig.make(0x1558C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x1556D, null, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
    $sig.make(0x15584, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")])], [])
  );

  $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.HashLookup`2/Slot", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "freeList", $.Int32); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Property({Static:false, Public:false}, "Item", new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2"));

  $.Property({Static:false, Public:false}, "Count", $.Int32);

  $.Property({Static:false, Public:false}, "Item", $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")]));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.HashLookup`2/Slot", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
  $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue")); 
  $.Field({Static:false, Public:false}, "next", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ListChunk`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1552F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x15530, null, [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x1552E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Next", 
    $sig.make(0x1552B, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x15531, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x15532, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_chunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:false}, "m_chunkCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_nextChunk", $.Type); 
  $.Field({Static:false, Public:false}, "m_tailChunk", $.Type); 
  $.Property({Static:false, Public:false}, "Next", $.Type);

  $.Property({Static:false, Public:false}, "Count", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1")]), $asm06.TypeRef("System.Collections.IEnumerable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17A33, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17A30, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17A2E, new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17A2F, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17A31, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17A32, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TInputOutput")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:true }, "curr", $asm09.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")])); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.Lookup`2", false, ["TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D2A, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x16D2C, null, [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x16D2B, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x16D28, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x16D29, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16D2D, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x16D2E, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_dict", $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $asm09.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_defaultKeyGrouping", $asm09.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")]));

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Linq.ILookup`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")])]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0", false, ["TKey", "TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17A66, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
    $sig.make(0x17A67, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17A5F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17A55, $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17A5B, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17A62, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17A65, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Parallel.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "grouping", $asm09.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "$wrap2", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0")])]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.Pair`2", false, ["T", "U"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16623, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_First", 
    $sig.make(0x16615, new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Second", 
    $sig.make(0x1661F, new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_First", 
    $sig.make(0x16617, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Second", 
    $sig.make(0x16620, null, [new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2")], [])
  );

  $.Field({Static:false, Public:false}, "m_first", $.GenericParameter("T")); 
  $.Field({Static:false, Public:false}, "m_second", $.GenericParameter("U")); 
  $.Property({Static:false, Public:true }, "First", new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2"));

  $.Property({Static:false, Public:true }, "Second", new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.PairComparer`2", false, ["T", "U"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16D56, null, [$asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2")]), $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x16D57, $.Int32, [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")]), $asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")])], [])
  );

  $.Field({Static:false, Public:false}, "m_comparer1", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_comparer2", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("U")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IComparer`1", [$asm09.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")])]))
});

JSIL.MakeClass($asm06.TypeRef("System.Diagnostics.Eventing.EventProviderBase"), "System.Linq.Parallel.PlinqEtwProvider", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D6C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NextQueryId", 
    $sig.make(0x16D6D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParallelQueryBegin", 
    $sig.make(0x16D6E, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParallelQueryEnd", 
    $sig.make(0x16D6F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParallelQueryFork", 
    $sig.make(0x16D70, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParallelQueryJoin", 
    $sig.make(0x16D71, null, [$.Int32], [])
  );

  $.Field({Static:true , Public:true }, "Log", $.Type); 
  $.Field({Static:true , Public:false}, "s_queryId", $.Int32, 0); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ReverseComparer`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16EFE, null, [$asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x16EFF, $.Int32, [new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1"), new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1")], [])
  );

  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1")]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.Set`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F2B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F2C, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x16F2D, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Contains", 
    $sig.make(0x16F2E, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Find", 
    $sig.make(0x16F30, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Remove", 
    $sig.make(0x16F2F, $.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Resize", 
    $sig.make(0x16F31, null, [], [])
  );

  $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.Set`1/Slot", [$.GenericParameter("TElement")])])); 
  $.Field({Static:false, Public:false}, "count", $.Int32); 
  $.Field({Static:false, Public:false}, "freeList", $.Int32); 
  $.Field({Static:false, Public:false}, "comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.Set`1/Slot", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "next", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.Shared`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1534E, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Shared`1")], [])
  );

  $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.SortHelper`1", false, ["TInputOutput"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16E5D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Sort", 
    $sig.make(0x16E5C, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`1")]), [], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Parallel.SortHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), "System.Linq.Parallel.SortHelper`2", false, ["TInputOutput", "TKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16FF1, null, [
        $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $.Int32, 
        $.Int32, $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
        $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState"), 
        $asm06.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.GrowingArray`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")])]), 
        $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")])]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Threading.Barrier")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildKeysFromSource", 
    $sig.make(0x16FFF, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Parallel.GrowingArray`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputePartnerIndex", 
    $sig.make(0x17002, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x16FFD, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateSortHelpers", 
    $sig.make(0x16FF5, $jsilcore.TypeRef("System.Array", [$.Type]), [$asm09.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MergeSortCooperatively", 
    $sig.make(0x17001, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
    $sig.make(0x17003, null, [
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $asm06.TypeRef("System.Threading.CancellationToken")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "QuickSortIndicesInPlace", 
    $sig.make(0x17000, null, [
        $asm09.TypeRef("System.Linq.Parallel.GrowingArray`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $asm06.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), 
        $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Sort", 
    $sig.make(0x16FFE, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), [], [])
  );

  $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32); 
  $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_groupState", $asm09.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
  $.Field({Static:false, Public:false}, "m_sharedIndices", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])])); 
  $.Field({Static:false, Public:false}, "m_sharedKeys", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])])); 
  $.Field({Static:false, Public:false}, "m_sharedValues", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
  $.Field({Static:false, Public:false}, "m_sharedBarriers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Threading.Barrier")])); 
  $.Field({Static:false, Public:false}, "m_indexState", $asm09.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
  $.Field({Static:false, Public:false}, "m_keyComparer", $asm06.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeStaticClass("System.Linq.Parallel.TraceHelpers", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
    $sig.make(0x17032, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
    $sig.make(0x17033, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
    $sig.make(0x17034, null, [$.Boolean, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SetVerbose", 
    $sig.make(0x1702E, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

  $.ExternalMethod({Static:true , Public:false}, "TraceError", 
    $sig.make(0x17031, null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

  $.ExternalMethod({Static:true , Public:false}, "TraceInfo", 
    $sig.make(0x1702F, null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

  $.ExternalMethod({Static:true , Public:false}, "TraceWarning", 
    $sig.make(0x17030, null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

});

JSIL.MakeStaticClass("System.Linq.Parallel.Util", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "GetDefaultComparer", 
    $sig.make(0x16F96, $asm06.TypeRef("System.Collections.Generic.Comparer`1", ["!!0"]), [], ["TKey"])
  );

  $.ExternalMethod({Static:true , Public:false}, "Sign", 
    $sig.make(0x16F94, $.Int32, [$.Int32], [])
  );

  $.Field({Static:true , Public:false}, "s_fastIntComparer", $asm09.TypeRef("System.Linq.Parallel.Util/FastIntComparer")); 
  $.Field({Static:true , Public:false}, "s_fastLongComparer", $asm09.TypeRef("System.Linq.Parallel.Util/FastLongComparer")); 
  $.Field({Static:true , Public:false}, "s_fastFloatComparer", $asm09.TypeRef("System.Linq.Parallel.Util/FastFloatComparer")); 
  $.Field({Static:true , Public:false}, "s_fastDoubleComparer", $asm09.TypeRef("System.Linq.Parallel.Util/FastDoubleComparer")); 
  $.Field({Static:true , Public:false}, "s_fastDateTimeComparer", $asm09.TypeRef("System.Linq.Parallel.Util/FastDateTimeComparer")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Generic.Comparer`1", [$asm06.TypeRef("System.Int32")]), "System.Linq.Parallel.Util/FastIntComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1706E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x1706C, $.Int32, [$.Int32, $.Int32], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Generic.Comparer`1", [$asm06.TypeRef("System.Int64")]), "System.Linq.Parallel.Util/FastLongComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17059, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x17057, $.Int32, [$.Int64, $.Int64], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Generic.Comparer`1", [$asm06.TypeRef("System.Single")]), "System.Linq.Parallel.Util/FastFloatComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16FC9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x16FC8, $.Int32, [$.Single, $.Single], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Generic.Comparer`1", [$asm06.TypeRef("System.Double")]), "System.Linq.Parallel.Util/FastDoubleComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16FA9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x16FA8, $.Int32, [$.Double, $.Double], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Generic.Comparer`1", [$asm06.TypeRef("System.DateTime")]), "System.Linq.Parallel.Util/FastDateTimeComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16FEF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x16FED, $.Int32, [$asm06.TypeRef("System.DateTime"), $asm06.TypeRef("System.DateTime")], [])
  );

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.Wrapper`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x170A9, null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Wrapper`1")], [])
  );

  $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Parallel.WrapperEqualityComparer`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x170F3, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x170F4, $.Boolean, [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")]), $asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x170F5, $.Int32, [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])], [])
  );

  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm09.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])]))
});

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16303, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptCloseAlgorithmProvider", 
    $sig.make(0x16305, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x16306, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeBCryptHashHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162F3, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptDestroyHash", 
    $sig.make(0x162F4, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "get_HashObject", 
    $sig.make(0x162F0, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x162F5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_HashObject", 
    $sig.make(0x162F2, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Field({Static:false, Public:false}, "m_hashObject", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:false}, "HashObject", $asm06.TypeRef("System.IntPtr"));

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeAxlBufferHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17161, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetProcessHeap", 
    $sig.make(0x17162, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:true , Public:false}, "HeapFree", 
    $sig.make(0x17163, $.Boolean, [
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x17165, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeCapiHashHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15E44, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CryptDestroyHash", 
    $sig.make(0x15E45, $.Boolean, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
    $sig.make(0x15E43, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15E46, $.Boolean, [], [])
  );

  $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeCapiKeyHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14FC7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CryptDestroyKey", 
    $sig.make(0x14FC9, $.Boolean, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
    $sig.make(0x14FCB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
    $sig.make(0x14FC5, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x14FCD, $.Boolean, [], [])
  );

  $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeCspHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14FF7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CryptContextAddRef", 
    $sig.make(0x14FFC, $.Boolean, [
        $.Type, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CryptReleaseContext", 
    $sig.make(0x14FFE, $.Boolean, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Duplicate", 
    $sig.make(0x15000, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15002, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeNCryptHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15333, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
    $sig.make(0x15338, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "DuplicateDuplicatedHandle", 
    $sig.make(0x1533E, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "DuplicateOwnerHandle", 
    $sig.make(0x15340, "!!0", [], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Holder", 
    $sig.make(0x15325, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15342, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseNativeHandle", 
    $sig.make(0x15345, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:false, Public:false}, "set_Holder", 
    $sig.make(0x15326, null, [$.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.Field({Static:false, Public:false}, "m_ownershipState", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState")); 
  $.Field({Static:false, Public:false}, "m_holder", $.Type); 
  $.Property({Static:false, Public:false}, "Holder", $.Type);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeEnum(
  "Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState", false, {
    Owner: 0, 
    Duplicate: 1, 
    Holder: 2
  }, false
);

JSIL.MakeClass($asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), "Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x153E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
    $sig.make(0x153E1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
    $sig.make(0x153E0, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "ReleaseNativeHandle", 
    $sig.make(0x153E2, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), "Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x153D9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
    $sig.make(0x153D6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
    $sig.make(0x153D5, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "ReleaseNativeHandle", 
    $sig.make(0x153D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetHandleValue", 
    $sig.make(0x153D7, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), "Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15358, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
    $sig.make(0x15355, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "ReleaseNativeHandle", 
    $sig.make(0x15356, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.DeclareNamespace("System.Security");
JSIL.MakeEnum(
  "System.Security.ManifestKinds", true, {
    None: 0, 
    Deployment: 1, 
    Application: 2, 
    ApplicationAndDeployment: 3
  }, true
);

JSIL.DeclareNamespace("System.Security.Cryptography");
JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.Aes"), "System.Security.Cryptography.AesCryptoServiceProvider", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1718A, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CreateDecryptor", 
    $sig.make(0x1718C, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CreateDecryptor", 
    $sig.make(0x1718E, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CreateDecryptor", 
    $sig.make(0x17192, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CreateEncryptor", 
    $sig.make(0x17194, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CreateEncryptor", 
    $sig.make(0x17195, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CreateEncryptor", 
    $sig.make(0x17196, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17197, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "FindSupportedKeySizes", 
    $sig.make(0x17199, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Security.Cryptography.KeySizes")]), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GenerateIV", 
    $sig.make(0x1719D, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GenerateKey", 
    $sig.make(0x1719B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x17182, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
    $sig.make(0x17186, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmId", 
    $sig.make(0x1719F, $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Key", 
    $sig.make(0x17183, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_KeySize", 
    $sig.make(0x17188, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:true , Public:false}, "s_supportedKeySizes", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Security.Cryptography.KeySizes")])); 
  $.Field({Static:true , Public:false}, "s_defaultKeySize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_cspHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
  $.Field({Static:false, Public:false}, "m_key", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.Aes"), "System.Security.Cryptography.AesManaged", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17280, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateDecryptor", 
    $sig.make(0x17281, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateDecryptor", 
    $sig.make(0x17282, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateEncryptor", 
    $sig.make(0x17283, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateEncryptor", 
    $sig.make(0x17284, $asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17285, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GenerateIV", 
    $sig.make(0x17286, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GenerateKey", 
    $sig.make(0x17287, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FeedbackSize", 
    $sig.make(0x17272, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IV", 
    $sig.make(0x17275, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x17277, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
    $sig.make(0x1727A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
    $sig.make(0x1727C, $asm06.TypeRef("System.Security.Cryptography.CipherMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Padding", 
    $sig.make(0x1727E, $asm06.TypeRef("System.Security.Cryptography.PaddingMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FeedbackSize", 
    $sig.make(0x17274, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IV", 
    $sig.make(0x17276, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Key", 
    $sig.make(0x17278, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_KeySize", 
    $sig.make(0x1727B, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
    $sig.make(0x1727D, null, [$asm06.TypeRef("System.Security.Cryptography.CipherMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Padding", 
    $sig.make(0x1727F, null, [$asm06.TypeRef("System.Security.Cryptography.PaddingMode")], [])
  );

  $.Field({Static:false, Public:false}, "m_rijndael", $asm06.TypeRef("System.Security.Cryptography.RijndaelManaged")); 
  $.Property({Static:false, Public:true , Virtual:true }, "FeedbackSize", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IV", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Mode", $asm06.TypeRef("System.Security.Cryptography.CipherMode"));

  $.Property({Static:false, Public:true , Virtual:true }, "Padding", $asm06.TypeRef("System.Security.Cryptography.PaddingMode"));

});

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "get_BCryptSupported", 
    $sig.make(0x16315, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetInt32Property", 
    $sig.make(0x16316, $.Int32, ["!!0", $.String], ["T"])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
    $sig.make(0x16317, $jsilcore.TypeRef("System.Array", [$.Byte]), ["!!0", $.String], ["T"])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "MapAlgorithmIdToMagic", 
    $sig.make(0x16318, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OpenAlgorithm", 
    $sig.make(0x16319, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), [$.String, $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:true , Public:false}, "s_bcryptSupported", $asm06.TypeRef("System.Nullable`1", [$.Boolean])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA7E, null, [], []), 
    function BCryptNative__cctor () {
      $thisType.s_bcryptSupported = new ($asm06.System.Nullable$b1.Of($asm06.System.Boolean)) ();
    }
  );

  $.Property({Static:true , Public:false}, "BCryptSupported", $.Boolean);

});

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/AlgorithmName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "ECDHP256", "ECDH_P256"); 
  $.Constant({Static:true , Public:true }, "ECDHP384", "ECDH_P384"); 
  $.Constant({Static:true , Public:true }, "ECDHP521", "ECDH_P521"); 
  $.Constant({Static:true , Public:true }, "ECDsaP256", "ECDSA_P256"); 
  $.Constant({Static:true , Public:true }, "ECDsaP384", "ECDSA_P384"); 
  $.Constant({Static:true , Public:true }, "ECDsaP521", "ECDSA_P521"); 
  $.Constant({Static:true , Public:true }, "MD5", "MD5"); 
  $.Constant({Static:true , Public:true }, "Sha1", "SHA1"); 
  $.Constant({Static:true , Public:true }, "Sha256", "SHA256"); 
  $.Constant({Static:true , Public:true }, "Sha384", "SHA384"); 
  $.Constant({Static:true , Public:true }, "Sha512", "SHA512"); 
});

JSIL.MakeEnum(
  "System.Security.Cryptography.BCryptNative/ErrorCode", false, {
    BufferToSmall: -1073741789, 
    ObjectNameNotFound: -1073741772, 
    Success: 0
  }, false
);

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/HashPropertyName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "HashLength", "HashDigestLength"); 
});

JSIL.MakeEnum(
  "System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber", false, {
    ECDHPublicP256: 827016005, 
    ECDsaPublicP256: 827540293, 
    ECDHPublicP384: 860570437, 
    ECDsaPublicP384: 861094725, 
    ECDHPublicP521: 894124869, 
    ECDsaPublicP521: 894649157
  }, false
);

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/KeyDerivationFunction", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "Hash", "HASH"); 
  $.Constant({Static:true , Public:true }, "Hmac", "HMAC"); 
  $.Constant({Static:true , Public:true }, "Tls", "TLS_PRF"); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/ProviderName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "MicrosoftPrimitiveProvider", "Microsoft Primitive Provider"); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/ObjectPropertyName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "ObjectLength", "ObjectLength"); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/UnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "BCryptCreateHash", 
    $sig.make(0x17B17, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")]), 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptFinishHash", 
    $sig.make(0x17B1B, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptGetAlgorithmProperty", 
    $sig.make(0x17B19, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptGetHashProperty", 
    $sig.make(0x17B1A, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptGetProperty", 
    $sig.make(0x17B18, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptHashData", 
    $sig.make(0x17B1C, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BCryptOpenAlgorithmProvider", 
    $sig.make(0x17B1D, $asm09.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")]), $.String, 
        $.String, $.Int32
      ], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeDelegate("System.Security.Cryptography.BCryptNative/BCryptPropertyGetter`1", false, ["T"]);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.BCryptHashAlgorithm", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x162D1, null, [$asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x162D2, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "HashCore", 
    $sig.make(0x162D4, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
    $sig.make(0x162D5, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "HashStream", 
    $sig.make(0x162D6, null, [$asm06.TypeRef("System.IO.Stream")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x162D3, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_algorithmHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")); 
  $.Field({Static:false, Public:false}, "m_hashHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngAlgorithm", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1522B, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x15230, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x15231, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
    $sig.make(0x15215, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP256", 
    $sig.make(0x15217, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP384", 
    $sig.make(0x15219, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP521", 
    $sig.make(0x1521B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP256", 
    $sig.make(0x1521C, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP384", 
    $sig.make(0x1521D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP521", 
    $sig.make(0x15222, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MD5", 
    $sig.make(0x15225, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sha1", 
    $sig.make(0x15226, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sha256", 
    $sig.make(0x15227, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sha384", 
    $sig.make(0x15228, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sha512", 
    $sig.make(0x15229, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x15233, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x1522E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x1522F, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15234, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "s_ecdhp256", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdhp384", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdhp521", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdsap256", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdsap384", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdsap521", $.Type); 
  $.Field({Static:true , Public:false}, "s_md5", $.Type); 
  $.Field({Static:true , Public:false}, "s_sha1", $.Type); 
  $.Field({Static:true , Public:false}, "s_sha256", $.Type); 
  $.Field({Static:true , Public:false}, "s_sha384", $.Type); 
  $.Field({Static:true , Public:false}, "s_sha512", $.Type); 
  $.Field({Static:false, Public:false}, "m_algorithm", $.String); 
  $.Property({Static:false, Public:true }, "Algorithm", $.String);

  $.Property({Static:true , Public:true }, "ECDiffieHellmanP256", $.Type);

  $.Property({Static:true , Public:true }, "ECDiffieHellmanP384", $.Type);

  $.Property({Static:true , Public:true }, "ECDiffieHellmanP521", $.Type);

  $.Property({Static:true , Public:true }, "ECDsaP256", $.Type);

  $.Property({Static:true , Public:true }, "ECDsaP384", $.Type);

  $.Property({Static:true , Public:true }, "ECDsaP521", $.Type);

  $.Property({Static:true , Public:true }, "MD5", $.Type);

  $.Property({Static:true , Public:true }, "Sha1", $.Type);

  $.Property({Static:true , Public:true }, "Sha256", $.Type);

  $.Property({Static:true , Public:true }, "Sha384", $.Type);

  $.Property({Static:true , Public:true }, "Sha512", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngAlgorithmGroup", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1537D, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x15380, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x15381, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
    $sig.make(0x15372, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DiffieHellman", 
    $sig.make(0x15375, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Dsa", 
    $sig.make(0x15376, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellman", 
    $sig.make(0x15379, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ECDsa", 
    $sig.make(0x1537B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
    $sig.make(0x1537C, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x15382, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x1537E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x1537F, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15383, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "s_dh", $.Type); 
  $.Field({Static:true , Public:false}, "s_dsa", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdh", $.Type); 
  $.Field({Static:true , Public:false}, "s_ecdsa", $.Type); 
  $.Field({Static:true , Public:false}, "s_rsa", $.Type); 
  $.Field({Static:false, Public:false}, "m_algorithmGroup", $.String); 
  $.Property({Static:false, Public:true }, "AlgorithmGroup", $.String);

  $.Property({Static:true , Public:true }, "DiffieHellman", $.Type);

  $.Property({Static:true , Public:true }, "Dsa", $.Type);

  $.Property({Static:true , Public:true }, "ECDiffieHellman", $.Type);

  $.Property({Static:true , Public:true }, "ECDsa", $.Type);

  $.Property({Static:true , Public:true }, "Rsa", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
});

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyHandleOpenOptions", true, {
    None: 0, 
    EphemeralKey: 1
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngKey", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x152BB, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "BuildKeyContainerPermission", 
    $sig.make(0x152BC, $asm06.TypeRef("System.Security.Permissions.KeyContainerPermission"), [$asm06.TypeRef("System.Security.Permissions.KeyContainerPermissionFlags")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x152BD, $.Type, [$asm09.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x152BE, $.Type, [$asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x152BF, $.Type, [
        $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Delete", 
    $sig.make(0x152C0, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x152C1, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Exists", 
    $sig.make(0x152C2, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Exists", 
    $sig.make(0x152C3, $.Boolean, [$.String, $asm09.TypeRef("System.Security.Cryptography.CngProvider")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Exists", 
    $sig.make(0x152C4, $.Boolean, [
        $.String, $asm09.TypeRef("System.Security.Cryptography.CngProvider"), 
        $asm09.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Export", 
    $sig.make(0x152C7, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
    $sig.make(0x1529A, $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
    $sig.make(0x15293, $asm09.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
    $sig.make(0x1529E, $asm09.TypeRef("System.Security.Cryptography.CngExportPolicies"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
    $sig.make(0x1529F, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_IsEphemeral", 
    $sig.make(0x152A0, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_IsMachineKey", 
    $sig.make(0x152A4, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
    $sig.make(0x152A7, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
    $sig.make(0x152AA, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
    $sig.make(0x152AD, $asm09.TypeRef("System.Security.Cryptography.CngKeyUsages"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
    $sig.make(0x152AE, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
    $sig.make(0x152B4, $asm09.TypeRef("System.Security.Cryptography.CngProvider"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_ProviderHandle", 
    $sig.make(0x152B7, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
    $sig.make(0x152BA, $asm09.TypeRef("System.Security.Cryptography.CngUIPolicy"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_UniqueName", 
    $sig.make(0x152B9, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
    $sig.make(0x152C8, $asm09.TypeRef("System.Security.Cryptography.CngProperty"), [$.String, $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "HasProperty", 
    $sig.make(0x152C9, $.Boolean, [$.String, $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Import", 
    $sig.make(0x152C5, $.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Import", 
    $sig.make(0x152C6, $.Type, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), 
        $asm09.TypeRef("System.Security.Cryptography.CngProvider")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Open", 
    $sig.make(0x152CA, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Open", 
    $sig.make(0x152CB, $.Type, [$.String, $asm09.TypeRef("System.Security.Cryptography.CngProvider")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Open", 
    $sig.make(0x152CC, $.Type, [
        $.String, $asm09.TypeRef("System.Security.Cryptography.CngProvider"), 
        $asm09.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Open", 
    $sig.make(0x152CD, $.Type, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("System.Security.Cryptography.CngKeyHandleOpenOptions")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "set_IsEphemeral", 
    $sig.make(0x152A1, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
    $sig.make(0x152B1, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetKeyProperties", 
    $sig.make(0x152CE, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
    $sig.make(0x152CF, null, [$asm09.TypeRef("System.Security.Cryptography.CngProperty")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_keyHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")); 
  $.Field({Static:false, Public:false}, "m_kspHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")); 
  $.Property({Static:false, Public:true }, "AlgorithmGroup", $asm09.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

  $.Property({Static:false, Public:true }, "Algorithm", $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"));

  $.Property({Static:false, Public:true }, "ExportPolicy", $asm09.TypeRef("System.Security.Cryptography.CngExportPolicies"));

  $.Property({Static:false, Public:true }, "Handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

  $.Property({Static:false, Public:true }, "IsEphemeral", $.Boolean);

  $.Property({Static:false, Public:true }, "IsMachineKey", $.Boolean);

  $.Property({Static:false, Public:true }, "KeyName", $.String);

  $.Property({Static:false, Public:true }, "KeySize", $.Int32);

  $.Property({Static:false, Public:true }, "KeyUsage", $asm09.TypeRef("System.Security.Cryptography.CngKeyUsages"));

  $.Property({Static:false, Public:true }, "ParentWindowHandle", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "Provider", $asm09.TypeRef("System.Security.Cryptography.CngProvider"));

  $.Property({Static:false, Public:true }, "ProviderHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

  $.Property({Static:false, Public:true }, "UniqueName", $.String);

  $.Property({Static:false, Public:true }, "UIPolicy", $asm09.TypeRef("System.Security.Cryptography.CngUIPolicy"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngKeyBlobFormat", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15434, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x15437, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x15438, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_EccPrivateBlob", 
    $sig.make(0x15424, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_EccPublicBlob", 
    $sig.make(0x15425, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Format", 
    $sig.make(0x15422, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericPrivateBlob", 
    $sig.make(0x15428, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericPublicBlob", 
    $sig.make(0x15431, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OpaqueTransportBlob", 
    $sig.make(0x15432, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Pkcs8PrivateBlob", 
    $sig.make(0x15433, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x15439, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x15435, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x15436, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1543A, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "s_eccPrivate", $.Type); 
  $.Field({Static:true , Public:false}, "s_eccPublic", $.Type); 
  $.Field({Static:true , Public:false}, "s_genericPrivate", $.Type); 
  $.Field({Static:true , Public:false}, "s_genericPublic", $.Type); 
  $.Field({Static:true , Public:false}, "s_opaqueTransport", $.Type); 
  $.Field({Static:true , Public:false}, "s_pkcs8Private", $.Type); 
  $.Field({Static:false, Public:false}, "m_format", $.String); 
  $.Property({Static:false, Public:true }, "Format", $.String);

  $.Property({Static:true , Public:true }, "EccPrivateBlob", $.Type);

  $.Property({Static:true , Public:true }, "EccPublicBlob", $.Type);

  $.Property({Static:true , Public:true }, "GenericPrivateBlob", $.Type);

  $.Property({Static:true , Public:true }, "GenericPublicBlob", $.Type);

  $.Property({Static:true , Public:true }, "OpaqueTransportBlob", $.Type);

  $.Property({Static:true , Public:true }, "Pkcs8PrivateBlob", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngKeyCreationParameters", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15410, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
    $sig.make(0x153F1, $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngExportPolicies")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeyCreationOptions", 
    $sig.make(0x153F7, $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
    $sig.make(0x153FB, $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngKeyUsages")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
    $sig.make(0x15401, $asm09.TypeRef("System.Security.Cryptography.CngPropertyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParametersNoDemand", 
    $sig.make(0x15405, $asm09.TypeRef("System.Security.Cryptography.CngPropertyCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
    $sig.make(0x153FE, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
    $sig.make(0x15407, $asm09.TypeRef("System.Security.Cryptography.CngProvider"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
    $sig.make(0x1540B, $asm09.TypeRef("System.Security.Cryptography.CngUIPolicy"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ExportPolicy", 
    $sig.make(0x153F2, null, [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngExportPolicies")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_KeyCreationOptions", 
    $sig.make(0x153F9, null, [$asm09.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_KeyUsage", 
    $sig.make(0x153FC, null, [$asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngKeyUsages")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
    $sig.make(0x153FF, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
    $sig.make(0x15409, null, [$asm09.TypeRef("System.Security.Cryptography.CngProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UIPolicy", 
    $sig.make(0x1540D, null, [$asm09.TypeRef("System.Security.Cryptography.CngUIPolicy")], [])
  );

  $.Field({Static:false, Public:false}, "m_exportPolicy", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngExportPolicies")])); 
  $.Field({Static:false, Public:false}, "m_keyCreationOptions", $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")); 
  $.Field({Static:false, Public:false}, "m_keyUsage", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngKeyUsages")])); 
  $.Field({Static:false, Public:false}, "m_parameters", $asm09.TypeRef("System.Security.Cryptography.CngPropertyCollection")); 
  $.Field({Static:false, Public:false}, "m_parentWindowHandle", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "m_provider", $asm09.TypeRef("System.Security.Cryptography.CngProvider")); 
  $.Field({Static:false, Public:false}, "m_uiPolicy", $asm09.TypeRef("System.Security.Cryptography.CngUIPolicy")); 
  $.Property({Static:false, Public:true }, "ExportPolicy", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

  $.Property({Static:false, Public:true }, "KeyCreationOptions", $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

  $.Property({Static:false, Public:true }, "KeyUsage", $asm06.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

  $.Property({Static:false, Public:true }, "ParentWindowHandle", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "Parameters", $asm09.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

  $.Property({Static:false, Public:false}, "ParametersNoDemand", $asm09.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

  $.Property({Static:false, Public:true }, "Provider", $asm09.TypeRef("System.Security.Cryptography.CngProvider"));

  $.Property({Static:false, Public:true }, "UIPolicy", $asm09.TypeRef("System.Security.Cryptography.CngUIPolicy"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.CngProperty", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1557F, null, [
        $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x1558D, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x1558F, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15578, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Options", 
    $sig.make(0x1557A, $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Value", 
    $sig.make(0x1557C, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x15591, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetValue", 
    $sig.make(0x15580, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x15588, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x1558A, $.Boolean, [$.Type, $.Type], [])
  );

  $.Field({Static:false, Public:false}, "m_name", $.String); 
  $.Field({Static:false, Public:false}, "m_propertyOptions", $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")); 
  $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "m_hashCode", $asm06.TypeRef("System.Nullable`1", [$.Int32])); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Options", $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

  $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
});

JSIL.MakeClass($asm06.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm09.TypeRef("System.Security.Cryptography.CngProperty")]), "System.Security.Cryptography.CngPropertyCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15612, null, [], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngProvider", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x154FF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x15502, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x15503, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSmartCardKeyStorageProvider", 
    $sig.make(0x154FD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSoftwareKeyStorageProvider", 
    $sig.make(0x154FE, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
    $sig.make(0x154FC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x15504, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x15500, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x15501, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15505, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "s_msSmartCardKsp", $.Type); 
  $.Field({Static:true , Public:false}, "s_msSoftwareKsp", $.Type); 
  $.Field({Static:false, Public:false}, "m_provider", $.String); 
  $.Property({Static:false, Public:true }, "Provider", $.String);

  $.Property({Static:true , Public:true }, "MicrosoftSmartCardKeyStorageProvider", $.Type);

  $.Property({Static:true , Public:true }, "MicrosoftSoftwareKeyStorageProvider", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CngUIPolicy", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15475, null, [$asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15477, null, [$asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15479, null, [
        $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1547B, null, [
        $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1547D, null, [
        $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
        $.String, $.String, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CreationTitle", 
    $sig.make(0x15469, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x1546D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
    $sig.make(0x1546F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ProtectionLevel", 
    $sig.make(0x15471, $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UseContext", 
    $sig.make(0x15473, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "m_creationTitle", $.String); 
  $.Field({Static:false, Public:false}, "m_description", $.String); 
  $.Field({Static:false, Public:false}, "m_friendlyName", $.String); 
  $.Field({Static:false, Public:false}, "m_protectionLevel", $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")); 
  $.Field({Static:false, Public:false}, "m_useContext", $.String); 
  $.Property({Static:false, Public:true }, "CreationTitle", $.String);

  $.Property({Static:false, Public:true }, "Description", $.String);

  $.Property({Static:false, Public:true }, "FriendlyName", $.String);

  $.Property({Static:false, Public:true }, "ProtectionLevel", $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

  $.Property({Static:false, Public:true }, "UseContext", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CapiHashAlgorithm", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16910, null, [
        $.String, $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x16911, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "HashCore", 
    $sig.make(0x16917, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
    $sig.make(0x16918, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x16914, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_algorithmId", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
  $.Field({Static:false, Public:false}, "m_cspHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
  $.Field({Static:false, Public:false}, "m_hashHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AcquireCsp", 
    $sig.make(0x1593C, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), [
        $.String, $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/CryptAcquireContextFlags"), 
        $.Boolean
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ExportSymmetricKey", 
    $sig.make(0x1593E, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmName", 
    $sig.make(0x15940, $.String, [$asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetHashParameter", 
    $sig.make(0x15942, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/HashParameter")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetProviderParameterStruct", 
    $sig.make(0x15947, "!!0", [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameter"), 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameterFlags")
      ], ["T"])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "HResultForVerificationResult", 
    $sig.make(0x15948, $.Int32, [$asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ImportSymmetricKey", 
    $sig.make(0x15949, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
    $sig.make(0x1594A, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
    $sig.make(0x1594B, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

});

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmClass", false, {
    DataEncryption: 24576, 
    Hash: 32768
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmType", false, {
    Any: 0, 
    Block: 1536
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmSubId", false, {
    MD5: 3, 
    Sha1: 4, 
    Sha256: 12, 
    Sha384: 13, 
    Aes128: 14, 
    Sha512: 14, 
    Aes192: 15, 
    Aes256: 16
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmId", false, {
    None: 0, 
    Aes128: 26126, 
    Aes192: 26127, 
    Aes256: 26128, 
    MD5: 32771, 
    Sha1: 32772, 
    Sha256: 32780, 
    Sha384: 32781, 
    Sha512: 32782
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/CryptAcquireContextFlags", false, {
    VerifyContext: -268435456, 
    None: 0
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ErrorCode", false, {
    BadData: -2146893819, 
    BadAlgorithmId: -2146893816, 
    ProviderTypeNotDefined: -2146893801, 
    KeysetNotDefined: -2146893799, 
    Success: 0, 
    MoreData: 234, 
    NoMoreItems: 259
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/HashParameter", false, {
    None: 0, 
    AlgorithmId: 1, 
    HashValue: 2, 
    HashSize: 4
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyBlobType", false, {
    PlainText: 8
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyFlags", false, {
    None: 0, 
    Exportable: 1
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyParameter", false, {
    None: 0, 
    IV: 1, 
    Mode: 4, 
    ModeBits: 5
  }, false
);

JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative/ProviderNames", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAes", "Microsoft Enhanced RSA and AES Cryptographic Provider"); 
  $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAesPrototype", "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"); 
});

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderParameter", false, {
    None: 0, 
    EnumerateAlgorithms: 1
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderParameterFlags", false, {
    None: 0, 
    RestartEnumeration: 1
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderType", false, {
    None: 0, 
    RsaAes: 24
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.CapiNative/BLOBHEADER", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "bType", $asm09.TypeRef("System.Security.Cryptography.CapiNative/KeyBlobType")); 
  $.Field({Static:false, Public:true }, "bVersion", $.Byte); 
  $.Field({Static:false, Public:true }, "reserved", $.Int16); 
  $.Field({Static:false, Public:true }, "aiKeyAlg", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "cbData", $.Int32); 
  $.Field({Static:false, Public:true }, "pbData", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.CapiNative/PROV_ENUMALGS", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "aiAlgId", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
  $.Field({Static:false, Public:true }, "dwBitLen", $.Int32); 
  $.Field({Static:false, Public:true }, "dwNameLen", $.Int32); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative/UnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "_AxlPublicKeyBlobToPublicKeyToken", 
    $sig.make(0x17C9B, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptAcquireContext", 
    $sig.make(0x17CA1, $.Boolean, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")]), $.String, 
        $.String, $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/CryptAcquireContextFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptCreateHash", 
    $sig.make(0x17CA3, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptDecrypt", 
    $sig.make(0x17CA5, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
        $.Boolean, $.Int32, 
        $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptDuplicateKey", 
    $sig.make(0x17CA6, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm06.TypeRef("System.IntPtr"), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "CryptEncrypt", 
    $sig.make(0x17CA7, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
        $.Boolean, $.Int32, 
        $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptExportKey", 
    $sig.make(0x17CA8, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptGenKey", 
    $sig.make(0x17CA9, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptGenRandom", 
    $sig.make(0x17CAA, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptGetHashParam", 
    $sig.make(0x17CAB, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/HashParameter"), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptGetProvParam", 
    $sig.make(0x17CAC, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameter"), 
        $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameterFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptHashData", 
    $sig.make(0x17CAD, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptImportKey", 
    $sig.make(0x17CAE, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
        $asm09.TypeRef("System.Security.Cryptography.CapiNative/KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CryptSetKeyParam", 
    $sig.make(0x17CAF, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
      ], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeEnum(
  "System.Security.Cryptography.EncryptionMode", false, {
    Encrypt: 0, 
    Decrypt: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.CapiSymmetricAlgorithm", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14E98, null, [
        $.Int32, $.Int32, 
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm06.TypeRef("System.Security.Cryptography.CipherMode"), 
        $asm06.TypeRef("System.Security.Cryptography.PaddingMode"), $asm09.TypeRef("System.Security.Cryptography.EncryptionMode")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "DecryptBlocks", 
    $sig.make(0x14EA2, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "DepadBlock", 
    $sig.make(0x14EA4, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x14E9C, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "EncryptBlocks", 
    $sig.make(0x14EAC, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_CanReuseTransform", 
    $sig.make(0x14E8E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanTransformMultipleBlocks", 
    $sig.make(0x14E8F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InputBlockSize", 
    $sig.make(0x14E91, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OutputBlockSize", 
    $sig.make(0x14E92, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PadBlock", 
    $sig.make(0x14EAE, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ProcessIV", 
    $sig.make(0x14EB1, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $asm06.TypeRef("System.Security.Cryptography.CipherMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RawDecryptBlocks", 
    $sig.make(0x14EB3, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Reset", 
    $sig.make(0x14EB5, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetupKey", 
    $sig.make(0x14EB9, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm06.TypeRef("System.Security.Cryptography.CipherMode"), $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "TransformBlock", 
    $sig.make(0x14EB7, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "TransformFinalBlock", 
    $sig.make(0x14EB8, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_blockSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_depadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "m_encryptionMode", $asm09.TypeRef("System.Security.Cryptography.EncryptionMode")); 
  $.Field({Static:false, Public:false}, "m_key", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")); 
  $.Field({Static:false, Public:false}, "m_paddingMode", $asm06.TypeRef("System.Security.Cryptography.PaddingMode")); 
  $.Field({Static:false, Public:false}, "m_provider", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.Security.Cryptography.ICryptoTransform"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), "System.Security.Cryptography.ECDiffieHellman", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15041, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x1503C, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x1503E, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
    $sig.make(0x15040, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeyExchangeAlgorithm", 
    $sig.make(0x15031, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
    $sig.make(0x1503B, $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SignatureAlgorithm", 
    $sig.make(0x15035, $.String, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.ECDiffieHellmanPublicKey", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x150B7, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x150B9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x150BA, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
    $sig.make(0x150BC, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
    $sig.make(0x150BE, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "m_keyBlob", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction", true, {
    Hash: 0, 
    Hmac: 1, 
    Tls: 2
  }, false
);

JSIL.MakeClass($asm09.TypeRef("System.Security.Cryptography.ECDiffieHellman"), "System.Security.Cryptography.ECDiffieHellmanCng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x150F1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x150F2, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x150F3, null, [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
    $sig.make(0x150F5, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
    $sig.make(0x150F8, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
    $sig.make(0x150FA, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
    $sig.make(0x150FD, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x150FE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
    $sig.make(0x15100, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
    $sig.make(0x15102, null, [$.String, $asm09.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
    $sig.make(0x150D3, $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HmacKey", 
    $sig.make(0x150D5, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x150E5, $asm09.TypeRef("System.Security.Cryptography.CngKey"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeyDerivationFunction", 
    $sig.make(0x150D7, $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Label", 
    $sig.make(0x150D9, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
    $sig.make(0x150E9, $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_SecretAppend", 
    $sig.make(0x150DB, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SecretPrepend", 
    $sig.make(0x150DD, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Seed", 
    $sig.make(0x150DF, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UseSecretAgreementAsHmacKey", 
    $sig.make(0x150EF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
    $sig.make(0x150D4, null, [$asm09.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HmacKey", 
    $sig.make(0x150D6, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Key", 
    $sig.make(0x150E6, null, [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_KeyDerivationFunction", 
    $sig.make(0x150D8, null, [$asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Label", 
    $sig.make(0x150DA, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SecretAppend", 
    $sig.make(0x150DC, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SecretPrepend", 
    $sig.make(0x150DE, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Seed", 
    $sig.make(0x150E2, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
    $sig.make(0x15103, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
    $sig.make(0x15106, $.String, [$asm09.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
  );

  $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Security.Cryptography.KeySizes")])); 
  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm")); 
  $.Field({Static:false, Public:false}, "m_hmacKey", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "m_key", $asm09.TypeRef("System.Security.Cryptography.CngKey")); 
  $.Field({Static:false, Public:false}, "m_kdf", $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction")); 
  $.Field({Static:false, Public:false}, "m_label", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "m_secretAppend", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "m_secretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "m_seed", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "HashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"));

  $.Property({Static:false, Public:true }, "HmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true }, "KeyDerivationFunction", $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

  $.Property({Static:false, Public:true }, "Label", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true }, "SecretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true }, "SecretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true }, "Seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true }, "Key", $asm09.TypeRef("System.Security.Cryptography.CngKey"));

  $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

  $.Property({Static:false, Public:true }, "UseSecretAgreementAsHmacKey", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), "System.Security.Cryptography.ECDiffieHellmanCngPublicKey", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15653, null, [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15654, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromByteArray", 
    $sig.make(0x15655, $asm09.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "FromXmlString", 
    $sig.make(0x15656, $.Type, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_BlobFormat", 
    $sig.make(0x15652, $asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Import", 
    $sig.make(0x15657, $asm09.TypeRef("System.Security.Cryptography.CngKey"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
    $sig.make(0x15658, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "m_key", $asm09.TypeRef("System.Security.Cryptography.CngKey")); 
  $.Field({Static:false, Public:false}, "m_format", $asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")); 
  $.Property({Static:false, Public:true }, "BlobFormat", $asm09.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), "System.Security.Cryptography.ECDsa", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15675, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x15671, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x15672, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_KeyExchangeAlgorithm", 
    $sig.make(0x1566F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SignatureAlgorithm", 
    $sig.make(0x15670, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SignHash", 
    $sig.make(0x15673, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "VerifyHash", 
    $sig.make(0x15674, $.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

});

JSIL.MakeClass($asm09.TypeRef("System.Security.Cryptography.ECDsa"), "System.Security.Cryptography.ECDsaCng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1568A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1568C, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1568E, null, [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x15691, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
    $sig.make(0x15694, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
    $sig.make(0x15697, null, [$.String, $asm09.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
    $sig.make(0x15686, $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x15688, $asm09.TypeRef("System.Security.Cryptography.CngKey"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
    $sig.make(0x15687, null, [$asm09.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Key", 
    $sig.make(0x15689, null, [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SignData", 
    $sig.make(0x15698, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SignData", 
    $sig.make(0x1569B, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SignData", 
    $sig.make(0x1569F, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm06.TypeRef("System.IO.Stream")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SignHash", 
    $sig.make(0x156A2, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
    $sig.make(0x156A3, $.String, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
    $sig.make(0x156A4, $.String, [$asm09.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
    $sig.make(0x156A5, $.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
    $sig.make(0x156A6, $.Boolean, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
    $sig.make(0x156A7, $.Boolean, [$asm06.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "VerifyHash", 
    $sig.make(0x156A8, $.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Security.Cryptography.KeySizes")])); 
  $.Field({Static:false, Public:false}, "m_key", $asm09.TypeRef("System.Security.Cryptography.CngKey")); 
  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm")); 
  $.Property({Static:false, Public:true }, "HashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"));

  $.Property({Static:false, Public:true }, "Key", $asm09.TypeRef("System.Security.Cryptography.CngKey"));

});

JSIL.MakeEnum(
  "System.Security.Cryptography.ECKeyXmlFormat", true, {
    Rfc4050: 0
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.ManifestSignatureInformation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x156C5, null, [
        $asm09.TypeRef("System.Security.ManifestKinds"), $asm09.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), 
        $asm09.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AuthenticodeSignature", 
    $sig.make(0x156C1, $asm09.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Manifest", 
    $sig.make(0x156C2, $asm09.TypeRef("System.Security.ManifestKinds"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StrongNameSignature", 
    $sig.make(0x156C4, $asm09.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetManifestXml", 
    $sig.make(0x156C7, $asm0E.TypeRef("System.Xml.XmlDocument"), [$asm06.TypeRef("System.ActivationContext"), $asm09.TypeRef("System.Security.ManifestKinds")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
    $sig.make(0x156C8, $asm09.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm06.TypeRef("System.ActivationContext")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
    $sig.make(0x156CA, $asm09.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm06.TypeRef("System.ActivationContext"), $asm09.TypeRef("System.Security.ManifestKinds")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
    $sig.make(0x156CC, $asm09.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [
        $asm06.TypeRef("System.ActivationContext"), $asm09.TypeRef("System.Security.ManifestKinds"), 
        $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_manifest", $asm09.TypeRef("System.Security.ManifestKinds")); 
  $.Field({Static:false, Public:false}, "m_strongNameSignature", $asm09.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation")); 
  $.Field({Static:false, Public:false}, "m_authenticodeSignature", $asm09.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")); 
  $.Property({Static:false, Public:true }, "AuthenticodeSignature", $asm09.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

  $.Property({Static:false, Public:true }, "Manifest", $asm09.TypeRef("System.Security.ManifestKinds"));

  $.Property({Static:false, Public:true }, "StrongNameSignature", $asm09.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));

});

JSIL.MakeClass($asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]), "System.Security.Cryptography.ManifestSignatureInformationCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1578C, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")])], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.MD5"), "System.Security.Cryptography.MD5Cng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x162C6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x162C7, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x162C9, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x162CA, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x162C8, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
});

JSIL.MakeEnum(
  "System.Security.Cryptography.CngExportPolicies", true, {
    None: 0, 
    AllowExport: 1, 
    AllowPlaintextExport: 2, 
    AllowArchiving: 4, 
    AllowPlaintextArchiving: 8
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyCreationOptions", true, {
    None: 0, 
    MachineKey: 32, 
    OverwriteExistingKey: 128
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyOpenOptions", true, {
    UserKey: 0, 
    None: 0, 
    MachineKey: 32, 
    Silent: 64
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyTypes", false, {
    None: 0, 
    MachineKey: 32
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyUsages", true, {
    None: 0, 
    Decryption: 1, 
    Signing: 2, 
    KeyAgreement: 4, 
    AllUsages: 16777215
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngPropertyOptions", true, {
    Persist: -2147483648, 
    None: 0, 
    CustomProperty: 1073741824
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngUIProtectionLevels", true, {
    None: 0, 
    ProtectKey: 1, 
    ForceHighProtection: 2
  }, true
);

JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "BuildEccPublicBlob", 
    $sig.make(0x16406, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $.String, $asm0C.TypeRef("System.Numerics.BigInteger"), 
        $asm0C.TypeRef("System.Numerics.BigInteger")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreatePersistedKey", 
    $sig.make(0x16407, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
        $.String, $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeleteKey", 
    $sig.make(0x16408, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
    $sig.make(0x1640A, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
        $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm09.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
    $sig.make(0x1640B, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Security.Cryptography.NCryptNative/NCryptBuffer")]), $asm09.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHash", 
    $sig.make(0x1640C, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm09.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHmac", 
    $sig.make(0x1640D, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialTls", 
    $sig.make(0x1640E, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DeriveSecretAgreement", 
    $sig.make(0x1640F, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ExportKey", 
    $sig.make(0x16411, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "FillKeyParameter", 
    $sig.make(0x16412, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FinalizeKey", 
    $sig.make(0x16413, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "get_NCryptSupported", 
    $sig.make(0x16405, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
    $sig.make(0x16414, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsDWord", 
    $sig.make(0x16415, $.Int32, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsIntPtr", 
    $sig.make(0x16417, $asm06.TypeRef("System.IntPtr"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

  $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsString", 
    $sig.make(0x16418, $.String, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsStruct", 
    $sig.make(0x16419, "!!0", [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], ["T"])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ImportKey", 
    $sig.make(0x1641A, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.String
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "OpenKey", 
    $sig.make(0x1641B, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
        $asm09.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "OpenStorageProvider", 
    $sig.make(0x1641C, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
    $sig.make(0x1641E, $jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
    $sig.make(0x1641F, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
    $sig.make(0x16420, $jsilcore.TypeRef("System.Array", [$.Byte]), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
    $sig.make(0x16421, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $.Int32, $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
    $sig.make(0x16422, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $.String, $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
    $sig.make(0x16423, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        "!!0", $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], ["T"])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
    $sig.make(0x16424, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "SignHash", 
    $sig.make(0x16426, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "UnpackEccPublicBlob", 
    $sig.make(0x16427, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifySignature", 
    $sig.make(0x16428, $.Boolean, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:true , Public:false}, "s_ncryptSupported", $asm06.TypeRef("System.Nullable`1", [$.Boolean])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA7F, null, [], []), 
    function NCryptNative__cctor () {
      $thisType.s_ncryptSupported = new ($asm06.System.Nullable$b1.Of($asm06.System.Boolean)) ();
    }
  );

  $.Property({Static:true , Public:false}, "NCryptSupported", $.Boolean);

});

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/BufferType", false, {
    KdfHashAlgorithm: 0, 
    KdfSecretPrepend: 1, 
    KdfSecretAppend: 2, 
    KdfHmacKey: 3, 
    KdfTlsLabel: 4, 
    KdfTlsSeed: 5
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/ErrorCode", false, {
    BadSignature: -2146893818, 
    NotFound: -2146893807, 
    KeyDoesNotExist: -2146893802, 
    BufferTooSmall: -2146893784, 
    Success: 0
  }, false
);

JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/KeyPropertyName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Algorithm", "Algorithm Name"); 
  $.Constant({Static:true , Public:false}, "AlgorithmGroup", "Algorithm Group"); 
  $.Constant({Static:true , Public:false}, "ExportPolicy", "Export Policy"); 
  $.Constant({Static:true , Public:false}, "KeyType", "Key Type"); 
  $.Constant({Static:true , Public:false}, "KeyUsage", "Key Usage"); 
  $.Constant({Static:true , Public:false}, "Length", "Length"); 
  $.Constant({Static:true , Public:false}, "Name", "Name"); 
  $.Constant({Static:true , Public:false}, "ParentWindowHandle", "HWND Handle"); 
  $.Constant({Static:true , Public:false}, "ProviderHandle", "Provider Handle"); 
  $.Constant({Static:true , Public:false}, "UIPolicy", "UI Policy"); 
  $.Constant({Static:true , Public:false}, "UniqueName", "Unique Name"); 
  $.Constant({Static:true , Public:false}, "UseContext", "Use Context"); 
  $.Constant({Static:true , Public:false}, "ClrIsEphemeral", "CLR IsEphemeral"); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/ProviderPropertyName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Name", "Name"); 
});

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/SecretAgreementFlags", false, {
    None: 0, 
    UseSecretAsHmacKey: 1
  }, true
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.NCryptNative/NCRYPT_UI_POLICY", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "dwVersion", $.Int32); 
  $.Field({Static:false, Public:true }, "dwFlags", $asm09.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")); 
  $.Field({Static:false, Public:true }, "pszCreationTitle", $.String); 
  $.Field({Static:false, Public:true }, "pszFriendlyName", $.String); 
  $.Field({Static:false, Public:true }, "pszDescription", $.String); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.NCryptNative/NCryptBuffer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "cbBuffer", $.Int32); 
  $.Field({Static:false, Public:true }, "BufferType", $asm09.TypeRef("System.Security.Cryptography.NCryptNative/BufferType")); 
  $.Field({Static:false, Public:true }, "pvBuffer", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.NCryptNative/NCryptBufferDesc", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "ulVersion", $.Int32); 
  $.Field({Static:false, Public:true }, "cBuffers", $.Int32); 
  $.Field({Static:false, Public:true }, "pBuffers", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/UnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "NCryptCreatePersistedKey", 
    $sig.make(0x17CC0, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
        $.String, $.String, 
        $.Int32, $asm09.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptDeleteKey", 
    $sig.make(0x17CC1, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptDeriveKey", 
    $sig.make(0x17CC2, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.NCryptNative/NCryptBufferDesc")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm09.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptExportKey", 
    $sig.make(0x17CC4, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm06.TypeRef("System.IntPtr"), 
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptFinalizeKey", 
    $sig.make(0x17CC6, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptGetProperty", 
    $sig.make(0x17CC7, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptGetProperty", 
    $sig.make(0x17CC8, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

  $.ExternalMethod({Static:true , Public:false}, "NCryptImportKey", 
    $sig.make(0x17CC9, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm06.TypeRef("System.IntPtr"), 
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptOpenKey", 
    $sig.make(0x17CCB, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
        $.String, $.Int32, 
        $asm09.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptOpenStorageProvider", 
    $sig.make(0x17CD1, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")]), $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptSecretAgreement", 
    $sig.make(0x17CD3, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle")]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
    $sig.make(0x17CD4, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
    $sig.make(0x17CD6, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $.String, $.Int32, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
    $sig.make(0x17CD7, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $asm09.TypeRef("System.Security.Cryptography.CngPropertyOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptSignHash", 
    $sig.make(0x17CD8, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NCryptVerifySignature", 
    $sig.make(0x17CD9, $asm09.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.MakeStaticClass("System.Security.Cryptography.Rfc4050KeyFormatter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "FromXml", 
    $sig.make(0x16872, $asm09.TypeRef("System.Security.Cryptography.CngKey"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCurveUrn", 
    $sig.make(0x16874, $.String, [$asm09.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetKeySize", 
    $sig.make(0x16873, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReadAlgorithm", 
    $sig.make(0x16875, $asm09.TypeRef("System.Security.Cryptography.CngAlgorithm"), [$asm0E.TypeRef("System.Xml.XPath.XPathNavigator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReadPublicKey", 
    $sig.make(0x16876, null, [
        $asm0E.TypeRef("System.Xml.XPath.XPathNavigator"), $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0C.TypeRef("System.Numerics.BigInteger")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ToXml", 
    $sig.make(0x16879, $.String, [$asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteDomainParameters", 
    $sig.make(0x16877, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WritePublicKeyValue", 
    $sig.make(0x16878, null, [$asm0E.TypeRef("System.Xml.XmlWriter"), $asm09.TypeRef("System.Security.Cryptography.CngKey")], [])
  );

  $.Constant({Static:true , Public:false}, "DomainParametersRoot", "DomainParameters"); 
  $.Constant({Static:true , Public:false}, "ECDHRoot", "ECDHKeyValue"); 
  $.Constant({Static:true , Public:false}, "ECDsaRoot", "ECDSAKeyValue"); 
  $.Constant({Static:true , Public:false}, "NamedCurveElement", "NamedCurve"); 
  $.Constant({Static:true , Public:false}, "Namespace", "http://www.w3.org/2001/04/xmldsig-more#"); 
  $.Constant({Static:true , Public:false}, "PublicKeyRoot", "PublicKey"); 
  $.Constant({Static:true , Public:false}, "UrnAttribute", "URN"); 
  $.Constant({Static:true , Public:false}, "ValueAttribute", "Value"); 
  $.Constant({Static:true , Public:false}, "XElement", "X"); 
  $.Constant({Static:true , Public:false}, "YElement", "Y"); 
  $.Constant({Static:true , Public:false}, "XsiTypeAttribute", "type"); 
  $.Constant({Static:true , Public:false}, "XsiTypeAttributeValue", "PrimeFieldElemType"); 
  $.Constant({Static:true , Public:false}, "XsiNamespace", "http://www.w3.org/2001/XMLSchema-instance"); 
  $.Constant({Static:true , Public:false}, "XsiNamespacePrefix", "xsi"); 
  $.Constant({Static:true , Public:false}, "Prime256CurveUrn", "urn:oid:1.2.840.10045.3.1.7"); 
  $.Constant({Static:true , Public:false}, "Prime384CurveUrn", "urn:oid:1.3.132.0.34"); 
  $.Constant({Static:true , Public:false}, "Prime521CurveUrn", "urn:oid:1.3.132.0.35"); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA1"), "System.Security.Cryptography.SHA1Cng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1687C, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1687E, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x16887, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x16888, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x16885, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA256"), "System.Security.Cryptography.SHA256Cng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x168D0, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x168D2, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x168D5, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x168D6, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x168D4, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA256"), "System.Security.Cryptography.SHA256CryptoServiceProvider", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x168FC, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x168FD, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x168FF, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x16900, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x168FE, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA384"), "System.Security.Cryptography.SHA384Cng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1693B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1693C, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x1693F, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x16941, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x1693D, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA384"), "System.Security.Cryptography.SHA384CryptoServiceProvider", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1699B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1699C, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x169A0, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x169A2, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x1699E, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA512"), "System.Security.Cryptography.SHA512Cng", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x169D9, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x169DC, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x169E0, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x169E2, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x169DD, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Cryptography.SHA512"), "System.Security.Cryptography.SHA512CryptoServiceProvider", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x169F5, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x169F6, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashCore", 
    $sig.make(0x169F8, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "HashFinal", 
    $sig.make(0x169F9, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x169F7, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm09.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
});

JSIL.MakeEnum(
  "System.Security.Cryptography.SignatureVerificationResult", true, {
    SystemError: -2146869247, 
    InvalidSignerCertificate: -2146869246, 
    InvalidCountersignature: -2146869245, 
    InvalidCertificateSignature: -2146869244, 
    InvalidTimestamp: -2146869243, 
    BadDigest: -2146869232, 
    BasicConstraintsNotObserved: -2146869223, 
    UnknownTrustProvider: -2146762751, 
    UnknownVerificationAction: -2146762750, 
    BadSignatureFormat: -2146762749, 
    CertificateNotExplicitlyTrusted: -2146762748, 
    MissingSignature: -2146762496, 
    CertificateExpired: -2146762495, 
    InvalidTimePeriodNesting: -2146762494, 
    InvalidCertificateRole: -2146762493, 
    PathLengthConstraintViolated: -2146762492, 
    UnknownCriticalExtension: -2146762491, 
    CertificateUsageNotAllowed: -2146762490, 
    IssuerChainingError: -2146762489, 
    CertificateMalformed: -2146762488, 
    UntrustedRootCertificate: -2146762487, 
    CouldNotBuildChain: -2146762486, 
    GenericTrustFailure: -2146762485, 
    CertificateRevoked: -2146762484, 
    UntrustedTestRootCertificate: -2146762483, 
    RevocationCheckFailure: -2146762482, 
    InvalidCertificateUsage: -2146762480, 
    CertificateExplicitlyDistrusted: -2146762479, 
    UntrustedCertificationAuthority: -2146762478, 
    InvalidCertificatePolicy: -2146762477, 
    InvalidCertificateName: -2146762476, 
    Valid: 0, 
    AssemblyIdentityMismatch: 1, 
    ContainingSignatureInvalid: 2, 
    PublicKeyTokenMismatch: 3, 
    PublisherMismatch: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.StrongNameSignatureInformation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x156FF, null, [$asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15700, null, [$asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
    $sig.make(0x156FA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
    $sig.make(0x156FB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
    $sig.make(0x156FC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
    $sig.make(0x156FD, $asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
    $sig.make(0x156FE, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_verificationResult", $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
  $.Field({Static:false, Public:false}, "m_publicKey", $asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "StrongNameHashAlgorithm", $.String); 
  $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

  $.Property({Static:false, Public:true }, "HResult", $.Int32);

  $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

  $.Property({Static:false, Public:true }, "PublicKey", $asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

  $.Property({Static:false, Public:true }, "VerificationResult", $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

});

JSIL.DeclareNamespace("System.Security.Cryptography.X509Certificates");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15777, null, [
        $asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
        $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15778, null, [$asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x15761, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DescriptionUrl", 
    $sig.make(0x15763, $asm07.TypeRef("System.Uri"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
    $sig.make(0x15765, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
    $sig.make(0x1576A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
    $sig.make(0x1576C, $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
    $sig.make(0x1576E, $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
    $sig.make(0x15774, $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TrustStatus", 
    $sig.make(0x15775, $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
    $sig.make(0x15776, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_description", $.String); 
  $.Field({Static:false, Public:false}, "m_descriptionUrl", $asm07.TypeRef("System.Uri")); 
  $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
  $.Field({Static:false, Public:false}, "m_signatureChain", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")); 
  $.Field({Static:false, Public:false}, "m_timestamp", $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")); 
  $.Field({Static:false, Public:false}, "m_verificationResult", $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
  $.Field({Static:false, Public:false}, "m_signingCertificate", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")); 
  $.Property({Static:false, Public:true }, "Description", $.String);

  $.Property({Static:false, Public:true }, "DescriptionUrl", $asm07.TypeRef("System.Uri"));

  $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

  $.Property({Static:false, Public:true }, "HResult", $.Int32);

  $.Property({Static:false, Public:true }, "SignatureChain", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

  $.Property({Static:false, Public:true }, "SigningCertificate", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

  $.Property({Static:false, Public:true }, "Timestamp", $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

  $.Property({Static:false, Public:true }, "TrustStatus", $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"));

  $.Property({Static:false, Public:true }, "VerificationResult", $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Security.Cryptography.X509Certificates.TimestampInformation", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1581C, null, [$asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1581F, null, [$asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
    $sig.make(0x15808, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
    $sig.make(0x1580A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
    $sig.make(0x1580B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
    $sig.make(0x1580D, $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
    $sig.make(0x15810, $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
    $sig.make(0x15818, $asm06.TypeRef("System.DateTime"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
    $sig.make(0x1581B, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
  $.Field({Static:false, Public:false}, "m_timestamp", $asm06.TypeRef("System.DateTime")); 
  $.Field({Static:false, Public:false}, "m_timestampChain", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")); 
  $.Field({Static:false, Public:false}, "m_verificationResult", $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
  $.Field({Static:false, Public:false}, "m_timestamper", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")); 
  $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

  $.Property({Static:false, Public:true }, "HResult", $.Int32);

  $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

  $.Property({Static:false, Public:true }, "SignatureChain", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

  $.Property({Static:false, Public:true }, "SigningCertificate", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

  $.Property({Static:false, Public:true }, "Timestamp", $asm06.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "VerificationResult", $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

});

JSIL.MakeEnum(
  "System.Security.Cryptography.X509Certificates.TrustStatus", true, {
    Untrusted: 0, 
    UnknownIdentity: 1, 
    KnownIdentity: 2, 
    Trusted: 3
  }, false
);

JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native", false, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeEnum(
  "System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags", false, {
    None: 0, 
    NoRevocationCheck: 1, 
    RevocationCheckEndCertOnly: 2, 
    RevocationCheckEntireChain: 4, 
    UrlOnlyCacheRetrieval: 8, 
    LifetimeSigning: 16, 
    TrustMicrosoftRootOnly: 32
  }, true
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
  $.Field({Static:false, Public:true }, "dwError", $.Int32); 
  $.Field({Static:false, Public:true }, "algHash", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
  $.Field({Static:false, Public:true }, "pwszHash", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "pwszDescription", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "pwszDescriptionUrl", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "pChainContext", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "cbsize", $.Int32); 
  $.Field({Static:false, Public:true }, "dwError", $.Int32); 
  $.Field({Static:false, Public:true }, "algHash", $asm09.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
  $.Field({Static:false, Public:true }, "ftTimestamp", $asm06.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")); 
  $.Field({Static:false, Public:true }, "pChainContext", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native/UnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "_AxlGetIssuerPublicKeyHash", 
    $sig.make(0x18207, $.Int32, [$asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CertFreeAuthenticodeSignerInfo", 
    $sig.make(0x18208, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO")])], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:true , Public:true }, "CertFreeAuthenticodeTimestamperInfo", 
    $sig.make(0x18209, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")])], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:true , Public:true }, "CertVerifyAuthenticodeLicense", 
    $sig.make(0x1820A, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB")]), $asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")])
      ], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.DeclareNamespace("System.Security.Cryptography.Xml");
JSIL.MakeClass($asm0F.TypeRef("System.Security.Cryptography.Xml.SignedXml"), "System.Security.Cryptography.Xml.ManifestSignedXml", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16AC9, null, [$asm0E.TypeRef("System.Xml.XmlDocument"), $asm09.TypeRef("System.Security.ManifestKinds")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BackwardHexToBytes", 
    $sig.make(0x16ACA, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildSignatureChain", 
    $sig.make(0x16ACB, $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [
        $asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO"), $asm0E.TypeRef("System.Xml.XmlElement"), 
        $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CalculateManifestPublicKeyToken", 
    $sig.make(0x16ACC, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CalculateSignerPublicKeyToken", 
    $sig.make(0x16ACD, $jsilcore.TypeRef("System.Array", [$.Byte]), [$asm06.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CompareBytes", 
    $sig.make(0x16ACE, $.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetIdElement", 
    $sig.make(0x16ACF, $asm0E.TypeRef("System.Xml.XmlElement"), [$asm0E.TypeRef("System.Xml.XmlDocument"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTimestampInformation", 
    $sig.make(0x16AD0, $asm09.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [$asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO"), $asm0E.TypeRef("System.Xml.XmlElement")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
    $sig.make(0x16AD1, $jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
    $sig.make(0x16AD2, $asm06.TypeRef("System.Nullable`1", [$.Byte]), [$.Char], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
    $sig.make(0x16AD3, $asm09.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags"), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeExpectedHash", 
    $sig.make(0x16AD4, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodePublisher", 
    $sig.make(0x16AD5, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignature", 
    $sig.make(0x16AD6, $asm09.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [
        $asm0E.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), 
        $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignatureIdentity", 
    $sig.make(0x16AD7, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "VerifySignature", 
    $sig.make(0x16ADB, $asm09.TypeRef("System.Security.Cryptography.ManifestSignatureInformation"), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "VerifyStrongNameSignature", 
    $sig.make(0x16ADA, $asm09.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureId", 
    $sig.make(0x16AD8, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0E.TypeRef("System.Xml.XmlElement")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureTransforms", 
    $sig.make(0x16AD9, $asm09.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0F.TypeRef("System.Security.Cryptography.Xml.SignedInfo")], [])
  );

  $.Field({Static:false, Public:false}, "m_manifest", $asm09.TypeRef("System.Security.ManifestKinds")); 
  $.Field({Static:false, Public:false}, "m_manifestXml", $asm0E.TypeRef("System.Xml.XmlDocument")); 
  $.Field({Static:false, Public:false}, "m_namespaceManager", $asm0E.TypeRef("System.Xml.XmlNamespaceManager")); 
});

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeLibraryHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1555C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x1555D, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafePipeHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x152FF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15300, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15301, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafePerfProviderHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15271, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15272, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.CallSiteBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1592A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x1592C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [
        $jsilcore.TypeRef("System.Array", [$.Object]), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BindCore", 
    $sig.make(0x15933, "!!0", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $jsilcore.TypeRef("System.Array", [$.Object])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindDelegate", 
    $sig.make(0x15931, "!!0", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $jsilcore.TypeRef("System.Array", [$.Object])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "CacheTarget", 
    $sig.make(0x15934, null, ["!!0"], ["T"])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_UpdateLabel", 
    $sig.make(0x15927, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRuleCache", 
    $sig.make(0x15938, $asm09.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), [], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "Stitch", 
    $sig.make(0x15936, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder/LambdaSignature`1", ["!!0"])], ["T"])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "_updateLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
  $.Field({Static:false, Public:false}, "Cache", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm06.TypeRef("System.Type"), $.Object])); 
  $.Property({Static:true , Public:true }, "UpdateLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.CallSiteBinder/LambdaSignature`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DA4, null, [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Parameters", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "ReturnLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
});

JSIL.DeclareNamespace("System.Dynamic");
JSIL.MakeClass($asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), "System.Dynamic.DynamicMetaObjectBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C50, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddRemoteObjectRestrictions", 
    $sig.make(0x16C53, $asm09.TypeRef("System.Dynamic.BindingRestrictions"), [
        $asm09.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16C51, $asm09.TypeRef("System.Linq.Expressions.Expression"), [
        $jsilcore.TypeRef("System.Array", [$.Object]), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16C54, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateArgumentMetaObjects", 
    $sig.make(0x16C52, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Defer", 
    $sig.make(0x16C56, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Defer", 
    $sig.make(0x16C57, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16C4F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16C4E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetUpdateExpression", 
    $sig.make(0x16C55, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsComObject", 
    $sig.make(0x16C59, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MakeDeferred", 
    $sig.make(0x16C58, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "ComObjectType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.BinaryOperationBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D4B, null, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16D4E, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackBinaryOperation", 
    $sig.make(0x16D4C, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackBinaryOperation", 
    $sig.make(0x16D4D, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16D4A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
    $sig.make(0x16D49, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16D48, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
    $sig.make(0x16D4F, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.Field({Static:false, Public:false}, "_operation", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Operation", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.BindingRestrictions", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C7F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Combine", 
    $sig.make(0x16C86, $.Type, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
    $sig.make(0x16C7E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x16C80, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetExpressionRestriction", 
    $sig.make(0x16C85, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetInstanceRestriction", 
    $sig.make(0x16C84, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTypeRestriction", 
    $sig.make(0x16C82, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTypeRestriction", 
    $sig.make(0x16C83, $.Type, [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Merge", 
    $sig.make(0x16C81, $.Type, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToExpression", 
    $sig.make(0x16C87, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.Constant({Static:true , Public:false}, "TypeRestrictionHash", 268435456); 
  $.Constant({Static:true , Public:false}, "InstanceRestrictionHash", 536870912); 
  $.Constant({Static:true , Public:false}, "CustomRestrictionHash", 1073741824); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Property({Static:false, Public:false}, "DebugView", $.String);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugView}"]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Dynamic.BindingRestrictions/BindingRestrictionsProxy")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.BindingRestrictions/TestBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17947, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Append", 
    $sig.make(0x17944, null, [$asm09.TypeRef("System.Dynamic.BindingRestrictions")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Push", 
    $sig.make(0x17946, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToExpression", 
    $sig.make(0x17945, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_unique", $asm09.TypeRef("System.Linq.Expressions.Set`1", [$asm09.TypeRef("System.Dynamic.BindingRestrictions")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_tests", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm09.TypeRef("System.Dynamic.BindingRestrictions/TestBuilder/AndNode")])); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Dynamic.BindingRestrictions/TestBuilder/AndNode", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "Depth", $.Int32); 
  $.Field({Static:false, Public:false}, "Node", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.BindingRestrictions"), "System.Dynamic.BindingRestrictions/MergedRestriction", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1796A, null, [$asm09.TypeRef("System.Dynamic.BindingRestrictions"), $asm09.TypeRef("System.Dynamic.BindingRestrictions")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x1796B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Left", $asm09.TypeRef("System.Dynamic.BindingRestrictions")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Right", $asm09.TypeRef("System.Dynamic.BindingRestrictions")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.BindingRestrictions"), "System.Dynamic.BindingRestrictions/CustomRestriction", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17998, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x17999, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x1799B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x1799A, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.BindingRestrictions"), "System.Dynamic.BindingRestrictions/TypeRestriction", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x179A1, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x179A2, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x179A4, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x179A3, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.BindingRestrictions"), "System.Dynamic.BindingRestrictions/InstanceRestriction", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x179CA, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x179CB, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x179CD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x179CC, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.BindingRestrictions/BindingRestrictionsProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x179E0, null, [$asm09.TypeRef("System.Dynamic.BindingRestrictions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x179DC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
    $sig.make(0x179DF, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.BindingRestrictions")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Test", 
    $sig.make(0x179DD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x179E2, $.String, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Dynamic.BindingRestrictions")); 
  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

  $.Property({Static:false, Public:true }, "Test", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Restrictions", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.BindingRestrictions")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.CallInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16E81, null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16E82, null, [$.Int32, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x16E87, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ArgumentCount", 
    $sig.make(0x16E7E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ArgumentNames", 
    $sig.make(0x16E7F, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x16E83, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_argCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_argNames", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String])); 
  $.Property({Static:false, Public:true }, "ArgumentCount", $.Int32);

  $.Property({Static:false, Public:true }, "ArgumentNames", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.CallSite", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D34, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x15D35, $.Type, [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
    $sig.make(0x15D33, $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [], [])
  );

  $.Field({Static:true , Public:false}, "_SiteCtors", $asm09.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Func`2", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $.Type])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_binder", $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")); 
  $.Field({Static:false, Public:false}, "_match", $.Boolean); 
  $.Property({Static:false, Public:true }, "Binder", $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

});

JSIL.MakeClass($asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "System.Runtime.CompilerServices.CallSite`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D46, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D47, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddRule", 
    $sig.make(0x15D4D, null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearRuleCache", 
    $sig.make(0x15D4C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Convert", 
    $sig.make(0x15D53, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x15D49, $.Type, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateCustomNoMatchDelegate", 
    $sig.make(0x15D51, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateCustomUpdateDelegate", 
    $sig.make(0x15D52, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateMatchMaker", 
    $sig.make(0x15D48, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Update", 
    $sig.make(0x15D45, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetUpdateDelegate", 
    $sig.make(0x15D4A, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetUpdateDelegate", 
    $sig.make(0x15D4B, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSimpleSignature", 
    $sig.make(0x15D50, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MakeUpdateDelegate", 
    $sig.make(0x15D4F, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveRule", 
    $sig.make(0x15D4E, null, [$.Int32], [])
  );

  $.Constant({Static:true , Public:false}, "MaxRules", 10); 
  $.Field({Static:false, Public:true }, "Target", $.GenericParameter("T")); 
  $.Field({Static:false, Public:false}, "Rules", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:true , Public:false}, "_CachedUpdate", $.GenericParameter("T")); 
  $.Field({Static:true , Public:false}, "_CachedNoMatch", $.GenericParameter("T")); 
  $.Property({Static:false, Public:true }, "Update", new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"));

});

JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteHelpers", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "IsInternalFrame", 
    $sig.make(0x1704B, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodBase")], [])
  );

  $.Field({Static:true , Public:false}, "_knownNonDynamicMethodType", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteOps", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "AddRule", 
    $sig.make(0x170BA, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), "!!0"], ["T"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "Bind", 
    $sig.make(0x170C3, "!!0", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], ["T"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "ClearMatch", 
    $sig.make(0x170B7, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "CreateMatchmaker", 
    $sig.make(0x170AF, $asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "GetCachedRules", 
    $sig.make(0x170C2, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"])], ["T"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "GetMatch", 
    $sig.make(0x170B5, $.Boolean, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "GetRuleCache", 
    $sig.make(0x170C0, $asm09.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "GetRules", 
    $sig.make(0x170BF, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "MoveRule", 
    $sig.make(0x170C1, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), "!!0", 
        $.Int32
      ], ["T"])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "SetNotMatched", 
    $sig.make(0x170B2, $.Boolean, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "UpdateRules", 
    $sig.make(0x170BD, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $.Int32], ["T"])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.ConvertBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D62, null, [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16D65, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackConvert", 
    $sig.make(0x16D63, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackConvert", 
    $sig.make(0x16D64, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Explicit", 
    $sig.make(0x16D5F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16D60, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16D61, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x16D5E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_explicit", $.Boolean); 
  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Explicit", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.CreateInstanceBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16D3C, null, [$asm09.TypeRef("System.Dynamic.CallInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16D40, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackCreateInstance", 
    $sig.make(0x16D3E, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackCreateInstance", 
    $sig.make(0x16D3F, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
    $sig.make(0x16D38, $asm09.TypeRef("System.Dynamic.CallInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16D3A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16D35, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm09.TypeRef("System.Dynamic.CallInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "CallInfo", $asm09.TypeRef("System.Dynamic.CallInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.DeleteIndexBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16E11, null, [$asm09.TypeRef("System.Dynamic.CallInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16E14, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteIndex", 
    $sig.make(0x16E16, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteIndex", 
    $sig.make(0x16E17, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
    $sig.make(0x16E0A, $asm09.TypeRef("System.Dynamic.CallInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16E0E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16DFD, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm09.TypeRef("System.Dynamic.CallInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "CallInfo", $asm09.TypeRef("System.Dynamic.CallInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.DeleteMemberBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CC5, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16CC8, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteMember", 
    $sig.make(0x16CC6, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteMember", 
    $sig.make(0x16CC7, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
    $sig.make(0x16CC2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16CC4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x16CC1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16CC3, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicMetaObject", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16BC1, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Dynamic.BindingRestrictions")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16BC4, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Dynamic.BindingRestrictions"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindBinaryOperation", 
    $sig.make(0x16BDA, $.Type, [$asm09.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindConvert", 
    $sig.make(0x16BC9, $.Type, [$asm09.TypeRef("System.Dynamic.ConvertBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindCreateInstance", 
    $sig.make(0x16BD8, $.Type, [$asm09.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindDeleteIndex", 
    $sig.make(0x16BD3, $.Type, [$asm09.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindDeleteMember", 
    $sig.make(0x16BCE, $.Type, [$asm09.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindGetIndex", 
    $sig.make(0x16BCF, $.Type, [$asm09.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindGetMember", 
    $sig.make(0x16BCA, $.Type, [$asm09.TypeRef("System.Dynamic.GetMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindInvoke", 
    $sig.make(0x16BD7, $.Type, [$asm09.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindInvokeMember", 
    $sig.make(0x16BD5, $.Type, [$asm09.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindSetIndex", 
    $sig.make(0x16BD1, $.Type, [
        $asm09.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindSetMember", 
    $sig.make(0x16BCC, $.Type, [$asm09.TypeRef("System.Dynamic.SetMemberBinder"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindUnaryOperation", 
    $sig.make(0x16BD9, $.Type, [$asm09.TypeRef("System.Dynamic.UnaryOperationBinder")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Create", 
    $sig.make(0x16BDD, $.Type, [$.Object, $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x16BB6, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0x16BBC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LimitType", 
    $sig.make(0x16BBF, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
    $sig.make(0x16BB8, $asm09.TypeRef("System.Dynamic.BindingRestrictions"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RuntimeType", 
    $sig.make(0x16BBD, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x16BBA, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDynamicMemberNames", 
    $sig.make(0x16BDB, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetExpressions", 
    $sig.make(0x16BDC, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictions", $asm09.TypeRef("System.Dynamic.BindingRestrictions")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyMetaObjects", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
      return JSIL.Array.New($thisType, 0);
    }); 
  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Restrictions", $asm09.TypeRef("System.Dynamic.BindingRestrictions"));

  $.Property({Static:false, Public:true }, "Value", $.Object);

  $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

  $.Property({Static:false, Public:true }, "RuntimeType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "LimitType", $asm06.TypeRef("System.Type"));

});

JSIL.MakeInterface(
  "System.Dynamic.IDynamicMetaObjectProvider", true, [], function ($) {
    $.Method({}, "GetMetaObject", $sig.make(0x170DD, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], []));
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x170DE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDynamicMemberNames", 
    $sig.make(0x170EB, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetMetaObject", 
    $sig.make(0x170EC, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryBinaryOperation", 
    $sig.make(0x170E6, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Object, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryConvert", 
    $sig.make(0x170E3, $.Boolean, [$asm09.TypeRef("System.Dynamic.ConvertBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryCreateInstance", 
    $sig.make(0x170E4, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryDeleteIndex", 
    $sig.make(0x170EA, $.Boolean, [$asm09.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryDeleteMember", 
    $sig.make(0x170E1, $.Boolean, [$asm09.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryGetIndex", 
    $sig.make(0x170E8, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryGetMember", 
    $sig.make(0x170DF, $.Boolean, [$asm09.TypeRef("System.Dynamic.GetMemberBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryInvoke", 
    $sig.make(0x170E5, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryInvokeMember", 
    $sig.make(0x170E2, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TrySetIndex", 
    $sig.make(0x170E9, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TrySetMember", 
    $sig.make(0x170E0, $.Boolean, [$asm09.TypeRef("System.Dynamic.SetMemberBinder"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryUnaryOperation", 
    $sig.make(0x170E7, $.Boolean, [$asm09.TypeRef("System.Dynamic.UnaryOperationBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ImplementInterfaces($asm09.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObject"), "System.Dynamic.DynamicObject/MetaDynamic", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17CDF, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Dynamic.DynamicObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindBinaryOperation", 
    $sig.make(0x17CE8, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.BinaryOperationBinder"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindConvert", 
    $sig.make(0x17CE4, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.ConvertBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindCreateInstance", 
    $sig.make(0x17CE6, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindDeleteIndex", 
    $sig.make(0x17CEC, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindDeleteMember", 
    $sig.make(0x17CE3, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindGetIndex", 
    $sig.make(0x17CEA, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindGetMember", 
    $sig.make(0x17CE1, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.GetMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindInvoke", 
    $sig.make(0x17CE7, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindInvokeMember", 
    $sig.make(0x17CE5, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindSetIndex", 
    $sig.make(0x17CEB, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindSetMember", 
    $sig.make(0x17CE2, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.SetMemberBinder"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindUnaryOperation", 
    $sig.make(0x17CE9, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.UnaryOperationBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BuildCallMethodWithResult", 
    $sig.make(0x17CFC, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $.String, $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), 
        $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallMethodNoResult", 
    $sig.make(0x17CFF, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $.String, $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallMethodReturnLast", 
    $sig.make(0x17CFD, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $.String, $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
    $sig.make(0x17CF8, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $.String, $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
    $sig.make(0x17CFA, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $.String, $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback"), 
        $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Constant", 
    $sig.make(0x17CF6, $asm09.TypeRef("System.Linq.Expressions.ConstantExpression"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Value", 
    $sig.make(0x17CDE, $asm09.TypeRef("System.Dynamic.DynamicObject"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetArgArray", 
    $sig.make(0x17CEF, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetArgArray", 
    $sig.make(0x17CF4, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetArgs", 
    $sig.make(0x17CED, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDynamicMemberNames", 
    $sig.make(0x17CE0, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
    $sig.make(0x17D03, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
    $sig.make(0x17D02, $asm09.TypeRef("System.Dynamic.BindingRestrictions"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsOverridden", 
    $sig.make(0x17D01, $.Boolean, [$.String], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "NoArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), function ($pi) {
      return JSIL.Array.New($asm09.System.Linq.Expressions.Expression, 0);
    }); 
  $.Property({Static:false, Public:false}, "Value", $asm09.TypeRef("System.Dynamic.DynamicObject"));

});

JSIL.MakeDelegate("System.Dynamic.DynamicObject/MetaDynamic/Fallback", false, []);

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.GetMemberBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16DB8, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16DBB, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackGetMember", 
    $sig.make(0x16DB9, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackGetMember", 
    $sig.make(0x16DBA, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
    $sig.make(0x16DB5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16DB7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x16DB3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16DB1, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.GetMemberBinder"), "System.Dynamic.DynamicObject/MetaDynamic/GetBinderAdapter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x183AD, null, [$asm09.TypeRef("System.Dynamic.InvokeMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackGetMember", 
    $sig.make(0x183AE, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183B7, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.GetMemberBinder")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass6", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183D5, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.SetMemberBinder")); 
  $.Field({Static:false, Public:true }, "value", $asm09.TypeRef("System.Dynamic.DynamicMetaObject")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClassa", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18373, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.DeleteMemberBinder")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClasse", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18397, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.ConvertBinder")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass12", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183F9, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.InvokeMemberBinder")); 
  $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass16", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183CD, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.CreateInstanceBinder")); 
  $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass1a", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183DF, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.InvokeBinder")); 
  $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass1e", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18405, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.BinaryOperationBinder")); 
  $.Field({Static:false, Public:true }, "arg", $asm09.TypeRef("System.Dynamic.DynamicMetaObject")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass22", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18416, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.UnaryOperationBinder")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass26", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18375, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.GetIndexBinder")); 
  $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2a", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183BF, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.SetIndexBinder")); 
  $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
  $.Field({Static:false, Public:true }, "value", $asm09.TypeRef("System.Dynamic.DynamicMetaObject")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2e", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183EC, null, [], [])
  );

  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.DeleteIndexBinder")); 
  $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoClass", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x170FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x170FE, null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FindNewClass", 
    $sig.make(0x170FF, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Keys", 
    $sig.make(0x170FC, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetTransitionList", 
    $sig.make(0x17100, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.WeakReference")]), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValueIndex", 
    $sig.make(0x17101, $.Int32, [
        $.String, $.Boolean, 
        $asm09.TypeRef("System.Dynamic.ExpandoObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseInsensitive", 
    $sig.make(0x17103, $.Int32, [$.String, $asm09.TypeRef("System.Dynamic.ExpandoObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseSensitive", 
    $sig.make(0x17102, $.Int32, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "EmptyHashCode", 6551); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_keys", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "_transitions", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.WeakReference")])])); 
  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Property({Static:false, Public:false}, "Keys", $jsilcore.TypeRef("System.Array", [$.String]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17190, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExpandoContainsKey", 
    $sig.make(0x171A9, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Class", 
    $sig.make(0x17180, $asm09.TypeRef("System.Dynamic.ExpandoClass"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpandoEnumerator", 
    $sig.make(0x171B5, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [$asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsDeletedMember", 
    $sig.make(0x1719A, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PromoteClass", 
    $sig.make(0x1719E, null, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PromoteClassCore", 
    $sig.make(0x1719C, $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData"), [$asm09.TypeRef("System.Dynamic.ExpandoClass"), $asm09.TypeRef("System.Dynamic.ExpandoClass")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x171AE, null, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0x171AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Contains", 
    $sig.make(0x171B0, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.CopyTo", 
    $sig.make(0x171B1, null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_Count", 
    $sig.make(0x17189, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x1718B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x171B2, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.Add", 
    $sig.make(0x171AA, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.ContainsKey", 
    $sig.make(0x171AB, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.get_Item", 
    $sig.make(0x17185, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.get_Keys", 
    $sig.make(0x17181, $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.get_Values", 
    $sig.make(0x17184, $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.Remove", 
    $sig.make(0x171AC, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.set_Item", 
    $sig.make(0x17187, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.TryGetValue", 
    $sig.make(0x171AD, $.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x171B3, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x171B4, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "INotifyPropertyChanged.add_PropertyChanged", 
    $sig.make(0x1718D, null, [$asm07.TypeRef("System.ComponentModel.PropertyChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "INotifyPropertyChanged.remove_PropertyChanged", 
    $sig.make(0x1718F, null, [$asm07.TypeRef("System.ComponentModel.PropertyChangedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDynamicMetaObjectProvider.GetMetaObject", 
    $sig.make(0x171A0, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryAddMember", 
    $sig.make(0x171A2, null, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryDeleteValue", 
    $sig.make(0x17198, $.Boolean, [
        $.Object, $.Int32, 
        $.String, $.Boolean, 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
    $sig.make(0x17191, $.Boolean, [
        $.Object, $.Int32, 
        $.String, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryGetValueForKey", 
    $sig.make(0x171A7, $.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TrySetValue", 
    $sig.make(0x17193, null, [
        $.Object, $.Int32, 
        $.Object, $.String, 
        $.Boolean, $.Boolean
      ], [])
  );

  $.Constant({Static:true , Public:false}, "AmbiguousMatchFound", -2); 
  $.Constant({Static:true , Public:false}, "NoMatch", -1); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "LockObject", $.Object); 
  $.Field({Static:false, Public:false}, "_data", $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
  $.Field({Static:false, Public:false}, "_count", $.Int32); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Uninitialized", $.Object); 
  $.Field({Static:false, Public:false}, "_propertyChanged", $asm07.TypeRef("System.ComponentModel.PropertyChangedEventHandler")); 
  $.Property({Static:false, Public:false}, "Class", $asm09.TypeRef("System.Dynamic.ExpandoClass"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary`2.Keys", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary`2.Values", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary`2.Item", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm09.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      $asm06.TypeRef("System.Collections.IEnumerable"), $asm07.TypeRef("System.ComponentModel.INotifyPropertyChanged")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/KeyCollectionDebugView", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17D7F, null, [$asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x17D7C, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.Field({Static:false, Public:false}, "collection", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.String])); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.String]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/KeyCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17DA2, null, [$asm09.TypeRef("System.Dynamic.ExpandoObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x17DAB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
    $sig.make(0x17DA9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x17DAC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x17DAE, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x17DAF, null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x17D9F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x17DA0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x17DB1, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x17DB0, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17DB2, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm09.TypeRef("System.Dynamic.ExpandoObject")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Dynamic.ExpandoObject/KeyCollectionDebugView")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/KeyCollection/<GetEnumerator>d__c", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x183DE, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x183D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x183D6, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x183D7, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x183DA, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x183DD, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.String); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.ExpandoObject/KeyCollection")); 
  $.Field({Static:false, Public:true }, "i$d", $.Int32); 
  $.Field({Static:false, Public:true }, "n$e", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/ValueCollectionDebugView", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17DEE, null, [$asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x17DED, $jsilcore.TypeRef("System.Array", [$.Object]), [], [])
  );

  $.Field({Static:false, Public:false}, "collection", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.Object])); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/ValueCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17E33, null, [$asm09.TypeRef("System.Dynamic.ExpandoObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x17E35, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
    $sig.make(0x17E34, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x17E36, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x17E37, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x17E38, null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x17E31, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x17E32, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x17E3B, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x17E3A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17E3D, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm09.TypeRef("System.Dynamic.ExpandoObject")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Dynamic.ExpandoObject/ValueCollectionDebugView")]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/ValueCollection/<GetEnumerator>d__13", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1840A, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18404, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18402, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18403, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18406, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18408, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.Object); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.ExpandoObject/ValueCollection")); 
  $.Field({Static:false, Public:true }, "data", $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Field({Static:false, Public:true }, "temp", $.Object); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObject"), "System.Dynamic.ExpandoObject/MetaExpando", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E68, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Dynamic.ExpandoObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddDynamicTestAndDefer", 
    $sig.make(0x17E6F, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm09.TypeRef("System.Dynamic.ExpandoClass"), 
        $asm09.TypeRef("System.Dynamic.ExpandoClass"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindDeleteMember", 
    $sig.make(0x17E6D, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindGetMember", 
    $sig.make(0x17E6A, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.GetMemberBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "BindGetOrInvokeMember", 
    $sig.make(0x17E69, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.String, 
        $.Boolean, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), 
        $asm06.TypeRef("System.Func`2", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindInvokeMember", 
    $sig.make(0x17E6B, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BindSetMember", 
    $sig.make(0x17E6C, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.SetMemberBinder"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x17E67, $asm09.TypeRef("System.Dynamic.ExpandoObject"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetClassEnsureIndex", 
    $sig.make(0x17E76, $asm09.TypeRef("System.Dynamic.ExpandoClass"), [
        $.String, $.Boolean, 
        $asm09.TypeRef("System.Dynamic.ExpandoObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Dynamic.ExpandoClass")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDynamicMemberNames", 
    $sig.make(0x17E6E, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
    $sig.make(0x17E7C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
    $sig.make(0x17E80, $asm09.TypeRef("System.Dynamic.BindingRestrictions"), [], [])
  );

  $.Property({Static:false, Public:true }, "Value", $asm09.TypeRef("System.Dynamic.ExpandoObject"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/MetaExpando/<>c__DisplayClass19", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1841E, null, [], [])
  );

  $.Field({Static:false, Public:true }, "binder", $asm09.TypeRef("System.Dynamic.InvokeMemberBinder")); 
  $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/MetaExpando/<GetDynamicMemberNames>d__1b", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1842D, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1842A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x18428, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x18426, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x18429, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x18427, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1842B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x1842C, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.String); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.ExpandoObject/MetaExpando")); 
  $.Field({Static:false, Public:true }, "expandoData$1c", $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
  $.Field({Static:false, Public:true }, "klass$1d", $asm09.TypeRef("System.Dynamic.ExpandoClass")); 
  $.Field({Static:false, Public:true }, "i$1e", $.Int32); 
  $.Field({Static:false, Public:true }, "val$1f", $.Object); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/ExpandoData", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17234, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17237, null, [
        $asm09.TypeRef("System.Dynamic.ExpandoClass"), $jsilcore.TypeRef("System.Array", [$.Object]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x17228, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Length", 
    $sig.make(0x17231, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Version", 
    $sig.make(0x1722C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetAlignedSize", 
    $sig.make(0x1723F, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x1722A, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateClass", 
    $sig.make(0x1723C, $.Type, [$asm09.TypeRef("System.Dynamic.ExpandoClass")], [])
  );

  $.Field({Static:true , Public:false}, "Empty", $.Type); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Class", $asm09.TypeRef("System.Dynamic.ExpandoClass")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_dataArray", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false}, "_version", $.Int32); 
  $.Property({Static:false, Public:false}, "Item", $.Object);

  $.Property({Static:false, Public:false}, "Version", $.Int32);

  $.Property({Static:false, Public:false}, "Length", $.Int32);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.ExpandoObject/<GetExpandoEnumerator>d__5", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17ECB, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17EC8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17EC5, $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17EC7, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17EC9, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17ECA, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Dynamic.ExpandoObject")); 
  $.Field({Static:false, Public:true }, "data", $asm09.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
  $.Field({Static:false, Public:true }, "version", $.Int32); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Field({Static:false, Public:true }, "temp", $.Object); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("System.Runtime.CompilerServices.RuntimeOps", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "CreateRuntimeVariables", 
    $sig.make(0x172F5, $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Int64])], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "CreateRuntimeVariables", 
    $sig.make(0x172F6, $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "ExpandoCheckVersion", 
    $sig.make(0x172F1, $.Boolean, [$asm09.TypeRef("System.Dynamic.ExpandoObject"), $.Object], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "ExpandoPromoteClass", 
    $sig.make(0x172F2, null, [
        $asm09.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "ExpandoTryDeleteValue", 
    $sig.make(0x172F0, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
        $.Int32, $.String, 
        $.Boolean
      ], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "ExpandoTryGetValue", 
    $sig.make(0x172EE, $.Boolean, [
        $asm09.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
        $.Int32, $.String, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "ExpandoTrySetValue", 
    $sig.make(0x172EF, $.Object, [
        $asm09.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
        $.Int32, $.Object, 
        $.String, $.Boolean
      ], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "MergeRuntimeVariables", 
    $sig.make(0x172F4, $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

  $.ExternalMethod({Static:true , Public:true }, "Quote", 
    $sig.make(0x172F3, $asm09.TypeRef("System.Linq.Expressions.Expression"), [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.ExpressionVisitor", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x154B6, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateBinary", 
    $sig.make(0x154F3, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateChildType", 
    $sig.make(0x154F5, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateSwitch", 
    $sig.make(0x154F4, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm09.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateUnary", 
    $sig.make(0x154F2, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Visit", 
    $sig.make(0x154B8, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Visit", 
    $sig.make(0x154B9, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Visit", 
    $sig.make(0x154C2, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
    $sig.make(0x154C5, "!!0", ["!!0", $.String], ["T"])
  );

  $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
    $sig.make(0x154C8, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.String], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitArguments", 
    $sig.make(0x154BC, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$asm09.TypeRef("System.Linq.Expressions.IArgumentProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBinary", 
    $sig.make(0x154CB, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBlock", 
    $sig.make(0x154CE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BlockExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitCatchBlock", 
    $sig.make(0x154E7, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConditional", 
    $sig.make(0x154CF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConstant", 
    $sig.make(0x154D2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDebugInfo", 
    $sig.make(0x154D4, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDefault", 
    $sig.make(0x154D6, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDynamic", 
    $sig.make(0x154D5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitElementInit", 
    $sig.make(0x154ED, $asm09.TypeRef("System.Linq.Expressions.ElementInit"), [$asm09.TypeRef("System.Linq.Expressions.ElementInit")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExtension", 
    $sig.make(0x154D7, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitGoto", 
    $sig.make(0x154D8, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.GotoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitIndex", 
    $sig.make(0x154DF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.IndexExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitInvocation", 
    $sig.make(0x154D9, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLabel", 
    $sig.make(0x154DB, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LabelExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLabelTarget", 
    $sig.make(0x154DA, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x154DC, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitListInit", 
    $sig.make(0x154EC, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLoop", 
    $sig.make(0x154DD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LoopExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMember", 
    $sig.make(0x154DE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberAssignment", 
    $sig.make(0x154EF, $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm09.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberBinding", 
    $sig.make(0x154EE, $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberInit", 
    $sig.make(0x154EB, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberListBinding", 
    $sig.make(0x154F1, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberMemberBinding", 
    $sig.make(0x154F0, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMethodCall", 
    $sig.make(0x154E0, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNew", 
    $sig.make(0x154E2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNewArray", 
    $sig.make(0x154E1, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x154E3, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitRuntimeVariables", 
    $sig.make(0x154E4, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitSwitch", 
    $sig.make(0x154E6, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitSwitchCase", 
    $sig.make(0x154E5, $asm09.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTry", 
    $sig.make(0x154E8, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTypeBinary", 
    $sig.make(0x154E9, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitUnary", 
    $sig.make(0x154EA, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Runtime.CompilerServices.RuntimeOps/ExpressionQuoter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17ED3, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetBox", 
    $sig.make(0x17EDC, $asm09.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBlock", 
    $sig.make(0x17ED5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BlockExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitCatchBlock", 
    $sig.make(0x17ED7, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x17ED4, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x17EDA, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitRuntimeVariables", 
    $sig.make(0x17ED9, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_scope", $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_shadowedVars", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm09.TypeRef("System.Linq.Expressions.Set`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.RuntimeOps/RuntimeVariables", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17EFB, null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Runtime.CompilerServices.IStrongBox")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IRuntimeVariables.get_Count", 
    $sig.make(0x17EF8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IRuntimeVariables.get_Item", 
    $sig.make(0x17EF9, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IRuntimeVariables.set_Item", 
    $sig.make(0x17EFA, null, [$.Int32, $.Object], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_boxes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Runtime.CompilerServices.IStrongBox")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IRuntimeVariables.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IRuntimeVariables.Item", $.Object);

  $.ImplementInterfaces($asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.RuntimeOps/MergedRuntimeVariables", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17F24, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x17F18, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x17F1C, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x17F22, null, [$.Int32, $.Object], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_first", $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_second", $asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

  $.ImplementInterfaces($asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.RuntimeOps/EmptyRuntimeVariables", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F61, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IRuntimeVariables.get_Count", 
    $sig.make(0x17F5E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IRuntimeVariables.get_Item", 
    $sig.make(0x17F5F, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IRuntimeVariables.set_Item", 
    $sig.make(0x17F60, null, [$.Int32, $.Object], [])
  );

  $.Property({Static:false, Public:false, Virtual:true }, "IRuntimeVariables.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "IRuntimeVariables.Item", $.Object);

  $.ImplementInterfaces($asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.RuntimeOps/RuntimeVariableList", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17F74, null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Int64])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x17F71, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x17F72, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetStrongBox", 
    $sig.make(0x17F75, $asm09.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x17F73, null, [$.Int32, $.Object], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $jsilcore.TypeRef("System.Array", [$.Int64])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

  $.ImplementInterfaces($asm09.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IRuntimeVariables", true, [], function ($) {
    $.Method({}, "get_Count", $sig.make(0x17354, $.Int32, [], []));
    $.Method({}, "get_Item", $sig.make(0x17357, $.Object, [$.Int32], []));
    $.Method({}, "set_Item", $sig.make(0x17359, null, [$.Int32, $.Object], []));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, []);

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.GetIndexBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16C6D, null, [$asm09.TypeRef("System.Dynamic.CallInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16C6E, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackGetIndex", 
    $sig.make(0x16C6F, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackGetIndex", 
    $sig.make(0x16C70, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
    $sig.make(0x16C69, $asm09.TypeRef("System.Dynamic.CallInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16C6C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16C63, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm09.TypeRef("System.Dynamic.CallInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "CallInfo", $asm09.TypeRef("System.Dynamic.CallInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeInterface(
  "System.Dynamic.IInvokeOnGetBinder", true, [], function ($) {
    $.Method({}, "get_InvokeOnGet", $sig.make(0x1704F, $.Boolean, [], []));
    $.Property({}, "InvokeOnGet");
  }, []);

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.InvokeBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CFF, null, [$asm09.TypeRef("System.Dynamic.CallInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16D02, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackInvoke", 
    $sig.make(0x16D00, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackInvoke", 
    $sig.make(0x16D01, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
    $sig.make(0x16CFD, $asm09.TypeRef("System.Dynamic.CallInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16CFE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16CFC, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm09.TypeRef("System.Dynamic.CallInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "CallInfo", $asm09.TypeRef("System.Dynamic.CallInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.InvokeMemberBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CD4, null, [
        $.String, $.Boolean, 
        $asm09.TypeRef("System.Dynamic.CallInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16CD5, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackInvoke", 
    $sig.make(0x16CDC, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackInvokeMember", 
    $sig.make(0x16CD7, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackInvokeMember", 
    $sig.make(0x16CD9, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
    $sig.make(0x16CD2, $asm09.TypeRef("System.Dynamic.CallInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
    $sig.make(0x16CD1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16CD3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x16CD0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16CCF, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm09.TypeRef("System.Dynamic.CallInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

  $.Property({Static:false, Public:true }, "CallInfo", $asm09.TypeRef("System.Dynamic.CallInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.RuleCache`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15D0D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddOrInsert", 
    $sig.make(0x15D15, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")]), [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")]), new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddRule", 
    $sig.make(0x15D12, null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetRules", 
    $sig.make(0x15D0E, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MoveRule", 
    $sig.make(0x15D10, null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReplaceRule", 
    $sig.make(0x15D13, null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1"), new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")], [])
  );

  $.Constant({Static:true , Public:false}, "MaxRules", 128); 
  $.Constant({Static:true , Public:false}, "InsertPosition", 64); 
  $.Field({Static:false, Public:false}, "_rules", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "cacheLock", $.Object); 
})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.SetIndexBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16E21, null, [$asm09.TypeRef("System.Dynamic.CallInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16E23, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackSetIndex", 
    $sig.make(0x16E26, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackSetIndex", 
    $sig.make(0x16E27, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
    $sig.make(0x16E1F, $asm09.TypeRef("System.Dynamic.CallInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16E20, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16E1E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm09.TypeRef("System.Dynamic.CallInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "CallInfo", $asm09.TypeRef("System.Dynamic.CallInfo"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.SetMemberBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16E4F, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16E52, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackSetMember", 
    $sig.make(0x16E54, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackSetMember", 
    $sig.make(0x16E55, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), 
        $asm09.TypeRef("System.Dynamic.DynamicMetaObject")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
    $sig.make(0x16E4A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16E4C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x16E48, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16E46, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), "System.Dynamic.UnaryOperationBinder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16CAB, null, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Bind", 
    $sig.make(0x16CB0, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackUnaryOperation", 
    $sig.make(0x16CAD, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FallbackUnaryOperation", 
    $sig.make(0x16CAF, $asm09.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm09.TypeRef("System.Dynamic.DynamicMetaObject"), $asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsStandardBinder", 
    $sig.make(0x16CA9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
    $sig.make(0x16CA6, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x16CA5, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
    $sig.make(0x16CB2, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.Field({Static:false, Public:false}, "_operation", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Operation", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

});

JSIL.MakeStaticClass("System.Dynamic.UpdateDelegates", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "NoMatch0", 
    $sig.make(0x1706D, "!!0", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite")], ["TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch1", 
    $sig.make(0x17070, "!!1", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0", "TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch10", 
    $sig.make(0x17088, "!!10", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8", 
        "!!9"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "T9", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch2", 
    $sig.make(0x17073, "!!2", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1"
      ], ["T0", "T1", "TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch3", 
    $sig.make(0x17078, "!!3", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2"
      ], ["T0", "T1", "T2", "TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch4", 
    $sig.make(0x1707C, "!!4", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3"
      ], [
        "T0", "T1", "T2", "T3", 
        "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch5", 
    $sig.make(0x1707E, "!!5", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch6", 
    $sig.make(0x17080, "!!6", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch7", 
    $sig.make(0x17082, "!!7", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch8", 
    $sig.make(0x17084, "!!8", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatch9", 
    $sig.make(0x17086, "!!9", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid1", 
    $sig.make(0x1708A, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid10", 
    $sig.make(0x1709C, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8", 
        "!!9"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "T9"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid2", 
    $sig.make(0x1708C, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1"
      ], ["T0", "T1"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid3", 
    $sig.make(0x1708E, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2"
      ], ["T0", "T1", "T2"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid4", 
    $sig.make(0x17090, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3"
      ], ["T0", "T1", "T2", "T3"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid5", 
    $sig.make(0x17092, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid6", 
    $sig.make(0x17094, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid7", 
    $sig.make(0x17096, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid8", 
    $sig.make(0x17098, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid9", 
    $sig.make(0x1709A, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute0", 
    $sig.make(0x1706B, "!!0", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite")], ["TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute1", 
    $sig.make(0x1706F, "!!1", [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0", "TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute10", 
    $sig.make(0x17087, "!!10", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8", 
        "!!9"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "T9", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute2", 
    $sig.make(0x17071, "!!2", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1"
      ], ["T0", "T1", "TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute3", 
    $sig.make(0x17076, "!!3", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2"
      ], ["T0", "T1", "T2", "TRet"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute4", 
    $sig.make(0x1707B, "!!4", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3"
      ], [
        "T0", "T1", "T2", "T3", 
        "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute5", 
    $sig.make(0x1707D, "!!5", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute6", 
    $sig.make(0x1707F, "!!6", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute7", 
    $sig.make(0x17081, "!!7", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute8", 
    $sig.make(0x17083, "!!8", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute9", 
    $sig.make(0x17085, "!!9", [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "TRet"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid1", 
    $sig.make(0x17089, null, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid10", 
    $sig.make(0x1709B, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8", 
        "!!9"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "T9"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid2", 
    $sig.make(0x1708B, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1"
      ], ["T0", "T1"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid3", 
    $sig.make(0x1708D, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2"
      ], ["T0", "T1", "T2"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid4", 
    $sig.make(0x1708F, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3"
      ], ["T0", "T1", "T2", "T3"])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid5", 
    $sig.make(0x17091, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid6", 
    $sig.make(0x17093, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid7", 
    $sig.make(0x17095, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid8", 
    $sig.make(0x17097, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

  $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid9", 
    $sig.make(0x17099, null, [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
        "!!1", "!!2", 
        "!!3", "!!4", 
        "!!5", "!!6", 
        "!!7", "!!8"
      ], [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8"
      ])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14F6C, null, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor."]; });

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14F6D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x14F70, $.Type, [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x14EF3, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x14EF4, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
    $sig.make(0x14EF5, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
    $sig.make(0x14EF6, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
    $sig.make(0x14EF7, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
    $sig.make(0x14EF9, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
    $sig.make(0x14EFA, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
    $sig.make(0x14EFB, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
    $sig.make(0x14EFC, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
    $sig.make(0x14EFD, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "And", 
    $sig.make(0x14F28, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "And", 
    $sig.make(0x14F29, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
    $sig.make(0x14EEC, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
    $sig.make(0x14EED, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
    $sig.make(0x14F2A, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
    $sig.make(0x14F2B, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
    $sig.make(0x14F2C, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ApplyTypeArgs", 
    $sig.make(0x1501C, $asm06.TypeRef("System.Reflection.MethodInfo"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
    $sig.make(0x14F8C, $asm09.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
    $sig.make(0x14F8D, $asm09.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
    $sig.make(0x14F3C, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
    $sig.make(0x1501E, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
    $sig.make(0x15020, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ArrayLength", 
    $sig.make(0x15093, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Assign", 
    $sig.make(0x14EC8, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Bind", 
    $sig.make(0x14FC6, $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm06.TypeRef("System.Reflection.MemberInfo"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Bind", 
    $sig.make(0x14FC8, $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F3D, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F3E, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F3F, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [
        $.Type, $.Type, 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F40, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [
        $.Type, $.Type, 
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F41, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F42, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F43, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F44, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F45, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F46, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F47, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Block", 
    $sig.make(0x14F48, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Break", 
    $sig.make(0x14F7A, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Break", 
    $sig.make(0x14F7B, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Break", 
    $sig.make(0x14F7C, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Break", 
    $sig.make(0x14F7D, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x14FFA, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x14FFB, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x14FFD, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $.Type, 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x14FFF, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $.Type, 
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15001, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $.Type, 
        $.Type, $.Type, 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15003, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15004, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15005, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15007, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15008, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x15009, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x1500A, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $.Type, $.String, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x1500D, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Call", 
    $sig.make(0x1500F, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Catch", 
    $sig.make(0x14F4A, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm06.TypeRef("System.Type"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Catch", 
    $sig.make(0x14F4B, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Catch", 
    $sig.make(0x14F4C, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Catch", 
    $sig.make(0x14F4D, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [
        $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckMethod", 
    $sig.make(0x14FDB, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ClearDebugInfo", 
    $sig.make(0x14F56, $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [$asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
    $sig.make(0x14EF0, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
    $sig.make(0x14EF1, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Condition", 
    $sig.make(0x14F4F, $asm09.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Condition", 
    $sig.make(0x14F50, $asm09.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
        $.Type, $.Type, 
        $.Type, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Constant", 
    $sig.make(0x14F53, $asm09.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Constant", 
    $sig.make(0x14F54, $asm09.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Continue", 
    $sig.make(0x14F7E, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Continue", 
    $sig.make(0x14F7F, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x1508F, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x15090, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $.Type, $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
    $sig.make(0x15091, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
    $sig.make(0x15092, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $.Type, $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateLambda", 
    $sig.make(0x14FA2, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.String, $.Boolean, 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DebugInfo", 
    $sig.make(0x14F55, $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Decrement", 
    $sig.make(0x1509B, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Decrement", 
    $sig.make(0x1509C, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Default", 
    $sig.make(0x14F59, $asm09.TypeRef("System.Linq.Expressions.DefaultExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x14F08, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Divide", 
    $sig.make(0x14F09, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
    $sig.make(0x14F0A, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
    $sig.make(0x14F0B, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
    $sig.make(0x14F0C, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
    $sig.make(0x14F61, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
    $sig.make(0x14F62, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
    $sig.make(0x14F63, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
    $sig.make(0x14F64, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
    $sig.make(0x14F65, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $.Type, $.Type, 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
    $sig.make(0x14F66, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
    $sig.make(0x14F69, $asm09.TypeRef("System.Linq.Expressions.ElementInit"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
    $sig.make(0x14F6A, $asm09.TypeRef("System.Linq.Expressions.ElementInit"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Empty", 
    $sig.make(0x14F58, $asm09.TypeRef("System.Linq.Expressions.DefaultExpression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Equal", 
    $sig.make(0x14EDC, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Equal", 
    $sig.make(0x14EDD, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $.Boolean, $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
    $sig.make(0x14F32, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
    $sig.make(0x14F33, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
    $sig.make(0x14F34, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
    $sig.make(0x14F35, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
    $sig.make(0x14F36, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Field", 
    $sig.make(0x14FCC, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm06.TypeRef("System.Reflection.FieldInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Field", 
    $sig.make(0x14FCF, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Field", 
    $sig.make(0x14FD0, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [
        $.Type, $asm06.TypeRef("System.Type"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindBestMethod", 
    $sig.make(0x1501A, $.Int32, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), 
        $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Reflection.MethodInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindBestProperty", 
    $sig.make(0x14F92, $.Int32, [
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Reflection.PropertyInfo")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Reflection.PropertyInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindInstanceProperty", 
    $sig.make(0x14F8F, $asm06.TypeRef("System.Reflection.PropertyInfo"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
    $sig.make(0x15019, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
        $asm06.TypeRef("System.Reflection.BindingFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindProperty", 
    $sig.make(0x14F91, $asm06.TypeRef("System.Reflection.PropertyInfo"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $jsilcore.TypeRef("System.Array", [$.Type]), $asm06.TypeRef("System.Reflection.BindingFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x14EC6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
    $sig.make(0x14EC7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x14EC4, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x14EC5, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetActionType", 
    $sig.make(0x14FB9, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetArgTypesString", 
    $sig.make(0x14F90, $.String, [$jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetComparisonOperator", 
    $sig.make(0x14EEB, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDelegateType", 
    $sig.make(0x14FBB, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetEqualityComparisonOperator", 
    $sig.make(0x14EE2, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetFuncType", 
    $sig.make(0x14FB7, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetInvokeMethod", 
    $sig.make(0x14F9B, $asm06.TypeRef("System.Reflection.MethodInfo"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedAssignOperator", 
    $sig.make(0x14ECB, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedBinaryOperator", 
    $sig.make(0x14ECA, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedCoercionOperator", 
    $sig.make(0x1507E, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedUnaryOperator", 
    $sig.make(0x1507B, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetParametersForValidation", 
    $sig.make(0x15016, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")]), [$asm06.TypeRef("System.Reflection.MethodBase"), $asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
    $sig.make(0x14FDA, $asm06.TypeRef("System.Reflection.PropertyInfo"), [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetResultTypeOfShift", 
    $sig.make(0x14F1D, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedAssignOperatorOrThrow", 
    $sig.make(0x14ECD, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type, $.Type, 
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
    $sig.make(0x14EC9, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
    $sig.make(0x14ECE, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperatorOrThrow", 
    $sig.make(0x14ECC, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type, $.Type, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercion", 
    $sig.make(0x1507D, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionOrThrow", 
    $sig.make(0x1507C, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperator", 
    $sig.make(0x1507A, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperatorOrThrow", 
    $sig.make(0x15079, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetValidMethodForDynamic", 
    $sig.make(0x14F60, $asm06.TypeRef("System.Reflection.MethodInfo"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Goto", 
    $sig.make(0x14F84, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Goto", 
    $sig.make(0x14F85, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Goto", 
    $sig.make(0x14F86, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Goto", 
    $sig.make(0x14F87, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
    $sig.make(0x14EE3, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
    $sig.make(0x14EE4, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $.Boolean, $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
    $sig.make(0x14EE7, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
    $sig.make(0x14EE8, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $.Boolean, $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IfThen", 
    $sig.make(0x14F51, $asm09.TypeRef("System.Linq.Expressions.ConditionalExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IfThenElse", 
    $sig.make(0x14F52, $asm09.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Increment", 
    $sig.make(0x15099, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Increment", 
    $sig.make(0x1509A, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Invoke", 
    $sig.make(0x14F99, $asm09.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Invoke", 
    $sig.make(0x14F9A, $asm09.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
    $sig.make(0x14F93, $.Boolean, [$asm06.TypeRef("System.Reflection.PropertyInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
    $sig.make(0x1501B, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
    $sig.make(0x15087, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
    $sig.make(0x15088, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsLiftingConditionalLogicalOperator", 
    $sig.make(0x14ECF, $.Boolean, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.ExpressionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNullComparison", 
    $sig.make(0x14ED4, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
    $sig.make(0x14ED5, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSimpleShift", 
    $sig.make(0x14F1C, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
    $sig.make(0x15089, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
    $sig.make(0x1508A, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsValidLiftedConditionalLogicalOperator", 
    $sig.make(0x14ED8, $.Boolean, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Label", 
    $sig.make(0x14F9C, $asm09.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Label", 
    $sig.make(0x14F9D, $asm09.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Label", 
    $sig.make(0x14F9E, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Label", 
    $sig.make(0x14F9F, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Label", 
    $sig.make(0x14FA0, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Label", 
    $sig.make(0x14FA1, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA3, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA4, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
        $.Type, $.Boolean, 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], ["TDelegate"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA5, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA6, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
        $.Type, $.Boolean, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], ["TDelegate"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA7, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
        $.Type, $.String, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], ["TDelegate"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA8, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
        $.Type, $.String, 
        $.Boolean, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], ["TDelegate"])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FA9, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FAA, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $.Type, $.Boolean, 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FAB, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FAC, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $.Type, $.Boolean, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FAD, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FAE, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.Boolean, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FAF, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FB0, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.Boolean, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FB1, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $.Type, $.String, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FB2, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $.Type, $.String, 
        $.Boolean, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FB3, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.String, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Lambda", 
    $sig.make(0x14FB4, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.String, $.Boolean, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
    $sig.make(0x14F1E, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
    $sig.make(0x14F1F, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
    $sig.make(0x14F20, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
    $sig.make(0x14F21, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
    $sig.make(0x14F22, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LessThan", 
    $sig.make(0x14EE5, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LessThan", 
    $sig.make(0x14EE6, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $.Boolean, $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
    $sig.make(0x14EE9, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
    $sig.make(0x14EEA, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $.Boolean, $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListBind", 
    $sig.make(0x14FE3, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm06.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListBind", 
    $sig.make(0x14FE5, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListBind", 
    $sig.make(0x14FE8, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListBind", 
    $sig.make(0x14FE9, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListInit", 
    $sig.make(0x14FBC, $asm09.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListInit", 
    $sig.make(0x14FBD, $asm09.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListInit", 
    $sig.make(0x14FBE, $asm09.TypeRef("System.Linq.Expressions.ListInitExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListInit", 
    $sig.make(0x14FBF, $asm09.TypeRef("System.Linq.Expressions.ListInitExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListInit", 
    $sig.make(0x14FC0, $asm09.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ListInit", 
    $sig.make(0x14FC1, $asm09.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Loop", 
    $sig.make(0x14FC2, $asm09.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Loop", 
    $sig.make(0x14FC3, $asm09.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type, $asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Loop", 
    $sig.make(0x14FC4, $asm09.TypeRef("System.Linq.Expressions.LoopExpression"), [
        $.Type, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), 
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
    $sig.make(0x14ED9, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
    $sig.make(0x14EDA, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $.Type, $.Boolean, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
    $sig.make(0x14EDB, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $.Type, $.Boolean, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeCatchBlock", 
    $sig.make(0x14F4E, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
    $sig.make(0x14F5A, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
    $sig.make(0x14F5B, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
    $sig.make(0x14F5C, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
    $sig.make(0x14F5D, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
    $sig.make(0x14F5E, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $.Type, $.Type, 
        $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
    $sig.make(0x14F5F, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $.Type, $.Type, 
        $.Type, $.Type
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeDynamic", 
    $sig.make(0x14F67, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeGoto", 
    $sig.make(0x14F88, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), 
        $.Type, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeIndex", 
    $sig.make(0x14F8B, $asm09.TypeRef("System.Linq.Expressions.IndexExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.PropertyInfo"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeMemberAccess", 
    $sig.make(0x14FDD, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeOpAssignUnary", 
    $sig.make(0x150A5, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeTry", 
    $sig.make(0x1506E, $asm09.TypeRef("System.Linq.Expressions.TryExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.Type, $.Type, 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
    $sig.make(0x15075, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
    $sig.make(0x15078, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
    $sig.make(0x14FEE, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm06.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
    $sig.make(0x14FF0, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
    $sig.make(0x14FF1, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
    $sig.make(0x14FF2, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
    $sig.make(0x14FDE, $asm09.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
    $sig.make(0x14FDF, $asm09.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Modulo", 
    $sig.make(0x14F0D, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Modulo", 
    $sig.make(0x14F0E, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
    $sig.make(0x14F0F, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
    $sig.make(0x14F10, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
    $sig.make(0x14F11, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x14F12, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Multiply", 
    $sig.make(0x14F13, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
    $sig.make(0x14F14, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
    $sig.make(0x14F15, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
    $sig.make(0x14F16, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
    $sig.make(0x14F17, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
    $sig.make(0x14F18, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
    $sig.make(0x14F19, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
    $sig.make(0x14F1A, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
    $sig.make(0x14F1B, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x1507F, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Negate", 
    $sig.make(0x15080, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
    $sig.make(0x15083, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
    $sig.make(0x15084, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "New", 
    $sig.make(0x1502D, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [$asm06.TypeRef("System.Reflection.ConstructorInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "New", 
    $sig.make(0x1502F, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [$asm06.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "New", 
    $sig.make(0x15032, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [$asm06.TypeRef("System.Reflection.ConstructorInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "New", 
    $sig.make(0x15034, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [
        $asm06.TypeRef("System.Reflection.ConstructorInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Reflection.MemberInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "New", 
    $sig.make(0x15039, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [
        $asm06.TypeRef("System.Reflection.ConstructorInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.MemberInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "New", 
    $sig.make(0x1503D, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
    $sig.make(0x15025, $asm09.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
    $sig.make(0x15027, $asm09.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
    $sig.make(0x15021, $asm09.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
    $sig.make(0x15023, $asm09.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Not", 
    $sig.make(0x15085, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Not", 
    $sig.make(0x15086, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
    $sig.make(0x14EDF, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
    $sig.make(0x14EE0, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $.Boolean, $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
    $sig.make(0x1508B, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
    $sig.make(0x1508C, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Or", 
    $sig.make(0x14F2D, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Or", 
    $sig.make(0x14F2E, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
    $sig.make(0x14F2F, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
    $sig.make(0x14F30, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
    $sig.make(0x14F31, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OrElse", 
    $sig.make(0x14EEE, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OrElse", 
    $sig.make(0x14EEF, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Parameter", 
    $sig.make(0x15049, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Parameter", 
    $sig.make(0x1504C, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ParameterIsAssignable", 
    $sig.make(0x14ED0, $.Boolean, [$asm06.TypeRef("System.Reflection.ParameterInfo"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
    $sig.make(0x150A3, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
    $sig.make(0x150A4, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
    $sig.make(0x150A1, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
    $sig.make(0x150A2, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Power", 
    $sig.make(0x14F37, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Power", 
    $sig.make(0x14F38, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
    $sig.make(0x14F39, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
    $sig.make(0x14F3A, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
    $sig.make(0x14F3B, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
    $sig.make(0x1509F, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
    $sig.make(0x150A0, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
    $sig.make(0x1509D, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
    $sig.make(0x1509E, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14F8E, $asm09.TypeRef("System.Linq.Expressions.IndexExpression"), [
        $.Type, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14F94, $asm09.TypeRef("System.Linq.Expressions.IndexExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.PropertyInfo"), 
        $jsilcore.TypeRef("System.Array", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14F95, $asm09.TypeRef("System.Linq.Expressions.IndexExpression"), [
        $.Type, $asm06.TypeRef("System.Reflection.PropertyInfo"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14FD3, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14FD5, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [
        $.Type, $asm06.TypeRef("System.Type"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14FD8, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm06.TypeRef("System.Reflection.PropertyInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Property", 
    $sig.make(0x14FD9, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PropertyOrField", 
    $sig.make(0x14FDC, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Quote", 
    $sig.make(0x15094, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reduce", 
    $sig.make(0x14F6E, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReduceAndCheck", 
    $sig.make(0x14F71, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReduceExtensions", 
    $sig.make(0x14F72, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ReferenceEqual", 
    $sig.make(0x14EDE, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ReferenceNotEqual", 
    $sig.make(0x14EE1, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
    $sig.make(0x14F77, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
    $sig.make(0x14F78, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresCanWrite", 
    $sig.make(0x14F79, null, [$.Type, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
    $sig.make(0x15095, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
    $sig.make(0x15096, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Return", 
    $sig.make(0x14F80, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Return", 
    $sig.make(0x14F81, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Return", 
    $sig.make(0x14F82, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Return", 
    $sig.make(0x14F83, $asm09.TypeRef("System.Linq.Expressions.GotoExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReturnObject", 
    $sig.make(0x14F76, "!!0", [$.Object], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
    $sig.make(0x14F74, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"])])], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
    $sig.make(0x14F75, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [$asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RightShift", 
    $sig.make(0x14F23, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RightShift", 
    $sig.make(0x14F24, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
    $sig.make(0x14F25, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
    $sig.make(0x14F26, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
    $sig.make(0x14F27, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
    $sig.make(0x1504E, $asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
    $sig.make(0x15050, $asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x14EFE, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x14EFF, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
    $sig.make(0x14F00, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
    $sig.make(0x14F01, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
    $sig.make(0x14F02, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
    $sig.make(0x14F03, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
    $sig.make(0x14F04, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
    $sig.make(0x14F05, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
    $sig.make(0x14F06, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
    $sig.make(0x14F07, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Switch", 
    $sig.make(0x15057, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Switch", 
    $sig.make(0x15059, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [
        $.Type, $.Type, 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Switch", 
    $sig.make(0x1505B, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Switch", 
    $sig.make(0x1505C, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Switch", 
    $sig.make(0x1505D, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Switch", 
    $sig.make(0x1505E, $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), [
        $asm06.TypeRef("System.Type"), $.Type, 
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
    $sig.make(0x15052, $asm09.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
    $sig.make(0x15054, $asm09.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
    $sig.make(0x15060, $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
    $sig.make(0x15062, $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String, $asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
    $sig.make(0x15064, $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
        $.String, $asm06.TypeRef("System.Guid"), 
        $asm06.TypeRef("System.Guid")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
    $sig.make(0x15066, $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
        $.String, $asm06.TypeRef("System.Guid"), 
        $asm06.TypeRef("System.Guid"), $asm06.TypeRef("System.Guid")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Throw", 
    $sig.make(0x15097, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Throw", 
    $sig.make(0x15098, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x14F73, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryCatch", 
    $sig.make(0x1506B, $asm09.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryCatchFinally", 
    $sig.make(0x1506C, $asm09.TypeRef("System.Linq.Expressions.TryExpression"), [
        $.Type, $.Type, 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryFault", 
    $sig.make(0x15068, $asm09.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryFinally", 
    $sig.make(0x1506A, $asm09.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryGetActionType", 
    $sig.make(0x14FBA, $.Boolean, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TryGetFuncType", 
    $sig.make(0x14FB8, $.Boolean, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TypeAs", 
    $sig.make(0x1508D, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TypeEqual", 
    $sig.make(0x15073, $asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "TypeIs", 
    $sig.make(0x15071, $asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
    $sig.make(0x15081, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
    $sig.make(0x15082, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Unbox", 
    $sig.make(0x1508E, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateAccessor", 
    $sig.make(0x14F97, null, [
        $.Type, $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateAccessorArgumentTypes", 
    $sig.make(0x14F98, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateAnonymousTypeMember", 
    $sig.make(0x15046, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentCount", 
    $sig.make(0x15017, null, [
        $asm06.TypeRef("System.Reflection.MethodBase"), $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), 
        $.Int32, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentTypes", 
    $sig.make(0x15015, null, [
        $asm06.TypeRef("System.Reflection.MethodBase"), $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateCallInstanceType", 
    $sig.make(0x15014, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateCoalesceArgTypes", 
    $sig.make(0x14EF2, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateDynamicArgument", 
    $sig.make(0x14F68, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateElementInitAddMethodInfo", 
    $sig.make(0x14F6B, null, [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateGettableFieldOrPropertyMember", 
    $sig.make(0x14FF5, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateGoto", 
    $sig.make(0x14F89, null, [
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.String, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateGotoType", 
    $sig.make(0x14F8A, null, [
        $asm06.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateIndexedProperty", 
    $sig.make(0x14F96, null, [
        $.Type, $asm06.TypeRef("System.Reflection.PropertyInfo"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateLambdaArgs", 
    $sig.make(0x14FB5, null, [
        $asm06.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateListInitArgs", 
    $sig.make(0x14FED, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateMemberInitArgs", 
    $sig.make(0x14FF6, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateMethodAndGetParameters", 
    $sig.make(0x15011, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")]), [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateMethodInfo", 
    $sig.make(0x14ED3, null, [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
    $sig.make(0x1503F, null, [
        $asm06.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")])])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateOneArgument", 
    $sig.make(0x15018, $.Type, [
        $asm06.TypeRef("System.Reflection.MethodBase"), $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), 
        $.Type, $asm06.TypeRef("System.Reflection.ParameterInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateOpAssignConversionLambda", 
    $sig.make(0x14EF8, null, [
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Type, 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.ExpressionType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateOperator", 
    $sig.make(0x14ED2, null, [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateParamswithOperandsOrThrow", 
    $sig.make(0x14ED1, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateSettableFieldOrPropertyMember", 
    $sig.make(0x14FCA, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateSpan", 
    $sig.make(0x14F57, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateStaticOrInstanceMethod", 
    $sig.make(0x15013, null, [$.Type, $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateSwitchCaseType", 
    $sig.make(0x1505F, null, [
        $.Type, $.Boolean, 
        $asm06.TypeRef("System.Type"), $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateTryAndCatchHaveSameType", 
    $sig.make(0x1506F, null, [
        $asm06.TypeRef("System.Type"), $.Type, 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateTryGetFuncActionArgs", 
    $sig.make(0x14FB6, $.Boolean, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateUserDefinedConditionalLogicOperator", 
    $sig.make(0x14ED6, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateVariables", 
    $sig.make(0x14F49, null, [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Variable", 
    $sig.make(0x1504B, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Variable", 
    $sig.make(0x1504D, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyOpTrueFalse", 
    $sig.make(0x14ED7, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitChildren", 
    $sig.make(0x14F6F, $.Type, [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "_LambdaDelegateCache", $asm09.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")])); 
  $.Field({Static:true , Public:false}, "_LambdaFactories", $asm09.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Expression/LambdaFactory")])); 
  $.Field({Static:true , Public:false}, "_legacyCtorSupportTable", $asm06.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Type, $asm09.TypeRef("System.Linq.Expressions.Expression/ExtensionInfo")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:false}, "DebugView", $.String);

});

JSIL.MakeDelegate("System.Linq.Expressions.Expression/LambdaFactory", false, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/ExtensionInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17FDF, null, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/BinaryExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18017, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1800D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
    $sig.make(0x1800E, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x1800F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
    $sig.make(0x18010, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
    $sig.make(0x18011, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x18012, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Method", 
    $sig.make(0x18013, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18014, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x18015, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18016, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.BinaryExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "Conversion", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"));

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

  $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

  $.Property({Static:false, Public:true }, "Left", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Method", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Right", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/BlockExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1805E, null, [$asm09.TypeRef("System.Linq.Expressions.BlockExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x18057, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18058, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
    $sig.make(0x18059, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1805A, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Result", 
    $sig.make(0x1805B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1805C, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
    $sig.make(0x1805D, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.BlockExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Expressions", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Result", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Variables", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/CatchBlockProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1807F, null, [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x1807B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
    $sig.make(0x1807C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Test", 
    $sig.make(0x1807D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
    $sig.make(0x1807E, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.CatchBlock")); 
  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Filter", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Test", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Variable", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/ConditionalExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x180BA, null, [$asm09.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x180B3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x180B4, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
    $sig.make(0x180B5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
    $sig.make(0x180B6, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x180B7, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Test", 
    $sig.make(0x180B8, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x180B9, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.ConditionalExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "IfFalse", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "IfTrue", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Test", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/ConstantExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x180EC, null, [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x180E7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x180E8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x180E9, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x180EA, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x180EB, $.Object, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.ConstantExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Value", $.Object);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/DebugInfoExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18121, null, [$asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x180FC, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x180FD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Document", 
    $sig.make(0x180FE, $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
    $sig.make(0x180FF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
    $sig.make(0x18100, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
    $sig.make(0x18101, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18116, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
    $sig.make(0x1811A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
    $sig.make(0x1811D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1811F, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Document", $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

  $.Property({Static:false, Public:true }, "EndColumn", $.Int32);

  $.Property({Static:false, Public:true }, "EndLine", $.Int32);

  $.Property({Static:false, Public:true }, "IsClear", $.Boolean);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "StartColumn", $.Int32);

  $.Property({Static:false, Public:true }, "StartLine", $.Int32);

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/DefaultExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18142, null, [$asm09.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1813E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x1813F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18140, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18141, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.DefaultExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/DynamicExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18155, null, [$asm09.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x1814B, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
    $sig.make(0x1814D, $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1814F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18150, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DelegateType", 
    $sig.make(0x18151, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18152, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18153, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.DynamicExpression")); 
  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "Binder", $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "DelegateType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/GotoExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18182, null, [$asm09.TypeRef("System.Linq.Expressions.GotoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1817B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x1817C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x1817D, $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1817E, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Target", 
    $sig.make(0x1817F, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18180, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x18181, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.GotoExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Kind", $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Target", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Value", $asm09.TypeRef("System.Linq.Expressions.Expression"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/IndexExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1819F, null, [$asm09.TypeRef("System.Linq.Expressions.IndexExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x18189, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1818A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x1818B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
    $sig.make(0x1818C, $asm06.TypeRef("System.Reflection.PropertyInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1818E, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Object", 
    $sig.make(0x18190, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18196, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.IndexExpression")); 
  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Indexer", $asm06.TypeRef("System.Reflection.PropertyInfo"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Object", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/InvocationExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x180AC, null, [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x180A6, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x180A7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x180A8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x180A9, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x180AA, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x180AB, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.InvocationExpression")); 
  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/LabelExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18113, null, [$asm09.TypeRef("System.Linq.Expressions.LabelExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x18103, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18105, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
    $sig.make(0x18109, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1810A, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Target", 
    $sig.make(0x1810F, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18111, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.LabelExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "DefaultValue", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Target", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/LambdaExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1816B, null, [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x1815F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x18160, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18161, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x18162, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18163, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
    $sig.make(0x18164, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x18165, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
    $sig.make(0x18167, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18169, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")); 
  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Parameters", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

  $.Property({Static:false, Public:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "TailCall", $.Boolean);

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/ListInitExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x181EA, null, [$asm09.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x181D1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x181D3, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
    $sig.make(0x181D8, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
    $sig.make(0x181D9, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x181DE, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x181E7, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.ListInitExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Initializers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]));

  $.Property({Static:false, Public:true }, "NewExpression", $asm09.TypeRef("System.Linq.Expressions.NewExpression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/LoopExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1822F, null, [$asm09.TypeRef("System.Linq.Expressions.LoopExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x18228, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
    $sig.make(0x18229, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1822A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
    $sig.make(0x1822B, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x1822C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1822D, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1822E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.LoopExpression")); 
  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "BreakLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "ContinueLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/MemberExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18258, null, [$asm09.TypeRef("System.Linq.Expressions.MemberExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1824A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x1824C, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x1824E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Member", 
    $sig.make(0x18251, $asm06.TypeRef("System.Reflection.MemberInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18254, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18256, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.MemberExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Member", $asm06.TypeRef("System.Reflection.MemberInfo"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/MemberInitExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1829B, null, [$asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
    $sig.make(0x1828E, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1828F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18290, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
    $sig.make(0x18291, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18295, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18298, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")); 
  $.Property({Static:false, Public:true }, "Bindings", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "NewExpression", $asm09.TypeRef("System.Linq.Expressions.NewExpression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/MethodCallExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x182BD, null, [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x182B6, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x182B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x182B8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Method", 
    $sig.make(0x182B9, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x182BA, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Object", 
    $sig.make(0x182BB, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x182BC, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")); 
  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Method", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Object", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/NewArrayExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x182D4, null, [$asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x182CF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x182D0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
    $sig.make(0x182D1, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x182D2, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x182D3, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Expressions", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/NewExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x182EB, null, [$asm09.TypeRef("System.Linq.Expressions.NewExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x182E4, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x182E5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
    $sig.make(0x182E6, $asm06.TypeRef("System.Reflection.ConstructorInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x182E7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Members", 
    $sig.make(0x182E8, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x182E9, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x182EA, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.NewExpression")); 
  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "Constructor", $asm06.TypeRef("System.Reflection.ConstructorInfo"));

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Members", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")]));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/ParameterExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x182FF, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x182F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x182FA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
    $sig.make(0x182FB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x182FC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x182FD, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x182FE, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/RuntimeVariablesExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1831B, null, [$asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x18316, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18317, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18318, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18319, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
    $sig.make(0x1831A, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Variables", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/SwitchCaseProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1832D, null, [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x1832B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
    $sig.make(0x1832C, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.SwitchCase")); 
  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "TestValues", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/SwitchExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18347, null, [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x18339, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
    $sig.make(0x1833B, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
    $sig.make(0x18341, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18342, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
    $sig.make(0x18343, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18344, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
    $sig.make(0x18345, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18346, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.SwitchExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "Cases", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")]));

  $.Property({Static:false, Public:true }, "Comparison", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "DefaultBody", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "SwitchValue", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/TryExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18356, null, [$asm09.TypeRef("System.Linq.Expressions.TryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x1834E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1834F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18350, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
    $sig.make(0x18351, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
    $sig.make(0x18352, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
    $sig.make(0x18353, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18354, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x18355, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.TryExpression")); 
  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Fault", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Finally", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Handlers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")]));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/TypeBinaryExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1836C, null, [$asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x18366, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x18367, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x18368, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x18369, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1836A, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
    $sig.make(0x1836B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "TypeOperand", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Expression/UnaryExpressionProxy", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x181B7, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x181AF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
    $sig.make(0x181B0, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
    $sig.make(0x181B1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
    $sig.make(0x181B2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Method", 
    $sig.make(0x181B3, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x181B4, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
    $sig.make(0x181B5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x181B6, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.UnaryExpression")); 
  $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "DebugView", $.String);

  $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

  $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

  $.Property({Static:false, Public:true }, "Method", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Operand", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.BinaryExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x153B9, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x153C3, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x153C4, $asm09.TypeRef("System.Linq.Expressions.Expression"), [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x153B0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
    $sig.make(0x153B4, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
    $sig.make(0x153B5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsLiftedLogical", 
    $sig.make(0x153B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
    $sig.make(0x153B6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsReferenceComparison", 
    $sig.make(0x153B8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x153B2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Method", 
    $sig.make(0x153B3, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x153B1, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetBinaryOpFromAssignmentOp", 
    $sig.make(0x153BE, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetConversion", 
    $sig.make(0x153C2, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMethod", 
    $sig.make(0x153BB, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsOpAssignment", 
    $sig.make(0x153BA, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reduce", 
    $sig.make(0x153BD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
    $sig.make(0x153C1, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
    $sig.make(0x153C0, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceUserdefinedLifted", 
    $sig.make(0x153C5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
    $sig.make(0x153BF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x153BC, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_left", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_right", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "Right", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Left", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Method", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "Conversion", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"));

  $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

  $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

  $.Property({Static:false, Public:false}, "IsLiftedLogical", $.Boolean);

  $.Property({Static:false, Public:false}, "IsReferenceComparison", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/BinaryExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), "System.Linq.Expressions.LogicalBinaryExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x170D6, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x170D5, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x170D4, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), "System.Linq.Expressions.AssignBinaryExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17169, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x17167, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x17164, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), "System.Linq.Expressions.CoalesceConversionBinaryExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17176, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x17174, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x17175, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetConversion", 
    $sig.make(0x17177, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), "System.Linq.Expressions.SimpleBinaryExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x171C9, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x171C7, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x171C8, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.SimpleBinaryExpression"), "System.Linq.Expressions.MethodBinaryExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x171E9, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMethod", 
    $sig.make(0x171EB, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm06.TypeRef("System.Reflection.MethodInfo")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodBinaryExpression"), "System.Linq.Expressions.OpAssignMethodConversionBinaryExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17208, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetConversion", 
    $sig.make(0x17209, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.BlockExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x158CA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x158CB, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x158C8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
    $sig.make(0x158C3, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x158C6, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Result", 
    $sig.make(0x158C5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x158C7, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_VariableCount", 
    $sig.make(0x158C9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
    $sig.make(0x158C4, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x158CD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x158CE, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeVariables", 
    $sig.make(0x158D0, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetVariable", 
    $sig.make(0x158CF, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnlyExpressions", 
    $sig.make(0x158D2, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x158D1, $.Type, [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x158CC, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Property({Static:false, Public:true }, "Expressions", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "Variables", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

  $.Property({Static:false, Public:true }, "Result", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/BlockExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockExpression"), "System.Linq.Expressions.Block2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17217, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x17216, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x17218, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x17219, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1721A, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockExpression"), "System.Linq.Expressions.Block3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17242, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x1723E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x17245, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x17247, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1724B, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockExpression"), "System.Linq.Expressions.Block4", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17264, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x17263, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x17265, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x17266, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17267, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockExpression"), "System.Linq.Expressions.Block5", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1728F, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x1728E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x17290, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x17291, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17292, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockExpression"), "System.Linq.Expressions.BlockN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F21, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x16F20, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x16F22, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x16F23, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x16F24, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_expressions", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockExpression"), "System.Linq.Expressions.ScopeExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x172AA, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_VariableCount", 
    $sig.make(0x172A8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_VariablesList", 
    $sig.make(0x172A9, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeVariables", 
    $sig.make(0x172AC, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetVariable", 
    $sig.make(0x172AB, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReuseOrValidateVariables", 
    $sig.make(0x172AD, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.Field({Static:false, Public:false}, "_variables", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);

  $.Property({Static:false, Public:false}, "VariablesList", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ScopeExpression"), "System.Linq.Expressions.Scope1", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17304, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x17302, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x17305, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x17306, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17307, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_body", $.Object); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ScopeExpression"), "System.Linq.Expressions.ScopeN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17317, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExpressionCount", 
    $sig.make(0x17316, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetExpression", 
    $sig.make(0x17318, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeExpressions", 
    $sig.make(0x17324, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17326, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_body", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ScopeN"), "System.Linq.Expressions.ScopeWithType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1736E, null, [
        $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1736D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1736F, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.BlockExpressionList", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17391, null, [$asm09.TypeRef("System.Linq.Expressions.BlockExpression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x17395, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x17396, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x17397, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x17398, null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x1738F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x17390, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x1738D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x1739A, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x17392, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x17393, null, [$.Int32, $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x17399, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x17394, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x1738E, null, [$.Int32, $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1739B, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_block", $asm09.TypeRef("System.Linq.Expressions.BlockExpression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.BlockExpressionList/<GetEnumerator>d__0", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18219, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x18211, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1820E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x1820F, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18215, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18217, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.BlockExpressionList")); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.DeclareNamespace("$lSystem.Collections.IEnumerable");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.BlockExpressionList/GetEnumerator>d__3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x18243, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1823E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x1823B, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x1823D, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x18240, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x18241, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.Object); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.BlockExpressionList")); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.CatchBlock", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x156C6, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x156C0, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
    $sig.make(0x156C3, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Test", 
    $sig.make(0x156BF, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
    $sig.make(0x156BE, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x156C9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x156CB, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_var", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_filter", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true }, "Variable", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"));

  $.Property({Static:false, Public:true }, "Test", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Filter", $asm09.TypeRef("System.Linq.Expressions.Expression"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/CatchBlockProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ConditionalExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x155F4, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x155F7, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
    $sig.make(0x155F3, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
    $sig.make(0x155F2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x155EF, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Test", 
    $sig.make(0x155F1, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x155F0, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFalse", 
    $sig.make(0x155F6, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x155F5, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x155F9, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_true", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Test", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "IfTrue", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "IfFalse", $asm09.TypeRef("System.Linq.Expressions.Expression"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/ConditionalExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ConditionalExpression"), "System.Linq.Expressions.FullConditionalExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x173EE, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFalse", 
    $sig.make(0x173EF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_false", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.FullConditionalExpression"), "System.Linq.Expressions.FullConditionalExpressionWithType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x173F8, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x173F6, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ConstantExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B35, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15B37, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15B2D, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15B2B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x15B2E, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x15B36, $.Type, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Value", $.Object);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/ConstantExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ConstantExpression"), "System.Linq.Expressions.TypedConstantExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x172A1, null, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x172A0, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.DebugInfoExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x152AB, null, [$asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x152AC, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Document", 
    $sig.make(0x152A5, $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
    $sig.make(0x15292, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
    $sig.make(0x15290, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
    $sig.make(0x152A8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1528B, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
    $sig.make(0x1528E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
    $sig.make(0x1528C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1528A, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_document", $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

  $.Property({Static:false, Public:true }, "Document", $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/DebugInfoExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression"), "System.Linq.Expressions.SpanDebugInfoExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1737B, null, [
        $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1737C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
    $sig.make(0x17379, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
    $sig.make(0x17378, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
    $sig.make(0x1737A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
    $sig.make(0x17377, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
    $sig.make(0x17376, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_startLine", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_startColumn", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_endLine", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_endColumn", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression"), "System.Linq.Expressions.ClearDebugInfoExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x173B9, null, [$asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
    $sig.make(0x173B8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
    $sig.make(0x173B7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
    $sig.make(0x173B2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
    $sig.make(0x173B6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
    $sig.make(0x173B4, $.Int32, [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Linq.Expressions.DebugViewWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17402, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckBreak", 
    $sig.make(0x17424, $asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), [$asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ContainsWhiteSpace", 
    $sig.make(0x17454, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dedent", 
    $sig.make(0x17405, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
    $sig.make(0x17450, null, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
    $sig.make(0x17425, $.String, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Base", 
    $sig.make(0x173FA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Delta", 
    $sig.make(0x173FD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
    $sig.make(0x17400, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetConstantValueSuffix", 
    $sig.make(0x17431, $.String, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDisplayName", 
    $sig.make(0x17456, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFlow", 
    $sig.make(0x17423, $asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), [$asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetId", 
    $sig.make(0x1740B, $.Int32, ["!!0", $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetId", 
    $sig.make(0x17412, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetName", 
    $sig.make(0x17451, $.String, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLambdaId", 
    $sig.make(0x1740D, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLambdaName", 
    $sig.make(0x17453, $.String, [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetOperatorPrecedence", 
    $sig.make(0x17437, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
    $sig.make(0x17410, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Indent", 
    $sig.make(0x17404, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSimpleExpression", 
    $sig.make(0x1742E, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NeedsParentheses", 
    $sig.make(0x17436, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NewLine", 
    $sig.make(0x17407, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Out", 
    $sig.make(0x17416, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Out", 
    $sig.make(0x17417, null, [$asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Out", 
    $sig.make(0x1741B, null, [$.String, $asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Out", 
    $sig.make(0x17420, null, [
        $asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), $.String, 
        $asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OutMember", 
    $sig.make(0x17433, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm06.TypeRef("System.Reflection.MemberInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParenthesizedVisit", 
    $sig.make(0x17438, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QuoteName", 
    $sig.make(0x17455, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBinary", 
    $sig.make(0x1742B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBlock", 
    $sig.make(0x17444, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BlockExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitCatchBlock", 
    $sig.make(0x1744B, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConditional", 
    $sig.make(0x1742F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConstant", 
    $sig.make(0x17430, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDebugInfo", 
    $sig.make(0x1744F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDeclarations", 
    $sig.make(0x17428, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDefault", 
    $sig.make(0x17445, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDynamic", 
    $sig.make(0x1742A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitElementInit", 
    $sig.make(0x1743C, $asm09.TypeRef("System.Linq.Expressions.ElementInit"), [$asm09.TypeRef("System.Linq.Expressions.ElementInit")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
    $sig.make(0x17426, null, [$.Char, $asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
    $sig.make(0x17427, null, [
        $.Char, $.Char, 
        $asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"])
      ], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
    $sig.make(0x17429, null, [
        $.Char, $.Char, 
        $asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm06.TypeRef("System.Action`1", ["!!0"])
      ], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExtension", 
    $sig.make(0x1744E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitGoto", 
    $sig.make(0x17447, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.GotoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitIndex", 
    $sig.make(0x1744D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.IndexExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitInvocation", 
    $sig.make(0x17435, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLabel", 
    $sig.make(0x17446, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LabelExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x1742D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitListInit", 
    $sig.make(0x1743D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLoop", 
    $sig.make(0x17448, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LoopExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMember", 
    $sig.make(0x17434, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberAssignment", 
    $sig.make(0x1743E, $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm09.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberInit", 
    $sig.make(0x17441, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberListBinding", 
    $sig.make(0x1743F, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberMemberBinding", 
    $sig.make(0x17440, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMethodCall", 
    $sig.make(0x17439, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNew", 
    $sig.make(0x1743B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNewArray", 
    $sig.make(0x1743A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x1742C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitRuntimeVariables", 
    $sig.make(0x17432, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitSwitch", 
    $sig.make(0x1744A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitSwitchCase", 
    $sig.make(0x17449, $asm09.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTry", 
    $sig.make(0x1744C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTypeBinary", 
    $sig.make(0x17442, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitUnary", 
    $sig.make(0x17443, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Write", 
    $sig.make(0x17422, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLambda", 
    $sig.make(0x17452, null, [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
    $sig.make(0x17421, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WriteTo", 
    $sig.make(0x17413, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteTo", 
    $sig.make(0x17414, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Constant({Static:true , Public:false}, "Tab", 4); 
  $.Constant({Static:true , Public:false}, "MaxColumn", 120); 
  $.Field({Static:false, Public:false}, "_out", $asm06.TypeRef("System.IO.TextWriter")); 
  $.Field({Static:false, Public:false}, "_column", $.Int32); 
  $.Field({Static:false, Public:false}, "_stack", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$.Int32])); 
  $.Field({Static:false, Public:false}, "_delta", $.Int32); 
  $.Field({Static:false, Public:false}, "_flow", $asm09.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")); 
  $.Field({Static:false, Public:false}, "_lambdas", $asm07.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")])); 
  $.Field({Static:false, Public:false}, "_lambdaIds", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32])); 
  $.Field({Static:false, Public:false}, "_paramIds", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])); 
  $.Field({Static:false, Public:false}, "_labelIds", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $.Int32])); 
  $.Property({Static:false, Public:false}, "Base", $.Int32);

  $.Property({Static:false, Public:false}, "Delta", $.Int32);

  $.Property({Static:false, Public:false}, "Depth", $.Int32);

});

JSIL.MakeEnum(
  "System.Linq.Expressions.DebugViewWriter/Flow", false, {
    None: 0, 
    Space: 1, 
    NewLine: 2, 
    Break: 32768
  }, true
);

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.DefaultExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x155CD, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x155D0, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x155CB, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x155C8, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/DefaultExpressionProxy")]; });

JSIL.MakeInterface(
  "System.Linq.Expressions.IArgumentProvider", false, [], function ($) {
    $.Method({}, "GetArgument", $sig.make(0x15190, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], []));
    $.Method({}, "get_ArgumentCount", $sig.make(0x1518F, $.Int32, [], []));
    $.Property({}, "ArgumentCount");
  }, []);

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.DynamicExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15916, null, [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1591D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x15914, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
    $sig.make(0x15912, $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DelegateType", 
    $sig.make(0x15913, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15911, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15910, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x1591C, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x15917, $.Type, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x15918, $.Type, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x15919, $.Type, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x1591A, $.Type, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x1591B, $.Type, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1591E, $.Type, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15915, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x15920, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1591F, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_binder", $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Binder", $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

  $.Property({Static:false, Public:true }, "DelegateType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/DynamicExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), "System.Linq.Expressions.DynamicExpressionN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1750E, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x17510, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17511, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x1750D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x1750F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpressionN"), "System.Linq.Expressions.TypedDynamicExpressionN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17585, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x17584, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), "System.Linq.Expressions.DynamicExpression1", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x175B1, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x175B3, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x175B4, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x175B0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x175B2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression1"), "System.Linq.Expressions.TypedDynamicExpression1", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1760D, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1760A, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), "System.Linq.Expressions.DynamicExpression2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x176AD, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x176B0, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x176B2, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x176AC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x176AE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression2"), "System.Linq.Expressions.TypedDynamicExpression2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17706, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x17705, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), "System.Linq.Expressions.DynamicExpression3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1772D, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x1772F, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17730, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x1772C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x1772E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression3"), "System.Linq.Expressions.TypedDynamicExpression3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1774E, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1774D, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), "System.Linq.Expressions.DynamicExpression4", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x172E4, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x172E6, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x172E7, $asm09.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x172E3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x172E5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.DynamicExpression4"), "System.Linq.Expressions.TypedDynamicExpression4", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1730F, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1730E, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.ElementInit", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A92, null, [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AddMethod", 
    $sig.make(0x15A8C, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x15A8E, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15A90, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x15A94, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15A95, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15A96, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_addMethod", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Property({Static:false, Public:true }, "AddMethod", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Linq.Expressions.ExpressionStringBuilder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17319, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddLabel", 
    $sig.make(0x1731B, null, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddParam", 
    $sig.make(0x1731D, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CatchBlockToString", 
    $sig.make(0x17322, $.String, [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
    $sig.make(0x1735E, null, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ElementInitBindingToString", 
    $sig.make(0x17327, $.String, [$asm09.TypeRef("System.Linq.Expressions.ElementInit")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExpressionToString", 
    $sig.make(0x17321, $.String, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
    $sig.make(0x17328, $.String, [$asm09.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLabelId", 
    $sig.make(0x1731C, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
    $sig.make(0x1731E, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MemberBindingToString", 
    $sig.make(0x17325, $.String, [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Out", 
    $sig.make(0x1731F, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Out", 
    $sig.make(0x17320, null, [$.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OutMember", 
    $sig.make(0x1733B, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SwitchCaseToString", 
    $sig.make(0x17323, $.String, [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1731A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBinary", 
    $sig.make(0x1732E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBlock", 
    $sig.make(0x1734D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BlockExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitCatchBlock", 
    $sig.make(0x1735A, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConditional", 
    $sig.make(0x17335, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConstant", 
    $sig.make(0x17336, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDebugInfo", 
    $sig.make(0x17337, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDefault", 
    $sig.make(0x1734E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitDynamic", 
    $sig.make(0x1732C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitElementInit", 
    $sig.make(0x17344, $asm09.TypeRef("System.Linq.Expressions.ElementInit"), [$asm09.TypeRef("System.Linq.Expressions.ElementInit")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
    $sig.make(0x1732A, null, [
        $.Char, $asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
        $.Char
      ], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitExtension", 
    $sig.make(0x1735D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitGoto", 
    $sig.make(0x17353, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.GotoExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitIndex", 
    $sig.make(0x1735C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.IndexExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitInvocation", 
    $sig.make(0x17345, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLabel", 
    $sig.make(0x17352, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LabelExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x17332, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitListInit", 
    $sig.make(0x17333, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLoop", 
    $sig.make(0x17355, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.LoopExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMember", 
    $sig.make(0x1733D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberAssignment", 
    $sig.make(0x17340, $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm09.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberInit", 
    $sig.make(0x1733E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberListBinding", 
    $sig.make(0x17342, $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMemberMemberBinding", 
    $sig.make(0x17343, $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitMethodCall", 
    $sig.make(0x17346, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNew", 
    $sig.make(0x17348, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitNewArray", 
    $sig.make(0x17347, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x17330, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitRuntimeVariables", 
    $sig.make(0x1733A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitSwitch", 
    $sig.make(0x17358, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitSwitchCase", 
    $sig.make(0x17356, $asm09.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTry", 
    $sig.make(0x1735B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitTypeBinary", 
    $sig.make(0x17349, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitUnary", 
    $sig.make(0x1734B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.Field({Static:false, Public:false}, "_out", $asm06.TypeRef("System.Text.StringBuilder")); 
  $.Field({Static:false, Public:false}, "_ids", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
});

JSIL.MakeEnum(
  "System.Linq.Expressions.ExpressionType", true, {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45, 
    Assign: 46, 
    Block: 47, 
    DebugInfo: 48, 
    Decrement: 49, 
    Dynamic: 50, 
    Default: 51, 
    Extension: 52, 
    Goto: 53, 
    Increment: 54, 
    Index: 55, 
    Label: 56, 
    RuntimeVariables: 57, 
    Loop: 58, 
    Switch: 59, 
    Throw: 60, 
    Try: 61, 
    Unbox: 62, 
    AddAssign: 63, 
    AndAssign: 64, 
    DivideAssign: 65, 
    ExclusiveOrAssign: 66, 
    LeftShiftAssign: 67, 
    ModuloAssign: 68, 
    MultiplyAssign: 69, 
    OrAssign: 70, 
    PowerAssign: 71, 
    RightShiftAssign: 72, 
    SubtractAssign: 73, 
    AddAssignChecked: 74, 
    MultiplyAssignChecked: 75, 
    SubtractAssignChecked: 76, 
    PreIncrementAssign: 77, 
    PreDecrementAssign: 78, 
    PostIncrementAssign: 79, 
    PostDecrementAssign: 80, 
    TypeEqual: 81, 
    OnesComplement: 82, 
    IsTrue: 83, 
    IsFalse: 84
  }, false
);

JSIL.MakeEnum(
  "System.Linq.Expressions.GotoExpressionKind", true, {
    Goto: 0, 
    Return: 1, 
    Break: 2, 
    Continue: 3
  }, false
);

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.GotoExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1541E, null, [
        $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15421, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x1541D, $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1541A, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Target", 
    $sig.make(0x1541C, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15419, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x1541B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15423, $.Type, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_kind", $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Value", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Target", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "Kind", $asm09.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/GotoExpressionProxy")]; });

JSIL.MakeStaticClass("System.Linq.Expressions.ArgumentProviderOps", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "Map", 
    $sig.make(0x173C1, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm06.TypeRef("System.Func`2", [$asm09.TypeRef("System.Linq.Expressions.Expression"), "!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.IndexExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15799, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.PropertyInfo"), 
        $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1579C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x15797, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
    $sig.make(0x15796, $asm06.TypeRef("System.Reflection.PropertyInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15793, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Object", 
    $sig.make(0x15795, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15794, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1579D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15798, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x1579B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1579A, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_indexer", $asm06.TypeRef("System.Reflection.PropertyInfo")); 
  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Object", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Indexer", $asm06.TypeRef("System.Reflection.PropertyInfo"));

  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/IndexExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.InvocationExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A3B, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15A45, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x15A37, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x15A35, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_LambdaOperand", 
    $sig.make(0x15A3A, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15A33, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15A30, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x15A47, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15A39, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x15A43, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15A41, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.Property({Static:false, Public:false}, "LambdaOperand", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"));

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/InvocationExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.LabelExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x156E6, null, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x156E7, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
    $sig.make(0x156E5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x156E3, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Target", 
    $sig.make(0x156E4, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x156E2, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x156E8, $.Type, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultValue", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Target", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "DefaultValue", $asm09.TypeRef("System.Linq.Expressions.Expression"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/LabelExpressionProxy")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.LabelTarget", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15460, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x1545E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1545F, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15461, $.String, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.LambdaExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15549, null, [
        $asm06.TypeRef("System.Type"), $.String, 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $.Boolean, 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1554F, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0x1554A, $asm06.TypeRef("System.Delegate"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0x1554B, $asm06.TypeRef("System.Delegate"), [$asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
    $sig.make(0x1554C, null, [$asm06.TypeRef("System.Reflection.Emit.MethodBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
    $sig.make(0x1554D, null, [$asm06.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CompileToMethodInternal", 
    $sig.make(0x1554E, null, [$asm06.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x15546, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x15545, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15543, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
    $sig.make(0x15544, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
    $sig.make(0x15547, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
    $sig.make(0x15548, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15542, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_tailCall", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Parameters", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "ReturnType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "TailCall", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/LambdaExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), "System.Linq.Expressions.Expression`1", true, ["TDelegate"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1577F, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $.String, 
        $.Boolean, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15783, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15784, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0x15780, new JSIL.GenericParameter("TDelegate", "System.Linq.Expressions.Expression`1"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compile", 
    $sig.make(0x15781, new JSIL.GenericParameter("TDelegate", "System.Linq.Expressions.Expression`1"), [$asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x15785, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $.String, 
        $.Boolean, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15782, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.ListArgumentProvider", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x173D2, null, [$asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x173D6, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x173D7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x173D8, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x173D9, null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x173D0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x173D1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x173CE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x173DB, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x173D3, $.Int32, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x173D4, null, [$.Int32, $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x173DA, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x173D5, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x173CF, null, [$.Int32, $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x173DC, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_provider", $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.ListArgumentProvider/<GetEnumerator>d__0", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E2A, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17E27, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17E25, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17E26, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17E28, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17E29, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.ListArgumentProvider")); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.ListArgumentProvider/GetEnumerator>d__3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E57, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17E50, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17E4A, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17E4E, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17E52, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17E54, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.Object); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.ListArgumentProvider")); 
  $.Field({Static:false, Public:true }, "i", $.Int32); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ListInitExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A0D, null, [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15A0E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x15A0A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
    $sig.make(0x15A0C, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
    $sig.make(0x15A0B, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15A08, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15A09, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reduce", 
    $sig.make(0x15A0F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15A10, $.Type, [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm09.TypeRef("System.Linq.Expressions.NewExpression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_initializers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true }, "NewExpression", $asm09.TypeRef("System.Linq.Expressions.NewExpression"));

  $.Property({Static:false, Public:true }, "Initializers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/ListInitExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.LoopExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15759, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), 
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1575A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x15756, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
    $sig.make(0x15757, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
    $sig.make(0x15758, $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15755, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15754, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1575B, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_break", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_continue", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "BreakLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

  $.Property({Static:false, Public:true }, "ContinueLabel", $asm09.TypeRef("System.Linq.Expressions.LabelTarget"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/LoopExpressionProxy")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.MemberBinding", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15958, null, [$asm09.TypeRef("System.Linq.Expressions.MemberBindingType"), $asm06.TypeRef("System.Reflection.MemberInfo")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Do not use this constructor. It will be removed in future releases."]; });

  $.ExternalMethod({Static:false, Public:true }, "get_BindingType", 
    $sig.make(0x15956, $asm09.TypeRef("System.Linq.Expressions.MemberBindingType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Member", 
    $sig.make(0x15957, $asm06.TypeRef("System.Reflection.MemberInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15959, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_type", $asm09.TypeRef("System.Linq.Expressions.MemberBindingType")); 
  $.Field({Static:false, Public:false}, "_member", $asm06.TypeRef("System.Reflection.MemberInfo")); 
  $.Property({Static:false, Public:true }, "BindingType", $asm09.TypeRef("System.Linq.Expressions.MemberBindingType"));

  $.Property({Static:false, Public:true }, "Member", $asm06.TypeRef("System.Reflection.MemberInfo"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MemberBinding"), "System.Linq.Expressions.MemberAssignment", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15966, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x15965, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15967, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false}, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

});

JSIL.MakeEnum(
  "System.Linq.Expressions.MemberBindingType", true, {
    Assignment: 0, 
    MemberBinding: 1, 
    ListBinding: 2
  }, false
);

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.MemberExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15830, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15833, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x1582E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Member", 
    $sig.make(0x1582D, $asm06.TypeRef("System.Reflection.MemberInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1582F, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMember", 
    $sig.make(0x15832, $asm06.TypeRef("System.Reflection.MemberInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x15831, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15834, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true }, "Member", $asm06.TypeRef("System.Reflection.MemberInfo"));

  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/MemberExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MemberExpression"), "System.Linq.Expressions.FieldExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17365, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.FieldInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x17364, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMember", 
    $sig.make(0x17366, $asm06.TypeRef("System.Reflection.MemberInfo"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm06.TypeRef("System.Reflection.FieldInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MemberExpression"), "System.Linq.Expressions.PropertyExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x173A3, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.PropertyInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x173A2, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMember", 
    $sig.make(0x173A4, $asm06.TypeRef("System.Reflection.MemberInfo"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_property", $asm06.TypeRef("System.Reflection.PropertyInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.MemberInitExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15628, null, [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1562A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
    $sig.make(0x15626, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x1561D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
    $sig.make(0x15623, $asm09.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15620, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1561B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reduce", 
    $sig.make(0x1562B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReduceListInit", 
    $sig.make(0x1562D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReduceMemberBinding", 
    $sig.make(0x1562E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Linq.Expressions.MemberBinding")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReduceMemberInit", 
    $sig.make(0x1562C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1562F, $.Type, [$asm09.TypeRef("System.Linq.Expressions.NewExpression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm09.TypeRef("System.Linq.Expressions.NewExpression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_bindings", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "NewExpression", $asm09.TypeRef("System.Linq.Expressions.NewExpression"));

  $.Property({Static:false, Public:true }, "Bindings", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/MemberInitExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MemberBinding"), "System.Linq.Expressions.MemberListBinding", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x159DD, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
    $sig.make(0x159DC, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x159DE, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])], [])
  );

  $.Field({Static:false, Public:false}, "_initializers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])); 
  $.Property({Static:false, Public:true }, "Initializers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MemberBinding"), "System.Linq.Expressions.MemberMemberBinding", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15A00, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
    $sig.make(0x159FF, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15A01, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
  );

  $.Field({Static:false, Public:false}, "_bindings", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])); 
  $.Property({Static:false, Public:true }, "Bindings", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.MethodCallExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15197, null, [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1519B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x15195, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Method", 
    $sig.make(0x15193, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15191, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Object", 
    $sig.make(0x15194, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15192, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInstance", 
    $sig.make(0x15198, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x1519A, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1519C, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15196, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x1519D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15199, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Method", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "Object", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/MethodCallExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.MethodCallExpressionN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x173E4, null, [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x173E6, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x173E7, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x173E3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x173E5, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.InstanceMethodCallExpressionN", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x173FB, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInstance", 
    $sig.make(0x173FF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x17401, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17403, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x173F7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x173FE, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.MethodCallExpression1", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1748C, null, [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x17490, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x17491, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x1748B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x1748E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.MethodCallExpression2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1520B, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x1520D, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x1520E, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x1520A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x1520C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.MethodCallExpression3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15FE1, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x15FE3, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x15FE4, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15FE0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x15FE2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.MethodCallExpression4", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15FEC, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x15FEE, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x15FEF, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15FEB, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x15FED, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.MethodCallExpression5", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16020, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x16022, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x16023, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x1601F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x16021, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.InstanceMethodCallExpression2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16042, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInstance", 
    $sig.make(0x16044, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x16045, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x16046, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x16041, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x16043, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), "System.Linq.Expressions.InstanceMethodCallExpression3", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1609F, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetInstance", 
    $sig.make(0x160AA, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetOrMakeArguments", 
    $sig.make(0x160AC, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x160AE, $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x1609C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x160A8, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false}, "_arg0", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.NewArrayExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x158AB, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x158AD, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
    $sig.make(0x158AA, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x158A9, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x158AC, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x158AE, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "Expressions", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/NewArrayExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.NewArrayExpression"), "System.Linq.Expressions.NewArrayInitExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1613E, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1613C, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.NewArrayExpression"), "System.Linq.Expressions.NewArrayBoundsExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16154, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x16153, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.NewExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15648, null, [
        $asm06.TypeRef("System.Reflection.ConstructorInfo"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1564A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
    $sig.make(0x15645, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
    $sig.make(0x15644, $asm06.TypeRef("System.Reflection.ConstructorInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Members", 
    $sig.make(0x15647, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15643, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15642, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.get_ArgumentCount", 
    $sig.make(0x15646, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IArgumentProvider.GetArgument", 
    $sig.make(0x15649, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1564B, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_constructor", $asm06.TypeRef("System.Reflection.ConstructorInfo")); 
  $.Field({Static:false, Public:false}, "_arguments", $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_members", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Constructor", $asm06.TypeRef("System.Reflection.ConstructorInfo"));

  $.Property({Static:false, Public:true }, "Arguments", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IArgumentProvider.ArgumentCount", $.Int32);

  $.Property({Static:false, Public:true }, "Members", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")]));

  $.ImplementInterfaces($asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"))
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/NewExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.NewExpression"), "System.Linq.Expressions.NewValueTypeExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x161E5, null, [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm06.TypeRef("System.Reflection.MemberInfo")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x161E2, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_valueType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ParameterExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x154A3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x154A6, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
    $sig.make(0x154A2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x154A1, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x154A0, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1549F, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIsByRef", 
    $sig.make(0x154A5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Make", 
    $sig.make(0x154A4, $.Type, [
        $asm06.TypeRef("System.Type"), $.String, 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/ParameterExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), "System.Linq.Expressions.TypedParameterExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1623B, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1623A, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_paramType", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.TypedParameterExpression"), "System.Linq.Expressions.ByRefParameterExpression", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162AA, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetIsByRef", 
    $sig.make(0x162AB, $.Boolean, [], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), "System.Linq.Expressions.PrimitiveParameterExpression`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x162E7, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x162E6, $asm06.TypeRef("System.Type"), [], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.RuntimeVariablesExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1598B, null, [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15991, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15985, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15984, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
    $sig.make(0x15986, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15992, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_variables", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Variables", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/RuntimeVariablesExpressionProxy")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.SwitchCase", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B50, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x15B48, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
    $sig.make(0x15B46, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x15B51, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15B52, $.Type, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_testValues", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true }, "TestValues", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/SwitchCaseProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.SwitchExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1597B, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1597C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
    $sig.make(0x15977, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
    $sig.make(0x15979, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
    $sig.make(0x15978, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsLifted", 
    $sig.make(0x1597A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15975, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
    $sig.make(0x15976, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15974, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1597D, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_switchValue", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_cases", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultBody", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_comparison", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "SwitchValue", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Cases", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.SwitchCase")]));

  $.Property({Static:false, Public:true }, "DefaultBody", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Comparison", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:false}, "IsLifted", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/SwitchExpressionProxy")]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.SymbolDocumentInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x152F3, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocumentType", 
    $sig.make(0x152F1, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
    $sig.make(0x152EE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Language", 
    $sig.make(0x152EF, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LanguageVendor", 
    $sig.make(0x152F0, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_fileName", $.String); 
  $.Property({Static:false, Public:true }, "FileName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm06.TypeRef("System.Guid"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), "System.Linq.Expressions.SymbolDocumentWithGuids", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1631F, null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16320, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16321, null, [
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocumentType", 
    $sig.make(0x1631E, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Language", 
    $sig.make(0x1631C, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LanguageVendor", 
    $sig.make(0x1631D, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_language", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_vendor", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_documentType", $asm06.TypeRef("System.Guid")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm06.TypeRef("System.Guid"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.TryExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1530E, null, [
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1530F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Body", 
    $sig.make(0x1530A, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
    $sig.make(0x1530D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
    $sig.make(0x1530C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
    $sig.make(0x1530B, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15309, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x15308, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x15310, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")]), 
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Expression")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_handlers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_finally", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_fault", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Body", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Handlers", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")]));

  $.Property({Static:false, Public:true }, "Finally", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Fault", $asm09.TypeRef("System.Linq.Expressions.Expression"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/TryExpressionProxy")]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.TypeBinaryExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15849, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x1584E, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ByValParameterTypeEqual", 
    $sig.make(0x1584C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
    $sig.make(0x15841, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x1583D, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1583B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
    $sig.make(0x15846, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceConstantTypeEqual", 
    $sig.make(0x1584D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceTypeEqual", 
    $sig.make(0x1584B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1584F, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_typeOperand", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeKind", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Expression", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "TypeOperand", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/TypeBinaryExpressionProxy")]; });

JSIL.DeclareNamespace("System.Dynamic.Utils");
JSIL.MakeStaticClass("System.Dynamic.Utils.TypeUtils", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AreEquivalent", 
    $sig.make(0x1643F, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
    $sig.make(0x16441, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CanCache", 
    $sig.make(0x16466, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "FindConversionOperator", 
    $sig.make(0x16457, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.MethodInfo")]), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
    $sig.make(0x16461, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetBooleanOperator", 
    $sig.make(0x16464, $asm06.TypeRef("System.Reflection.MethodInfo"), [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
    $sig.make(0x16430, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetNonRefType", 
    $sig.make(0x16465, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetNullableType", 
    $sig.make(0x16431, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionMethod", 
    $sig.make(0x16456, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasBuiltInEqualityOperator", 
    $sig.make(0x16454, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasIdentityPrimitiveOrNullableConversion", 
    $sig.make(0x16448, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasReferenceConversion", 
    $sig.make(0x1644A, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasReferenceEquality", 
    $sig.make(0x16452, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsArithmetic", 
    $sig.make(0x1643A, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsBool", 
    $sig.make(0x16434, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsContravariant", 
    $sig.make(0x1644C, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
    $sig.make(0x16450, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCovariant", 
    $sig.make(0x1644B, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsDelegate", 
    $sig.make(0x1644E, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsFloatingPoint", 
    $sig.make(0x16463, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
    $sig.make(0x1645A, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsImplicitlyConvertible", 
    $sig.make(0x16455, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
    $sig.make(0x1645C, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
    $sig.make(0x16458, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
    $sig.make(0x16459, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
    $sig.make(0x16438, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsIntegerOrBool", 
    $sig.make(0x1643D, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsInvariant", 
    $sig.make(0x1644D, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsLegalExplicitVariantDelegateConversion", 
    $sig.make(0x1644F, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
    $sig.make(0x16433, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
    $sig.make(0x16436, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsSameOrSubclass", 
    $sig.make(0x1645E, $.Boolean, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
    $sig.make(0x16462, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsUnsignedInt", 
    $sig.make(0x1643B, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsValidInstanceType", 
    $sig.make(0x16446, $.Boolean, [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
    $sig.make(0x1645F, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.Constant({Static:true , Public:false}, "AnyStatic", 56); 
  $.Constant({Static:true , Public:false}, "PublicStatic", 22); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_mscorlib", $asm06.TypeRef("System.Reflection.Assembly")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_systemCore", $asm06.TypeRef("System.Reflection.Assembly")); 
})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.UnaryExpression", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15257, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Accept", 
    $sig.make(0x15258, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FunctionalOp", 
    $sig.make(0x1525A, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
    $sig.make(0x15255, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
    $sig.make(0x15253, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
    $sig.make(0x15254, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsPrefix", 
    $sig.make(0x15256, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Method", 
    $sig.make(0x15252, $asm06.TypeRef("System.Reflection.MethodInfo"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
    $sig.make(0x15250, $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
    $sig.make(0x15251, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x1524F, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reduce", 
    $sig.make(0x15259, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
    $sig.make(0x1525D, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
    $sig.make(0x1525C, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
    $sig.make(0x1525B, $asm09.TypeRef("System.Linq.Expressions.Expression"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Update", 
    $sig.make(0x1525E, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_operand", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm06.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm09.TypeRef("System.Linq.Expressions.ExpressionType"));

  $.Property({Static:false, Public:true }, "Operand", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:true }, "Method", $asm06.TypeRef("System.Reflection.MethodInfo"));

  $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

  $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

  $.Property({Static:false, Public:false}, "IsPrefix", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Linq.Expressions.Expression/UnaryExpressionProxy")]; });

JSIL.DeclareNamespace("System.Linq.Expressions.Compiler");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.AnalyzedTree", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Runtime.CompilerServices.DebugInfoGenerator)) ();
  };

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16476, null, [], [])
  );

  $.Method({Static:false, Public:false}, "get_DebugInfoGenerator", 
    $sig.make(0x16473, $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"), [], []), 
    function AnalyzedTree_get_DebugInfoGenerator () {
      return this.AnalyzedTree$DebugInfoGenerator$value;
    }
  )
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "set_DebugInfoGenerator", 
    $sig.make(0x16475, null, [$asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], []), 
    function AnalyzedTree_set_DebugInfoGenerator (value) {
      this.AnalyzedTree$DebugInfoGenerator$value = value;
    }
  )
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Field({Static:false, Public:false, ReadOnly:true }, "Scopes", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Constants", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")])); 
  $.Field({Static:false, Public:false}, "AnalyzedTree$DebugInfoGenerator$value", $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"))
    .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Property({Static:false, Public:false}, "DebugInfoGenerator", $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.AssemblyGen", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16517, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DefineDelegateType", 
    $sig.make(0x16519, $asm06.TypeRef("System.Reflection.Emit.TypeBuilder"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DefineType", 
    $sig.make(0x16518, $asm06.TypeRef("System.Reflection.Emit.TypeBuilder"), [
        $.String, $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Reflection.TypeAttributes")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Assembly", 
    $sig.make(0x16516, $.Type, [], [])
  );

  $.Field({Static:true , Public:false}, "_assembly", $.Type); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_myAssembly", $asm06.TypeRef("System.Reflection.Emit.AssemblyBuilder")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_myModule", $asm06.TypeRef("System.Reflection.Emit.ModuleBuilder")); 
  $.Field({Static:false, Public:false}, "_index", $.Int32); 
  $.Property({Static:true , Public:false}, "Assembly", $.Type);

});

JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.SymbolGuids", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentType_Text", $asm06.TypeRef("System.Guid")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA8F, null, [], []), 
    function SymbolGuids__cctor () {
      $thisType.DocumentType_Text = new $asm06.System.Guid();
    }
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.BoundConstants", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1661E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddReference", 
    $sig.make(0x16618, null, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitCacheConstants", 
    $sig.make(0x1661A, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
    $sig.make(0x16619, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConstantFromArray", 
    $sig.make(0x1661D, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EmitConstantsArray", 
    $sig.make(0x1661C, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Count", 
    $sig.make(0x16614, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ShouldCache", 
    $sig.make(0x1661B, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToArray", 
    $sig.make(0x16616, $jsilcore.TypeRef("System.Array", [$.Object]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_values", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Object])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.Compiler.BoundConstants/TypedConstant"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.Compiler.BoundConstants/TypedConstant"), $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
  $.Property({Static:false, Public:false}, "Count", $.Int32);

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Expressions.Compiler.BoundConstants/TypedConstant", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D24, null, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x17D27, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x17D2A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x17D25, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm06.TypeRef("System.Type")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IEquatable`1", [$.Type]))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.Closure", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16AAD, null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.Field({Static:false, Public:true , ReadOnly:true }, "Constants", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.VariableStorageKind", false, {
    Local: 0, 
    Hoisted: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.CompilerScope", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1680E, null, [$.Object, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddLocal", 
    $sig.make(0x16812, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocateLocals", 
    $sig.make(0x16820, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CacheBoxToLocal", 
    $sig.make(0x1681D, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddressOf", 
    $sig.make(0x16815, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitCachedVariables", 
    $sig.make(0x1681A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitClosureAccess", 
    $sig.make(0x1681E, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitClosureToVariable", 
    $sig.make(0x1681F, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitGet", 
    $sig.make(0x16813, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitNewHoistedLocals", 
    $sig.make(0x16819, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSet", 
    $sig.make(0x16814, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitVariableAccess", 
    $sig.make(0x16811, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Enter", 
    $sig.make(0x1680F, $.Type, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Exit", 
    $sig.make(0x16810, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
    $sig.make(0x1680D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NearestHoistedLocals", 
    $sig.make(0x1680C, $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetVariables", 
    $sig.make(0x16821, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetVariables", 
    $sig.make(0x16822, $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
    $sig.make(0x16816, $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
    $sig.make(0x16817, $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetParent", 
    $sig.make(0x16818, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
    $sig.make(0x1681B, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
    $sig.make(0x1681C, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.Field({Static:false, Public:false}, "_parent", $.Type); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "IsMethod", $.Boolean); 
  $.Field({Static:false, Public:false}, "NeedsClosure", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Definitions", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")])); 
  $.Field({Static:false, Public:false}, "ReferenceCount", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])); 
  $.Field({Static:false, Public:false}, "MergedScopes", $asm09.TypeRef("System.Linq.Expressions.Set`1", [$.Object])); 
  $.Field({Static:false, Public:false}, "_hoistedLocals", $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")); 
  $.Field({Static:false, Public:false}, "_closureHoistedLocals", $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")])); 
  $.Property({Static:false, Public:false}, "NearestHoistedLocals", $asm09.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

  $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.CompilerScope/Storage", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1698C, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x1698E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoad", 
    $sig.make(0x1698D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x1698F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x16990, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FreeLocal", 
    $sig.make(0x16991, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Compiler", $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Variable", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), "System.Linq.Expressions.Compiler.CompilerScope/LocalStorage", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D3C, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x17D40, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoad", 
    $sig.make(0x17D3D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x17D3E, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_local", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), "System.Linq.Expressions.Compiler.CompilerScope/ArgumentStorage", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D61, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x17D64, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoad", 
    $sig.make(0x17D62, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x17D63, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_argument", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), "System.Linq.Expressions.Compiler.CompilerScope/ElementBoxStorage", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17D7A, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), $.Int32, 
        $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x17D80, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoad", 
    $sig.make(0x17D7B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoadBox", 
    $sig.make(0x17D81, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x17D7D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x17D7E, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_array", $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm06.TypeRef("System.Reflection.FieldInfo")); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), "System.Linq.Expressions.Compiler.CompilerScope/LocalBoxStorage", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17DD0, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x17DD2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoad", 
    $sig.make(0x17DD1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x17DD3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStore", 
    $sig.make(0x17DD4, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitStoreBox", 
    $sig.make(0x17DD5, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_boxLocal", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm06.TypeRef("System.Reflection.FieldInfo")); 
});

JSIL.MakeEnum(
  "System.Linq.Expressions.AnalyzeTypeIsResult", false, {
    KnownFalse: 0, 
    KnownTrue: 1, 
    KnownAssignable: 2, 
    Unknown: 3
  }, false
);

JSIL.MakeStaticClass("System.Linq.Expressions.ConstantCheck", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
    $sig.make(0x16B7B, $asm09.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm09.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
    $sig.make(0x16B7D, $asm09.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
    $sig.make(0x16B7E, $asm09.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsNull", 
    $sig.make(0x16B7A, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.DebugInfoGenerator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15BF1, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreatePdbGenerator", 
    $sig.make(0x15BED, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MarkSequencePoint", 
    $sig.make(0x15BEE, null, [
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
        $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MarkSequencePoint", 
    $sig.make(0x15BEF, null, [
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm06.TypeRef("System.Reflection.MethodBase"), 
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetLocalName", 
    $sig.make(0x15BF0, null, [$asm06.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String], [])
  );

});

JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.DelegateHelpers", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "GetActionType", 
    $sig.make(0x16B9A, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetFuncType", 
    $sig.make(0x16B99, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNextTypeInfo", 
    $sig.make(0x16B93, $asm09.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo"), [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsByRef", 
    $sig.make(0x16B91, $.Boolean, [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeCallSiteDelegate", 
    $sig.make(0x16B8E, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeDeferredSiteDelegate", 
    $sig.make(0x16B90, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeDelegateType", 
    $sig.make(0x16B8D, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeNewCustomDelegate", 
    $sig.make(0x16B8C, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeNewDelegate", 
    $sig.make(0x16B97, $asm06.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
    $sig.make(0x16B92, $asm09.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
    $sig.make(0x16B95, $asm09.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo"), [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo")], [])
  );

  $.Constant({Static:true , Public:false}, "CtorAttributes", 4230); 
  $.Constant({Static:true , Public:false}, "ImplAttributes", 3); 
  $.Constant({Static:true , Public:false}, "InvokeAttributes", 454); 
  $.Constant({Static:true , Public:false}, "MaximumArity", 17); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_DelegateCtorSignature", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])); 
  $.Field({Static:true , Public:false}, "_DelegateCache", $asm09.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16BEE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
    $sig.make(0x16BEC, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
    $sig.make(0x16BED, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:true }, "DelegateType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:true }, "TypeChain", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm06.TypeRef("System.Type"), $.Type])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.HoistedLocals", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1692E, null, [$.Type, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ParentVariable", 
    $sig.make(0x1692D, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetParent", 
    $sig.make(0x1692F, $jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Indexes", $asm09.TypeRef("System.Dynamic.Utils.ReadOnlyDictionary`2", [$asm09.TypeRef("System.Linq.Expressions.Expression"), $.Int32])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Variables", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "SelfVariable", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")); 
  $.Property({Static:false, Public:false}, "ParentVariable", $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"));

});

JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.ILGen", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "CanEmitConstant", 
    $sig.make(0x16EE3, $.Boolean, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CanEmitILConstant", 
    $sig.make(0x16EE4, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Emit", 
    $sig.make(0x16EC7, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Reflection.Emit.OpCode"), 
        $asm06.TypeRef("System.Reflection.MethodBase")
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
    $sig.make(0x16EF6, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
    $sig.make(0x16EF7, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $.Int32, $asm06.TypeRef("System.Action`1", [$.Int32])
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
    $sig.make(0x16EF8, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitBoolean", 
    $sig.make(0x16ED7, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitByte", 
    $sig.make(0x16ED9, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Byte], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitCastToType", 
    $sig.make(0x16EEB, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type")
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitChar", 
    $sig.make(0x16ED8, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Char], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
    $sig.make(0x16EE5, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
    $sig.make(0x16EE6, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
        $asm06.TypeRef("System.Type")
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitConvertToType", 
    $sig.make(0x16EEA, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitDecimal", 
    $sig.make(0x16EF9, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Decimal")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitDecimalBits", 
    $sig.make(0x16EFA, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Decimal")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitDefault", 
    $sig.make(0x16EFB, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitDouble", 
    $sig.make(0x16EE1, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Double], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitFieldAddress", 
    $sig.make(0x16ED0, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Reflection.FieldInfo")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitFieldGet", 
    $sig.make(0x16ED1, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Reflection.FieldInfo")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitFieldSet", 
    $sig.make(0x16ED2, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Reflection.FieldInfo")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitGetValue", 
    $sig.make(0x16EF4, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitGetValueOrDefault", 
    $sig.make(0x16EF5, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitHasValue", 
    $sig.make(0x16EF3, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitInt", 
    $sig.make(0x16EDD, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitLoadArg", 
    $sig.make(0x16EC8, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitLoadArgAddress", 
    $sig.make(0x16EC9, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitLoadElement", 
    $sig.make(0x16ECD, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitLoadValueIndirect", 
    $sig.make(0x16ECB, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitLong", 
    $sig.make(0x16EDF, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int64], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
    $sig.make(0x16ED3, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Reflection.ConstructorInfo")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
    $sig.make(0x16ED4, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNonNullableToNullableConversion", 
    $sig.make(0x16EEE, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNull", 
    $sig.make(0x16ED5, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNullableConversion", 
    $sig.make(0x16EF2, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableConversion", 
    $sig.make(0x16EEF, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableStructConversion", 
    $sig.make(0x16EF0, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNullableConversion", 
    $sig.make(0x16EED, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNullableToReferenceConversion", 
    $sig.make(0x16EF1, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitNumericConversion", 
    $sig.make(0x16EEC, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitSByte", 
    $sig.make(0x16EDA, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.SByte], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitShort", 
    $sig.make(0x16EDB, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int16], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitSingle", 
    $sig.make(0x16EE2, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Single], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitStoreArg", 
    $sig.make(0x16ECA, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitStoreElement", 
    $sig.make(0x16ECE, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitStoreValueIndirect", 
    $sig.make(0x16ECC, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitString", 
    $sig.make(0x16ED6, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.String], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitType", 
    $sig.make(0x16ECF, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitUInt", 
    $sig.make(0x16EDE, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt32], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitULong", 
    $sig.make(0x16EE0, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt64], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "EmitUShort", 
    $sig.make(0x16EDC, null, [$asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt16], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
    $sig.make(0x16EE7, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
    $sig.make(0x16EE8, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodBase")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "TryEmitILConstant", 
    $sig.make(0x16EE9, $.Boolean, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
        $asm06.TypeRef("System.Type")
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.KeyedQueue`2", false, ["K", "V"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x167B9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Clear", 
    $sig.make(0x167BF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
    $sig.make(0x167BB, new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2"), [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
    $sig.make(0x167BA, null, [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2"), new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetCount", 
    $sig.make(0x167BE, $.Int32, [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Peek", 
    $sig.make(0x167BD, new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2"), [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
    $sig.make(0x167BC, $.Boolean, [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $asm07.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("V")])])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LabelInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1673E, null, [
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Linq.Expressions.LabelTarget"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Define", 
    $sig.make(0x16740, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitJump", 
    $sig.make(0x16743, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureLabelAndValue", 
    $sig.make(0x16747, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanBranch", 
    $sig.make(0x1673D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanReturn", 
    $sig.make(0x1673C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Label", 
    $sig.make(0x1673B, $asm06.TypeRef("System.Reflection.Emit.Label"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Mark", 
    $sig.make(0x16745, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MarkWithEmptyStack", 
    $sig.make(0x16746, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reference", 
    $sig.make(0x1673F, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "StoreValue", 
    $sig.make(0x16744, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateFinish", 
    $sig.make(0x16742, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidateJump", 
    $sig.make(0x16741, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm09.TypeRef("System.Linq.Expressions.LabelTarget")); 
  $.Field({Static:false, Public:false}, "_label", $asm06.TypeRef("System.Reflection.Emit.Label")); 
  $.Field({Static:false, Public:false}, "_labelDefined", $.Boolean); 
  $.Field({Static:false, Public:false}, "_value", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_definitions", $asm09.TypeRef("System.Linq.Expressions.Set`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_canReturn", $.Boolean); 
  $.Field({Static:false, Public:false}, "_acrossBlockJump", $.Boolean); 
  $.Field({Static:false, Public:false}, "_opCode", $asm06.TypeRef("System.Reflection.Emit.OpCode")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm06.TypeRef("System.Reflection.Emit.ILGenerator")); 
  $.Property({Static:false, Public:false}, "Label", $asm06.TypeRef("System.Reflection.Emit.Label"));

  $.Property({Static:false, Public:false}, "CanReturn", $.Boolean);

  $.Property({Static:false, Public:false}, "CanBranch", $.Boolean);

});

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.LabelScopeKind", false, {
    Statement: 0, 
    Block: 1, 
    Switch: 2, 
    Lambda: 3, 
    Try: 4, 
    Catch: 5, 
    Finally: 6, 
    Filter: 7, 
    Expression: 8
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LabelScopeInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x167F8, null, [$.Type, $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddLabelInfo", 
    $sig.make(0x167FB, null, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ContainsTarget", 
    $sig.make(0x167F9, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanJumpInto", 
    $sig.make(0x167F7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryGetLabelInfo", 
    $sig.make(0x167FA, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])], [])
  );

  $.Field({Static:false, Public:false}, "Labels", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Kind", $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type); 
  $.Property({Static:false, Public:false}, "CanJumpInto", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LambdaCompiler", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16657, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16658, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.MethodBuilder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16659, null, [$.Type, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
    $sig.make(0x16634, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
    $sig.make(0x16635, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
    $sig.make(0x16636, null, [$asm09.TypeRef("System.Linq.Expressions.MemberExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
    $sig.make(0x16638, null, [$asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
    $sig.make(0x16639, null, [$asm09.TypeRef("System.Linq.Expressions.IndexExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
    $sig.make(0x1663A, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
    $sig.make(0x1663D, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack"), [$asm09.TypeRef("System.Linq.Expressions.MemberExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
    $sig.make(0x1663E, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack"), [$asm09.TypeRef("System.Linq.Expressions.IndexExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddReturnLabel", 
    $sig.make(0x16656, null, [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddToBuckets", 
    $sig.make(0x166D6, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])]), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
    $sig.make(0x1665E, $asm09.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CanOptimizeSwitchType", 
    $sig.make(0x166D7, $.Boolean, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckRethrow", 
    $sig.make(0x166E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckTry", 
    $sig.make(0x166E2, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Compile", 
    $sig.make(0x1665C, $asm06.TypeRef("System.Delegate"), [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Compile", 
    $sig.make(0x1665D, null, [
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm06.TypeRef("System.Reflection.Emit.MethodBuilder"), 
        $asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertSwitchValue", 
    $sig.make(0x166D9, $asm06.TypeRef("System.Decimal"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDelegate", 
    $sig.make(0x16665, $asm06.TypeRef("System.Delegate"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateLazyInitializedField", 
    $sig.make(0x16667, $asm09.TypeRef("System.Linq.Expressions.MemberExpression"), [$.String], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateStaticField", 
    $sig.make(0x16666, $asm06.TypeRef("System.Reflection.Emit.FieldBuilder"), [$.String, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DefineBlockLabels", 
    $sig.make(0x16655, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
    $sig.make(0x1664E, $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DefineSwitchCaseLabel", 
    $sig.make(0x166DA, null, [
        $asm09.TypeRef("System.Linq.Expressions.SwitchCase"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Reflection.Emit.Label")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Emit", 
    $sig.make(0x166C5, null, [$asm09.TypeRef("System.Linq.Expressions.BlockExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x16632, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
    $sig.make(0x16633, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAddressWriteBack", 
    $sig.make(0x1663C, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAndAlsoBinaryExpression", 
    $sig.make(0x166B6, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
    $sig.make(0x16680, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack")]), [$asm06.TypeRef("System.Reflection.MethodBase"), $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
    $sig.make(0x16681, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack")]), [
        $asm06.TypeRef("System.Reflection.MethodBase"), $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAssign", 
    $sig.make(0x1668A, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitAssignBinaryExpression", 
    $sig.make(0x16689, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
    $sig.make(0x1663F, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
    $sig.make(0x16640, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBinaryMethod", 
    $sig.make(0x16642, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBinaryOperator", 
    $sig.make(0x16643, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBinding", 
    $sig.make(0x16697, null, [$asm09.TypeRef("System.Linq.Expressions.MemberBinding"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBlockExpression", 
    $sig.make(0x166C4, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchAnd", 
    $sig.make(0x166C1, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchBlock", 
    $sig.make(0x166C3, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchComparison", 
    $sig.make(0x166BE, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchLogical", 
    $sig.make(0x166C0, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchNot", 
    $sig.make(0x166BD, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchOp", 
    $sig.make(0x166BC, null, [$.Boolean, $asm06.TypeRef("System.Reflection.Emit.Label")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitBranchOr", 
    $sig.make(0x166C2, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitCall", 
    $sig.make(0x1667E, null, [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitCatchStart", 
    $sig.make(0x166E5, null, [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitClosureArgument", 
    $sig.make(0x16664, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitClosureCreation", 
    $sig.make(0x166A5, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitCoalesceBinaryExpression", 
    $sig.make(0x166AF, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConditionalExpression", 
    $sig.make(0x166AC, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
    $sig.make(0x16684, null, [$.Object, $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConstantArray", 
    $sig.make(0x166A4, null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConstantExpression", 
    $sig.make(0x16683, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConstantOne", 
    $sig.make(0x166ED, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConvert", 
    $sig.make(0x166F0, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConvertArithmeticResult", 
    $sig.make(0x16645, null, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitConvertUnaryExpression", 
    $sig.make(0x166EF, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitDebugInfoExpression", 
    $sig.make(0x16693, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitDefaultExpression", 
    $sig.make(0x166C9, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
    $sig.make(0x166A6, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
    $sig.make(0x166A7, null, [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitDynamicExpression", 
    $sig.make(0x16685, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
    $sig.make(0x1666B, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
    $sig.make(0x166A2, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAddress", 
    $sig.make(0x1663B, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAndBranch", 
    $sig.make(0x166BB, null, [
        $.Boolean, $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsType", 
    $sig.make(0x1666E, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
    $sig.make(0x1666C, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
    $sig.make(0x1666D, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionEnd", 
    $sig.make(0x16670, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitExpressionStart", 
    $sig.make(0x1666F, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EmitExtensionExpression", 
    $sig.make(0x16694, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitGetIndexCall", 
    $sig.make(0x16675, null, [$asm09.TypeRef("System.Linq.Expressions.IndexExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitGotoExpression", 
    $sig.make(0x16652, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitIndexAssignment", 
    $sig.make(0x16674, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitIndexExpression", 
    $sig.make(0x16673, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitInlinedInvoke", 
    $sig.make(0x16672, null, [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitInstance", 
    $sig.make(0x16691, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitInvocationExpression", 
    $sig.make(0x16671, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLabelExpression", 
    $sig.make(0x16651, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLambdaArgument", 
    $sig.make(0x16663, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
    $sig.make(0x166AA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
    $sig.make(0x166AB, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope"), $.Boolean, 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLambdaExpression", 
    $sig.make(0x1668C, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLambdaReferenceCoalesce", 
    $sig.make(0x166B1, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLift", 
    $sig.make(0x166A1, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm09.TypeRef("System.Linq.Expressions.MethodCallExpression"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedAndAlso", 
    $sig.make(0x166B3, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryArithmetic", 
    $sig.make(0x16649, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryOp", 
    $sig.make(0x16647, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanAnd", 
    $sig.make(0x1664A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanOr", 
    $sig.make(0x1664B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedOrElse", 
    $sig.make(0x166B7, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLiftedRelational", 
    $sig.make(0x16648, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Type"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
    $sig.make(0x1669D, null, [$asm09.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
    $sig.make(0x1669E, null, [
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")]), $.Boolean, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitListInitExpression", 
    $sig.make(0x16695, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitLoopExpression", 
    $sig.make(0x166CA, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberAddress", 
    $sig.make(0x16637, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
    $sig.make(0x1668E, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
    $sig.make(0x16698, null, [$asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberExpression", 
    $sig.make(0x1668F, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberGet", 
    $sig.make(0x16690, null, [$asm06.TypeRef("System.Reflection.MemberInfo"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
    $sig.make(0x1669B, null, [$asm09.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
    $sig.make(0x1669C, null, [
        $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")]), $.Boolean, 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberInitExpression", 
    $sig.make(0x16696, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberListBinding", 
    $sig.make(0x1669A, null, [$asm09.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMemberMemberBinding", 
    $sig.make(0x16699, null, [$asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodAndAlso", 
    $sig.make(0x166B4, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
    $sig.make(0x16679, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
    $sig.make(0x1667A, null, [
        $asm09.TypeRef("System.Linq.Expressions.Expression"), $asm06.TypeRef("System.Reflection.MethodInfo"), 
        $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
    $sig.make(0x1667B, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
    $sig.make(0x1667C, null, [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
        $asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
    $sig.make(0x16677, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
    $sig.make(0x16678, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitMethodOrElse", 
    $sig.make(0x166B9, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitNewArrayExpression", 
    $sig.make(0x16692, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitNewExpression", 
    $sig.make(0x16686, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitNullableCoalesce", 
    $sig.make(0x166B0, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitNullEquality", 
    $sig.make(0x16641, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Linq.Expressions.Expression"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitOrElseBinaryExpression", 
    $sig.make(0x166BA, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitParameterExpression", 
    $sig.make(0x1668B, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitQuote", 
    $sig.make(0x166E7, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitQuoteUnaryExpression", 
    $sig.make(0x166E6, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitReferenceCoalesceWithoutConversion", 
    $sig.make(0x166B2, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitRuntimeVariablesExpression", 
    $sig.make(0x1668D, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSaveExceptionOrPop", 
    $sig.make(0x166E3, null, [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSetIndexCall", 
    $sig.make(0x16676, null, [$asm09.TypeRef("System.Linq.Expressions.IndexExpression"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBucket", 
    $sig.make(0x166DE, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo"), $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBuckets", 
    $sig.make(0x166DC, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo"), $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSwitchCases", 
    $sig.make(0x166DB, null, [
        $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.Emit.Label")]), 
        $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm06.TypeRef("System.Reflection.Emit.Label"), 
        $asm06.TypeRef("System.Reflection.Emit.Label"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitSwitchExpression", 
    $sig.make(0x166CB, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitThrow", 
    $sig.make(0x166E9, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitThrowUnaryExpression", 
    $sig.make(0x166E8, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitTryExpression", 
    $sig.make(0x166E4, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitTypeBinaryExpression", 
    $sig.make(0x16687, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnary", 
    $sig.make(0x166EB, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnaryExpression", 
    $sig.make(0x166EA, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnaryMethod", 
    $sig.make(0x166F1, null, [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnaryOperator", 
    $sig.make(0x166EC, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnboxUnaryExpression", 
    $sig.make(0x166EE, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedAndAlso", 
    $sig.make(0x166B5, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedBinaryOp", 
    $sig.make(0x16644, null, [
        $asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type"), 
        $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedEquality", 
    $sig.make(0x16646, null, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedOrElse", 
    $sig.make(0x166B8, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitUnreachable", 
    $sig.make(0x16653, null, [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EmitVariableAssignment", 
    $sig.make(0x16688, null, [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EmitWriteBack", 
    $sig.make(0x16682, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureLabel", 
    $sig.make(0x1664C, $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
    $sig.make(0x166C6, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
    $sig.make(0x166C8, null, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FitsInBucket", 
    $sig.make(0x166D2, $.Boolean, [
        $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")]), $asm06.TypeRef("System.Decimal"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FreeLocal", 
    $sig.make(0x16660, null, [$asm06.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CanEmitBoundConstants", 
    $sig.make(0x16631, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_EmitDebugSymbols", 
    $sig.make(0x1662E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IL", 
    $sig.make(0x1662F, $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
    $sig.make(0x16630, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetEqualityOperand", 
    $sig.make(0x166BF, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLambdaArgument", 
    $sig.make(0x16662, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLocal", 
    $sig.make(0x1665F, $asm06.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetMemberType", 
    $sig.make(0x1669F, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Reflection.MemberInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNamedLocal", 
    $sig.make(0x16661, $asm06.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm06.TypeRef("System.Type"), $asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetParameterTypes", 
    $sig.make(0x166A8, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTestValueType", 
    $sig.make(0x166CC, $asm06.TypeRef("System.Type"), [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetUniqueMethodName", 
    $sig.make(0x166A9, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasVariables", 
    $sig.make(0x166C7, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeMethod", 
    $sig.make(0x1665A, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsChecked", 
    $sig.make(0x166A3, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.ExpressionType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MergeBuckets", 
    $sig.make(0x166D4, null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MethodHasByRefParameter", 
    $sig.make(0x1667D, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotEmpty", 
    $sig.make(0x166AD, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PopLabelBlock", 
    $sig.make(0x16650, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushLabelBlock", 
    $sig.make(0x1664F, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReferenceLabel", 
    $sig.make(0x1664D, $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm09.TypeRef("System.Linq.Expressions.LabelTarget")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Significant", 
    $sig.make(0x166AE, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1665B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryEmitHashtableSwitch", 
    $sig.make(0x166E0, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryEmitSwitchInstruction", 
    $sig.make(0x166D8, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryPushLabelBlock", 
    $sig.make(0x16654, $.Boolean, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTailCallFlag", 
    $sig.make(0x16668, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTypeFlag", 
    $sig.make(0x1666A, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UpdateEmitExpressionStartFlag", 
    $sig.make(0x16669, $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UseVirtual", 
    $sig.make(0x1667F, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodInfo")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateLift", 
    $sig.make(0x166A0, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm09.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm06.TypeRef("System.Reflection.Emit.ILGenerator")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_typeBuilder", $asm06.TypeRef("System.Reflection.Emit.TypeBuilder")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm06.TypeRef("System.Reflection.MethodInfo")); 
  $.Field({Static:false, Public:false}, "_labelBlock", $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_labelInfo", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])); 
  $.Field({Static:false, Public:false}, "_scope", $asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm09.TypeRef("System.Linq.Expressions.LambdaExpression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_hasClosureArgument", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_boundConstants", $asm09.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_freeLocals", $asm09.TypeRef("System.Linq.Expressions.Compiler.KeyedQueue`2", [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
  $.Field({Static:false, Public:false}, "_sequencePointCleared", $.Boolean); 
  $.Field({Static:true , Public:false}, "_Counter", $.Int32); 
  $.Property({Static:false, Public:false}, "EmitDebugSymbols", $.Boolean);

  $.Property({Static:false, Public:false}, "IL", $asm06.TypeRef("System.Reflection.Emit.ILGenerator"));

  $.Property({Static:false, Public:false}, "Parameters", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

  $.Property({Static:false, Public:false}, "CanEmitBoundConstants", $.Boolean);

});

JSIL.MakeDelegate("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack", false, []);

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags", false, {
    EmitExpressionStart: 1, 
    EmitNoExpressionStart: 2, 
    EmitExpressionStartMask: 15, 
    EmitAsDefaultType: 16, 
    EmitAsVoidType: 32, 
    EmitAsTypeMask: 240, 
    EmitAsTail: 256, 
    EmitAsMiddle: 512, 
    EmitAsNoTail: 1024, 
    EmitAsTailCallMask: 3840
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1676C, null, [
        $asm06.TypeRef("System.Decimal"), $.Object, 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Key", $asm06.TypeRef("System.Decimal")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Label", $asm06.TypeRef("System.Reflection.Emit.Label")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Constant", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1675B, null, [
        $asm09.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm06.TypeRef("System.Reflection.Emit.LocalBuilder"), 
        $asm06.TypeRef("System.Reflection.Emit.Label")
      ], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm09.TypeRef("System.Linq.Expressions.SwitchExpression")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Default", $asm06.TypeRef("System.Reflection.Emit.Label")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "IsUnsigned", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Is64BitSwitch", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClass1", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F95, null, [], [])
  );

  $.Field({Static:false, Public:true }, "instanceLocal", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:true }, "instanceType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:true }, "pi", $asm06.TypeRef("System.Reflection.PropertyInfo")); 
  $.Field({Static:false, Public:true }, "valueLocal", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClass4", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17FAF, null, [], [])
  );

  $.Field({Static:false, Public:true }, "instanceLocal", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:true }, "instanceType", $asm06.TypeRef("System.Type")); 
  $.Field({Static:false, Public:true }, "args", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
  $.Field({Static:false, Public:true }, "valueLocal", $asm06.TypeRef("System.Reflection.Emit.LocalBuilder")); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
  $.Field({Static:false, Public:true }, "node", $asm09.TypeRef("System.Linq.Expressions.IndexExpression")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClassc", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17FCC, null, [], [])
  );

  $.Field({Static:false, Public:true }, "node", $asm09.TypeRef("System.Linq.Expressions.NewArrayExpression")); 
  $.Field({Static:false, Public:true }, "$this", $asm09.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Set`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16884, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16886, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1688A, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1688E, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16891, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x16893, null, [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x16895, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x16897, $.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x16899, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x16882, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x16883, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x1689D, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x1689B, $.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1689E, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $.Object])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.StackSpiller", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15B83, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
    $sig.make(0x15B82, $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Clone", 
    $sig.make(0x15BBD, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.Int32], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "Free", 
    $sig.make(0x15BC4, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
    $sig.make(0x15BCA, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
    $sig.make(0x15BCC, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MakeTemp", 
    $sig.make(0x15BC1, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Mark", 
    $sig.make(0x15BC3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequireNoRefArgs", 
    $sig.make(0x15BBE, null, [$asm06.TypeRef("System.Reflection.MethodBase")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequireNotRefInstance", 
    $sig.make(0x15BBF, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x15B84, $asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteAssignBinaryExpression", 
    $sig.make(0x15B92, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteBinaryExpression", 
    $sig.make(0x15B90, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteBlockExpression", 
    $sig.make(0x15BB2, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteConditionalExpression", 
    $sig.make(0x15B99, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteDynamicExpression", 
    $sig.make(0x15B8A, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteExpression", 
    $sig.make(0x15BC0, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteExpressionFreeTemps", 
    $sig.make(0x15B86, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionAssignment", 
    $sig.make(0x15B94, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionExpression", 
    $sig.make(0x15BBC, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteGotoExpression", 
    $sig.make(0x15BB6, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteIndexAssignment", 
    $sig.make(0x15B8B, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteIndexExpression", 
    $sig.make(0x15BA3, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteInvocationExpression", 
    $sig.make(0x15BA9, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteLabelExpression", 
    $sig.make(0x15BB3, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RewriteLambdaExpression", 
    $sig.make(0x15B97, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteListInitExpression", 
    $sig.make(0x15BB0, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteLogicalBinaryExpression", 
    $sig.make(0x15B8D, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteLoopExpression", 
    $sig.make(0x15BB4, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteMemberAssignment", 
    $sig.make(0x15B9C, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteMemberExpression", 
    $sig.make(0x15B9E, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteMemberInitExpression", 
    $sig.make(0x15BB1, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteMethodCallExpression", 
    $sig.make(0x15BA5, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteNewArrayExpression", 
    $sig.make(0x15BA7, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteNewExpression", 
    $sig.make(0x15BAA, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteReducibleExpression", 
    $sig.make(0x15B8F, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteSwitchExpression", 
    $sig.make(0x15BB8, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteThrowUnaryExpression", 
    $sig.make(0x15BAE, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteTryExpression", 
    $sig.make(0x15BBA, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteTypeBinaryExpression", 
    $sig.make(0x15BAC, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteUnaryExpression", 
    $sig.make(0x15BAF, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RewriteVariableAssignment", 
    $sig.make(0x15B91, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToTemp", 
    $sig.make(0x15BC8, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyRewrite", 
    $sig.make(0x15B85, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
    $sig.make(0x15BC6, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.Field({Static:false, Public:false, ReadOnly:true }, "_tm", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/TempMaker")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_startingStack", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")); 
  $.Field({Static:false, Public:false}, "_lambdaRewrite", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17FE7, null, [$asm09.TypeRef("System.Linq.Expressions.MemberBinding"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsBinding", 
    $sig.make(0x17FE8, $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsExpression", 
    $sig.make(0x17FE9, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Create", 
    $sig.make(0x17FEA, $.Type, [
        $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Action", 
    $sig.make(0x17FE6, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"), [], [])
  );

  $.Field({Static:false, Public:false}, "_binding", $asm09.TypeRef("System.Linq.Expressions.MemberBinding")); 
  $.Field({Static:false, Public:false}, "_action", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
  $.Field({Static:false, Public:false}, "_spiller", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")); 
  $.Property({Static:false, Public:false}, "Action", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"));

});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter"), "System.Linq.Expressions.Compiler.StackSpiller/MemberMemberBindingRewriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1802D, null, [
        $asm09.TypeRef("System.Linq.Expressions.MemberMemberBinding"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsBinding", 
    $sig.make(0x1802E, $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsExpression", 
    $sig.make(0x1802F, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false}, "_bindings", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.MemberBinding")])); 
  $.Field({Static:false, Public:false}, "_bindingRewriters", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter"), "System.Linq.Expressions.Compiler.StackSpiller/ListBindingRewriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1804E, null, [
        $asm09.TypeRef("System.Linq.Expressions.MemberListBinding"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsBinding", 
    $sig.make(0x1804F, $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsExpression", 
    $sig.make(0x18050, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false}, "_inits", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ElementInit")])); 
  $.Field({Static:false, Public:false}, "_childRewriters", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/ChildRewriter")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter"), "System.Linq.Expressions.Compiler.StackSpiller/MemberAssignmentRewriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x18080, null, [
        $asm09.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
        $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsBinding", 
    $sig.make(0x18081, $asm09.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AsExpression", 
    $sig.make(0x18083, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false}, "_rhs", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
});

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.StackSpiller/Stack", false, {
    Empty: 0, 
    NonEmpty: 1
  }, false
);

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.StackSpiller/RewriteAction", false, {
    None: 0, 
    Copy: 1, 
    SpillStack: 3
  }, true
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Linq.Expressions.Compiler.StackSpiller/Result", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15DEB, null, [$asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"), $asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Action", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm09.TypeRef("System.Linq.Expressions.Expression")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.StackSpiller/TempMaker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x15E47, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Free", 
    $sig.make(0x15E41, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FreeTemp", 
    $sig.make(0x15E3F, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Temps", 
    $sig.make(0x15E3C, $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Mark", 
    $sig.make(0x15E40, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Temp", 
    $sig.make(0x15E3D, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UseTemp", 
    $sig.make(0x15E3E, $asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
    $sig.make(0x15E42, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.Field({Static:false, Public:false}, "_temp", $.Int32); 
  $.Field({Static:false, Public:false}, "_freeTemps", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Field({Static:false, Public:false}, "_usedTemps", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Field({Static:false, Public:false}, "_temps", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
  $.Property({Static:false, Public:false}, "Temps", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.Compiler.StackSpiller/ChildRewriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x178D7, null, [
        $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x178D9, null, [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x178DB, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddArguments", 
    $sig.make(0x178DD, null, [$asm09.TypeRef("System.Linq.Expressions.IArgumentProvider")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureDone", 
    $sig.make(0x178DE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finish", 
    $sig.make(0x178DF, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Action", 
    $sig.make(0x178D1, $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x178D2, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x178D4, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Rewrite", 
    $sig.make(0x178CE, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_self", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false}, "_expressionsCount", $.Int32); 
  $.Field({Static:false, Public:false}, "_comma", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])); 
  $.Field({Static:false, Public:false}, "_action", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
  $.Field({Static:false, Public:false}, "_stack", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")); 
  $.Field({Static:false, Public:false}, "_done", $.Boolean); 
  $.Property({Static:false, Public:false}, "Rewrite", $.Boolean);

  $.Property({Static:false, Public:false}, "Action", $asm09.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"));

  $.Property({Static:false, Public:false}, "Item", $asm09.TypeRef("System.Linq.Expressions.Expression"));

  $.Property({Static:false, Public:false}, "Item", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")]));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.BlockN"), "System.Linq.Expressions.Compiler.SpilledExpressionBlock", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F41, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
    $sig.make(0x16F42, $asm09.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Linq.Expressions.Expression")])], [])
  );

});

JSIL.MakeClass($asm09.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"), "System.Runtime.CompilerServices.SymbolDocumentGenerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16F6F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetSymbolWriter", 
    $sig.make(0x16F63, $asm06.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter"), [$asm06.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MarkSequencePoint", 
    $sig.make(0x16F69, null, [
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm06.TypeRef("System.Reflection.MethodBase"), 
        $asm06.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MarkSequencePoint", 
    $sig.make(0x16F6B, null, [
        $asm09.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
        $asm09.TypeRef("System.Linq.Expressions.DebugInfoExpression")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetLocalName", 
    $sig.make(0x16F6D, null, [$asm06.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String], [])
  );

  $.Field({Static:false, Public:false}, "_symbolWriters", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $asm06.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter")])); 
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Linq.Expressions.Compiler.VariableBinder", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16F80, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Bind", 
    $sig.make(0x16F7F, $asm09.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$asm09.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
    $sig.make(0x16F7E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MergeScopes", 
    $sig.make(0x16F87, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Linq.Expressions.Expression")]), [$asm09.TypeRef("System.Linq.Expressions.Expression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Reference", 
    $sig.make(0x16F8A, null, [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitBlock", 
    $sig.make(0x16F85, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.BlockExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitCatchBlock", 
    $sig.make(0x16F86, $asm09.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Linq.Expressions.CatchBlock")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitConstant", 
    $sig.make(0x16F81, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitInvocation", 
    $sig.make(0x16F84, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitLambda", 
    $sig.make(0x16F83, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitParameter", 
    $sig.make(0x16F88, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitRuntimeVariables", 
    $sig.make(0x16F89, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "VisitUnary", 
    $sig.make(0x16F82, $asm09.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm09.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_scopes", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_constants", $asm07.TypeRef("System.Collections.Generic.Stack`1", [$asm09.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")])); 
  $.Field({Static:false, Public:false}, "_inQuote", $.Boolean); 
  $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);

});

JSIL.MakeDelegate("System.Action`9", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9"
  ]);

JSIL.MakeDelegate("System.Action`10", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10"
  ]);

JSIL.MakeDelegate("System.Action`11", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11"
  ]);

JSIL.MakeDelegate("System.Action`12", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12"
  ]);

JSIL.MakeDelegate("System.Action`13", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13"
  ]);

JSIL.MakeDelegate("System.Action`14", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "T14"
  ]);

JSIL.MakeDelegate("System.Action`15", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "T14", "T15"
  ]);

JSIL.MakeDelegate("System.Action`16", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "T14", "T15", "T16"
  ]);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.Utils.CacheDict`2", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x158F0, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x158F4, null, [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2"), new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Item", 
    $sig.make(0x158EB, new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2"), [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_Item", 
    $sig.make(0x158EC, null, [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2"), new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
    $sig.make(0x158F3, $.Boolean, [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm09.TypeRef("System.Dynamic.Utils.CacheDict`2/KeyInfo", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm07.TypeRef("System.Collections.Generic.LinkedList`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_maxSize", $.Int32); 
  $.Property({Static:false, Public:false}, "Item", new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Dynamic.Utils.CacheDict`2/KeyInfo", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17930, null, [new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2/KeyInfo"), $asm07.TypeRef("System.Collections.Generic.LinkedListNode`1", [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2/KeyInfo")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.GenericParameter("TValue")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "List", $asm07.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("TKey")])); 
});

JSIL.MakeStaticClass("System.Dynamic.Utils.CollectionExtensions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AddFirst", 
    $sig.make(0x1724D, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "AddLast", 
    $sig.make(0x17251, $jsilcore.TypeRef("System.Array", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "All", 
    $sig.make(0x17241, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Any", 
    $sig.make(0x1723D, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Copy", 
    $sig.make(0x1725A, $jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "First", 
    $sig.make(0x17255, "!!0", [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Last", 
    $sig.make(0x17257, "!!0", [$asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ListEquals", 
    $sig.make(0x17230, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ListHashCode", 
    $sig.make(0x1722B, $.Int32, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Map", 
    $sig.make(0x17236, $jsilcore.TypeRef("System.Array", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "RemoveFirst", 
    $sig.make(0x17244, $jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "RemoveLast", 
    $sig.make(0x17249, $jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Select", 
    $sig.make(0x17233, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ToReadOnly", 
    $sig.make(0x17229, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Where", 
    $sig.make(0x1723A, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm06.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2", false, ["T", "U"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17986, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
    $sig.make(0x17988, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x1797C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17978, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17973, new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x1797A, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17976, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1797E, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17984, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("U")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "enumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "$enumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "select", $asm06.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")])); 
  $.Field({Static:false, Public:true }, "$select", $asm06.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")])); 
  $.Field({Static:false, Public:true }, "t", $.GenericParameter("T")); 
  $.Field({Static:false, Public:true }, "$wrap2", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x179FB, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally9", 
    $sig.make(0x179FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x179F4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x179F1, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x179ED, new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x179F2, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x179EF, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x179F5, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x179F7, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("T")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "enumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "$enumerable", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:true }, "where", $asm06.TypeRef("System.Func`2", [$.GenericParameter("T"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "$where", $asm06.TypeRef("System.Func`2", [$.GenericParameter("T"), $.Boolean])); 
  $.Field({Static:false, Public:true }, "t", $.GenericParameter("T")); 
  $.Field({Static:false, Public:true }, "$wrap8", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeStaticClass("System.Dynamic.Utils.EmptyReadOnlyCollection`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:true , Public:false}, "Instance", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")])); 
});

JSIL.MakeStaticClass("System.Dynamic.Utils.ContractUtils", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "get_Unreachable", 
    $sig.make(0x172C1, $asm06.TypeRef("System.Exception"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Requires", 
    $sig.make(0x172C2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Requires", 
    $sig.make(0x172C3, null, [$.Boolean, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresArrayRange", 
    $sig.make(0x172C6, null, [
        $asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
        $.Int32, $.String, 
        $.String
      ], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresNotEmpty", 
    $sig.make(0x172C5, null, [$asm06.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $.String], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresNotNull", 
    $sig.make(0x172C4, null, [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RequiresNotNullItems", 
    $sig.make(0x172C7, null, [$asm06.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.String], ["T"])
  );

  $.Property({Static:true , Public:false}, "Unreachable", $asm06.TypeRef("System.Exception"));

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.ExtensionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x172CA, null, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags("Assembly", "Class", "Method")]; });

JSIL.MakeDelegate("System.Func`10", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`11", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`12", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`13", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "TResult"
  ]);

JSIL.MakeDelegate("System.Func`14", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`15", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "T14", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`16", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "T14", "T15", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`17", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "T9", "T10", "T11", "T12", 
    "T13", "T14", "T15", "T16", 
    "TResult"
  ]);

JSIL.MakeStaticClass("System.Dynamic.Utils.Helpers", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "CommonNode", 
    $sig.make(0x1752C, "!!0", [
        "!!0", "!!0", 
        $asm06.TypeRef("System.Func`2", ["!!0", "!!0"])
      ], ["T"])
  );

  $.ExternalMethod({Static:true , Public:false}, "IncrementCount", 
    $sig.make(0x1752D, null, ["!!0", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])], ["T"])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1753C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1753D, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1753E, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x17542, null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x17543, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x17544, $.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x17545, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
    $sig.make(0x17553, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0x17530, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x17532, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x17533, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x17547, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1753F, $.Int32, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x17540, null, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCompatibleObject", 
    $sig.make(0x17554, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x17546, $.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x17541, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reverse", 
    $sig.make(0x1754F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reverse", 
    $sig.make(0x17550, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0x17531, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x17534, null, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x17535, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x1754E, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x1753A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x1753B, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17548, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.Add", 
    $sig.make(0x17549, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.Contains", 
    $sig.make(0x1754A, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.get_IsFixedSize", 
    $sig.make(0x17537, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.get_IsReadOnly", 
    $sig.make(0x17536, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.get_Item", 
    $sig.make(0x17538, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.IndexOf", 
    $sig.make(0x1754B, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.Insert", 
    $sig.make(0x1754C, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.Remove", 
    $sig.make(0x1754D, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IList.set_Item", 
    $sig.make(0x17539, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidTypeException", 
    $sig.make(0x17556, null, [$.Object, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToArray", 
    $sig.make(0x17551, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToReadOnlyCollection", 
    $sig.make(0x17552, $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateNullValue", 
    $sig.make(0x17555, null, [$.Object, $.String], [])
  );

  $.Constant({Static:true , Public:false}, "DefaultCapacity", 4); 
  $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "_size", $.Int32); 
  $.Field({Static:false, Public:false}, "_version", $.Int32); 
  $.Field({Static:false, Public:false}, "_syncRoot", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:true }, "Capacity", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsFixedSize", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "IList.Item", $.Object);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), $asm06.TypeRef("System.Collections.IList"), 
      $asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17EB6, null, [$asm09.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17EB8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x17EB1, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x17EBA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17EB4, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17EBC, null, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_builder", $asm09.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $.Int32); 
  $.Field({Static:false, Public:false}, "_index", $.Int32); 
  $.Field({Static:false, Public:false}, "_current", $.GenericParameter("T")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.Utils.ReadOnlyDictionary`2", false, ["K", "V"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x169C1, null, [$asm06.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x169C8, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
    $sig.make(0x169C3, $.Boolean, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x169C9, null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x169BD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x169BF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x169BA, new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"), [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
    $sig.make(0x169B8, $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Values", 
    $sig.make(0x169B9, $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x169D0, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x169CC, null, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0x169CE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x169CF, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.Add", 
    $sig.make(0x169C5, null, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.get_Item", 
    $sig.make(0x169BB, new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"), [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.Remove", 
    $sig.make(0x169C7, $.Boolean, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDictionary`2.set_Item", 
    $sig.make(0x169BC, null, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x169D1, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryGetValue", 
    $sig.make(0x169C4, $.Boolean, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")]));

  $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")]));

  $.Property({Static:false, Public:true }, "Item", new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary`2.Item", new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1", false, ["K", "V", "T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17EDB, null, [$asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x17EDD, null, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x17EDF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x17EE1, $.Boolean, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x17EE3, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x17ED6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x17ED8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x17EE9, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x17EE6, $.Boolean, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17EF1, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "_collection", $asm06.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Dynamic.Utils.ReferenceEqualityComparer`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x175BB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x175BD, $.Boolean, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1"), new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x175BF, $.Int32, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1")], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1")]))
});

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IStrongBox", true, [], function ($) {
    $.Method({}, "get_Value", $sig.make(0x175CE, $.Object, [], []));
    $.Method({}, "set_Value", $sig.make(0x175CF, null, [$.Object], []));
    $.Property({}, "Value");
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Runtime.CompilerServices.StrongBox`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x175D2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x175D3, null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.StrongBox`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IStrongBox.get_Value", 
    $sig.make(0x175D0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IStrongBox.set_Value", 
    $sig.make(0x175D1, null, [$.Object], [])
  );

  $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IStrongBox.Value", $.Object);

  $.ImplementInterfaces($asm09.TypeRef("System.Runtime.CompilerServices.IStrongBox"))
});

JSIL.MakeClass($asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.TrueReadOnlyCollection`1")]), "System.Runtime.CompilerServices.TrueReadOnlyCollection`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x175FB, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.TrueReadOnlyCollection`1")])], [])
  );

});

JSIL.MakeStaticClass("System.Dynamic.Utils.TypeExtensions", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
    $sig.make(0x1761C, $asm06.TypeRef("System.Delegate"), [$asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
    $sig.make(0x1761D, $asm06.TypeRef("System.Delegate"), [
        $asm06.TypeRef("System.Reflection.MethodInfo"), $asm06.TypeRef("System.Type"), 
        $.Object
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetMethodValidated", 
    $sig.make(0x17622, $asm06.TypeRef("System.Reflection.MethodInfo"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $asm06.TypeRef("System.Reflection.BindingFlags"), $asm06.TypeRef("System.Reflection.Binder"), 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterModifier")])
      ], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetParametersCached", 
    $sig.make(0x17620, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")]), [$asm06.TypeRef("System.Reflection.MethodBase")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetReturnType", 
    $sig.make(0x1761E, $asm06.TypeRef("System.Type"), [$asm06.TypeRef("System.Reflection.MethodBase")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "IsByRefParameter", 
    $sig.make(0x17621, $.Boolean, [$asm06.TypeRef("System.Reflection.ParameterInfo")], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "MatchesArgumentTypes", 
    $sig.make(0x17623, $.Boolean, [$asm06.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Type")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Field({Static:true , Public:false, ReadOnly:true }, "_ParamInfoCache", $asm09.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm06.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.ParameterInfo")])])); 
})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.DeclareNamespace("System.IO");
JSIL.MakeStaticClass("System.IO.__Error", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "EndOfFile", 
    $sig.make(0x1763D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EndReadCalledTwice", 
    $sig.make(0x17645, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EndWaitForConnectionCalledTwice", 
    $sig.make(0x17647, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EndWriteCalledTwice", 
    $sig.make(0x17646, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FileNotOpen", 
    $sig.make(0x1763E, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDisplayablePath", 
    $sig.make(0x17648, $.String, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "PipeNotOpen", 
    $sig.make(0x1763F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReadNotSupported", 
    $sig.make(0x17642, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SeekNotSupported", 
    $sig.make(0x17643, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StreamIsClosed", 
    $sig.make(0x17641, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
    $sig.make(0x17649, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
    $sig.make(0x1764A, null, [$.Int32, $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "WriteNotSupported", 
    $sig.make(0x1764B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WrongAsyncResult", 
    $sig.make(0x17644, null, [], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.IO.Stream"), "System.IO.BufferedStream2", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17670, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddUnderlyingStreamPosition", 
    $sig.make(0x17668, $.Int64, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DiscardBuffer", 
    $sig.make(0x1766A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17666, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x17661, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushRead", 
    $sig.make(0x17662, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FlushWrite", 
    $sig.make(0x17664, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingStreamPosition", 
    $sig.make(0x17655, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_UnderlyingStreamPosition", 
    $sig.make(0x1765A, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x1765C, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
    $sig.make(0x1766C, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
    $sig.make(0x1766E, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
      ], [])
  );

  $.Constant({Static:true , Public:false}, "DefaultBufferSize", 32768); 
  $.Field({Static:false, Public:false}, "bufferSize", $.Int32); 
  $.Field({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "_pendingBufferCopy", $.Int32); 
  $.Field({Static:false, Public:false}, "_writePos", $.Int32); 
  $.Field({Static:false, Public:false}, "_readPos", $.Int32); 
  $.Field({Static:false, Public:false}, "_readLen", $.Int32); 
  $.Field({Static:false, Public:false}, "pos", $.Int64); 
  $.Property({Static:false, Public:false}, "UnderlyingStreamPosition", $.Int64);

});

JSIL.MakeClass($asm09.TypeRef("System.IO.BufferedStream2"), "System.IO.LogStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17713, null, [
        $.String, $.Int32, 
        $asm09.TypeRef("System.IO.LogRetentionOption"), $.Int64, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "_DisableLogging", 
    $sig.make(0x1771E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1771B, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "EnforceRetentionPolicy", 
    $sig.make(0x1771D, null, [$asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x1771C, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_CanRead", 
    $sig.make(0x1770D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanSeek", 
    $sig.make(0x1770F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanWrite", 
    $sig.make(0x1770E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0x17710, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0x17711, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x17717, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x17716, $.Int64, [$.Int64, $asm06.TypeRef("System.IO.SeekOrigin")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SeekCore", 
    $sig.make(0x1771A, $.Int64, [$.Int64, $asm06.TypeRef("System.IO.SeekOrigin")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0x17712, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetLength", 
    $sig.make(0x17715, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
    $sig.make(0x17718, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Constant({Static:true , Public:false}, "DefaultFileSize", 10240000); 
  $.Constant({Static:true , Public:false}, "DefaultNumberOfFiles", 2); 
  $.Constant({Static:true , Public:false}, "DefaultRetention", 2); 
  $.Constant({Static:true , Public:false}, "_retentionRetryThreshold", 2); 
  $.Field({Static:false, Public:false}, "_retention", $asm09.TypeRef("System.IO.LogRetentionOption")); 
  $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64); 
  $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32); 
  $.Field({Static:false, Public:false}, "_currentFileNum", $.Int32); 
  $.Field({Static:false, Public:false}, "_disableLogging", $.Boolean); 
  $.Field({Static:false, Public:false}, "_retentionRetryCount", $.Int32); 
  $.Field({Static:false, Public:false}, "_canRead", $.Boolean); 
  $.Field({Static:false, Public:false}, "_canWrite", $.Boolean); 
  $.Field({Static:false, Public:false}, "_canSeek", $.Boolean); 
  $.Field({Static:false, Public:false}, "_handle", $asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")); 
  $.Field({Static:false, Public:false}, "_fileName", $.String); 
  $.Field({Static:false, Public:false}, "_fileNameWithoutExt", $.String); 
  $.Field({Static:false, Public:false}, "_fileExt", $.String); 
  $.Field({Static:false, Public:false}, "_pathSav", $.String); 
  $.Field({Static:false, Public:false}, "_fAccessSav", $.Int32); 
  $.Field({Static:false, Public:false}, "_shareSav", $asm06.TypeRef("System.IO.FileShare")); 
  $.Field({Static:false, Public:false}, "_secAccessSav", $asm06.TypeRef("System.Security.Permissions.FileIOPermissionAccess")); 
  $.Field({Static:false, Public:false}, "_modeSav", $asm06.TypeRef("System.IO.FileMode")); 
  $.Field({Static:false, Public:false}, "_flagsAndAttributesSav", $.Int32); 
  $.Field({Static:false, Public:false}, "_seekToEndSav", $.Boolean); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

});

JSIL.MakeEnum(
  "System.IO.LogRetentionOption", false, {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4
  }, false
);

JSIL.MakeClass($asm07.TypeRef("System.Diagnostics.TextWriterTraceListener"), "System.Diagnostics.EventSchemaTraceListener", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174F4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174F5, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174F6, null, [
        $.String, $.String, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174F7, null, [
        $.String, $.String, 
        $.Int32, $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174F8, null, [
        $.String, $.String, 
        $.Int32, $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
        $.Int64
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174F9, null, [
        $.String, $.String, 
        $.Int32, $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
        $.Int64, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "_InternalBuildRaw", 
    $sig.make(0x17509, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_InternalWriteRaw", 
    $sig.make(0x1750A, null, [$asm06.TypeRef("System.Text.StringBuilder")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "_SetMaxFileSize", 
    $sig.make(0x17512, null, [$.Int64, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetMaxNumberOfFiles", 
    $sig.make(0x17514, null, [$.Int32, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildEscaped", 
    $sig.make(0x17507, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildFooter", 
    $sig.make(0x17506, null, [
        $asm06.TypeRef("System.Text.StringBuilder"), $asm07.TypeRef("System.Diagnostics.TraceEventType"), 
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.Boolean, 
        $asm07.TypeRef("System.Diagnostics.TraceOptions")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildHeader", 
    $sig.make(0x17505, null, [
        $asm06.TypeRef("System.Text.StringBuilder"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $.Boolean, $asm07.TypeRef("System.Diagnostics.TraceOptions")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "BuildMessage", 
    $sig.make(0x17504, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BuildUserData", 
    $sig.make(0x17508, null, [$asm06.TypeRef("System.Text.StringBuilder"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Close", 
    $sig.make(0x174FA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureWriter", 
    $sig.make(0x17517, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Fail", 
    $sig.make(0x174FE, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x174FB, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
    $sig.make(0x174F0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsThreadSafe", 
    $sig.make(0x174EF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaximumFileSize", 
    $sig.make(0x174F2, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaximumNumberOfFiles", 
    $sig.make(0x174F3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TraceLogRetentionOption", 
    $sig.make(0x174F1, $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
    $sig.make(0x174ED, $asm06.TypeRef("System.IO.TextWriter"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "GetSupportedAttributes", 
    $sig.make(0x1750B, $jsilcore.TypeRef("System.Array", [$.String]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x1750C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Writer", 
    $sig.make(0x174EE, null, [$asm06.TypeRef("System.IO.TextWriter")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TraceData", 
    $sig.make(0x17501, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "TraceData", 
    $sig.make(0x17502, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "TraceEvent", 
    $sig.make(0x174FF, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $.String, $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "TraceEvent", 
    $sig.make(0x17500, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $asm07.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
        $.String
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "TraceTransfer", 
    $sig.make(0x17503, null, [
        $asm07.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
        $.Int32, $.String, 
        $asm06.TypeRef("System.Guid")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x174FC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "WriteLine", 
    $sig.make(0x174FD, null, [$.String], [])
  );

  $.Constant({Static:true , Public:false}, "s_optionBufferSize", "bufferSize"); 
  $.Constant({Static:true , Public:false}, "s_optionLogRetention", "logRetentionOption"); 
  $.Constant({Static:true , Public:false}, "s_optionMaximumFileSize", "maximumFileSize"); 
  $.Constant({Static:true , Public:false}, "s_optionMaximumNumberOfFiles", "maximumNumberOfFiles"); 
  $.Constant({Static:true , Public:false}, "s_userDataHeader", "<System.Diagnostics.UserData xmlns=\"http://schemas.microsoft.com/win/2006/09/System.Diagnostics/UserData/\">"); 
  $.Constant({Static:true , Public:false}, "s_eventHeader", "<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\"><System><Provider Guid=\""); 
  $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", 512); 
  $.Constant({Static:true , Public:false}, "_retryThreshold", 2); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "machineName", $.String); 
  $.Field({Static:false, Public:false}, "traceWriter", $asm09.TypeRef("System.Diagnostics.EventSchemaTraceListener/TraceWriter")); 
  $.Field({Static:false, Public:false}, "fileName", $.String); 
  $.Field({Static:false, Public:false}, "_initialized", $.Boolean); 
  $.Field({Static:false, Public:false}, "_bufferSize", $.Int32); 
  $.Field({Static:false, Public:false}, "_retention", $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption")); 
  $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64); 
  $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
  $.Property({Static:false, Public:true }, "Writer", $asm06.TypeRef("System.IO.TextWriter"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

  $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

  $.Property({Static:false, Public:true }, "TraceLogRetentionOption", $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

  $.Property({Static:false, Public:true }, "MaximumFileSize", $.Int64);

  $.Property({Static:false, Public:true }, "MaximumNumberOfFiles", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.IO.TextWriter"), "System.Diagnostics.EventSchemaTraceListener/TraceWriter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1758C, null, [
        $.String, $.Int32, 
        $asm09.TypeRef("System.Diagnostics.TraceLogRetentionOption"), $.Int64, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17591, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x17590, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
    $sig.make(0x1758A, $asm06.TypeRef("System.Text.Encoding"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetEncodingWithFallback", 
    $sig.make(0x1758E, $asm06.TypeRef("System.Text.Encoding"), [$asm06.TypeRef("System.Text.Encoding")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x1758F, null, [$.String], [])
  );

  $.Field({Static:false, Public:false}, "encNoBOMwithFallback", $asm06.TypeRef("System.Text.Encoding")); 
  $.Field({Static:false, Public:false}, "stream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "m_lockObject", $.Object); 
  $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm06.TypeRef("System.Text.Encoding"));

});

JSIL.MakeEnum(
  "System.Diagnostics.TraceLogRetentionOption", true, {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.UnescapedXmlDiagnosticData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x175C1, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UnescapedXml", 
    $sig.make(0x175BC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UnescapedXml", 
    $sig.make(0x175BE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x175C3, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "_xmlString", $.String); 
  $.Property({Static:false, Public:true }, "UnescapedXml", $.String);

});

JSIL.DeclareNamespace("System.Diagnostics.PerformanceData");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, "Decrement", 
    $sig.make(0x175E0, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_RawValue", 
    $sig.make(0x175DC, $.Int64, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x175DA, $.Int64, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Increment", 
    $sig.make(0x175DF, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "IncrementBy", 
    $sig.make(0x175E1, null, [$.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
    $sig.make(0x175DD, null, [$.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0x175DB, null, [$.Int64], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Property({Static:false, Public:true }, "Value", $.Int64);

  $.Property({Static:false, Public:true }, "RawValue", $.Int64);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17604, null, [$asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17605, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17607, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x17606, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x17602, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x17603, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.String], [])
  );

  $.Field({Static:false, Public:false}, "m_instance", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance")); 
  $.Field({Static:false, Public:false}, "m_counters", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterData")])); 
  $.Field({Static:false, Public:false}, "m_disposed", $.Int32); 
  $.Property({Static:false, Public:true }, "Item", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

  $.Property({Static:false, Public:true }, "Item", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterSet", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1769E, null, [
        $asm06.TypeRef("System.Guid"), $asm06.TypeRef("System.Guid"), 
        $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
    $sig.make(0x176A2, null, [$.Int32, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
    $sig.make(0x176A3, null, [
        $.Int32, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterType"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateCounterSetInstance", 
    $sig.make(0x176A4, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"), [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x1769F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x176A1, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x176A0, null, [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "s_platformNotSupported", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_provider", $asm09.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")); 
  $.Field({Static:false, Public:false}, "m_providerGuid", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "m_counterSet", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "m_instType", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
  $.Field({Static:false, Public:false}, "m_instanceCreated", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_stringToId", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
  $.Field({Static:false, Public:false}, "m_idToCounter", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterType")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterSetInstance", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17634, null, [$asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSet"), $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17635, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17637, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x17636, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Counters", 
    $sig.make(0x17632, $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"), [], [])
  );

  $.Field({Static:false, Public:false}, "m_counterSet", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSet")); 
  $.Field({Static:false, Public:false}, "m_instName", $.String); 
  $.Field({Static:false, Public:false}, "m_active", $.Int32); 
  $.Field({Static:false, Public:false}, "m_counters", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet")); 
  $.Property({Static:false, Public:true }, "Counters", $asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Diagnostics.PerformanceData.CounterSetInstanceType", true, {
    Single: 0, 
    Multiple: 2, 
    GlobalAggregate: 4, 
    MultipleAggregate: 6, 
    GlobalAggregateWithHistory: 11, 
    InstanceAggregate: 22
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.PerformanceData.CounterType", true, {
    RawDataHex32: 0, 
    RawDataHex64: 256, 
    RawData32: 65536, 
    RawData64: 65792, 
    Delta32: 4195328, 
    Delta64: 4195584, 
    SampleCounter: 4260864, 
    QueueLength: 4523008, 
    LargeQueueLength: 4523264, 
    QueueLength100Ns: 5571840, 
    QueueLengthObjectTime: 6620416, 
    RateOfCountPerSecond32: 272696320, 
    RateOfCountPerSecond64: 272696576, 
    RawFraction32: 537003008, 
    RawFraction64: 537003264, 
    PercentageActive: 541132032, 
    PrecisionSystemTimer: 541525248, 
    PercentageActive100Ns: 542180608, 
    PrecisionTimer100Ns: 542573824, 
    ObjectSpecificTimer: 543229184, 
    PrecisionObjectSpecificTimer: 543622400, 
    SampleFraction: 549585920, 
    PercentageNotActive: 557909248, 
    PercentageNotActive100Ns: 558957824, 
    MultiTimerPercentageActive: 574686464, 
    MultiTimerPercentageActive100Ns: 575735040, 
    MultiTimerPercentageNotActive: 591463680, 
    MultiTimerPercentageNotActive100Ns: 592512256, 
    AverageTimer32: 805438464, 
    ElapsedTime: 807666944, 
    AverageCount64: 1073874176, 
    SampleBase: 1073939457, 
    AverageBase: 1073939458, 
    RawBase32: 1073939459, 
    RawBase64: 1073939712, 
    MultiTimerBase: 1107494144
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.PerfProvider", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x176BD, null, [$asm06.TypeRef("System.Guid")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_providerGuid", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "m_counterSet", $.Int32); 
  $.Field({Static:false, Public:false}, "m_hProvider", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle")); 
});

JSIL.MakeStaticClass("System.Diagnostics.PerformanceData.PerfProviderCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "get_s_lockObject", 
    $sig.make(0x177AB, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "QueryProvider", 
    $sig.make(0x177AD, $asm09.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"), [$asm06.TypeRef("System.Guid")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "RegisterCounterSet", 
    $sig.make(0x177B2, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RemoveProvider", 
    $sig.make(0x177B0, null, [$asm06.TypeRef("System.Guid")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "UnregisterCounterSet", 
    $sig.make(0x177B4, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateCounterSetInstanceType", 
    $sig.make(0x177B7, $.Boolean, [$asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ValidateCounterType", 
    $sig.make(0x177B5, $.Boolean, [$asm09.TypeRef("System.Diagnostics.PerformanceData.CounterType")], [])
  );

  $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object); 
  $.Field({Static:true , Public:false}, "s_providerList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")])); 
  $.Field({Static:true , Public:false}, "s_counterSetList", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
  $.Field({Static:true , Public:false}, "s_counterTypes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Diagnostics.PerformanceData.CounterType")])); 
  $.Field({Static:true , Public:false}, "s_counterSetInstanceTypes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")])); 
  $.Property({Static:true , Public:false}, "s_lockObject", $.Object);

});

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Collections.Generic.BitHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x177CA, null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsMarked", 
    $sig.make(0x177CE, $.Boolean, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "MarkBit", 
    $sig.make(0x177CC, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ToIntArrayLength", 
    $sig.make(0x177D0, $.Int32, [$.Int32], [])
  );

  $.Constant({Static:true , Public:false}, "MarkedBitFlag", 1); 
  $.Constant({Static:true , Public:false}, "IntSize", 32); 
  $.Field({Static:false, Public:false}, "m_length", $.Int32); 
  $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "useStackAlloc", $.Boolean); 
});

JSIL.MakeStaticClass("System.Collections.Generic.HashHelpers", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "GetMinPrime", 
    $sig.make(0x177E6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetPrime", 
    $sig.make(0x177E5, $.Int32, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.ExternalMethod({Static:true , Public:false}, "IsPrime", 
    $sig.make(0x177E4, $.Boolean, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm06.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm06.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.Field({Static:true , Public:false, ReadOnly:true }, "primes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Collections.Generic.HashSet`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174A3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174A4, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174A5, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174A6, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x174A7, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x174B2, $.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddIfNotPresent", 
    $sig.make(0x174C4, $.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AddOrGetLocation", 
    $sig.make(0x174CC, $.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AreEqualityComparersEqual", 
    $sig.make(0x174D0, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckUniqueAndUnfoundElements", 
    $sig.make(0x174CD, $asm09.TypeRef("System.Collections.Generic.HashSet`1/ElementCount", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x174A9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x174AA, $.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ContainsAllElements", 
    $sig.make(0x174C5, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x174AB, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x174BD, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x174BE, null, [
        $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateSetComparer", 
    $sig.make(0x174C1, $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExceptWith", 
    $sig.make(0x174B5, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
    $sig.make(0x174A2, $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x174A0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x174AD, $asm09.TypeRef("System.Collections.Generic.HashSet`1/Enumerator", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x174B0, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HashSetEquals", 
    $sig.make(0x174CF, $.Boolean, [
        $.Type, $.Type, 
        $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IncreaseCapacity", 
    $sig.make(0x174C3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0x174C2, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
    $sig.make(0x174D1, $.Int32, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
    $sig.make(0x174C9, $.Int32, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectWith", 
    $sig.make(0x174B4, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IntersectWithEnumerable", 
    $sig.make(0x174C8, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IntersectWithHashSetWithSameEC", 
    $sig.make(0x174C7, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsProperSubsetOf", 
    $sig.make(0x174B8, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "IsProperSupersetOf", 
    $sig.make(0x174BA, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "IsSubsetOf", 
    $sig.make(0x174B7, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IsSubsetOfHashSetWithSameEC", 
    $sig.make(0x174C6, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsSupersetOf", 
    $sig.make(0x174B9, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnDeserialization", 
    $sig.make(0x174B1, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Overlaps", 
    $sig.make(0x174BB, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x174AC, $.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveWhere", 
    $sig.make(0x174BF, $.Int32, [$asm06.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetEquals", 
    $sig.make(0x174BC, $.Boolean, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SymmetricExceptWith", 
    $sig.make(0x174B6, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithEnumerable", 
    $sig.make(0x174CB, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithUniqueHashSet", 
    $sig.make(0x174CA, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x174A8, null, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x174A1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x174AE, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x174AF, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToArray", 
    $sig.make(0x174CE, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
    $sig.make(0x174C0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "UnionWith", 
    $sig.make(0x174B3, null, [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
  );

  $.Constant({Static:true , Public:false}, "Lower31BitMask", 2147483647); 
  $.Constant({Static:true , Public:false}, "GrowthFactor", 2); 
  $.Constant({Static:true , Public:false}, "StackAllocThreshold", 100); 
  $.Constant({Static:true , Public:false}, "ShrinkThreshold", 3); 
  $.Constant({Static:true , Public:false}, "CapacityName", "Capacity"); 
  $.Constant({Static:true , Public:false}, "ElementsName", "Elements"); 
  $.Constant({Static:true , Public:false}, "ComparerName", "Comparer"); 
  $.Constant({Static:true , Public:false}, "VersionName", "Version"); 
  $.Field({Static:false, Public:false}, "m_buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "m_slots", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.HashSet`1/Slot", [$.GenericParameter("T")])])); 
  $.Field({Static:false, Public:false}, "m_count", $.Int32); 
  $.Field({Static:false, Public:false}, "m_lastIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "m_freeList", $.Int32); 
  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "m_version", $.Int32); 
  $.Field({Static:false, Public:false}, "m_siInfo", $asm06.TypeRef("System.Runtime.Serialization.SerializationInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true }, "Comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]));

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), $asm06.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      $asm07.TypeRef("System.Collections.Generic.ISet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $asm06.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm09.TypeRef("System.Collections.Generic.HashSetDebugView`1")]; });

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Collections.Generic.HashSet`1/ElementCount", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "uniqueCount", $.Int32); 
  $.Field({Static:false, Public:false}, "unfoundCount", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Collections.Generic.HashSet`1/Slot", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
  $.Field({Static:false, Public:false}, "value", $.GenericParameter("T")); 
  $.Field({Static:false, Public:false}, "next", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Collections.Generic.HashSet`1/Enumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1759A, null, [$asm09.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x1759B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x17598, new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x1759C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17599, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x1759D, null, [], [])
  );

  $.Field({Static:false, Public:false}, "set", $asm09.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
  $.Field({Static:false, Public:false}, "version", $.Int32); 
  $.Field({Static:false, Public:false}, "current", $.GenericParameter("T")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator")]), $asm06.TypeRef("System.IDisposable"), 
      $asm06.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Collections.Generic.HashSetDebugView`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177F6, null, [$asm09.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Items", 
    $sig.make(0x177F5, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")]), [], [])
  );

  $.Field({Static:false, Public:false}, "set", $asm09.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")]))
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm06.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Collections.Generic.HashSetEqualityComparer`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17463, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17464, null, [$asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x17465, $.Boolean, [$asm09.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")]), $asm09.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x17467, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x17466, $.Int32, [$asm09.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x17468, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "m_comparer", $asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm09.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])]))
});

JSIL.MakeEnum(
  "System.IO.HandleInheritability", true, {
    None: 0, 
    Inheritable: 1
  }, false
);

JSIL.DeclareNamespace("System.IO.Pipes");
JSIL.MakeEnum(
  "System.IO.Pipes.PipeDirection", true, {
    In: 1, 
    Out: 2, 
    InOut: 3
  }, false
);

JSIL.MakeEnum(
  "System.IO.Pipes.PipeTransmissionMode", true, {
    Byte: 0, 
    Message: 1
  }, false
);

JSIL.MakeEnum(
  "System.IO.Pipes.PipeOptions", true, {
    WriteThrough: -2147483648, 
    None: 0, 
    Asynchronous: 1073741824
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.IO.Stream"), "System.IO.Pipes.PipeStream", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x176DA, null, [$asm09.TypeRef("System.IO.Pipes.PipeDirection"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x176DB, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BeginRead", 
    $sig.make(0x176E4, $asm06.TypeRef("System.IAsyncResult"), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "BeginReadCore", 
    $sig.make(0x176E5, $asm09.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "BeginWrite", 
    $sig.make(0x176E9, $asm06.TypeRef("System.IAsyncResult"), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "BeginWriteCore", 
    $sig.make(0x176EA, $asm09.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32, $asm06.TypeRef("System.AsyncCallback"), 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckPipePropertyOperations", 
    $sig.make(0x176F8, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckReadOperations", 
    $sig.make(0x176F9, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckWriteOperations", 
    $sig.make(0x176FA, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x176F2, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "EndRead", 
    $sig.make(0x176E6, $.Int32, [$asm06.TypeRef("System.IAsyncResult")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "EndWrite", 
    $sig.make(0x176EB, null, [$asm06.TypeRef("System.IAsyncResult")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x176F0, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_CanRead", 
    $sig.make(0x176D0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanSeek", 
    $sig.make(0x176D2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanWrite", 
    $sig.make(0x176D1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InBufferSize", 
    $sig.make(0x176C9, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "get_InternalHandle", 
    $sig.make(0x176CE, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_IsAsync", 
    $sig.make(0x176C6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
    $sig.make(0x176C4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsHandleExposed", 
    $sig.make(0x176CF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsMessageComplete", 
    $sig.make(0x176C7, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0x176D3, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OutBufferSize", 
    $sig.make(0x176CA, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_Position", 
    $sig.make(0x176D4, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReadMode", 
    $sig.make(0x176CB, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_SafePipeHandle", 
    $sig.make(0x176CD, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "get_State", 
    $sig.make(0x176D6, $asm09.TypeRef("System.IO.Pipes.PipeState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TransmissionMode", 
    $sig.make(0x176C8, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
    $sig.make(0x176F4, $asm09.TypeRef("System.IO.Pipes.PipeSecurity"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x176DD, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeHandle", 
    $sig.make(0x176DE, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.Boolean, 
        $.Boolean
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x176E0, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "ReadByte", 
    $sig.make(0x176EE, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "ReadCore", 
    $sig.make(0x176E2, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x176F7, $.Int64, [$.Int64, $asm06.TypeRef("System.IO.SeekOrigin")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_IsConnected", 
    $sig.make(0x176C5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Position", 
    $sig.make(0x176D5, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ReadMode", 
    $sig.make(0x176CC, null, [$asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "set_State", 
    $sig.make(0x176D7, null, [$asm09.TypeRef("System.IO.Pipes.PipeState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
    $sig.make(0x176F5, null, [$asm09.TypeRef("System.IO.Pipes.PipeSecurity")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SetLength", 
    $sig.make(0x176F6, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateReadMode", 
    $sig.make(0x176F3, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "WaitForPipeDrain", 
    $sig.make(0x176F1, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "WinIOError", 
    $sig.make(0x176FB, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x176E7, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "WriteByte", 
    $sig.make(0x176EF, null, [$.Byte], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
    $sig.make(0x176E8, null, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:true , Public:false, ReadOnly:true }, "_canUseAsync", $.Boolean); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IOCallback", $asm06.TypeRef("System.Threading.IOCompletionCallback")); 
  $.Field({Static:false, Public:false}, "m_handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
  $.Field({Static:false, Public:false}, "m_canRead", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_canWrite", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_isAsync", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_isMessageComplete", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_isFromExistingHandle", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_isHandleExposed", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_readMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode")); 
  $.Field({Static:false, Public:false}, "m_transmissionMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode")); 
  $.Field({Static:false, Public:false}, "m_pipeDirection", $asm09.TypeRef("System.IO.Pipes.PipeDirection")); 
  $.Field({Static:false, Public:false}, "m_outBufferSize", $.Int32); 
  $.Field({Static:false, Public:false}, "m_state", $asm09.TypeRef("System.IO.Pipes.PipeState")); 
  $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

  $.Property({Static:false, Public:true }, "IsAsync", $.Boolean);

  $.Property({Static:false, Public:true }, "IsMessageComplete", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

  $.Property({Static:false, Public:true , Virtual:true }, "InBufferSize", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "OutBufferSize", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

  $.Property({Static:false, Public:true }, "SafePipeHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

  $.Property({Static:false, Public:false}, "InternalHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

  $.Property({Static:false, Public:false}, "IsHandleExposed", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

  $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

  $.Property({Static:false, Public:false}, "State", $asm09.TypeRef("System.IO.Pipes.PipeState"));

});

JSIL.MakeClass($asm09.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.AnonymousPipeServerStream", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177C9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177CB, null, [$asm09.TypeRef("System.IO.Pipes.PipeDirection")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177CD, null, [$asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.HandleInheritability")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177CF, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.HandleInheritability"), 
        $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177D1, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.HandleInheritability"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeSecurity")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177D6, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x177DC, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "DisposeLocalCopyOfClientHandle", 
    $sig.make(0x177DA, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x177D3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ClientSafePipeHandle", 
    $sig.make(0x177C5, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_TransmissionMode", 
    $sig.make(0x177C6, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetClientHandleAsString", 
    $sig.make(0x177D8, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_ReadMode", 
    $sig.make(0x177C7, null, [$asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_clientHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
  $.Field({Static:false, Public:false}, "m_clientHandleExposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "ClientSafePipeHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

  $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

});

JSIL.MakeClass($asm09.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.AnonymousPipeClientStream", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1780A, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1780B, null, [$asm09.TypeRef("System.IO.Pipes.PipeDirection"), $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1780C, null, [$asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x1780E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TransmissionMode", 
    $sig.make(0x17808, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Init", 
    $sig.make(0x1780D, null, [$asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "set_ReadMode", 
    $sig.make(0x17809, null, [$asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

  $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

});

JSIL.MakeDelegate("System.IO.Pipes.PipeStreamImpersonationWorker", true, []);

JSIL.MakeClass($asm09.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.NamedPipeServerStream", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17836, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17837, null, [$.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17838, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17839, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1783A, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $asm09.TypeRef("System.IO.Pipes.PipeOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1783C, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $asm09.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1783F, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $asm09.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeSecurity")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17841, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $asm09.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeSecurity"), 
        $asm09.TypeRef("System.IO.HandleInheritability")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17844, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
        $asm09.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
        $.Int32, $asm09.TypeRef("System.IO.Pipes.PipeSecurity"), 
        $asm09.TypeRef("System.IO.HandleInheritability"), $asm09.TypeRef("System.IO.Pipes.PipeAccessRights")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17845, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
        $.Boolean, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "BeginWaitForConnection", 
    $sig.make(0x17849, $asm06.TypeRef("System.IAsyncResult"), [$asm06.TypeRef("System.AsyncCallback"), $.Object], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsServer", 
    $sig.make(0x17851, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckDisconnectOperations", 
    $sig.make(0x17852, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Disconnect", 
    $sig.make(0x1784B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "EndWaitForConnection", 
    $sig.make(0x1784A, null, [$asm06.TypeRef("System.IAsyncResult")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x17846, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImpersonationUserName", 
    $sig.make(0x1784F, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "ImpersonateAndTryCode", 
    $sig.make(0x1784D, null, [$.Object], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "RevertImpersonationOnBackout", 
    $sig.make(0x1784E, null, [$.Object, $.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"))
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "RunAsClient", 
    $sig.make(0x1784C, null, [$asm09.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "WaitForConnection", 
    $sig.make(0x17848, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Constant({Static:true , Public:true }, "MaxAllowedServerInstances", -1); 
  $.Field({Static:true , Public:false}, "s_maxUsernameLength", $.Int32, 20); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WaitForConnectionCallback", $asm06.TypeRef("System.Threading.IOCompletionCallback")); 
  $.Field({Static:true , Public:false}, "tryCode", $asm06.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers/TryCode"), function ($pi) {
      return $asm06.System.Runtime.CompilerServices.RuntimeHelpers_TryCode.New($pi, $pi.ImpersonateAndTryCode);
    }); 
  $.Field({Static:true , Public:false}, "cleanupCode", $asm06.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers/CleanupCode"), function ($pi) {
      return $asm06.System.Runtime.CompilerServices.RuntimeHelpers_CleanupCode.New($pi, $pi.RevertImpersonationOnBackout);
    }); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.IO.Pipes.NamedPipeServerStream/ExecuteHelper", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1826B, null, [$asm09.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_userCode", $asm09.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker")); 
  $.Field({Static:false, Public:false}, "m_handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
  $.Field({Static:false, Public:false}, "m_mustRevert", $.Boolean); 
  $.Field({Static:false, Public:false}, "m_impersonateErrorCode", $.Int32); 
  $.Field({Static:false, Public:false}, "m_revertImpersonateErrorCode", $.Int32); 
});

JSIL.MakeClass($asm09.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.NamedPipeClientStream", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17881, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17882, null, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17883, null, [
        $.String, $.String, 
        $asm09.TypeRef("System.IO.Pipes.PipeDirection")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17884, null, [
        $.String, $.String, 
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.Pipes.PipeOptions")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17885, null, [
        $.String, $.String, 
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.Pipes.PipeOptions"), 
        $asm06.TypeRef("System.Security.Principal.TokenImpersonationLevel")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17886, null, [
        $.String, $.String, 
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $asm09.TypeRef("System.IO.Pipes.PipeOptions"), 
        $asm06.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm09.TypeRef("System.IO.HandleInheritability")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17887, null, [
        $.String, $.String, 
        $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm09.TypeRef("System.IO.Pipes.PipeOptions"), 
        $asm06.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm09.TypeRef("System.IO.HandleInheritability")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17889, null, [
        $asm09.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
        $.Boolean, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsClient", 
    $sig.make(0x1788E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckPipePropertyOperations", 
    $sig.make(0x1788D, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Connect", 
    $sig.make(0x1788B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Connect", 
    $sig.make(0x1788C, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "DirectionFromRights", 
    $sig.make(0x17888, $asm09.TypeRef("System.IO.Pipes.PipeDirection"), [$asm09.TypeRef("System.IO.Pipes.PipeAccessRights")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x1788A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NumberOfServerInstances", 
    $sig.make(0x17880, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_normalizedPipePath", $.String); 
  $.Field({Static:false, Public:false}, "m_impersonationLevel", $asm06.TypeRef("System.Security.Principal.TokenImpersonationLevel")); 
  $.Field({Static:false, Public:false}, "m_pipeOptions", $asm09.TypeRef("System.IO.Pipes.PipeOptions")); 
  $.Field({Static:false, Public:false}, "m_inheritability", $asm09.TypeRef("System.IO.HandleInheritability")); 
  $.Field({Static:false, Public:false}, "m_access", $.Int32); 
  $.Property({Static:false, Public:true }, "NumberOfServerInstances", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.IO.Pipes.PipeAsyncResult", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x178B2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
    $sig.make(0x178B1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
    $sig.make(0x178B0, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AsyncState", 
    $sig.make(0x178AC, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AsyncWaitHandle", 
    $sig.make(0x178AE, $asm06.TypeRef("System.Threading.WaitHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_CompletedSynchronously", 
    $sig.make(0x178AF, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsCompleted", 
    $sig.make(0x178AD, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "_userCallback", $asm06.TypeRef("System.AsyncCallback")); 
  $.Field({Static:false, Public:false}, "_userStateObject", $.Object); 
  $.Field({Static:false, Public:false}, "_waitHandle", $asm06.TypeRef("System.Threading.ManualResetEvent")); 
  $.Field({Static:false, Public:false}, "_handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
  $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32); 
  $.Field({Static:false, Public:false}, "_errorCode", $.Int32); 
  $.Field({Static:false, Public:false}, "_isComplete", $.Boolean); 
  $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm06.TypeRef("System.Threading.WaitHandle"));

  $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IAsyncResult"))
});

JSIL.MakeEnum(
  "System.IO.Pipes.PipeState", false, {
    WaitingToConnect: 0, 
    Connected: 1, 
    Broken: 2, 
    Disconnected: 3, 
    Closed: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.IO.Pipes.PipeStreamAsyncResult", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17786, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
    $sig.make(0x17784, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
    $sig.make(0x17783, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AsyncState", 
    $sig.make(0x17777, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AsyncWaitHandle", 
    $sig.make(0x1777C, $asm06.TypeRef("System.Threading.WaitHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_CompletedSynchronously", 
    $sig.make(0x17780, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsCompleted", 
    $sig.make(0x17779, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "_userCallback", $asm06.TypeRef("System.AsyncCallback")); 
  $.Field({Static:false, Public:false}, "_userStateObject", $.Object); 
  $.Field({Static:false, Public:false}, "_waitHandle", $asm06.TypeRef("System.Threading.ManualResetEvent")); 
  $.Field({Static:false, Public:false}, "_handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
  $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32); 
  $.Field({Static:false, Public:false}, "_numBytes", $.Int32); 
  $.Field({Static:false, Public:false}, "_errorCode", $.Int32); 
  $.Field({Static:false, Public:false}, "_isMessageComplete", $.Boolean); 
  $.Field({Static:false, Public:false}, "_isWrite", $.Boolean); 
  $.Field({Static:false, Public:false}, "_isComplete", $.Boolean); 
  $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm06.TypeRef("System.Threading.WaitHandle"));

  $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IAsyncResult"))
});

JSIL.MakeEnum(
  "System.IO.Pipes.PipeAccessRights", true, {
    ReadData: 1, 
    WriteData: 2, 
    CreateNewInstance: 4, 
    ReadExtendedAttributes: 8, 
    WriteExtendedAttributes: 16, 
    ReadAttributes: 128, 
    WriteAttributes: 256, 
    Write: 274, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    Read: 131209, 
    ReadWrite: 131483, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    Synchronize: 1048576, 
    FullControl: 2032031, 
    AccessSystemSecurity: 16777216
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Security.AccessControl.AccessRule"), "System.IO.Pipes.PipeAccessRule", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x175A5, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), 
        $asm06.TypeRef("System.Security.AccessControl.AccessControlType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x175A6, null, [
        $asm06.TypeRef("System.Security.Principal.IdentityReference"), $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), 
        $asm06.TypeRef("System.Security.AccessControl.AccessControlType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x175A7, null, [
        $asm06.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
        $.Boolean, $asm06.TypeRef("System.Security.AccessControl.AccessControlType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
    $sig.make(0x175A8, $.Int32, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm06.TypeRef("System.Security.AccessControl.AccessControlType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
    $sig.make(0x175A4, $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RightsFromAccessMask", 
    $sig.make(0x175A9, $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), [$.Int32], [])
  );

  $.Property({Static:false, Public:true }, "PipeAccessRights", $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"));

});

JSIL.MakeClass($asm06.TypeRef("System.Security.AccessControl.AuditRule"), "System.IO.Pipes.PipeAuditRule", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174D9, null, [
        $asm06.TypeRef("System.Security.Principal.IdentityReference"), $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), 
        $asm06.TypeRef("System.Security.AccessControl.AuditFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x174DA, null, [
        $.String, $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), 
        $asm06.TypeRef("System.Security.AccessControl.AuditFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x174DB, null, [
        $asm06.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
        $.Boolean, $asm06.TypeRef("System.Security.AccessControl.AuditFlags")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
    $sig.make(0x174DC, $.Int32, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRights")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
    $sig.make(0x174D8, $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"), [], [])
  );

  $.Property({Static:false, Public:true }, "PipeAccessRights", $asm09.TypeRef("System.IO.Pipes.PipeAccessRights"));

});

JSIL.MakeClass($asm06.TypeRef("System.Security.AccessControl.NativeObjectSecurity"), "System.IO.Pipes.PipeSecurity", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17567, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17568, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm06.TypeRef("System.Security.AccessControl.AccessControlSections")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "AccessRuleFactory", 
    $sig.make(0x17573, $asm06.TypeRef("System.Security.AccessControl.AccessRule"), [
        $asm06.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
        $.Boolean, $asm06.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
        $asm06.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm06.TypeRef("System.Security.AccessControl.AccessControlType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddAccessRule", 
    $sig.make(0x17569, null, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddAuditRule", 
    $sig.make(0x1756E, null, [$asm09.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AuditRuleFactory", 
    $sig.make(0x17574, $asm06.TypeRef("System.Security.AccessControl.AuditRule"), [
        $asm06.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
        $.Boolean, $asm06.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
        $asm06.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm06.TypeRef("System.Security.AccessControl.AuditFlags")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AccessRightType", 
    $sig.make(0x17564, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AccessRuleType", 
    $sig.make(0x17565, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AuditRuleType", 
    $sig.make(0x17566, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetAccessControlSectionsFromChanges", 
    $sig.make(0x17575, $asm06.TypeRef("System.Security.AccessControl.AccessControlSections"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Persist", 
    $sig.make(0x17576, null, [$asm06.TypeRef("System.Runtime.InteropServices.SafeHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Persist", 
    $sig.make(0x17577, null, [$.String], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRule", 
    $sig.make(0x1756C, $.Boolean, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRuleSpecific", 
    $sig.make(0x1756D, null, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRule", 
    $sig.make(0x17570, $.Boolean, [$asm09.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleAll", 
    $sig.make(0x17571, null, [$asm09.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleSpecific", 
    $sig.make(0x17572, null, [$asm09.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetAccessRule", 
    $sig.make(0x1756B, null, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAccessRule", 
    $sig.make(0x1756A, null, [$asm09.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetAuditRule", 
    $sig.make(0x1756F, null, [$asm09.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "AccessRightType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AccessRuleType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "AuditRuleType", $asm06.TypeRef("System.Type"));

});

JSIL.DeclareNamespace("System.Threading");
JSIL.MakeEnum(
  "System.Threading.LockRecursionPolicy", true, {
    NoRecursion: 0, 
    SupportsRecursion: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Threading.RecursiveCounts", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x175F3, null, [], [])
  );

  $.Field({Static:false, Public:true }, "writercount", $.Int32); 
  $.Field({Static:false, Public:true }, "upgradecount", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Threading.ReaderWriterCount", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1761F, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:true }, "threadid", $.Int32); 
  $.Field({Static:false, Public:true }, "readercount", $.Int32); 
  $.Field({Static:false, Public:true }, "next", $.Type); 
  $.Field({Static:false, Public:true }, "rc", $asm09.TypeRef("System.Threading.RecursiveCounts")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Threading.ReaderWriterLockSlim", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17667, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17669, null, [$asm09.TypeRef("System.Threading.LockRecursionPolicy")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearUpgraderWaiting", 
    $sig.make(0x17690, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearWriterAcquired", 
    $sig.make(0x1768C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ClearWritersWaiting", 
    $sig.make(0x1768E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17696, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17697, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnterMyLock", 
    $sig.make(0x17692, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnterMyLockSpin", 
    $sig.make(0x17693, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnterReadLock", 
    $sig.make(0x17671, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnterUpgradeableReadLock", 
    $sig.make(0x1767B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnterWriteLock", 
    $sig.make(0x17675, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaiters", 
    $sig.make(0x17688, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaitersPreferringWriters", 
    $sig.make(0x17689, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ExitMyLock", 
    $sig.make(0x17694, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExitReadLock", 
    $sig.make(0x1767F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExitUpgradeableReadLock", 
    $sig.make(0x17682, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExitWriteLock", 
    $sig.make(0x17681, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CurrentReadCount", 
    $sig.make(0x17659, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadLockHeld", 
    $sig.make(0x17654, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsUpgradeableReadLockHeld", 
    $sig.make(0x17656, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsWriteLockHeld", 
    $sig.make(0x17657, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecursionPolicy", 
    $sig.make(0x17658, $asm09.TypeRef("System.Threading.LockRecursionPolicy"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecursiveReadCount", 
    $sig.make(0x1765B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecursiveUpgradeCount", 
    $sig.make(0x1765D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RecursiveWriteCount", 
    $sig.make(0x1765E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WaitingReadCount", 
    $sig.make(0x1765F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WaitingUpgradeCount", 
    $sig.make(0x17660, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WaitingWriteCount", 
    $sig.make(0x17663, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNumReaders", 
    $sig.make(0x17691, $.UInt32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetThreadRWCount", 
    $sig.make(0x1766F, $asm09.TypeRef("System.Threading.ReaderWriterCount"), [$.Int32, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeThreadCounts", 
    $sig.make(0x17665, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsRWEntryEmpty", 
    $sig.make(0x1766B, $.Boolean, [$asm09.TypeRef("System.Threading.ReaderWriterCount")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsRwHashEntryChanged", 
    $sig.make(0x1766D, $.Boolean, [$asm09.TypeRef("System.Threading.ReaderWriterCount"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IsWriterAcquired", 
    $sig.make(0x1768A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "LazyCreateEvent", 
    $sig.make(0x17684, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Threading.EventWaitHandle")]), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetUpgraderWaiting", 
    $sig.make(0x1768F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetWriterAcquired", 
    $sig.make(0x1768B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetWritersWaiting", 
    $sig.make(0x1768D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SpinWait", 
    $sig.make(0x17695, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
    $sig.make(0x17672, $.Boolean, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
    $sig.make(0x17673, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryEnterReadLockCore", 
    $sig.make(0x17674, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
    $sig.make(0x1767C, $.Boolean, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
    $sig.make(0x1767D, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryEnterUpgradeableReadLockCore", 
    $sig.make(0x1767E, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
    $sig.make(0x17676, $.Boolean, [$asm06.TypeRef("System.TimeSpan")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
    $sig.make(0x17678, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "TryEnterWriteLockCore", 
    $sig.make(0x1767A, $.Boolean, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WaitOnEvent", 
    $sig.make(0x17686, $.Boolean, [
        $asm06.TypeRef("System.Threading.EventWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
        $.Int32
      ], [])
  );

  $.Constant({Static:true , Public:false}, "LockSpinCycles", 20); 
  $.Constant({Static:true , Public:false}, "LockSpinCount", 10); 
  $.Constant({Static:true , Public:false}, "LockSleep0Count", 5); 
  $.Constant({Static:true , Public:false}, "hashTableSize", 255); 
  $.Constant({Static:true , Public:false}, "MaxSpinCount", 20); 
  $.Constant({Static:true , Public:false}, "WRITER_HELD", 2147483648); 
  $.Constant({Static:true , Public:false}, "WAITING_WRITERS", 1073741824); 
  $.Constant({Static:true , Public:false}, "WAITING_UPGRADER", 536870912); 
  $.Constant({Static:true , Public:false}, "MAX_READER", 268435454); 
  $.Constant({Static:true , Public:false}, "READER_MASK", 268435455); 
  $.Field({Static:false, Public:false}, "fIsReentrant", $.Boolean); 
  $.Field({Static:false, Public:false}, "myLock", $.Int32); 
  $.Field({Static:false, Public:false}, "numWriteWaiters", $.UInt32); 
  $.Field({Static:false, Public:false}, "numReadWaiters", $.UInt32); 
  $.Field({Static:false, Public:false}, "numWriteUpgradeWaiters", $.UInt32); 
  $.Field({Static:false, Public:false}, "numUpgradeWaiters", $.UInt32); 
  $.Field({Static:false, Public:false}, "fNoWaiters", $.Boolean); 
  $.Field({Static:false, Public:false}, "upgradeLockOwnerId", $.Int32); 
  $.Field({Static:false, Public:false}, "writeLockOwnerId", $.Int32); 
  $.Field({Static:false, Public:false}, "writeEvent", $asm06.TypeRef("System.Threading.EventWaitHandle")); 
  $.Field({Static:false, Public:false}, "readEvent", $asm06.TypeRef("System.Threading.EventWaitHandle")); 
  $.Field({Static:false, Public:false}, "upgradeEvent", $asm06.TypeRef("System.Threading.EventWaitHandle")); 
  $.Field({Static:false, Public:false}, "waitUpgradeEvent", $asm06.TypeRef("System.Threading.EventWaitHandle")); 
  $.Field({Static:false, Public:false}, "rwc", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Threading.ReaderWriterCount")])); 
  $.Field({Static:false, Public:false}, "fUpgradeThreadHoldingRead", $.Boolean); 
  $.Field({Static:false, Public:false}, "owners", $.UInt32); 
  $.Field({Static:false, Public:false}, "fDisposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "IsReadLockHeld", $.Boolean);

  $.Property({Static:false, Public:true }, "IsUpgradeableReadLockHeld", $.Boolean);

  $.Property({Static:false, Public:true }, "IsWriteLockHeld", $.Boolean);

  $.Property({Static:false, Public:true }, "RecursionPolicy", $asm09.TypeRef("System.Threading.LockRecursionPolicy"));

  $.Property({Static:false, Public:true }, "CurrentReadCount", $.Int32);

  $.Property({Static:false, Public:true }, "RecursiveReadCount", $.Int32);

  $.Property({Static:false, Public:true }, "RecursiveUpgradeCount", $.Int32);

  $.Property({Static:false, Public:true }, "RecursiveWriteCount", $.Int32);

  $.Property({Static:false, Public:true }, "WaitingReadCount", $.Int32);

  $.Property({Static:false, Public:true }, "WaitingUpgradeCount", $.Int32);

  $.Property({Static:false, Public:true }, "WaitingWriteCount", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.DeclareNamespace("System.Threading.Tasks");
JSIL.MakeStaticClass("System.Threading.Tasks.TaskExtensions", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "TrySetFromTask", 
    $sig.make(0x176DF, $.Boolean, [$asm06.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", ["!!0"]), $asm06.TypeRef("System.Threading.Tasks.Task")], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Unwrap", 
    $sig.make(0x176D9, $asm06.TypeRef("System.Threading.Tasks.Task"), [$asm06.TypeRef("System.Threading.Tasks.Task`1", [$asm06.TypeRef("System.Threading.Tasks.Task")])], [])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "Unwrap", 
    $sig.make(0x176DC, $asm06.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm06.TypeRef("System.Threading.Tasks.Task`1", [$asm06.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["TResult"])
  )
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Threading.Tasks.TaskExtensions/<>c__DisplayClass4", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17E86, null, [], [])
  );

  $.Field({Static:false, Public:true }, "result", $.Boolean); 
  $.Field({Static:false, Public:true }, "tcs", $asm06.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm06.TypeRef("System.Threading.Tasks.Task")])); 
  $.Field({Static:false, Public:true }, "task", $asm06.TypeRef("System.Threading.Tasks.Task`1", [$asm06.TypeRef("System.Threading.Tasks.Task")])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Threading.Tasks.TaskExtensions/<>c__DisplayClassc`1", false, ["TResult"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17EA6, null, [], [])
  );

  $.Field({Static:false, Public:true }, "result", $.Boolean); 
  $.Field({Static:false, Public:true }, "tcs", $asm06.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.GenericParameter("TResult")])); 
  $.Field({Static:false, Public:true }, "task", $asm06.TypeRef("System.Threading.Tasks.Task`1", [$asm06.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])])); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15384, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15386, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x15388, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.SafeBuffer"), "Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x155D5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x155D7, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x155D9, $.Boolean, [], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm06.System.Security.SecurityCriticalScope.Everything]; });

JSIL.DeclareNamespace("System.IO.MemoryMappedFiles");
JSIL.MakeEnum(
  "System.IO.MemoryMappedFiles.MemoryMappedFileAccess", true, {
    ReadWrite: 0, 
    Read: 1, 
    Write: 2, 
    CopyOnWrite: 3, 
    ReadExecute: 4, 
    ReadWriteExecute: 5
  }, false
);

JSIL.MakeEnum(
  "System.IO.MemoryMappedFiles.MemoryMappedFileOptions", true, {
    None: 0, 
    DelayAllocatePages: 67108864
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.IO.MemoryMappedFiles.MemoryMappedFile", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17762, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17763, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm06.TypeRef("System.IO.FileStream"), 
        $.Boolean
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CleanupFile", 
    $sig.make(0x177B3, null, [
        $asm06.TypeRef("System.IO.FileStream"), $.Boolean, 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateCore", 
    $sig.make(0x17787, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
        $asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.String, 
        $asm09.TypeRef("System.IO.HandleInheritability"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
        $.Int64
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
    $sig.make(0x17769, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
    $sig.make(0x1776A, $.Type, [$.String, $asm06.TypeRef("System.IO.FileMode")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
    $sig.make(0x1776B, $.Type, [
        $.String, $asm06.TypeRef("System.IO.FileMode"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
    $sig.make(0x1776D, $.Type, [
        $.String, $asm06.TypeRef("System.IO.FileMode"), 
        $.String, $.Int64
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
    $sig.make(0x1776F, $.Type, [
        $.String, $asm06.TypeRef("System.IO.FileMode"), 
        $.String, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
    $sig.make(0x17771, $.Type, [
        $asm06.TypeRef("System.IO.FileStream"), $.String, 
        $.Int64, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm09.TypeRef("System.IO.HandleInheritability"), 
        $.Boolean
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
    $sig.make(0x17773, $.Type, [$.String, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
    $sig.make(0x17775, $.Type, [
        $.String, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
    $sig.make(0x1777D, $.Type, [
        $.String, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm09.TypeRef("System.IO.HandleInheritability")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
    $sig.make(0x1777F, $.Type, [$.String, $.Int64], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
    $sig.make(0x17782, $.Type, [
        $.String, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
    $sig.make(0x17785, $.Type, [
        $.String, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm09.TypeRef("System.IO.HandleInheritability")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CreateOrOpenCore", 
    $sig.make(0x17790, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
        $asm06.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.String, 
        $asm09.TypeRef("System.IO.HandleInheritability"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
        $.Int64
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
    $sig.make(0x17794, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
    $sig.make(0x17795, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [$.Int64, $.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
    $sig.make(0x17797, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [
        $.Int64, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
    $sig.make(0x17791, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
    $sig.make(0x17792, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [$.Int64, $.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
    $sig.make(0x17793, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [
        $.Int64, $.Int64, 
        $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17799, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1779A, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedFileHandle", 
    $sig.make(0x17761, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
    $sig.make(0x1779C, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "GetFileAccess", 
    $sig.make(0x177AE, $asm06.TypeRef("System.IO.FileAccess"), [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetFileMapAccess", 
    $sig.make(0x177A5, $.Int32, [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetFileStreamFileSystemRights", 
    $sig.make(0x177AC, $asm06.TypeRef("System.Security.AccessControl.FileSystemRights"), [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetPageAccess", 
    $sig.make(0x177A3, $.Int32, [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetSystemPageAllocationGranularity", 
    $sig.make(0x177A1, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "OpenCore", 
    $sig.make(0x17789, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
        $.String, $asm09.TypeRef("System.IO.HandleInheritability"), 
        $.Int32, $.Boolean
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
    $sig.make(0x17764, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
    $sig.make(0x17765, $.Type, [$.String, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
    $sig.make(0x17767, $.Type, [
        $.String, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights"), 
        $asm09.TypeRef("System.IO.HandleInheritability")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
    $sig.make(0x1779F, null, [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Constant({Static:true , Public:false}, "DefaultSize", 0); 
  $.Field({Static:false, Public:false}, "_handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle")); 
  $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean); 
  $.Field({Static:false, Public:false}, "_fileStream", $asm06.TypeRef("System.IO.FileStream")); 
  $.Property({Static:false, Public:true }, "SafeMemoryMappedFileHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.IO.UnmanagedMemoryAccessor"), "System.IO.MemoryMappedFiles.MemoryMappedViewAccessor", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17824, null, [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17825, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x17828, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedViewHandle", 
    $sig.make(0x17822, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_view", $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")); 
  $.Property({Static:false, Public:true }, "SafeMemoryMappedViewHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

});

JSIL.MakeClass($asm06.TypeRef("System.IO.UnmanagedMemoryStream"), "System.IO.MemoryMappedFiles.MemoryMappedViewStream", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x177EB, null, [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x177ED, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x177EE, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedViewHandle", 
    $sig.make(0x177EA, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "SetLength", 
    $sig.make(0x177EC, null, [$.Int64], [])
  );

  $.Field({Static:false, Public:false}, "m_view", $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")); 
  $.Property({Static:false, Public:true }, "SafeMemoryMappedViewHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

});

JSIL.MakeEnum(
  "System.IO.MemoryMappedFiles.MemoryMappedFileRights", true, {
    CopyOnWrite: 1, 
    Write: 2, 
    Read: 4, 
    ReadWrite: 6, 
    Execute: 8, 
    ReadExecute: 12, 
    ReadWriteExecute: 14, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    FullControl: 983055, 
    AccessSystemSecurity: 16777216
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Security.AccessControl.ObjectSecurity`1", [$asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights")]), "System.IO.MemoryMappedFiles.MemoryMappedFileSecurity", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x177FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x177FE, null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm06.TypeRef("System.Security.AccessControl.AccessControlSections")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "PersistHandle", 
    $sig.make(0x177FF, null, [$asm06.TypeRef("System.Runtime.InteropServices.SafeHandle")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.IO.MemoryMappedFiles.MemoryMappedView", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17740, null, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), $.Int64, 
        $.Int64, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "CreateView", 
    $sig.make(0x17742, $.Type, [
        $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
        $.Int64, $.Int64
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x17745, null, [$.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x17746, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x17744, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "get_Access", 
    $sig.make(0x1773B, $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
    $sig.make(0x1773D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PointerOffset", 
    $sig.make(0x17739, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Size", 
    $sig.make(0x1773A, $.Int64, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ViewHandle", 
    $sig.make(0x17738, $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Field({Static:false, Public:false}, "m_viewHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle")); 
  $.Field({Static:false, Public:false}, "m_pointerOffset", $.Int64); 
  $.Field({Static:false, Public:false}, "m_size", $.Int64); 
  $.Field({Static:false, Public:false}, "m_access", $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")); 
  $.Property({Static:false, Public:false}, "ViewHandle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

  $.Property({Static:false, Public:false}, "PointerOffset", $.Int64);

  $.Property({Static:false, Public:false}, "Size", $.Int64);

  $.Property({Static:false, Public:false}, "Access", $asm09.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"));

  $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm09.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), "System.Linq.OrderedParallelQuery`1", true, ["TSource"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x16764, null, [$asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OrderedEnumerable", 
    $sig.make(0x16763, $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SortOperator", 
    $sig.make(0x16762, $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x16765, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), [], [])
  );

  $.Field({Static:false, Public:false}, "m_sortOp", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])); 
  $.Property({Static:false, Public:false}, "SortOperator", $asm09.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]));

  $.Property({Static:false, Public:false}, "OrderedEnumerable", $asm09.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]));

});

JSIL.MakeStaticClass("System.Linq.Parallel.ExceptionAggregator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "ThrowAnOCE", 
    $sig.make(0x17770, $.Boolean, [$asm06.TypeRef("System.Exception"), $asm09.TypeRef("System.Linq.Parallel.CancellationState")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ThrowOCEorAggregateException", 
    $sig.make(0x1776C, null, [$asm06.TypeRef("System.Exception"), $asm09.TypeRef("System.Linq.Parallel.CancellationState")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "WrapEnumerable", 
    $sig.make(0x17766, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement"])
  );

  $.ExternalMethod({Static:true , Public:false}, "WrapFunc", 
    $sig.make(0x1776E, $asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), [$asm06.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm09.TypeRef("System.Linq.Parallel.CancellationState")], ["T", "U"])
  );

  $.ExternalMethod({Static:true , Public:false}, "WrapQueryEnumerator", 
    $sig.make(0x17768, $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", ["!!0", "!!1"]), $asm09.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement", "TIgnoreKey"])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1", false, ["TElement"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F09, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
    $sig.make(0x17F0A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17F06, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17F04, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17F02, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17F05, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17F03, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17F07, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17F08, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "$source", $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Field({Static:false, Public:true }, "$cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Field({Static:false, Public:true }, "enumerator", $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
  $.Field({Static:false, Public:true }, "elem", $.GenericParameter("TElement")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2", false, ["TElement", "TIgnoreKey"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F4F, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally9", 
    $sig.make(0x17F51, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.MoveNext", 
    $sig.make(0x17F49, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x17F43, $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2")]), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator`1.get_Current", 
    $sig.make(0x17F40, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x17F47, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x17F41, $.Object, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x17F4B, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x17F4D, null, [], [])
  );

  $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:false}, "$state", $.Int32); 
  $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
  $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")])); 
  $.Field({Static:false, Public:true }, "cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Field({Static:false, Public:true }, "$cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
  $.Field({Static:false, Public:true }, "elem", $.GenericParameter("TElement")); 
  $.Field({Static:false, Public:true }, "ignoreKey", $.GenericParameter("TIgnoreKey")); 
  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator`1.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $.Object);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2")]), $asm06.TypeRef("System.Collections.IEnumerable"), 
      $asm06.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2")]), $asm06.TypeRef("System.Collections.IEnumerator"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Parallel.ExceptionAggregator/<>c__DisplayClassd`2", false, ["T", "U"], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17F9D, null, [], [])
  );

  $.Field({Static:false, Public:true }, "f", $asm06.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")])); 
  $.Field({Static:false, Public:true }, "cancellationState", $asm09.TypeRef("System.Linq.Parallel.CancellationState")); 
})
  .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.DeclareNamespace("System.Runtime.InteropServices");
JSIL.MakeClass($asm06.TypeRef("System.Reflection.EventInfo"), "System.Runtime.InteropServices.ComAwareEventInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1779D, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddEventHandler", 
    $sig.make(0x1779E, null, [$.Object, $asm06.TypeRef("System.Delegate")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
    $sig.make(0x1778F, $asm06.TypeRef("System.Reflection.EventAttributes"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DeclaringType", 
    $sig.make(0x17796, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x17798, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ReflectedType", 
    $sig.make(0x1779B, $asm06.TypeRef("System.Type"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAddMethod", 
    $sig.make(0x177A2, $asm06.TypeRef("System.Reflection.MethodInfo"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCustomAttributes", 
    $sig.make(0x177A7, $jsilcore.TypeRef("System.Array", [$.Object]), [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCustomAttributes", 
    $sig.make(0x177A8, $jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDataForComInvocation", 
    $sig.make(0x177AA, null, [
        $asm06.TypeRef("System.Reflection.EventInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetRaiseMethod", 
    $sig.make(0x177A4, $asm06.TypeRef("System.Reflection.MethodInfo"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetRemoveMethod", 
    $sig.make(0x177A6, $asm06.TypeRef("System.Reflection.MethodInfo"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDefined", 
    $sig.make(0x177A9, $.Boolean, [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveEventHandler", 
    $sig.make(0x177A0, null, [$.Object, $asm06.TypeRef("System.Delegate")], [])
  );

  $.Field({Static:false, Public:false}, "_innerEventInfo", $asm06.TypeRef("System.Reflection.EventInfo")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm06.TypeRef("System.Reflection.EventAttributes"));

  $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm06.TypeRef("System.Type"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm06.TypeRef("System.Type"));

})
  .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

JSIL.MakeStaticClass("FXAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
});

JSIL.MakeStaticClass("ThisAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Title", "System.Core.dll"); 
  $.Constant({Static:true , Public:false}, "Description", "System.Core.dll"); 
  $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Core.dll"); 
  $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
  $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.233"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
  $.Constant({Static:true , Public:false}, "BuildRevisionStr", "233"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
});

JSIL.MakeStaticClass("AssemblyRef", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.SRDescriptionAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17823, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x17821, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.CategoryAttribute"), "System.SRCategoryAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17859, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLocalizedString", 
    $sig.make(0x1785A, $.String, [$.String], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.SR", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17863, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0x17861, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
    $sig.make(0x17862, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
    $sig.make(0x17864, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x17868, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x17865, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x17866, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x17867, $.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedNonNegNum", "ArgumentOutOfRange_NeedNonNegNum"); 
  $.Constant({Static:true , Public:false}, "Argument_WrongAsyncResult", "Argument_WrongAsyncResult"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidOffLen", "Argument_InvalidOffLen"); 
  $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyPipeName", "Argument_NeedNonemptyPipeName"); 
  $.Constant({Static:true , Public:false}, "Argument_EmptyServerName", "Argument_EmptyServerName"); 
  $.Constant({Static:true , Public:false}, "Argument_NonContainerInvalidAnyFlag", "Argument_NonContainerInvalidAnyFlag"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidHandle", "Argument_InvalidHandle"); 
  $.Constant({Static:true , Public:false}, "ArgumentNull_Buffer", "ArgumentNull_Buffer"); 
  $.Constant({Static:true , Public:false}, "ArgumentNull_ServerName", "ArgumentNull_ServerName"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AdditionalAccessLimited", "ArgumentOutOfRange_AdditionalAccessLimited"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AnonymousReserved", "ArgumentOutOfRange_AnonymousReserved"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_TransmissionModeByteOrMsg", "ArgumentOutOfRange_TransmissionModeByteOrMsg"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOrOut", "ArgumentOutOfRange_DirectionModeInOrOut"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOutOrInOut", "ArgumentOutOfRange_DirectionModeInOutOrInOut"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationInvalid", "ArgumentOutOfRange_ImpersonationInvalid"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationOptionsInvalid", "ArgumentOutOfRange_ImpersonationOptionsInvalid"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_OptionsInvalid", "ArgumentOutOfRange_OptionsInvalid"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable", "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidPipeAccessRights", "ArgumentOutOfRange_InvalidPipeAccessRights"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidTimeout", "ArgumentOutOfRange_InvalidTimeout"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxNumServerInstances", "ArgumentOutOfRange_MaxNumServerInstances"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidPipeAccessRights", "ArgumentOutOfRange_NeedValidPipeAccessRights"); 
  $.Constant({Static:true , Public:false}, "IndexOutOfRange_IORaceCondition", "IndexOutOfRange_IORaceCondition"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_EndReadCalledMultiple", "InvalidOperation_EndReadCalledMultiple"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_EndWriteCalledMultiple", "InvalidOperation_EndWriteCalledMultiple"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_EndWaitForConnectionCalledMultiple", "InvalidOperation_EndWaitForConnectionCalledMultiple"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotYetConnected", "InvalidOperation_PipeNotYetConnected"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeDisconnected", "InvalidOperation_PipeDisconnected"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeHandleNotSet", "InvalidOperation_PipeHandleNotSet"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotAsync", "InvalidOperation_PipeNotAsync"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeReadModeNotMessage", "InvalidOperation_PipeReadModeNotMessage"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeMessageTypeNotSupported", "InvalidOperation_PipeMessageTypeNotSupported"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyConnected", "InvalidOperation_PipeAlreadyConnected"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyDisconnected", "InvalidOperation_PipeAlreadyDisconnected"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_PipeClosed", "InvalidOperation_PipeClosed"); 
  $.Constant({Static:true , Public:false}, "IO_FileTooLongOrHandleNotSync", "IO_FileTooLongOrHandleNotSync"); 
  $.Constant({Static:true , Public:false}, "IO_EOF_ReadBeyondEOF", "IO_EOF_ReadBeyondEOF"); 
  $.Constant({Static:true , Public:false}, "IO_FileNotFound", "IO_FileNotFound"); 
  $.Constant({Static:true , Public:false}, "IO_FileNotFound_FileName", "IO_FileNotFound_FileName"); 
  $.Constant({Static:true , Public:false}, "IO_IO_AlreadyExists_Name", "IO_IO_AlreadyExists_Name"); 
  $.Constant({Static:true , Public:false}, "IO_IO_BindHandleFailed", "IO_IO_BindHandleFailed"); 
  $.Constant({Static:true , Public:false}, "IO_IO_FileExists_Name", "IO_IO_FileExists_Name"); 
  $.Constant({Static:true , Public:false}, "IO_IO_NoPermissionToDirectoryName", "IO_IO_NoPermissionToDirectoryName"); 
  $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_File", "IO_IO_SharingViolation_File"); 
  $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_NoFileName", "IO_IO_SharingViolation_NoFileName"); 
  $.Constant({Static:true , Public:false}, "IO_IO_PipeBroken", "IO_IO_PipeBroken"); 
  $.Constant({Static:true , Public:false}, "IO_IO_InvalidPipeHandle", "IO_IO_InvalidPipeHandle"); 
  $.Constant({Static:true , Public:false}, "IO_DriveNotFound_Drive", "IO_DriveNotFound_Drive"); 
  $.Constant({Static:true , Public:false}, "IO_PathNotFound_Path", "IO_PathNotFound_Path"); 
  $.Constant({Static:true , Public:false}, "IO_PathNotFound_NoPathName", "IO_PathNotFound_NoPathName"); 
  $.Constant({Static:true , Public:false}, "IO_PathTooLong", "IO_PathTooLong"); 
  $.Constant({Static:true , Public:false}, "NotSupported_IONonFileDevices", "NotSupported_IONonFileDevices"); 
  $.Constant({Static:true , Public:false}, "NotSupported_MemStreamNotExpandable", "NotSupported_MemStreamNotExpandable"); 
  $.Constant({Static:true , Public:false}, "NotSupported_UnreadableStream", "NotSupported_UnreadableStream"); 
  $.Constant({Static:true , Public:false}, "NotSupported_UnseekableStream", "NotSupported_UnseekableStream"); 
  $.Constant({Static:true , Public:false}, "NotSupported_UnwritableStream", "NotSupported_UnwritableStream"); 
  $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeUnidirectional", "NotSupported_AnonymousPipeUnidirectional"); 
  $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeMessagesNotSupported", "NotSupported_AnonymousPipeMessagesNotSupported"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_FileClosed", "ObjectDisposed_FileClosed"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_PipeClosed", "ObjectDisposed_PipeClosed"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_ReaderClosed", "ObjectDisposed_ReaderClosed"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamClosed", "ObjectDisposed_StreamClosed"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_WriterClosed", "ObjectDisposed_WriterClosed"); 
  $.Constant({Static:true , Public:false}, "PlatformNotSupported_NamedPipeServers", "PlatformNotSupported_NamedPipeServers"); 
  $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_Path", "UnauthorizedAccess_IODenied_Path"); 
  $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_NoPathName", "UnauthorizedAccess_IODenied_NoPathName"); 
  $.Constant({Static:true , Public:false}, "TraceAsTraceSource", "TraceAsTraceSource"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidLogRetention", "ArgumentOutOfRange_NeedValidLogRetention"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize", "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidMaxNumFiles", "ArgumentOutOfRange_NeedValidMaxNumFiles"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidId", "ArgumentOutOfRange_NeedValidId"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxArgExceeded", "ArgumentOutOfRange_MaxArgExceeded"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxStringsExceeded", "ArgumentOutOfRange_MaxStringsExceeded"); 
  $.Constant({Static:true , Public:false}, "NotSupported_DownLevelVista", "NotSupported_DownLevelVista"); 
  $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyDelimiter", "Argument_NeedNonemptyDelimiter"); 
  $.Constant({Static:true , Public:false}, "NotSupported_SetTextWriter", "NotSupported_SetTextWriter"); 
  $.Constant({Static:true , Public:false}, "Perflib_PlatformNotSupported", "Perflib_PlatformNotSupported"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterSetAlreadyRegister", "Perflib_Argument_CounterSetAlreadyRegister"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterType", "Perflib_Argument_InvalidCounterType"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterSetInstanceType", "Perflib_Argument_InvalidCounterSetInstanceType"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_InstanceAlreadyExists", "Perflib_Argument_InstanceAlreadyExists"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterAlreadyExists", "Perflib_Argument_CounterAlreadyExists"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterNameAlreadyExists", "Perflib_Argument_CounterNameAlreadyExists"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_ProviderNotFound", "Perflib_Argument_ProviderNotFound"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidInstance", "Perflib_Argument_InvalidInstance"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyInstanceName", "Perflib_Argument_EmptyInstanceName"); 
  $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyCounterName", "Perflib_Argument_EmptyCounterName"); 
  $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_InstanceCounterBlock", "Perflib_InsufficientMemory_InstanceCounterBlock"); 
  $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_CounterSetTemplate", "Perflib_InsufficientMemory_CounterSetTemplate"); 
  $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterRefValue", "Perflib_InvalidOperation_CounterRefValue"); 
  $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetNotInstalled", "Perflib_InvalidOperation_CounterSetNotInstalled"); 
  $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_InstanceNotFound", "Perflib_InvalidOperation_InstanceNotFound"); 
  $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_AddCounterAfterInstance", "Perflib_InvalidOperation_AddCounterAfterInstance"); 
  $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_NoActiveProvider", "Perflib_InvalidOperation_NoActiveProvider"); 
  $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetContainsNoCounter", "Perflib_InvalidOperation_CounterSetContainsNoCounter"); 
  $.Constant({Static:true , Public:false}, "Arg_ArrayPlusOffTooSmall", "Arg_ArrayPlusOffTooSmall"); 
  $.Constant({Static:true , Public:false}, "Arg_HSCapacityOverflow", "Arg_HSCapacityOverflow"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_EnumFailedVersion", "InvalidOperation_EnumFailedVersion"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_EnumOpCantHappen", "InvalidOperation_EnumOpCantHappen"); 
  $.Constant({Static:true , Public:false}, "Serialization_MissingKeys", "Serialization_MissingKeys"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveReadNotAllowed", "LockRecursionException_RecursiveReadNotAllowed"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveWriteNotAllowed", "LockRecursionException_RecursiveWriteNotAllowed"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveUpgradeNotAllowed", "LockRecursionException_RecursiveUpgradeNotAllowed"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_ReadAfterWriteNotAllowed", "LockRecursionException_ReadAfterWriteNotAllowed"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_WriteAfterReadNotAllowed", "LockRecursionException_WriteAfterReadNotAllowed"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterReadNotAllowed", "LockRecursionException_UpgradeAfterReadNotAllowed"); 
  $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterWriteNotAllowed", "LockRecursionException_UpgradeAfterWriteNotAllowed"); 
  $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedRead", "SynchronizationLockException_MisMatchedRead"); 
  $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedWrite", "SynchronizationLockException_MisMatchedWrite"); 
  $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedUpgrade", "SynchronizationLockException_MisMatchedUpgrade"); 
  $.Constant({Static:true , Public:false}, "SynchronizationLockException_IncorrectDispose", "SynchronizationLockException_IncorrectDispose"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHKeySizeMismatch", "Cryptography_ArgECDHKeySizeMismatch"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHRequiresECDHKey", "Cryptography_ArgECDHRequiresECDHKey"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgECDsaRequiresECDsaKey", "Cryptography_ArgECDsaRequiresECDsaKey"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey", "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithm", "Cryptography_ArgMustBeCngAlgorithm"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithmGroup", "Cryptography_ArgMustBeCngAlgorithmGroup"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngKeyBlobFormat", "Cryptography_ArgMustBeCngKeyBlobFormat"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngProvider", "Cryptography_ArgMustBeCngProvider"); 
  $.Constant({Static:true , Public:false}, "Cryptography_DecryptWithNoKey", "Cryptography_DecryptWithNoKey"); 
  $.Constant({Static:true , Public:false}, "Cryptography_ECXmlSerializationFormatRequired", "Cryptography_ECXmlSerializationFormatRequired"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmGroup", "Cryptography_InvalidAlgorithmGroup"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmName", "Cryptography_InvalidAlgorithmName"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidCipherMode", "Cryptography_InvalidCipherMode"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidIVSize", "Cryptography_InvalidIVSize"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeyBlobFormat", "Cryptography_InvalidKeyBlobFormat"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeySize", "Cryptography_InvalidKeySize"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidPadding", "Cryptography_InvalidPadding"); 
  $.Constant({Static:true , Public:false}, "Cryptography_InvalidProviderName", "Cryptography_InvalidProviderName"); 
  $.Constant({Static:true , Public:false}, "Cryptography_MissingDomainParameters", "Cryptography_MissingDomainParameters"); 
  $.Constant({Static:true , Public:false}, "Cryptography_MissingPublicKey", "Cryptography_MissingPublicKey"); 
  $.Constant({Static:true , Public:false}, "Cryptography_MissingIV", "Cryptography_MissingIV"); 
  $.Constant({Static:true , Public:false}, "Cryptography_MustTransformWholeBlock", "Cryptography_MustTransformWholeBlock"); 
  $.Constant({Static:true , Public:false}, "Cryptography_NonCompliantFIPSAlgorithm", "Cryptography_NonCompliantFIPSAlgorithm"); 
  $.Constant({Static:true , Public:false}, "Cryptography_OpenInvalidHandle", "Cryptography_OpenInvalidHandle"); 
  $.Constant({Static:true , Public:false}, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag", "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag"); 
  $.Constant({Static:true , Public:false}, "Cryptography_PartialBlock", "Cryptography_PartialBlock"); 
  $.Constant({Static:true , Public:false}, "Cryptography_PlatformNotSupported", "Cryptography_PlatformNotSupported"); 
  $.Constant({Static:true , Public:false}, "Cryptography_TlsRequiresLabelAndSeed", "Cryptography_TlsRequiresLabelAndSeed"); 
  $.Constant({Static:true , Public:false}, "Cryptography_TransformBeyondEndOfBuffer", "Cryptography_TransformBeyondEndOfBuffer"); 
  $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurve", "Cryptography_UnknownEllipticCurve"); 
  $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurveAlgorithm", "Cryptography_UnknownEllipticCurveAlgorithm"); 
  $.Constant({Static:true , Public:false}, "Cryptography_UnknownPaddingMode", "Cryptography_UnknownPaddingMode"); 
  $.Constant({Static:true , Public:false}, "Cryptography_UnexpectedXmlNamespace", "Cryptography_UnexpectedXmlNamespace"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_RangeMinRangeMaxRangeType", "ArgumentException_RangeMinRangeMaxRangeType"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_RangeNotIComparable", "ArgumentException_RangeNotIComparable"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_RangeMaxRangeSmallerThanMinRange", "ArgumentException_RangeMaxRangeSmallerThanMinRange"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_CountMaxLengthSmallerThanMinLength", "ArgumentException_CountMaxLengthSmallerThanMinLength"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_LengthMaxLengthSmallerThanMinLength", "ArgumentException_LengthMaxLengthSmallerThanMinLength"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_UnregisteredParameterName", "ArgumentException_UnregisteredParameterName"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_InvalidParameterName", "ArgumentException_InvalidParameterName"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateName", "ArgumentException_DuplicateName"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_DuplicatePosition", "ArgumentException_DuplicatePosition"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_NoParametersFound", "ArgumentException_NoParametersFound"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageBaseNameNullOrEmpty", "ArgumentException_HelpMessageBaseNameNullOrEmpty"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageResourceIdNullOrEmpty", "ArgumentException_HelpMessageResourceIdNullOrEmpty"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageNullOrEmpty", "ArgumentException_HelpMessageNullOrEmpty"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_RegexPatternNullOrEmpty", "ArgumentException_RegexPatternNullOrEmpty"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_RequiredPositionalAfterOptionalPositional", "ArgumentException_RequiredPositionalAfterOptionalPositional"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateParameterAttribute", "ArgumentException_DuplicateParameterAttribute"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_MissingBaseNameOrResourceId", "ArgumentException_MissingBaseNameOrResourceId"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateRemainingArgumets", "ArgumentException_DuplicateRemainingArgumets"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_TypeMismatchForRemainingArguments", "ArgumentException_TypeMismatchForRemainingArguments"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_ValidationParameterTypeMismatch", "ArgumentException_ValidationParameterTypeMismatch"); 
  $.Constant({Static:true , Public:false}, "ArgumentException_ParserBuiltWithValueType", "ArgumentException_ParserBuiltWithValueType"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_GetParameterTypeMismatch", "InvalidOperationException_GetParameterTypeMismatch"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_GetParameterValueBeforeParse", "InvalidOperationException_GetParameterValueBeforeParse"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_SetRemainingArgumentsParameterAfterParse", "InvalidOperationException_SetRemainingArgumentsParameterAfterParse"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_AddParameterAfterParse", "InvalidOperationException_AddParameterAfterParse"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_BindAfterBind", "InvalidOperationException_BindAfterBind"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_GetRemainingArgumentsNotAllowed", "InvalidOperationException_GetRemainingArgumentsNotAllowed"); 
  $.Constant({Static:true , Public:false}, "InvalidOperationException_ParameterSetBeforeParse", "InvalidOperationException_ParameterSetBeforeParse"); 
  $.Constant({Static:true , Public:false}, "CommandLineParser_Aliases", "CommandLineParser_Aliases"); 
  $.Constant({Static:true , Public:false}, "CommandLineParser_ErrorMessagePrefix", "CommandLineParser_ErrorMessagePrefix"); 
  $.Constant({Static:true , Public:false}, "CommandLineParser_HelpMessagePrefix", "CommandLineParser_HelpMessagePrefix"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_AmbiguousParameterName", "ParameterBindingException_AmbiguousParameterName"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_ParameterValueAlreadySpecified", "ParameterBindingException_ParameterValueAlreadySpecified"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_UnknownParameteName", "ParameterBindingException_UnknownParameteName"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_RequiredParameterMissingCommandLineValue", "ParameterBindingException_RequiredParameterMissingCommandLineValue"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_UnboundCommandLineArguments", "ParameterBindingException_UnboundCommandLineArguments"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_UnboundMandatoryParameter", "ParameterBindingException_UnboundMandatoryParameter"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_ResponseFileException", "ParameterBindingException_ResponseFileException"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_ValididationError", "ParameterBindingException_ValididationError"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_TransformationError", "ParameterBindingException_TransformationError"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_AmbiguousParameterSet", "ParameterBindingException_AmbiguousParameterSet"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_UnknownParameterSet", "ParameterBindingException_UnknownParameterSet"); 
  $.Constant({Static:true , Public:false}, "ParameterBindingException_NestedResponseFiles", "ParameterBindingException_NestedResponseFiles"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_RangeGreaterThanMaxRangeFailure", "ValidateMetadataException_RangeGreaterThanMaxRangeFailure"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_RangeSmallerThanMinRangeFailure", "ValidateMetadataException_RangeSmallerThanMinRangeFailure"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_PatternFailure", "ValidateMetadataException_PatternFailure"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_CountMinLengthFailure", "ValidateMetadataException_CountMinLengthFailure"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_CountMaxLengthFailure", "ValidateMetadataException_CountMaxLengthFailure"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_LengthMinLengthFailure", "ValidateMetadataException_LengthMinLengthFailure"); 
  $.Constant({Static:true , Public:false}, "ValidateMetadataException_LengthMaxLengthFailure", "ValidateMetadataException_LengthMaxLengthFailure"); 
  $.Constant({Static:true , Public:false}, "Argument_MapNameEmptyString", "Argument_MapNameEmptyString"); 
  $.Constant({Static:true , Public:false}, "Argument_EmptyFile", "Argument_EmptyFile"); 
  $.Constant({Static:true , Public:false}, "Argument_NewMMFWriteAccessNotAllowed", "Argument_NewMMFWriteAccessNotAllowed"); 
  $.Constant({Static:true , Public:false}, "Argument_ReadAccessWithLargeCapacity", "Argument_ReadAccessWithLargeCapacity"); 
  $.Constant({Static:true , Public:false}, "Argument_NewMMFAppendModeNotAllowed", "Argument_NewMMFAppendModeNotAllowed"); 
  $.Constant({Static:true , Public:false}, "ArgumentNull_MapName", "ArgumentNull_MapName"); 
  $.Constant({Static:true , Public:false}, "ArgumentNull_FileStream", "ArgumentNull_FileStream"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed", "ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedPositiveNumber", "ArgumentOutOfRange_NeedPositiveNumber"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositiveOrDefaultCapacityRequired", "ArgumentOutOfRange_PositiveOrDefaultCapacityRequired"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositiveOrDefaultSizeRequired", "ArgumentOutOfRange_PositiveOrDefaultSizeRequired"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositionLessThanCapacityRequired", "ArgumentOutOfRange_PositionLessThanCapacityRequired"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_CapacityGEFileSizeRequired", "ArgumentOutOfRange_CapacityGEFileSizeRequired"); 
  $.Constant({Static:true , Public:false}, "IO_NotEnoughMemory", "IO_NotEnoughMemory"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_CalledTwice", "InvalidOperation_CalledTwice"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation_CantCreateFileMapping", "InvalidOperation_CantCreateFileMapping"); 
  $.Constant({Static:true , Public:false}, "NotSupported_DelayAllocateFileBackedNotAllowed", "NotSupported_DelayAllocateFileBackedNotAllowed"); 
  $.Constant({Static:true , Public:false}, "NotSupported_MMViewStreamsFixedLength", "NotSupported_MMViewStreamsFixedLength"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_ViewAccessorClosed", "ObjectDisposed_ViewAccessorClosed"); 
  $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamIsClosed", "ObjectDisposed_StreamIsClosed"); 
  $.Field({Static:true , Public:false}, "loader", $.Type); 
  $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Linq.SRDescriptionAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17871, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x17870, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Linq.SRCategoryAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17878, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLocalizedString", 
    $sig.make(0x17879, $.String, [$.String], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.SR", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x17897, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0x17895, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
    $sig.make(0x17896, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
    $sig.make(0x17898, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x1789C, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x17899, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x1789A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x1789B, $.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.Constant({Static:true , Public:false}, "OwningTeam", "OwningTeam"); 
  $.Constant({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", "ArgumentArrayHasTooManyElements"); 
  $.Constant({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", "ArgumentNotIEnumerableGeneric"); 
  $.Constant({Static:true , Public:false}, "ArgumentNotSequence", "ArgumentNotSequence"); 
  $.Constant({Static:true , Public:false}, "ArgumentNotValid", "ArgumentNotValid"); 
  $.Constant({Static:true , Public:false}, "IncompatibleElementTypes", "IncompatibleElementTypes"); 
  $.Constant({Static:true , Public:false}, "ArgumentNotLambda", "ArgumentNotLambda"); 
  $.Constant({Static:true , Public:false}, "MoreThanOneElement", "MoreThanOneElement"); 
  $.Constant({Static:true , Public:false}, "MoreThanOneMatch", "MoreThanOneMatch"); 
  $.Constant({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", "NoArgumentMatchingMethodsInQueryable"); 
  $.Constant({Static:true , Public:false}, "NoElements", "NoElements"); 
  $.Constant({Static:true , Public:false}, "NoMatch", "NoMatch"); 
  $.Constant({Static:true , Public:false}, "NoMethodOnType", "NoMethodOnType"); 
  $.Constant({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", "NoMethodOnTypeMatchingArguments"); 
  $.Constant({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", "NoNameMatchingMethodsInQueryable"); 
  $.Constant({Static:true , Public:false}, "EmptyEnumerable", "EmptyEnumerable"); 
  $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", "Argument_AdjustmentRulesNoNulls"); 
  $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", "Argument_AdjustmentRulesOutOfOrder"); 
  $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", "Argument_AdjustmentRulesAmbiguousOverlap"); 
  $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", "Argument_AdjustmentRulesrDaylightSavingTimeOverlap"); 
  $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange"); 
  $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", "Argument_AdjustmentRulesInvalidOverlap"); 
  $.Constant({Static:true , Public:false}, "Argument_ConvertMismatch", "Argument_ConvertMismatch"); 
  $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", "Argument_DateTimeHasTimeOfDay"); 
  $.Constant({Static:true , Public:false}, "Argument_DateTimeIsInvalid", "Argument_DateTimeIsInvalid"); 
  $.Constant({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", "Argument_DateTimeIsNotAmbiguous"); 
  $.Constant({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", "Argument_DateTimeOffsetIsNotAmbiguous"); 
  $.Constant({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", "Argument_DateTimeKindMustBeUnspecified"); 
  $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTicks", "Argument_DateTimeHasTicks"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidId", "Argument_InvalidId"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidSerializedString", "Argument_InvalidSerializedString"); 
  $.Constant({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", "Argument_InvalidREG_TZI_FORMAT"); 
  $.Constant({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", "Argument_OutOfOrderDateTimes"); 
  $.Constant({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", "Argument_TimeSpanHasSeconds"); 
  $.Constant({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", "Argument_TimeZoneInfoBadTZif"); 
  $.Constant({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", "Argument_TimeZoneInfoInvalidTZif"); 
  $.Constant({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", "Argument_TransitionTimesAreIdentical"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", "ArgumentOutOfRange_DayParam"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", "ArgumentOutOfRange_DayOfWeek"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", "ArgumentOutOfRange_MonthParam"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", "ArgumentOutOfRange_UtcOffset"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", "ArgumentOutOfRange_UtcOffsetAndDaylightDelta"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Week", "ArgumentOutOfRange_Week"); 
  $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", "InvalidTimeZone_InvalidRegistryData"); 
  $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", "InvalidTimeZone_InvalidWin32APIData"); 
  $.Constant({Static:true , Public:false}, "Security_CannotReadRegistryData", "Security_CannotReadRegistryData"); 
  $.Constant({Static:true , Public:false}, "Serialization_CorruptField", "Serialization_CorruptField"); 
  $.Constant({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", "Serialization_InvalidEscapeSequence"); 
  $.Constant({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", "TimeZoneNotFound_MissingRegistryData"); 
  $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", "ArgumentOutOfRange_DateTimeBadTicks"); 
  $.Constant({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", "PLINQ_CommonEnumerator_Current_NotStarted"); 
  $.Constant({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", "PLINQ_ExternalCancellationRequested"); 
  $.Constant({Static:true , Public:false}, "PLINQ_DisposeRequested", "PLINQ_DisposeRequested"); 
  $.Constant({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", "PLINQ_EnumerationPreviouslyFailed"); 
  $.Constant({Static:true , Public:false}, "ParallelPartitionable_NullReturn", "ParallelPartitionable_NullReturn"); 
  $.Constant({Static:true , Public:false}, "ParallelPartitionable_NullElement", "ParallelPartitionable_NullElement"); 
  $.Constant({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", "ParallelPartitionable_IncorretElementCount"); 
  $.Constant({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", "ParallelEnumerable_ToArray_DimensionRequired"); 
  $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", "ParallelEnumerable_WithQueryExecutionMode_InvalidMode"); 
  $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", "ParallelEnumerable_WithMergeOptions_InvalidOptions"); 
  $.Constant({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", "ParallelEnumerable_BinaryOpMustUseAsParallel"); 
  $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", "ParallelEnumerable_WithCancellation_TokenSourceDisposed"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", "ParallelQuery_InvalidAsOrderedCall"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", "ParallelQuery_InvalidNonGenericAsOrderedCall"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", "ParallelQuery_PartitionerNotOrderable"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", "ParallelQuery_DuplicateTaskScheduler"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", "ParallelQuery_DuplicateDOP"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", "ParallelQuery_DuplicateWithCancellation"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", "ParallelQuery_DuplicateExecutionMode"); 
  $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", "ParallelQuery_DuplicateMergeOptions"); 
  $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", "PartitionerQueryOperator_NullPartitionList"); 
  $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", "PartitionerQueryOperator_WrongNumberOfPartitions"); 
  $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", "PartitionerQueryOperator_NullPartition"); 
  $.Field({Static:true , Public:false}, "loader", $.Type); 
  $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Linq.Expressions.SRDescriptionAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x178A5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x178A4, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Linq.Expressions.SRCategoryAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14E90, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLocalizedString", 
    $sig.make(0x14E93, $.String, [$.String], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Linq.Expressions.SR", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x15058, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0x15051, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
    $sig.make(0x15055, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
    $sig.make(0x1505A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x15067, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x15061, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x15063, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x15065, $.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.Constant({Static:true , Public:false}, "MethodPreconditionViolated", "MethodPreconditionViolated"); 
  $.Constant({Static:true , Public:false}, "InvalidArgumentValue", "InvalidArgumentValue"); 
  $.Constant({Static:true , Public:false}, "NonEmptyCollectionRequired", "NonEmptyCollectionRequired"); 
  $.Constant({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", "ArgCntMustBeGreaterThanNameCnt"); 
  $.Constant({Static:true , Public:false}, "ReducibleMustOverrideReduce", "ReducibleMustOverrideReduce"); 
  $.Constant({Static:true , Public:false}, "MustReduceToDifferent", "MustReduceToDifferent"); 
  $.Constant({Static:true , Public:false}, "ReducedNotCompatible", "ReducedNotCompatible"); 
  $.Constant({Static:true , Public:false}, "SetterHasNoParams", "SetterHasNoParams"); 
  $.Constant({Static:true , Public:false}, "PropertyCannotHaveRefType", "PropertyCannotHaveRefType"); 
  $.Constant({Static:true , Public:false}, "IndexesOfSetGetMustMatch", "IndexesOfSetGetMustMatch"); 
  $.Constant({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", "AccessorsCannotHaveVarArgs"); 
  $.Constant({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", "AccessorsCannotHaveByRefArgs"); 
  $.Constant({Static:true , Public:false}, "BoundsCannotBeLessThanOne", "BoundsCannotBeLessThanOne"); 
  $.Constant({Static:true , Public:false}, "TypeMustNotBeByRef", "TypeMustNotBeByRef"); 
  $.Constant({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", "TypeDoesNotHaveConstructorForTheSignature"); 
  $.Constant({Static:true , Public:false}, "CountCannotBeNegative", "CountCannotBeNegative"); 
  $.Constant({Static:true , Public:false}, "ArrayTypeMustBeArray", "ArrayTypeMustBeArray"); 
  $.Constant({Static:true , Public:false}, "SetterMustBeVoid", "SetterMustBeVoid"); 
  $.Constant({Static:true , Public:false}, "PropertyTyepMustMatchSetter", "PropertyTyepMustMatchSetter"); 
  $.Constant({Static:true , Public:false}, "BothAccessorsMustBeStatic", "BothAccessorsMustBeStatic"); 
  $.Constant({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", "OnlyStaticFieldsHaveNullInstance"); 
  $.Constant({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", "OnlyStaticPropertiesHaveNullInstance"); 
  $.Constant({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", "OnlyStaticMethodsHaveNullInstance"); 
  $.Constant({Static:true , Public:false}, "PropertyTypeCannotBeVoid", "PropertyTypeCannotBeVoid"); 
  $.Constant({Static:true , Public:false}, "InvalidUnboxType", "InvalidUnboxType"); 
  $.Constant({Static:true , Public:false}, "ExpressionMustBeReadable", "ExpressionMustBeReadable"); 
  $.Constant({Static:true , Public:false}, "ExpressionMustBeWriteable", "ExpressionMustBeWriteable"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustNotHaveValueType", "ArgumentMustNotHaveValueType"); 
  $.Constant({Static:true , Public:false}, "MustBeReducible", "MustBeReducible"); 
  $.Constant({Static:true , Public:false}, "AllTestValuesMustHaveSameType", "AllTestValuesMustHaveSameType"); 
  $.Constant({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", "AllCaseBodiesMustHaveSameType"); 
  $.Constant({Static:true , Public:false}, "DefaultBodyMustBeSupplied", "DefaultBodyMustBeSupplied"); 
  $.Constant({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", "MethodBuilderDoesNotHaveTypeBuilder"); 
  $.Constant({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", "TypeMustBeDerivedFromSystemDelegate"); 
  $.Constant({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", "ArgumentTypeCannotBeVoid"); 
  $.Constant({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", "LabelMustBeVoidOrHaveExpression"); 
  $.Constant({Static:true , Public:false}, "LabelTypeMustBeVoid", "LabelTypeMustBeVoid"); 
  $.Constant({Static:true , Public:false}, "QuotedExpressionMustBeLambda", "QuotedExpressionMustBeLambda"); 
  $.Constant({Static:true , Public:false}, "VariableMustNotBeByRef", "VariableMustNotBeByRef"); 
  $.Constant({Static:true , Public:false}, "DuplicateVariable", "DuplicateVariable"); 
  $.Constant({Static:true , Public:false}, "StartEndMustBeOrdered", "StartEndMustBeOrdered"); 
  $.Constant({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", "FaultCannotHaveCatchOrFinally"); 
  $.Constant({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", "TryMustHaveCatchFinallyOrFault"); 
  $.Constant({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", "BodyOfCatchMustHaveSameTypeAsBodyOfTry"); 
  $.Constant({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", "ExtensionNodeMustOverrideProperty"); 
  $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", "UserDefinedOperatorMustBeStatic"); 
  $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", "UserDefinedOperatorMustNotBeVoid"); 
  $.Constant({Static:true , Public:false}, "CoercionOperatorNotDefined", "CoercionOperatorNotDefined"); 
  $.Constant({Static:true , Public:false}, "DynamicBinderResultNotAssignable", "DynamicBinderResultNotAssignable"); 
  $.Constant({Static:true , Public:false}, "DynamicObjectResultNotAssignable", "DynamicObjectResultNotAssignable"); 
  $.Constant({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", "DynamicBindingNeedsRestrictions"); 
  $.Constant({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", "BinderNotCompatibleWithCallSite"); 
  $.Constant({Static:true , Public:false}, "UnaryOperatorNotDefined", "UnaryOperatorNotDefined"); 
  $.Constant({Static:true , Public:false}, "BinaryOperatorNotDefined", "BinaryOperatorNotDefined"); 
  $.Constant({Static:true , Public:false}, "ReferenceEqualityNotDefined", "ReferenceEqualityNotDefined"); 
  $.Constant({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", "OperandTypesDoNotMatchParameters"); 
  $.Constant({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", "OverloadOperatorTypeDoesNotMatchConversionType"); 
  $.Constant({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", "ConversionIsNotSupportedForArithmeticTypes"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeArray", "ArgumentMustBeArray"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeBoolean", "ArgumentMustBeBoolean"); 
  $.Constant({Static:true , Public:false}, "EqualityMustReturnBoolean", "EqualityMustReturnBoolean"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", "ArgumentMustBeFieldInfoOrPropertInfo"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", "ArgumentMustBeFieldInfoOrPropertInfoOrMethod"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeInstanceMember", "ArgumentMustBeInstanceMember"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeInteger", "ArgumentMustBeInteger"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", "ArgumentMustBeArrayIndexType"); 
  $.Constant({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", "ArgumentMustBeSingleDimensionalArrayType"); 
  $.Constant({Static:true , Public:false}, "ArgumentTypesMustMatch", "ArgumentTypesMustMatch"); 
  $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", "CannotAutoInitializeValueTypeElementThroughProperty"); 
  $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", "CannotAutoInitializeValueTypeMemberThroughProperty"); 
  $.Constant({Static:true , Public:false}, "IncorrectTypeForTypeAs", "IncorrectTypeForTypeAs"); 
  $.Constant({Static:true , Public:false}, "CoalesceUsedOnNonNullType", "CoalesceUsedOnNonNullType"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", "ExpressionTypeCannotInitializeArrayType"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", "ExpressionTypeDoesNotMatchConstructorParameter"); 
  $.Constant({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", "ArgumentTypeDoesNotMatchMember"); 
  $.Constant({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", "ArgumentMemberNotDeclOnType"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", "ExpressionTypeDoesNotMatchMethodParameter"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", "ExpressionTypeDoesNotMatchParameter"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", "ExpressionTypeDoesNotMatchReturn"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", "ExpressionTypeDoesNotMatchAssignment"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", "ExpressionTypeDoesNotMatchLabel"); 
  $.Constant({Static:true , Public:false}, "ExpressionTypeNotInvocable", "ExpressionTypeNotInvocable"); 
  $.Constant({Static:true , Public:false}, "FieldNotDefinedForType", "FieldNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "InstanceFieldNotDefinedForType", "InstanceFieldNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "FieldInfoNotDefinedForType", "FieldInfoNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfIndexes", "IncorrectNumberOfIndexes"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", "IncorrectNumberOfLambdaArguments"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", "IncorrectNumberOfLambdaDeclarationParameters"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", "IncorrectNumberOfMethodCallArguments"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", "IncorrectNumberOfConstructorArguments"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", "IncorrectNumberOfMembersForGivenConstructor"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", "IncorrectNumberOfArgumentsForMembers"); 
  $.Constant({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", "LambdaTypeMustBeDerivedFromSystemDelegate"); 
  $.Constant({Static:true , Public:false}, "MemberNotFieldOrProperty", "MemberNotFieldOrProperty"); 
  $.Constant({Static:true , Public:false}, "MethodContainsGenericParameters", "MethodContainsGenericParameters"); 
  $.Constant({Static:true , Public:false}, "MethodIsGeneric", "MethodIsGeneric"); 
  $.Constant({Static:true , Public:false}, "MethodNotPropertyAccessor", "MethodNotPropertyAccessor"); 
  $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveGetter", "PropertyDoesNotHaveGetter"); 
  $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveSetter", "PropertyDoesNotHaveSetter"); 
  $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", "PropertyDoesNotHaveAccessor"); 
  $.Constant({Static:true , Public:false}, "NotAMemberOfType", "NotAMemberOfType"); 
  $.Constant({Static:true , Public:false}, "OperatorNotImplementedForType", "OperatorNotImplementedForType"); 
  $.Constant({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", "ParameterExpressionNotValidAsDelegate"); 
  $.Constant({Static:true , Public:false}, "PropertyNotDefinedForType", "PropertyNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "InstancePropertyNotDefinedForType", "InstancePropertyNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", "InstancePropertyWithoutParameterNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", "InstancePropertyWithSpecifiedParametersNotDefinedForType"); 
  $.Constant({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", "InstanceAndMethodTypeMismatch"); 
  $.Constant({Static:true , Public:false}, "TypeContainsGenericParameters", "TypeContainsGenericParameters"); 
  $.Constant({Static:true , Public:false}, "TypeIsGeneric", "TypeIsGeneric"); 
  $.Constant({Static:true , Public:false}, "TypeMissingDefaultConstructor", "TypeMissingDefaultConstructor"); 
  $.Constant({Static:true , Public:false}, "ListInitializerWithZeroMembers", "ListInitializerWithZeroMembers"); 
  $.Constant({Static:true , Public:false}, "ElementInitializerMethodNotAdd", "ElementInitializerMethodNotAdd"); 
  $.Constant({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", "ElementInitializerMethodNoRefOutParam"); 
  $.Constant({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", "ElementInitializerMethodWithZeroArgs"); 
  $.Constant({Static:true , Public:false}, "ElementInitializerMethodStatic", "ElementInitializerMethodStatic"); 
  $.Constant({Static:true , Public:false}, "TypeNotIEnumerable", "TypeNotIEnumerable"); 
  $.Constant({Static:true , Public:false}, "TypeParameterIsNotDelegate", "TypeParameterIsNotDelegate"); 
  $.Constant({Static:true , Public:false}, "UnexpectedCoalesceOperator", "UnexpectedCoalesceOperator"); 
  $.Constant({Static:true , Public:false}, "InvalidCast", "InvalidCast"); 
  $.Constant({Static:true , Public:false}, "UnhandledBinary", "UnhandledBinary"); 
  $.Constant({Static:true , Public:false}, "UnhandledBinding", "UnhandledBinding"); 
  $.Constant({Static:true , Public:false}, "UnhandledBindingType", "UnhandledBindingType"); 
  $.Constant({Static:true , Public:false}, "UnhandledConvert", "UnhandledConvert"); 
  $.Constant({Static:true , Public:false}, "UnhandledExpressionType", "UnhandledExpressionType"); 
  $.Constant({Static:true , Public:false}, "UnhandledUnary", "UnhandledUnary"); 
  $.Constant({Static:true , Public:false}, "UnknownBindingType", "UnknownBindingType"); 
  $.Constant({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", "UserDefinedOpMustHaveConsistentTypes"); 
  $.Constant({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", "UserDefinedOpMustHaveValidReturnType"); 
  $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", "LogicalOperatorMustHaveBooleanOperators"); 
  $.Constant({Static:true , Public:false}, "MethodDoesNotExistOnType", "MethodDoesNotExistOnType"); 
  $.Constant({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", "MethodWithArgsDoesNotExistOnType"); 
  $.Constant({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", "GenericMethodWithArgsDoesNotExistOnType"); 
  $.Constant({Static:true , Public:false}, "MethodWithMoreThanOneMatch", "MethodWithMoreThanOneMatch"); 
  $.Constant({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", "PropertyWithMoreThanOneMatch"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", "IncorrectNumberOfTypeArgsForFunc"); 
  $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", "IncorrectNumberOfTypeArgsForAction"); 
  $.Constant({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", "ArgumentCannotBeOfTypeVoid"); 
  $.Constant({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", "AmbiguousMatchInExpandoObject"); 
  $.Constant({Static:true , Public:false}, "SameKeyExistsInExpando", "SameKeyExistsInExpando"); 
  $.Constant({Static:true , Public:false}, "KeyDoesNotExistInExpando", "KeyDoesNotExistInExpando"); 
  $.Constant({Static:true , Public:false}, "NoOrInvalidRuleProduced", "NoOrInvalidRuleProduced"); 
  $.Constant({Static:true , Public:false}, "FirstArgumentMustBeCallSite", "FirstArgumentMustBeCallSite"); 
  $.Constant({Static:true , Public:false}, "BindingCannotBeNull", "BindingCannotBeNull"); 
  $.Constant({Static:true , Public:false}, "InvalidOperation", "InvalidOperation"); 
  $.Constant({Static:true , Public:false}, "OutOfRange", "OutOfRange"); 
  $.Constant({Static:true , Public:false}, "QueueEmpty", "QueueEmpty"); 
  $.Constant({Static:true , Public:false}, "LabelTargetAlreadyDefined", "LabelTargetAlreadyDefined"); 
  $.Constant({Static:true , Public:false}, "LabelTargetUndefined", "LabelTargetUndefined"); 
  $.Constant({Static:true , Public:false}, "ControlCannotLeaveFinally", "ControlCannotLeaveFinally"); 
  $.Constant({Static:true , Public:false}, "ControlCannotLeaveFilterTest", "ControlCannotLeaveFilterTest"); 
  $.Constant({Static:true , Public:false}, "AmbiguousJump", "AmbiguousJump"); 
  $.Constant({Static:true , Public:false}, "ControlCannotEnterTry", "ControlCannotEnterTry"); 
  $.Constant({Static:true , Public:false}, "ControlCannotEnterExpression", "ControlCannotEnterExpression"); 
  $.Constant({Static:true , Public:false}, "NonLocalJumpWithValue", "NonLocalJumpWithValue"); 
  $.Constant({Static:true , Public:false}, "ExtensionNotReduced", "ExtensionNotReduced"); 
  $.Constant({Static:true , Public:false}, "CannotCompileConstant", "CannotCompileConstant"); 
  $.Constant({Static:true , Public:false}, "CannotCompileDynamic", "CannotCompileDynamic"); 
  $.Constant({Static:true , Public:false}, "InvalidLvalue", "InvalidLvalue"); 
  $.Constant({Static:true , Public:false}, "InvalidMemberType", "InvalidMemberType"); 
  $.Constant({Static:true , Public:false}, "UnknownLiftType", "UnknownLiftType"); 
  $.Constant({Static:true , Public:false}, "InvalidOutputDir", "InvalidOutputDir"); 
  $.Constant({Static:true , Public:false}, "InvalidAsmNameOrExtension", "InvalidAsmNameOrExtension"); 
  $.Constant({Static:true , Public:false}, "CollectionReadOnly", "CollectionReadOnly"); 
  $.Constant({Static:true , Public:false}, "IllegalNewGenericParams", "IllegalNewGenericParams"); 
  $.Constant({Static:true , Public:false}, "UndefinedVariable", "UndefinedVariable"); 
  $.Constant({Static:true , Public:false}, "CannotCloseOverByRef", "CannotCloseOverByRef"); 
  $.Constant({Static:true , Public:false}, "UnexpectedVarArgsCall", "UnexpectedVarArgsCall"); 
  $.Constant({Static:true , Public:false}, "RethrowRequiresCatch", "RethrowRequiresCatch"); 
  $.Constant({Static:true , Public:false}, "TryNotAllowedInFilter", "TryNotAllowedInFilter"); 
  $.Constant({Static:true , Public:false}, "MustRewriteToSameNode", "MustRewriteToSameNode"); 
  $.Constant({Static:true , Public:false}, "MustRewriteChildToSameType", "MustRewriteChildToSameType"); 
  $.Constant({Static:true , Public:false}, "MustRewriteWithoutMethod", "MustRewriteWithoutMethod"); 
  $.Constant({Static:true , Public:false}, "InvalidNullValue", "InvalidNullValue"); 
  $.Constant({Static:true , Public:false}, "InvalidObjectType", "InvalidObjectType"); 
  $.Constant({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", "TryNotSupportedForMethodsWithRefArgs"); 
  $.Constant({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", "TryNotSupportedForValueTypeInstances"); 
  $.Constant({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", "CollectionModifiedWhileEnumerating"); 
  $.Constant({Static:true , Public:false}, "EnumerationIsDone", "EnumerationIsDone"); 
  $.Constant({Static:true , Public:false}, "HomogenousAppDomainRequired", "HomogenousAppDomainRequired"); 
  $.Constant({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", "TestValueTypeDoesNotMatchComparisonMethodParameter"); 
  $.Constant({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", "SwitchValueTypeDoesNotMatchComparisonMethodParameter"); 
  $.Constant({Static:true , Public:false}, "InvalidMetaObjectCreated", "InvalidMetaObjectCreated"); 
  $.Constant({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", "PdbGeneratorNeedsExpressionCompiler"); 
  $.Field({Static:true , Public:false}, "loader", $.Type); 
  $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

});

