/* Generated by JSIL v0.6.0 build 23610. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm0B = JSIL.DeclareAssembly("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("System");
JSIL.MakeStaticClass("System.ExternDll", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:true }, "Activeds", "activeds.dll"); 
  $.Constant({Static:true , Public:true }, "Advapi32", "advapi32.dll"); 
  $.Constant({Static:true , Public:true }, "Comctl32", "comctl32.dll"); 
  $.Constant({Static:true , Public:true }, "Comdlg32", "comdlg32.dll"); 
  $.Constant({Static:true , Public:true }, "Gdi32", "gdi32.dll"); 
  $.Constant({Static:true , Public:true }, "Gdiplus", "gdiplus.dll"); 
  $.Constant({Static:true , Public:true }, "Hhctrl", "hhctrl.ocx"); 
  $.Constant({Static:true , Public:true }, "Imm32", "imm32.dll"); 
  $.Constant({Static:true , Public:true }, "Kernel32", "kernel32.dll"); 
  $.Constant({Static:true , Public:true }, "Loadperf", "Loadperf.dll"); 
  $.Constant({Static:true , Public:true }, "Mscoree", "mscoree.dll"); 
  $.Constant({Static:true , Public:true }, "Clr", "clr.dll"); 
  $.Constant({Static:true , Public:true }, "Msi", "msi.dll"); 
  $.Constant({Static:true , Public:true }, "Mqrt", "mqrt.dll"); 
  $.Constant({Static:true , Public:true }, "Ntdll", "ntdll.dll"); 
  $.Constant({Static:true , Public:true }, "Ole32", "ole32.dll"); 
  $.Constant({Static:true , Public:true }, "Oleacc", "oleacc.dll"); 
  $.Constant({Static:true , Public:true }, "Oleaut32", "oleaut32.dll"); 
  $.Constant({Static:true , Public:true }, "Olepro32", "olepro32.dll"); 
  $.Constant({Static:true , Public:true }, "PerfCounter", "perfcounter.dll"); 
  $.Constant({Static:true , Public:true }, "Powrprof", "Powrprof.dll"); 
  $.Constant({Static:true , Public:true }, "Psapi", "psapi.dll"); 
  $.Constant({Static:true , Public:true }, "Shell32", "shell32.dll"); 
  $.Constant({Static:true , Public:true }, "Shfolder", "shfolder.dll"); 
  $.Constant({Static:true , Public:true }, "User32", "user32.dll"); 
  $.Constant({Static:true , Public:true }, "Uxtheme", "uxtheme.dll"); 
  $.Constant({Static:true , Public:true }, "WinMM", "winmm.dll"); 
  $.Constant({Static:true , Public:true }, "Winspool", "winspool.drv"); 
  $.Constant({Static:true , Public:true }, "Wtsapi32", "wtsapi32.dll"); 
  $.Constant({Static:true , Public:true }, "Version", "version.dll"); 
  $.Constant({Static:true , Public:true }, "Vsassert", "vsassert.dll"); 
  $.Constant({Static:true , Public:true }, "Fxassert", "Fxassert.dll"); 
  $.Constant({Static:true , Public:true }, "Shlwapi", "shlwapi.dll"); 
  $.Constant({Static:true , Public:true }, "Crypt32", "crypt32.dll"); 
  $.Constant({Static:true , Public:false}, "Odbc32", "odbc32.dll"); 
  $.Constant({Static:true , Public:false}, "SNI", "System.Data.dll"); 
  $.Constant({Static:true , Public:false}, "OciDll", "oci.dll"); 
  $.Constant({Static:true , Public:false}, "OraMtsDll", "oramts.dll"); 
});

JSIL.DeclareNamespace("System.Internal");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Internal.HandleCollector", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14178, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Add", 
    $sig.make(0x1416B, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "add_HandleAdded", 
    $sig.make(0x14163, null, [$asm0B.TypeRef("System.Internal.HandleChangeEventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "add_HandleRemoved", 
    $sig.make(0x14167, null, [$asm0B.TypeRef("System.Internal.HandleChangeEventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RegisterType", 
    $sig.make(0x14174, $.Int32, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Remove", 
    $sig.make(0x14176, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "remove_HandleAdded", 
    $sig.make(0x14165, null, [$asm0B.TypeRef("System.Internal.HandleChangeEventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "remove_HandleRemoved", 
    $sig.make(0x14169, null, [$asm0B.TypeRef("System.Internal.HandleChangeEventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ResumeCollect", 
    $sig.make(0x1416F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SuspendCollect", 
    $sig.make(0x1416D, null, [], [])
  );

  $.Field({Static:true , Public:false}, "handleTypes", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Internal.HandleCollector/HandleType")])); 
  $.Field({Static:true , Public:false}, "handleTypeCount", $.Int32); 
  $.Field({Static:true , Public:false}, "suspendCount", $.Int32); 
  $.Field({Static:true , Public:false}, "HandleAdded", $asm0B.TypeRef("System.Internal.HandleChangeEventHandler")); 
  $.Field({Static:true , Public:false}, "HandleRemoved", $asm0B.TypeRef("System.Internal.HandleChangeEventHandler")); 
  $.Field({Static:true , Public:false}, "internalSyncObject", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Internal.HandleCollector/HandleType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14C82, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Add", 
    $sig.make(0x14C84, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHandleCount", 
    $sig.make(0x14C8D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "NeedCollection", 
    $sig.make(0x14C8F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Remove", 
    $sig.make(0x14C91, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String); 
  $.Field({Static:false, Public:false}, "initialThreshHold", $.Int32); 
  $.Field({Static:false, Public:false}, "threshHold", $.Int32); 
  $.Field({Static:false, Public:false}, "handleCount", $.Int32); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "deltaPercent", $.Int32); 
});

JSIL.MakeDelegate("System.Internal.HandleChangeEventHandler", false, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Internal.DebugHandleTracker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x140B9, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CheckLeaks", 
    $sig.make(0x140BB, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IgnoreCurrentHandlesAsLeaks", 
    $sig.make(0x140BA, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Initialize", 
    $sig.make(0x140BC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnHandleAdd", 
    $sig.make(0x140BD, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnHandleRemove", 
    $sig.make(0x140CB, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.Field({Static:true , Public:false}, "handleTypes", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "tracker", $.Type); 
  $.Field({Static:true , Public:false}, "internalSyncObject", $.Object); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Internal.DebugHandleTracker/HandleType", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A75, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14A76, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CheckLeaks", 
    $sig.make(0x14A77, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ComputeHash", 
    $sig.make(0x14A7A, $.Int32, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IgnoreCurrentHandlesAsLeaks", 
    $sig.make(0x14A79, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x14A7C, $.Boolean, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Constant({Static:true , Public:false}, "BUCKETS", 10); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String); 
  $.Field({Static:false, Public:false}, "handleCount", $.Int32); 
  $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Internal.DebugHandleTracker/HandleType/HandleEntry")])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Internal.DebugHandleTracker/HandleType/HandleEntry", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14DE9, null, [$.Type, $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToString", 
    $sig.make(0x14DEA, $.String, [$asm0B.TypeRef("System.Internal.DebugHandleTracker/HandleType")], [])
  );

  $.Field({Static:false, Public:true , ReadOnly:true }, "handle", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "next", $.Type); 
  $.Field({Static:false, Public:true , ReadOnly:true }, "callStack", $.String); 
  $.Field({Static:false, Public:true }, "ignorableAsLeak", $.Boolean); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Internal.DebugHandleTracker/HandleType/HandleEntry/StackParser", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14DF7, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ContainsString", 
    $sig.make(0x14DF8, $.Boolean, [$.String, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DiscardNext", 
    $sig.make(0x14DF9, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DiscardTo", 
    $sig.make(0x14DFA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLine", 
    $sig.make(0x14DFB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x14DFC, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Truncate", 
    $sig.make(0x14DFD, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "releventStack", $.String); 
  $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "$length", $.Int32); 
});

JSIL.DeclareNamespace("System.ComponentModel");
JSIL.MakeStaticClass("System.ComponentModel.CompModSwitches", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "get_HandleLeak", 
    $sig.make(0x140F2, $asm07.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_TraceCollect", 
    $sig.make(0x140F8, $asm07.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
  );

  $.Field({Static:true , Public:false}, "handleLeak", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Field({Static:true , Public:false}, "traceCollect", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Property({Static:true , Public:true }, "HandleLeak", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

  $.Property({Static:true , Public:true }, "TraceCollect", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

});

JSIL.MakeStaticClass("System.ComponentModel.CoreSwitches", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "get_PerfTrack", 
    $sig.make(0x140FE, $asm07.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
  );

  $.Field({Static:true , Public:false}, "perfTrack", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Property({Static:true , Public:true }, "PerfTrack", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.InvariantComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14101, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x14102, $.Int32, [$.Object, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "m_compareInfo", $asm06.TypeRef("System.Globalization.CompareInfo")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type); 
  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.DeclareNamespace("System.Drawing");
JSIL.MakeStaticClass("System.Drawing.ClientUtils", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "GetBitCount", 
    $sig.make(0x1410C, $.Int32, [$.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsCriticalException", 
    $sig.make(0x1410A, $.Boolean, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsEnumValid", 
    $sig.make(0x1410D, $.Boolean, [
        $asm06.TypeRef("System.Enum"), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsEnumValid", 
    $sig.make(0x1410E, $.Boolean, [
        $asm06.TypeRef("System.Enum"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsEnumValid_Masked", 
    $sig.make(0x1410F, $.Boolean, [
        $asm06.TypeRef("System.Enum"), $.Int32, 
        $.UInt32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsEnumValid_NotSequential", 
    $sig.make(0x14110, $.Boolean, [
        $asm06.TypeRef("System.Enum"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsSecurityOrCriticalException", 
    $sig.make(0x1410B, $.Boolean, [$asm06.TypeRef("System.Exception")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.ClientUtils/WeakRefCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1427E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1427F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14292, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x1428C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x1428D, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Copy", 
    $sig.make(0x14289, null, [
        $.Type, $.Int32, 
        $.Type, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14293, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateWeakRefObject", 
    $sig.make(0x14287, $asm0B.TypeRef("System.Drawing.ClientUtils/WeakRefCollection/WeakRefObject"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x14281, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x1427A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
    $sig.make(0x14274, $asm06.TypeRef("System.Collections.ArrayList"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x14279, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x1427C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14277, $.Object, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RefCheckThreshold", 
    $sig.make(0x14275, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x14294, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x14282, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x14290, $.Int32, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Insert", 
    $sig.make(0x14291, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x1428F, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x1428E, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemoveByHashCode", 
    $sig.make(0x1428B, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScavengeReferences", 
    $sig.make(0x14280, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x14278, null, [$.Int32, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RefCheckThreshold", 
    $sig.make(0x14276, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x1427D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x1427B, $.Object, [], [])
  );

  $.Field({Static:false, Public:false}, "refCheckThreshold", $.Int32); 
  $.Field({Static:false, Public:false}, "_innerList", $asm06.TypeRef("System.Collections.ArrayList")); 
  $.Property({Static:false, Public:false}, "InnerList", $asm06.TypeRef("System.Collections.ArrayList"));

  $.Property({Static:false, Public:true }, "RefCheckThreshold", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Collections.IList"), $asm06.TypeRef("System.Collections.ICollection"), 
      $asm06.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.ClientUtils/WeakRefCollection/WeakRefObject", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x143BA, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x143BF, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_IsAlive", 
    $sig.make(0x143B6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Target", 
    $sig.make(0x143B8, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x143BC, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "hash", $.Int32); 
  $.Field({Static:false, Public:false}, "weakHolder", $asm06.TypeRef("System.WeakReference")); 
  $.Property({Static:false, Public:false}, "IsAlive", $.Boolean);

  $.Property({Static:false, Public:false}, "Target", $.Object);

});

JSIL.DeclareNamespace("System.Drawing.Internal");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.DbgUtil", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14141, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AssertFinalization", 
    $sig.make(0x14133, null, [$.Object, $.Boolean], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
    $sig.make(0x14134, null, [$.Boolean, $.String], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
    $sig.make(0x14135, null, [
        $.Boolean, $.String, 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
    $sig.make(0x14136, null, [
        $.Boolean, $.String, 
        $.Object, $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
    $sig.make(0x14137, null, [
        $.Boolean, $.String, 
        $.Object, $.Object, 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
    $sig.make(0x14138, null, [
        $.Boolean, $.String, 
        $.Object, $.Object, 
        $.Object, $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
    $sig.make(0x14139, null, [
        $.Boolean, $.String, 
        $.Object, $.Object, 
        $.Object, $.Object, 
        $.Object
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:false}, "AssertWin32Impl", 
    $sig.make(0x1413A, null, [
        $.Boolean, $.String, 
        $jsilcore.TypeRef("System.Array", [$.Object])
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

  $.ExternalMethod({Static:true , Public:true }, "FormatMessage", 
    $sig.make(0x14132, $.Int32, [
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.Text.StringBuilder"), $.Int32, 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_StackTrace", 
    $sig.make(0x14130, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetLastErrorStr", 
    $sig.make(0x1413B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetUserDefaultLCID", 
    $sig.make(0x14131, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCriticalException", 
    $sig.make(0x1413C, $.Boolean, [$asm06.TypeRef("System.Exception")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StackFramesToStr", 
    $sig.make(0x1413D, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StackFramesToStr", 
    $sig.make(0x1413E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StackTraceToStr", 
    $sig.make(0x1413F, $.String, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StackTraceToStr", 
    $sig.make(0x14140, $.String, [$.String], [])
  );

  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", 256); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_DEFAULT", 4608); 
  $.Field({Static:true , Public:true }, "gdipInitMaxFrameCount", $.Int32, 8); 
  $.Field({Static:true , Public:true }, "gdiUseMaxFrameCount", $.Int32, 8); 
  $.Field({Static:true , Public:true }, "finalizeMaxFrameCount", $.Int32, 5); 
  $.Property({Static:true , Public:true }, "StackTrace", $.String);

});

JSIL.MakeEnum(
  "System.Drawing.Internal.ApplyGraphicsProperties", false, {
    None: 0, 
    Clipping: 1, 
    TranslateTransform: 2, 
    All: 3
  }, true
);

JSIL.MakeInterface(
  "System.Drawing.IDeviceContext", true, [], function ($) {
    $.Method({}, "GetHdc", $sig.make(0x7744, $asm06.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "ReleaseHdc", $sig.make(0x7745, null, [], []));
  }, [$asm06.TypeRef("System.IDisposable")]);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Internal.DeviceContext", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1419D, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1419E, null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
    $sig.make(0x14195, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CacheInitialState", 
    $sig.make(0x14199, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateDC", 
    $sig.make(0x1419F, $.Type, [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateIC", 
    $sig.make(0x141A0, $.Type, [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DeleteObject", 
    $sig.make(0x1419B, null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Internal.GdiObjectType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x141A5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x141A6, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x141B3, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x141A4, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromCompatibleDC", 
    $sig.make(0x141A1, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
    $sig.make(0x141A2, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHwnd", 
    $sig.make(0x141A3, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DeviceContextType", 
    $sig.make(0x14190, $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GraphicsMode", 
    $sig.make(0x14193, $asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Hdc", 
    $sig.make(0x14191, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x141B5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
    $sig.make(0x141B0, null, [$asm0B.TypeRef("System.Drawing.Internal.WindowsRegion")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
    $sig.make(0x14197, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RestoreHdc", 
    $sig.make(0x141AD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SaveHdc", 
    $sig.make(0x141AE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x141AF, null, [$asm0B.TypeRef("System.Drawing.Internal.WindowsRegion")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetGraphicsMode", 
    $sig.make(0x141AC, $asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode"), [$asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDeviceContext.GetHdc", 
    $sig.make(0x141A8, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDeviceContext.ReleaseHdc", 
    $sig.make(0x141AA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x141B1, null, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "hDC", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "dcType", $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType")); 
  $.Field({Static:false, Public:false}, "Disposing", $asm06.TypeRef("System.EventHandler")); 
  $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
  $.Field({Static:false, Public:false}, "hWnd", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hInitialPen", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hInitialBrush", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hInitialBmp", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hInitialFont", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hCurrentPen", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hCurrentBrush", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hCurrentBmp", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hCurrentFont", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "contextStack", $asm06.TypeRef("System.Collections.Stack")); 
  $.Property({Static:false, Public:true }, "DeviceContextType", $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType"));

  $.Property({Static:false, Public:true }, "Hdc", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "GraphicsMode", $asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode"));

  $.ImplementInterfaces($asm0B.TypeRef("System.Drawing.IDeviceContext"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.DeviceContext/GraphicsState", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A9C, null, [], [])
  );

  $.Field({Static:false, Public:false}, "hBrush", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hFont", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hPen", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "hBitmap", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeStaticClass("System.Drawing.Internal.DeviceContexts", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "AddDeviceContext", 
    $sig.make(0x1425B, null, [$asm0B.TypeRef("System.Drawing.Internal.DeviceContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnDcDisposing", 
    $sig.make(0x1425C, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RemoveDeviceContext", 
    $sig.make(0x1425D, null, [$asm0B.TypeRef("System.Drawing.Internal.DeviceContext")], [])
  );

  $.Field({Static:true , Public:false}, "activeDeviceContexts", $asm0B.TypeRef("System.Drawing.ClientUtils/WeakRefCollection"))
    .Attribute($asm06.TypeRef("System.ThreadStaticAttribute")); 
});

JSIL.MakeEnum(
  "System.Drawing.Internal.DeviceContextGraphicsMode", false, {
    ModifyWorldIdentity: 1, 
    Compatible: 1, 
    Advanced: 2
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Internal.DeviceContextType", false, {
    Unknown: 0, 
    Display: 1, 
    NCWindow: 2, 
    NamedDevice: 3, 
    Information: 4, 
    Memory: 5, 
    Metafile: 6
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Internal.GdiObjectType", false, {
    Pen: 1, 
    Brush: 2, 
    DisplayDC: 3, 
    MetafileDC: 4, 
    Palette: 5, 
    Font: 6, 
    Bitmap: 7, 
    Region: 8, 
    Metafile: 9, 
    MemoryDC: 10, 
    ExtendedPen: 11, 
    EnhancedMetafileDC: 12, 
    EnhMetafile: 13, 
    ColorSpace: 14
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Internal.WindowsRegion", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x141CB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x141CD, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x141D3, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x141DA, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CombineRegion", 
    $sig.make(0x141DC, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [
        $.Type, $.Type, 
        $asm0B.TypeRef("System.Drawing.Internal.RegionCombineMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateRegion", 
    $sig.make(0x141E2, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x141E3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x141E5, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x141E7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHregion", 
    $sig.make(0x141D5, $.Type, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromRegion", 
    $sig.make(0x141D7, $.Type, [$asm0B.TypeRef("System.Drawing.Region"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HRegion", 
    $sig.make(0x141C9, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInfinite", 
    $sig.make(0x141CA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToRectangle", 
    $sig.make(0x141E9, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.Field({Static:false, Public:false}, "nativeHandle", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "ownHandle", $.Boolean); 
  $.Property({Static:false, Public:true }, "HRegion", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "IsInfinite", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.Internal.RegionCombineMode", false, {
    AND: 1, 
    MIN: 1, 
    OR: 2, 
    XOR: 3, 
    DIFF: 4, 
    MAX: 5, 
    COPY: 5
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Internal.WindowsGraphics", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1429B, null, [$asm0B.TypeRef("System.Drawing.Internal.DeviceContext")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateMeasurementWindowsGraphics", 
    $sig.make(0x142EB, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x142F1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x142F2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x142F0, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromGraphics", 
    $sig.make(0x142EE, $.Type, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromGraphics", 
    $sig.make(0x142EF, $.Type, [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Internal.ApplyGraphicsProperties")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
    $sig.make(0x142ED, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHwnd", 
    $sig.make(0x142EC, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DeviceContext", 
    $sig.make(0x1429A, $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "GetHdc", 
    $sig.make(0x142F3, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReleaseHdc", 
    $sig.make(0x142F4, null, [], [])
  );

  $.Field({Static:false, Public:false}, "dc", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext")); 
  $.Field({Static:false, Public:false}, "disposeDc", $.Boolean); 
  $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Property({Static:false, Public:true }, "DeviceContext", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"));

  $.ImplementInterfaces($asm0B.TypeRef("System.Drawing.IDeviceContext"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1420F, null, [], [])
  );

  $.Constant({Static:true , Public:true }, "MaxTextLengthInWin9x", 8192); 
  $.Constant({Static:true , Public:true }, "DT_TOP", 0); 
  $.Constant({Static:true , Public:true }, "DT_LEFT", 0); 
  $.Constant({Static:true , Public:true }, "DT_CENTER", 1); 
  $.Constant({Static:true , Public:true }, "DT_RIGHT", 2); 
  $.Constant({Static:true , Public:true }, "DT_VCENTER", 4); 
  $.Constant({Static:true , Public:true }, "DT_BOTTOM", 8); 
  $.Constant({Static:true , Public:true }, "DT_WORDBREAK", 16); 
  $.Constant({Static:true , Public:true }, "DT_SINGLELINE", 32); 
  $.Constant({Static:true , Public:true }, "DT_EXPANDTABS", 64); 
  $.Constant({Static:true , Public:true }, "DT_TABSTOP", 128); 
  $.Constant({Static:true , Public:true }, "DT_NOCLIP", 256); 
  $.Constant({Static:true , Public:true }, "DT_EXTERNALLEADING", 512); 
  $.Constant({Static:true , Public:true }, "DT_CALCRECT", 1024); 
  $.Constant({Static:true , Public:true }, "DT_NOPREFIX", 2048); 
  $.Constant({Static:true , Public:true }, "DT_INTERNAL", 4096); 
  $.Constant({Static:true , Public:true }, "DT_EDITCONTROL", 8192); 
  $.Constant({Static:true , Public:true }, "DT_PATH_ELLIPSIS", 16384); 
  $.Constant({Static:true , Public:true }, "DT_END_ELLIPSIS", 32768); 
  $.Constant({Static:true , Public:true }, "DT_MODIFYSTRING", 65536); 
  $.Constant({Static:true , Public:true }, "DT_RTLREADING", 131072); 
  $.Constant({Static:true , Public:true }, "DT_WORD_ELLIPSIS", 262144); 
  $.Constant({Static:true , Public:true }, "DT_NOFULLWIDTHCHARBREAK", 524288); 
  $.Constant({Static:true , Public:true }, "DT_HIDEPREFIX", 1048576); 
  $.Constant({Static:true , Public:true }, "DT_PREFIXONLY", 2097152); 
  $.Constant({Static:true , Public:true }, "DIB_RGB_COLORS", 0); 
  $.Constant({Static:true , Public:true }, "BI_BITFIELDS", 3); 
  $.Constant({Static:true , Public:true }, "BI_RGB", 0); 
  $.Constant({Static:true , Public:true }, "BITMAPINFO_MAX_COLORSIZE", 256); 
  $.Constant({Static:true , Public:true }, "SPI_GETICONTITLELOGFONT", 31); 
  $.Constant({Static:true , Public:true }, "SPI_GETNONCLIENTMETRICS", 41); 
  $.Constant({Static:true , Public:true }, "DEFAULT_GUI_FONT", 17); 
  $.Constant({Static:true , Public:true }, "HOLLOW_BRUSH", 5); 
  $.Constant({Static:true , Public:true }, "BITSPIXEL", 12); 
  $.Constant({Static:true , Public:true }, "ALTERNATE", 1); 
  $.Constant({Static:true , Public:true }, "WINDING", 2); 
  $.Constant({Static:true , Public:true }, "SRCCOPY", 13369376); 
  $.Constant({Static:true , Public:true }, "SRCPAINT", 15597702); 
  $.Constant({Static:true , Public:true }, "SRCAND", 8913094); 
  $.Constant({Static:true , Public:true }, "SRCINVERT", 6684742); 
  $.Constant({Static:true , Public:true }, "SRCERASE", 4457256); 
  $.Constant({Static:true , Public:true }, "NOTSRCCOPY", 3342344); 
  $.Constant({Static:true , Public:true }, "NOTSRCERASE", 1114278); 
  $.Constant({Static:true , Public:true }, "MERGECOPY", 12583114); 
  $.Constant({Static:true , Public:true }, "MERGEPAINT", 12255782); 
  $.Constant({Static:true , Public:true }, "PATCOPY", 15728673); 
  $.Constant({Static:true , Public:true }, "PATPAINT", 16452105); 
  $.Constant({Static:true , Public:true }, "PATINVERT", 5898313); 
  $.Constant({Static:true , Public:true }, "DSTINVERT", 5570569); 
  $.Constant({Static:true , Public:true }, "BLACKNESS", 66); 
  $.Constant({Static:true , Public:true }, "WHITENESS", 16711778); 
  $.Constant({Static:true , Public:true }, "CAPTUREBLT", 1073741824); 
  $.Constant({Static:true , Public:true }, "FW_DONTCARE", 0); 
  $.Constant({Static:true , Public:true }, "FW_NORMAL", 400); 
  $.Constant({Static:true , Public:true }, "FW_BOLD", 700); 
  $.Constant({Static:true , Public:true }, "ANSI_CHARSET", 0); 
  $.Constant({Static:true , Public:true }, "DEFAULT_CHARSET", 1); 
  $.Constant({Static:true , Public:true }, "OUT_DEFAULT_PRECIS", 0); 
  $.Constant({Static:true , Public:true }, "OUT_TT_PRECIS", 4); 
  $.Constant({Static:true , Public:true }, "OUT_TT_ONLY_PRECIS", 7); 
  $.Constant({Static:true , Public:true }, "CLIP_DEFAULT_PRECIS", 0); 
  $.Constant({Static:true , Public:true }, "DEFAULT_QUALITY", 0); 
  $.Constant({Static:true , Public:true }, "DRAFT_QUALITY", 1); 
  $.Constant({Static:true , Public:true }, "PROOF_QUALITY", 2); 
  $.Constant({Static:true , Public:true }, "NONANTIALIASED_QUALITY", 3); 
  $.Constant({Static:true , Public:true }, "ANTIALIASED_QUALITY", 4); 
  $.Constant({Static:true , Public:true }, "CLEARTYPE_QUALITY", 5); 
  $.Constant({Static:true , Public:true }, "CLEARTYPE_NATURAL_QUALITY", 6); 
  $.Constant({Static:true , Public:true }, "OBJ_PEN", 1); 
  $.Constant({Static:true , Public:true }, "OBJ_BRUSH", 2); 
  $.Constant({Static:true , Public:true }, "OBJ_DC", 3); 
  $.Constant({Static:true , Public:true }, "OBJ_METADC", 4); 
  $.Constant({Static:true , Public:true }, "OBJ_FONT", 6); 
  $.Constant({Static:true , Public:true }, "OBJ_BITMAP", 7); 
  $.Constant({Static:true , Public:true }, "OBJ_MEMDC", 10); 
  $.Constant({Static:true , Public:true }, "OBJ_EXTPEN", 11); 
  $.Constant({Static:true , Public:true }, "OBJ_ENHMETADC", 12); 
  $.Constant({Static:true , Public:true }, "BS_SOLID", 0); 
  $.Constant({Static:true , Public:true }, "BS_HATCHED", 2); 
  $.Constant({Static:true , Public:true }, "CP_ACP", 0); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", 256); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_DEFAULT", 4608); 
});

JSIL.MakeEnum(
  "System.Drawing.Internal.IntNativeMethods/RegionFlags", false, {
    ERROR: 0, 
    NULLREGION: 1, 
    SIMPLEREGION: 2, 
    COMPLEXREGION: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Internal.IntNativeMethods/RECT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14515, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14518, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromXYWH", 
    $sig.make(0x14522, $.Type, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x14513, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToRectangle", 
    $sig.make(0x14524, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.Field({Static:false, Public:true }, "left", $.Int32); 
  $.Field({Static:false, Public:true }, "top", $.Int32); 
  $.Field({Static:false, Public:true }, "right", $.Int32); 
  $.Field({Static:false, Public:true }, "bottom", $.Int32); 
  $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntNativeMethods/POINT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x145AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x145B0, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToPoint", 
    $sig.make(0x145B1, $asm0B.TypeRef("System.Drawing.Point"), [], [])
  );

  $.Field({Static:false, Public:true }, "x", $.Int32); 
  $.Field({Static:false, Public:true }, "y", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntNativeMethods/DRAWTEXTPARAMS", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14594, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14595, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14596, null, [$.Int32, $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "cbSize", $.Int32); 
  $.Field({Static:false, Public:true }, "iTabLength", $.Int32); 
  $.Field({Static:false, Public:true }, "iLeftMargin", $.Int32); 
  $.Field({Static:false, Public:true }, "iRightMargin", $.Int32); 
  $.Field({Static:false, Public:true }, "uiLengthDrawn", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntNativeMethods/LOGBRUSH", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14343, null, [], [])
  );

  $.Field({Static:false, Public:true }, "lbStyle", $.Int32); 
  $.Field({Static:false, Public:true }, "lbColor", $.Int32); 
  $.Field({Static:false, Public:true }, "lbHatch", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntNativeMethods/LOGFONT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x144FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x144FE, null, [$.Type], [])
  );

  $.Field({Static:false, Public:true }, "lfHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "lfEscapement", $.Int32); 
  $.Field({Static:false, Public:true }, "lfOrientation", $.Int32); 
  $.Field({Static:false, Public:true }, "lfWeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfItalic", $.Byte); 
  $.Field({Static:false, Public:true }, "lfUnderline", $.Byte); 
  $.Field({Static:false, Public:true }, "lfStrikeOut", $.Byte); 
  $.Field({Static:false, Public:true }, "lfCharSet", $.Byte); 
  $.Field({Static:false, Public:true }, "lfOutPrecision", $.Byte); 
  $.Field({Static:false, Public:true }, "lfClipPrecision", $.Byte); 
  $.Field({Static:false, Public:true }, "lfQuality", $.Byte); 
  $.Field({Static:false, Public:true }, "lfPitchAndFamily", $.Byte); 
  $.Field({Static:false, Public:true }, "lfFaceName", $.String); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Internal.IntNativeMethods/TEXTMETRIC", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
  $.Field({Static:false, Public:true }, "tmFirstChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmLastChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmDefaultChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmBreakChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
  $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
  $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
  $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
  $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Internal.IntNativeMethods/TEXTMETRICA", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
  $.Field({Static:false, Public:true }, "tmFirstChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmLastChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmDefaultChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmBreakChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
  $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
  $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
  $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
  $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntNativeMethods/SIZE", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1456E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1456F, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSize", 
    $sig.make(0x14570, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  );

  $.Field({Static:false, Public:true }, "cx", $.Int32); 
  $.Field({Static:false, Public:true }, "cy", $.Int32); 
});

JSIL.MakeStaticClass("System.Drawing.Internal.IntSafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "CreatePen", 
    $sig.make(0x14337, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRectRgn", 
    $sig.make(0x1433B, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateSolidBrush", 
    $sig.make(0x14335, $asm06.TypeRef("System.IntPtr"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExtCreatePen", 
    $sig.make(0x14339, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/LOGBRUSH"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GdiFlush", 
    $sig.make(0x1433D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetUserDefaultLCID", 
    $sig.make(0x1433C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntCreatePen", 
    $sig.make(0x14336, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateRectRgn", 
    $sig.make(0x1433A, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntCreateSolidBrush", 
    $sig.make(0x14334, $asm06.TypeRef("System.IntPtr"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntExtCreatePen", 
    $sig.make(0x14338, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/LOGBRUSH"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.IntSafeNativeMethods/CommonHandles", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A95, null, [], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "EMF", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "GDI", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "HDC", $.Int32); 
});

JSIL.MakeStaticClass("System.Drawing.Internal.IntUnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "AngleArc", 
    $sig.make(0x144A4, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Arc", 
    $sig.make(0x144A6, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "BeginPath", 
    $sig.make(0x1449E, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CombineRgn", 
    $sig.make(0x14389, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.RegionCombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateCompatibleDC", 
    $sig.make(0x14373, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateDC", 
    $sig.make(0x1436A, $asm06.TypeRef("System.IntPtr"), [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateFontIndirect", 
    $sig.make(0x1444C, $asm06.TypeRef("System.IntPtr"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateIC", 
    $sig.make(0x1436C, $asm06.TypeRef("System.IntPtr"), [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DeleteDC", 
    $sig.make(0x14364, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DeleteHDC", 
    $sig.make(0x14366, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DeleteObject", 
    $sig.make(0x14450, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawText", 
    $sig.make(0x1447E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawTextA", 
    $sig.make(0x1447D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawTextEx", 
    $sig.make(0x14481, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/DRAWTEXTPARAMS")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawTextExA", 
    $sig.make(0x14480, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/DRAWTEXTPARAMS")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawTextExW", 
    $sig.make(0x1447F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/DRAWTEXTPARAMS")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawTextW", 
    $sig.make(0x1447C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Ellipse", 
    $sig.make(0x144A9, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EndPath", 
    $sig.make(0x144A0, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExtTextOut", 
    $sig.make(0x14485, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), $.String, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FillRect", 
    $sig.make(0x1448D, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetBkColor", 
    $sig.make(0x1447B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetBkMode", 
    $sig.make(0x1447A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetClipRgn", 
    $sig.make(0x1438C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetCurrentObject", 
    $sig.make(0x1446F, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDC", 
    $sig.make(0x14362, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDeviceCaps", 
    $sig.make(0x1437C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetGraphicsMode", 
    $sig.make(0x14382, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetMapMode", 
    $sig.make(0x14491, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetNearestColor", 
    $sig.make(0x14472, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x14453, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/LOGBRUSH")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x1446B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/LOGFONT")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetRgnBox", 
    $sig.make(0x14390, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetROP2", 
    $sig.make(0x14384, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetStockObject", 
    $sig.make(0x14471, $asm06.TypeRef("System.IntPtr"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextAlign", 
    $sig.make(0x14474, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextColor", 
    $sig.make(0x14475, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextExtentPoint32", 
    $sig.make(0x14484, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextExtentPoint32A", 
    $sig.make(0x14483, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextExtentPoint32W", 
    $sig.make(0x14482, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextMetrics", 
    $sig.make(0x1449C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/TEXTMETRIC")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextMetricsA", 
    $sig.make(0x1449B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/TEXTMETRICA")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetTextMetricsW", 
    $sig.make(0x1449A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/TEXTMETRIC")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetViewportExtEx", 
    $sig.make(0x14493, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetViewportOrgEx", 
    $sig.make(0x14495, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntAngleArc", 
    $sig.make(0x144A3, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntArc", 
    $sig.make(0x144A5, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntBeginPath", 
    $sig.make(0x1449D, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCombineRgn", 
    $sig.make(0x14387, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.RegionCombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateCompatibleDC", 
    $sig.make(0x1436E, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateDC", 
    $sig.make(0x14369, $asm06.TypeRef("System.IntPtr"), [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateFontIndirect", 
    $sig.make(0x14391, $asm06.TypeRef("System.IntPtr"), [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateIC", 
    $sig.make(0x1436B, $asm06.TypeRef("System.IntPtr"), [
        $.String, $.String, 
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntDeleteDC", 
    $sig.make(0x14363, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntDeleteObject", 
    $sig.make(0x1444E, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntEllipse", 
    $sig.make(0x144A8, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntEndPath", 
    $sig.make(0x1449F, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntFillRect", 
    $sig.make(0x1448C, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")]), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetBkMode", 
    $sig.make(0x14479, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetClipRgn", 
    $sig.make(0x1438A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetCurrentObject", 
    $sig.make(0x1446E, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetDC", 
    $sig.make(0x14361, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetMapMode", 
    $sig.make(0x14490, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetObject", 
    $sig.make(0x14451, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/LOGBRUSH")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetObject", 
    $sig.make(0x14454, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/LOGFONT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetRgnBox", 
    $sig.make(0x1438F, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RECT")])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetStockObject", 
    $sig.make(0x14470, $asm06.TypeRef("System.IntPtr"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetViewportExtEx", 
    $sig.make(0x14492, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGetViewportOrgEx", 
    $sig.make(0x14494, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntLineTo", 
    $sig.make(0x14486, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntMoveToEx", 
    $sig.make(0x14488, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntOffsetViewportOrgEx", 
    $sig.make(0x1437D, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntRectangle", 
    $sig.make(0x1448A, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntReleaseDC", 
    $sig.make(0x14367, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntRestoreDC", 
    $sig.make(0x14379, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSaveDC", 
    $sig.make(0x14375, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSelectClipRgn", 
    $sig.make(0x1438D, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSelectObject", 
    $sig.make(0x1446C, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSetBkMode", 
    $sig.make(0x14477, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSetGraphicsMode", 
    $sig.make(0x1437F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSetMapMode", 
    $sig.make(0x1448E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSetViewportExtEx", 
    $sig.make(0x14496, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntSetViewportOrgEx", 
    $sig.make(0x14498, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntStrokePath", 
    $sig.make(0x144A1, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LineTo", 
    $sig.make(0x14487, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "MoveToEx", 
    $sig.make(0x14489, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OffsetViewportOrgEx", 
    $sig.make(0x1437E, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Rectangle", 
    $sig.make(0x1448B, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ReleaseDC", 
    $sig.make(0x14368, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "RestoreDC", 
    $sig.make(0x1437A, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SaveDC", 
    $sig.make(0x14377, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SelectClipRgn", 
    $sig.make(0x1438E, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SelectObject", 
    $sig.make(0x1446D, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetBkColor", 
    $sig.make(0x14476, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetBkMode", 
    $sig.make(0x14478, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetGraphicsMode", 
    $sig.make(0x14381, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetMapMode", 
    $sig.make(0x1448F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetROP2", 
    $sig.make(0x14386, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetTextAlign", 
    $sig.make(0x144A7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetTextColor", 
    $sig.make(0x14473, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetViewportExtEx", 
    $sig.make(0x14497, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/SIZE")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SetViewportOrgEx", 
    $sig.make(0x14499, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods/POINT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StrokePath", 
    $sig.make(0x144A2, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "WideCharToMultiByte", 
    $sig.make(0x144AA, $.Int32, [
        $.Int32, $.Int32, 
        $.String, $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "WindowFromDC", 
    $sig.make(0x1437B, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Image", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x787D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x787E, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7885, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetColorPalette", 
    $sig.make(0x789A, $asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetPhysicalDimension", 
    $sig.make(0x7898, $asm0B.TypeRef("System.Drawing.SizeF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetColorPalette", 
    $sig.make(0x789B, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorPalette")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x7886, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateImageObject", 
    $sig.make(0x788D, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x7888, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x7889, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnsureSave", 
    $sig.make(0x788C, null, [
        $.Type, $.String, 
        $asm06.TypeRef("System.IO.Stream")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x788B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromFile", 
    $sig.make(0x787F, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromFile", 
    $sig.make(0x7880, $.Type, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHbitmap", 
    $sig.make(0x78A4, $asm0B.TypeRef("System.Drawing.Bitmap"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHbitmap", 
    $sig.make(0x78A5, $asm0B.TypeRef("System.Drawing.Bitmap"), [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromStream", 
    $sig.make(0x7881, $.Type, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromStream", 
    $sig.make(0x7882, $.Type, [$asm06.TypeRef("System.IO.Stream"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromStream", 
    $sig.make(0x7883, $.Type, [
        $asm06.TypeRef("System.IO.Stream"), $.Boolean, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
    $sig.make(0x7875, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FrameDimensionsList", 
    $sig.make(0x787A, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Guid")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x7871, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_HorizontalResolution", 
    $sig.make(0x7873, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Palette", 
    $sig.make(0x7878, $asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PhysicalDimension", 
    $sig.make(0x7866, $asm0B.TypeRef("System.Drawing.SizeF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PixelFormat", 
    $sig.make(0x7877, $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_PropertyIdList", 
    $sig.make(0x787B, $jsilcore.TypeRef("System.Array", [$.Int32]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PropertyItems", 
    $sig.make(0x787C, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RawFormat", 
    $sig.make(0x7876, $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x7867, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Tag", 
    $sig.make(0x7864, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_VerticalResolution", 
    $sig.make(0x7874, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x786D, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
    $sig.make(0x7899, $asm0B.TypeRef("System.Drawing.RectangleF"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEncoderParameterList", 
    $sig.make(0x788F, $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters"), [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetFrameCount", 
    $sig.make(0x789D, $.Int32, [$asm0B.TypeRef("System.Drawing.Imaging.FrameDimension")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetPixelFormatSize", 
    $sig.make(0x78A6, $.Int32, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertyItem", 
    $sig.make(0x78A0, $asm0B.TypeRef("System.Drawing.Imaging.PropertyItem"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetThumbnailImage", 
    $sig.make(0x789C, $.Type, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Image/GetThumbnailImageAbort"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InitializeFromStream", 
    $sig.make(0x7884, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsAlphaPixelFormat", 
    $sig.make(0x78A7, $.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsCanonicalPixelFormat", 
    $sig.make(0x78A9, $.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IsExtendedPixelFormat", 
    $sig.make(0x78A8, $.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RemovePropertyItem", 
    $sig.make(0x78A1, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateFlip", 
    $sig.make(0x789F, null, [$asm0B.TypeRef("System.Drawing.RotateFlipType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x7890, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x7891, null, [$.String, $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x7892, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecInfo"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Save", 
    $sig.make(0x7893, null, [$asm06.TypeRef("System.IO.MemoryStream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x7894, null, [$asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x7895, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecInfo"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SaveAdd", 
    $sig.make(0x7896, null, [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SaveAdd", 
    $sig.make(0x7897, null, [$.Type, $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SelectActiveFrame", 
    $sig.make(0x789E, $.Int32, [$asm0B.TypeRef("System.Drawing.Imaging.FrameDimension"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Palette", 
    $sig.make(0x7879, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorPalette")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Tag", 
    $sig.make(0x7865, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeImage", 
    $sig.make(0x78A3, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetPropertyItem", 
    $sig.make(0x78A2, null, [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ISerializable.GetObjectData", 
    $sig.make(0x788E, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.Field({Static:false, Public:false}, "nativeImage", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "rawData", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "userData", $.Object); 
  $.Property({Static:false, Public:true }, "Tag", $.Object)
    .Attribute($asm07.TypeRef("System.ComponentModel.LocalizableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.TypeRef("System.ComponentModel.StringConverter")]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.BindableAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

  $.Property({Static:false, Public:true }, "PhysicalDimension", $asm0B.TypeRef("System.Drawing.SizeF"));

  $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"));

  $.Property({Static:false, Public:true }, "Width", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Height", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "HorizontalResolution", $.Single);

  $.Property({Static:false, Public:true }, "VerticalResolution", $.Single);

  $.Property({Static:false, Public:true }, "Flags", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "RawFormat", $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat"));

  $.Property({Static:false, Public:true }, "PixelFormat", $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"));

  $.Property({Static:false, Public:true }, "Palette", $asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "FrameDimensionsList", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Guid")]))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "PropertyIdList", $jsilcore.TypeRef("System.Array", [$.Int32]))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "PropertyItems", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")]))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), $asm06.TypeRef("System.ICloneable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm07.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.ImageEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.ImageConverter")]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeDelegate("System.Drawing.Image/GetThumbnailImageAbort", false, []);

JSIL.MakeEnum(
  "System.Drawing.Image/ImageTypeEnum", false, {
    Bitmap: 1, 
    Metafile: 2
  }, false
);

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Image"), "System.Drawing.Bitmap", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B0, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B1, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B2, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B3, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B4, null, [$asm06.TypeRef("System.IO.Stream"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B5, null, [
        $.Int32, $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B6, null, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B7, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B8, null, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78B9, null, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78BA, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x78BD, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78C7, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x78C9, null, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x78CC, $.Type, [$asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x78CE, $.Type, [$asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromGDIplus", 
    $sig.make(0x78CB, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHicon", 
    $sig.make(0x78BE, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromResource", 
    $sig.make(0x78C0, $.Type, [$asm06.TypeRef("System.IntPtr"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHbitmap", 
    $sig.make(0x78C1, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:false, Public:true }, "GetHbitmap", 
    $sig.make(0x78C2, $asm06.TypeRef("System.IntPtr"), [$asm0B.TypeRef("System.Drawing.Color")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:false, Public:true }, "GetHicon", 
    $sig.make(0x78C4, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:false, Public:true }, "GetPixel", 
    $sig.make(0x78D5, $asm0B.TypeRef("System.Drawing.Color"), [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LockBits", 
    $sig.make(0x78D2, $asm0B.TypeRef("System.Drawing.Imaging.BitmapData"), [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.ImageLockMode"), 
        $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LockBits", 
    $sig.make(0x78D3, $asm0B.TypeRef("System.Drawing.Imaging.BitmapData"), [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.ImageLockMode"), 
        $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeTransparent", 
    $sig.make(0x78D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeTransparent", 
    $sig.make(0x78D1, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetPixel", 
    $sig.make(0x78D6, null, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Color")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetResolution", 
    $sig.make(0x78D7, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "UnlockBits", 
    $sig.make(0x78D4, null, [$asm0B.TypeRef("System.Drawing.Imaging.BitmapData")], [])
  );

  $.Field({Static:true , Public:false}, "defaultTransparentColor", $asm0B.TypeRef("System.Drawing.Color")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA4C, null, [], []), 
    function Bitmap__cctor () {
      $thisType.defaultTransparentColor = new $asm0B.System.Drawing.Color();
    }
  );

})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.BitmapEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Brush", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8733, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x872D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x8730, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x8731, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x8732, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NativeBrush", 
    $sig.make(0x872C, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "SetNativeBrush", 
    $sig.make(0x872E, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeBrushInternal", 
    $sig.make(0x872F, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.Field({Static:false, Public:false}, "nativeBrush", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:false}, "NativeBrush", $asm06.TypeRef("System.IntPtr"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Brushes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1467F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
    $sig.make(0x145CF, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
    $sig.make(0x145D0, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
    $sig.make(0x145D1, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
    $sig.make(0x145D2, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
    $sig.make(0x145D3, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
    $sig.make(0x145D4, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
    $sig.make(0x145D5, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Black", 
    $sig.make(0x145D6, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
    $sig.make(0x145D7, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
    $sig.make(0x145D8, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
    $sig.make(0x145D9, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
    $sig.make(0x145DA, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
    $sig.make(0x145DB, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
    $sig.make(0x145DC, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
    $sig.make(0x145DE, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
    $sig.make(0x145E1, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
    $sig.make(0x145E2, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
    $sig.make(0x145E5, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
    $sig.make(0x145E7, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
    $sig.make(0x145E8, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
    $sig.make(0x145E9, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
    $sig.make(0x145EA, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
    $sig.make(0x145EB, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
    $sig.make(0x145EC, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
    $sig.make(0x145ED, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
    $sig.make(0x145EE, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
    $sig.make(0x145EF, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
    $sig.make(0x145F0, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
    $sig.make(0x145F1, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
    $sig.make(0x145F2, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
    $sig.make(0x145F3, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
    $sig.make(0x145F4, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
    $sig.make(0x145F5, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
    $sig.make(0x145F6, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
    $sig.make(0x145F7, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
    $sig.make(0x145F8, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
    $sig.make(0x145F9, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
    $sig.make(0x145FA, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
    $sig.make(0x145FB, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
    $sig.make(0x145FC, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
    $sig.make(0x145FD, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
    $sig.make(0x145FE, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
    $sig.make(0x145FF, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
    $sig.make(0x14600, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
    $sig.make(0x14602, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
    $sig.make(0x14604, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
    $sig.make(0x14606, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
    $sig.make(0x14607, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
    $sig.make(0x14608, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
    $sig.make(0x14609, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
    $sig.make(0x1460D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Green", 
    $sig.make(0x1460E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
    $sig.make(0x1460F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
    $sig.make(0x14610, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
    $sig.make(0x14611, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
    $sig.make(0x14612, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
    $sig.make(0x14613, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
    $sig.make(0x14614, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
    $sig.make(0x14615, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
    $sig.make(0x14616, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
    $sig.make(0x14617, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
    $sig.make(0x14618, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
    $sig.make(0x14619, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
    $sig.make(0x1461A, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
    $sig.make(0x1461B, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
    $sig.make(0x1461C, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
    $sig.make(0x1461D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
    $sig.make(0x1461F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
    $sig.make(0x1461E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
    $sig.make(0x14620, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
    $sig.make(0x14621, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
    $sig.make(0x14622, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
    $sig.make(0x14623, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
    $sig.make(0x14624, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
    $sig.make(0x14625, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
    $sig.make(0x14626, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
    $sig.make(0x14627, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
    $sig.make(0x14629, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
    $sig.make(0x1462B, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
    $sig.make(0x1462D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
    $sig.make(0x1462F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
    $sig.make(0x14635, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
    $sig.make(0x14638, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
    $sig.make(0x1463E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
    $sig.make(0x14641, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
    $sig.make(0x14643, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
    $sig.make(0x14644, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
    $sig.make(0x14645, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
    $sig.make(0x14646, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
    $sig.make(0x14648, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
    $sig.make(0x1464D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
    $sig.make(0x1464E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
    $sig.make(0x1464F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
    $sig.make(0x14650, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
    $sig.make(0x14651, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
    $sig.make(0x14652, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
    $sig.make(0x14653, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
    $sig.make(0x14654, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
    $sig.make(0x14655, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
    $sig.make(0x14656, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
    $sig.make(0x14657, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
    $sig.make(0x14658, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
    $sig.make(0x14659, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
    $sig.make(0x1465A, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
    $sig.make(0x1465B, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
    $sig.make(0x1465C, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
    $sig.make(0x1465D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
    $sig.make(0x1465E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
    $sig.make(0x1465F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
    $sig.make(0x14660, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
    $sig.make(0x14661, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
    $sig.make(0x14662, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
    $sig.make(0x14663, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Red", 
    $sig.make(0x14664, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
    $sig.make(0x14665, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
    $sig.make(0x14666, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
    $sig.make(0x14667, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
    $sig.make(0x14668, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
    $sig.make(0x14669, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
    $sig.make(0x1466A, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
    $sig.make(0x1466B, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
    $sig.make(0x1466C, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
    $sig.make(0x1466D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
    $sig.make(0x1466E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
    $sig.make(0x1466F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
    $sig.make(0x14670, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
    $sig.make(0x14671, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
    $sig.make(0x14672, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
    $sig.make(0x14673, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
    $sig.make(0x14674, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
    $sig.make(0x14675, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
    $sig.make(0x14676, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
    $sig.make(0x14677, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
    $sig.make(0x145CE, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
    $sig.make(0x14678, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
    $sig.make(0x1467A, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_White", 
    $sig.make(0x1467B, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
    $sig.make(0x1467C, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
    $sig.make(0x14679, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
    $sig.make(0x1467D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
    $sig.make(0x1467E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "TransparentKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AliceBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AntiqueWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AquaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AquamarineKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AzureKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BeigeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BisqueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlackKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlanchedAlmondKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlueVioletKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BurlyWoodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CadetBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChartreuseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChocolateKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChoralKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CornflowerBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CornsilkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CrimsonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CyanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkCyanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGoldenrodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkKhakiKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkMagentaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOliveGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrangeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrchidKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSalmonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkTurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkVioletKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DeepPinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DeepSkyBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DimGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DodgerBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FirebrickKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FloralWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ForestGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FuchiaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GainsboroKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GhostWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GoldKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GoldenrodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GreenYellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "HoneydewKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "HotPinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IndianRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IndigoKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IvoryKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "KhakiKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderBlushKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LawnGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LemonChiffonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightCoralKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightCyanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightGoldenrodYellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightPinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSalmonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSkyBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSlateGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSteelBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightYellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LimeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LimeGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LinenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MagentaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MaroonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumAquamarineKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumOrchidKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumPurpleKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSlateBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSpringGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumTurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumVioletRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MidnightBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MintCreamKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MistyRoseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MoccasinKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NavajoWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NavyKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OldLaceKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OliveKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OliveDrabKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OrchidKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGoldenrodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleTurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleVioletRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PapayaWhipKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PeachPuffKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PeruKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PlumKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PowderBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PurpleKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RosyBrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RoyalBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SaddleBrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SalmonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SandyBrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SeaShellKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SiennaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SilverKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SkyBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SlateBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SlateGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SnowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SpringGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SteelBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TealKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ThistleKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TomatoKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "VioletKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WheatKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteSmokeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "YellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "YellowGreenKey", $.Object); 
  $.Property({Static:true , Public:true }, "Transparent", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "AliceBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "AntiqueWhite", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Aqua", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Aquamarine", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Azure", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Beige", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Bisque", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Black", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "BlanchedAlmond", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Blue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "BlueViolet", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Brown", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "BurlyWood", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "CadetBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Chartreuse", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Chocolate", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Coral", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "CornflowerBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Cornsilk", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Crimson", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Cyan", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkCyan", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkGoldenrod", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkGray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkKhaki", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkMagenta", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkOliveGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkOrange", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkOrchid", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkRed", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkSalmon", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkSeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkSlateBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkSlateGray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkTurquoise", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DarkViolet", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DeepPink", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DeepSkyBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DimGray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "DodgerBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Firebrick", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "FloralWhite", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ForestGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Fuchsia", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Gainsboro", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "GhostWhite", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Gold", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Goldenrod", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Gray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Green", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "GreenYellow", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Honeydew", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "HotPink", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "IndianRed", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Indigo", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Ivory", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Khaki", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Lavender", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LavenderBlush", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LawnGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LemonChiffon", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightCoral", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightCyan", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightGray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightPink", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightSalmon", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightSeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightSkyBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightSlateGray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightSteelBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LightYellow", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Lime", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "LimeGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Linen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Magenta", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Maroon", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumAquamarine", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumOrchid", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumPurple", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumSeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumSlateBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumSpringGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumTurquoise", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MediumVioletRed", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MidnightBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MintCream", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MistyRose", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Moccasin", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "NavajoWhite", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Navy", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "OldLace", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Olive", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "OliveDrab", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Orange", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "OrangeRed", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Orchid", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PaleGoldenrod", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PaleGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PaleTurquoise", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PaleVioletRed", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PapayaWhip", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PeachPuff", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Peru", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Pink", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Plum", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "PowderBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Purple", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Red", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "RosyBrown", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "RoyalBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SaddleBrown", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Salmon", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SandyBrown", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SeaShell", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Sienna", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Silver", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SkyBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SlateBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SlateGray", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Snow", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SpringGreen", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "SteelBlue", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Tan", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Teal", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Thistle", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Tomato", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Turquoise", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Violet", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Wheat", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "White", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "WhiteSmoke", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Yellow", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "YellowGreen", $asm0B.TypeRef("System.Drawing.Brush"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.BufferedGraphics", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x937F, null, [
        $asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext"), 
        $asm0B.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Size")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x9381, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x9382, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x9380, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DisposeContext", 
    $sig.make(0x937C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Graphics", 
    $sig.make(0x937E, $asm0B.TypeRef("System.Drawing.Graphics"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Render", 
    $sig.make(0x9383, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Render", 
    $sig.make(0x9384, null, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Render", 
    $sig.make(0x9385, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "RenderInternal", 
    $sig.make(0x9386, null, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DisposeContext", 
    $sig.make(0x937D, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "bufferedGraphicsSurface", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Field({Static:false, Public:false}, "targetGraphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Field({Static:false, Public:false}, "context", $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext")); 
  $.Field({Static:false, Public:false}, "targetDC", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "targetLoc", $asm0B.TypeRef("System.Drawing.Point")); 
  $.Field({Static:false, Public:false}, "virtualSize", $asm0B.TypeRef("System.Drawing.Size")); 
  $.Field({Static:false, Public:false}, "disposeContext", $.Boolean); 
  $.Field({Static:true , Public:false}, "rop", $.Int32, 13369376); 
  $.Property({Static:false, Public:false}, "DisposeContext", $.Boolean);

  $.Property({Static:false, Public:true }, "Graphics", $asm0B.TypeRef("System.Drawing.Graphics"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.BufferedGraphicsContext", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8625, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Allocate", 
    $sig.make(0x8627, $asm0B.TypeRef("System.Drawing.BufferedGraphics"), [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Allocate", 
    $sig.make(0x8628, $asm0B.TypeRef("System.Drawing.BufferedGraphics"), [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocBuffer", 
    $sig.make(0x8629, $asm0B.TypeRef("System.Drawing.BufferedGraphics"), [
        $asm0B.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "AllocBufferInTempManager", 
    $sig.make(0x862A, $asm0B.TypeRef("System.Drawing.BufferedGraphics"), [
        $asm0B.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "bFillBitmapInfo", 
    $sig.make(0x862B, $.Boolean, [
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods/BITMAPINFO_FLAT")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "bFillColorTable", 
    $sig.make(0x862C, $.Boolean, [
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods/BITMAPINFO_FLAT")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateBuffer", 
    $sig.make(0x862D, $asm0B.TypeRef("System.Drawing.Graphics"), [
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateCompatibleDIB", 
    $sig.make(0x862E, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x862F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x8632, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DisposeBitmap", 
    $sig.make(0x8631, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DisposeDC", 
    $sig.make(0x8630, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x8626, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_DoubleBuffering", 
    $sig.make(0x8622, $asm07.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaximumBuffer", 
    $sig.make(0x8623, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Invalidate", 
    $sig.make(0x8633, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseBuffer", 
    $sig.make(0x8634, null, [$asm0B.TypeRef("System.Drawing.BufferedGraphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaximumBuffer", 
    $sig.make(0x8624, null, [$asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ShouldUseTempManager", 
    $sig.make(0x8635, $.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.Constant({Static:true , Public:false}, "BUFFER_FREE", 0); 
  $.Constant({Static:true , Public:false}, "BUFFER_BUSY_PAINTING", 1); 
  $.Constant({Static:true , Public:false}, "BUFFER_BUSY_DISPOSING", 2); 
  $.Field({Static:false, Public:false}, "maximumBuffer", $asm0B.TypeRef("System.Drawing.Size")); 
  $.Field({Static:false, Public:false}, "bufferSize", $asm0B.TypeRef("System.Drawing.Size")); 
  $.Field({Static:false, Public:false}, "virtualSize", $asm0B.TypeRef("System.Drawing.Size")); 
  $.Field({Static:false, Public:false}, "targetLoc", $asm0B.TypeRef("System.Drawing.Point")); 
  $.Field({Static:false, Public:false}, "compatDC", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "dib", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "oldBitmap", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "compatGraphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Field({Static:false, Public:false}, "buffer", $asm0B.TypeRef("System.Drawing.BufferedGraphics")); 
  $.Field({Static:false, Public:false}, "busy", $.Int32); 
  $.Field({Static:false, Public:false}, "invalidateWhenFree", $.Boolean); 
  $.Field({Static:true , Public:false}, "doubleBuffering", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Property({Static:true , Public:false}, "DoubleBuffering", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

  $.Property({Static:false, Public:true }, "MaximumBuffer", $asm0B.TypeRef("System.Drawing.Size"));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.BufferedGraphicsManager", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x143D5, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Current", 
    $sig.make(0x143D4, $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnShutdown", 
    $sig.make(0x143D7, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

  $.Field({Static:true , Public:false}, "bufferedGraphicsContext", $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext")); 
  $.Property({Static:true , Public:true }, "Current", $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Color", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7D24, null, [$asm0B.TypeRef("System.Drawing.KnownColor")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7D25, null, [
        $.Int64, $.Int16, 
        $.String, $asm0B.TypeRef("System.Drawing.KnownColor")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CheckByte", 
    $sig.make(0x7D26, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x7D3D, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
    $sig.make(0x7D29, $.Type, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
    $sig.make(0x7D2F, $.Type, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
    $sig.make(0x7D31, $.Type, [$.Int32, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
    $sig.make(0x7D32, $.Type, [
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromKnownColor", 
    $sig.make(0x7D33, $.Type, [$asm0B.TypeRef("System.Drawing.KnownColor")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromName", 
    $sig.make(0x7D34, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_A", 
    $sig.make(0x7D16, $.Byte, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
    $sig.make(0x7C5C, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
    $sig.make(0x7C5D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
    $sig.make(0x7C5E, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
    $sig.make(0x7C5F, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
    $sig.make(0x7C60, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_B", 
    $sig.make(0x7D15, $.Byte, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
    $sig.make(0x7C61, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
    $sig.make(0x7C62, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Black", 
    $sig.make(0x7C63, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
    $sig.make(0x7C65, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
    $sig.make(0x7C67, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
    $sig.make(0x7C69, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
    $sig.make(0x7C6B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
    $sig.make(0x7C6D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
    $sig.make(0x7C6F, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
    $sig.make(0x7C71, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
    $sig.make(0x7C72, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
    $sig.make(0x7C73, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
    $sig.make(0x7C74, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
    $sig.make(0x7C75, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
    $sig.make(0x7C76, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
    $sig.make(0x7C77, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
    $sig.make(0x7C7B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
    $sig.make(0x7C7D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
    $sig.make(0x7C7F, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
    $sig.make(0x7C81, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
    $sig.make(0x7C83, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
    $sig.make(0x7C84, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
    $sig.make(0x7C85, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
    $sig.make(0x7C86, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
    $sig.make(0x7C87, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
    $sig.make(0x7C88, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
    $sig.make(0x7C89, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
    $sig.make(0x7C8A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
    $sig.make(0x7C8B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
    $sig.make(0x7C8C, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
    $sig.make(0x7C8D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
    $sig.make(0x7C8E, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
    $sig.make(0x7C8F, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
    $sig.make(0x7C90, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
    $sig.make(0x7C91, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
    $sig.make(0x7C92, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
    $sig.make(0x7C93, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
    $sig.make(0x7C94, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
    $sig.make(0x7C95, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
    $sig.make(0x7C97, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
    $sig.make(0x7C98, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_G", 
    $sig.make(0x7D14, $.Byte, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
    $sig.make(0x7C99, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
    $sig.make(0x7C9A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
    $sig.make(0x7C9B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
    $sig.make(0x7C9D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
    $sig.make(0x7CA2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Green", 
    $sig.make(0x7CA4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
    $sig.make(0x7CA5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
    $sig.make(0x7CA6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
    $sig.make(0x7CA7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
    $sig.make(0x7CA8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
    $sig.make(0x7CA9, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x7D19, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_IsKnownColor", 
    $sig.make(0x7D17, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNamedColor", 
    $sig.make(0x7D1A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsSystemColor", 
    $sig.make(0x7D1C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
    $sig.make(0x7CAA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
    $sig.make(0x7CAC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
    $sig.make(0x7CAF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
    $sig.make(0x7CB1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
    $sig.make(0x7CB5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
    $sig.make(0x7CB6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
    $sig.make(0x7CB7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
    $sig.make(0x7CB8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
    $sig.make(0x7CB9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
    $sig.make(0x7CBA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
    $sig.make(0x7CBC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
    $sig.make(0x7CBB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
    $sig.make(0x7CBD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
    $sig.make(0x7CBE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
    $sig.make(0x7CBF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
    $sig.make(0x7CC0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
    $sig.make(0x7CC2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
    $sig.make(0x7CC3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
    $sig.make(0x7CC5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
    $sig.make(0x7CC6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
    $sig.make(0x7CC7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
    $sig.make(0x7CC8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
    $sig.make(0x7CC9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
    $sig.make(0x7CCB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
    $sig.make(0x7CCD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
    $sig.make(0x7CCF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
    $sig.make(0x7CD1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
    $sig.make(0x7CD3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
    $sig.make(0x7CD4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
    $sig.make(0x7CD5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
    $sig.make(0x7CD6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
    $sig.make(0x7CD7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
    $sig.make(0x7CD8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
    $sig.make(0x7CD9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
    $sig.make(0x7CDA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
    $sig.make(0x7CDB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
    $sig.make(0x7CDC, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x7D1E, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NameAndARGBValue", 
    $sig.make(0x7D1D, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
    $sig.make(0x7CDD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
    $sig.make(0x7CDE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
    $sig.make(0x7CDF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
    $sig.make(0x7CE2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
    $sig.make(0x7CE5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
    $sig.make(0x7CE7, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
    $sig.make(0x7CE8, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
    $sig.make(0x7CEA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
    $sig.make(0x7CEC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
    $sig.make(0x7CEE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
    $sig.make(0x7CEF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
    $sig.make(0x7CF0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
    $sig.make(0x7CF1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
    $sig.make(0x7CF2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
    $sig.make(0x7CF3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
    $sig.make(0x7CF4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
    $sig.make(0x7CF5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
    $sig.make(0x7CF6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
    $sig.make(0x7CF7, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_R", 
    $sig.make(0x7D13, $.Byte, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_Red", 
    $sig.make(0x7CF8, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
    $sig.make(0x7CF9, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
    $sig.make(0x7CFA, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
    $sig.make(0x7CFB, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
    $sig.make(0x7CFC, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
    $sig.make(0x7CFD, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
    $sig.make(0x7CFE, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
    $sig.make(0x7CFF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
    $sig.make(0x7D00, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
    $sig.make(0x7D01, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
    $sig.make(0x7D02, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
    $sig.make(0x7D03, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
    $sig.make(0x7D04, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
    $sig.make(0x7D05, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
    $sig.make(0x7D06, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
    $sig.make(0x7D07, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
    $sig.make(0x7D08, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
    $sig.make(0x7D09, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
    $sig.make(0x7D0A, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
    $sig.make(0x7D0B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
    $sig.make(0x7C5B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
    $sig.make(0x7D0C, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Value", 
    $sig.make(0x7D1F, $.Int64, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
    $sig.make(0x7D0E, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_White", 
    $sig.make(0x7D0F, $.Type, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
    $sig.make(0x7D10, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
    $sig.make(0x7D0D, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
    $sig.make(0x7D11, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
    $sig.make(0x7D12, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBrightness", 
    $sig.make(0x7D35, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x7D3E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHue", 
    $sig.make(0x7D36, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetSaturation", 
    $sig.make(0x7D37, $.Single, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeArgb", 
    $sig.make(0x7D27, $.Int64, [
        $.Byte, $.Byte, 
        $.Byte, $.Byte
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x7D3B, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x7D3C, $.Boolean, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "ToArgb", 
    $sig.make(0x7D38, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToKnownColor", 
    $sig.make(0x7D39, $asm0B.TypeRef("System.Drawing.KnownColor"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x7D3A, $.String, [], [])
  );

  $.Constant({Static:true , Public:false}, "ARGBAlphaShift", 24); 
  $.Constant({Static:true , Public:false}, "ARGBRedShift", 16); 
  $.Constant({Static:true , Public:false}, "ARGBGreenShift", 8); 
  $.Constant({Static:true , Public:false}, "ARGBBlueShift", 0); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:true , Public:false}, "StateKnownColorValid", $.Int16, 1); 
  $.Field({Static:true , Public:false}, "StateARGBValueValid", $.Int16, 2); 
  $.Field({Static:true , Public:false}, "StateValueMask", $.Int16, function ($pi) {
      return $pi.StateARGBValueValid;
    }); 
  $.Field({Static:true , Public:false}, "StateNameValid", $.Int16, 8); 
  $.Field({Static:true , Public:false}, "NotDefinedValue", $.Int64, function ($pi) {
      return $asm06.System.Int64.FromNumber(0);
    }); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Int64); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "knownColor", $.Int16); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "state", $.Int16); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA4D, null, [], []), 
    function Color__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "Transparent", $.Type);

  $.Property({Static:true , Public:true }, "AliceBlue", $.Type);

  $.Property({Static:true , Public:true }, "AntiqueWhite", $.Type);

  $.Property({Static:true , Public:true }, "Aqua", $.Type);

  $.Property({Static:true , Public:true }, "Aquamarine", $.Type);

  $.Property({Static:true , Public:true }, "Azure", $.Type);

  $.Property({Static:true , Public:true }, "Beige", $.Type);

  $.Property({Static:true , Public:true }, "Bisque", $.Type);

  $.Property({Static:true , Public:true }, "Black", $.Type);

  $.Property({Static:true , Public:true }, "BlanchedAlmond", $.Type);

  $.Property({Static:true , Public:true }, "Blue", $.Type);

  $.Property({Static:true , Public:true }, "BlueViolet", $.Type);

  $.Property({Static:true , Public:true }, "Brown", $.Type);

  $.Property({Static:true , Public:true }, "BurlyWood", $.Type);

  $.Property({Static:true , Public:true }, "CadetBlue", $.Type);

  $.Property({Static:true , Public:true }, "Chartreuse", $.Type);

  $.Property({Static:true , Public:true }, "Chocolate", $.Type);

  $.Property({Static:true , Public:true }, "Coral", $.Type);

  $.Property({Static:true , Public:true }, "CornflowerBlue", $.Type);

  $.Property({Static:true , Public:true }, "Cornsilk", $.Type);

  $.Property({Static:true , Public:true }, "Crimson", $.Type);

  $.Property({Static:true , Public:true }, "Cyan", $.Type);

  $.Property({Static:true , Public:true }, "DarkBlue", $.Type);

  $.Property({Static:true , Public:true }, "DarkCyan", $.Type);

  $.Property({Static:true , Public:true }, "DarkGoldenrod", $.Type);

  $.Property({Static:true , Public:true }, "DarkGray", $.Type);

  $.Property({Static:true , Public:true }, "DarkGreen", $.Type);

  $.Property({Static:true , Public:true }, "DarkKhaki", $.Type);

  $.Property({Static:true , Public:true }, "DarkMagenta", $.Type);

  $.Property({Static:true , Public:true }, "DarkOliveGreen", $.Type);

  $.Property({Static:true , Public:true }, "DarkOrange", $.Type);

  $.Property({Static:true , Public:true }, "DarkOrchid", $.Type);

  $.Property({Static:true , Public:true }, "DarkRed", $.Type);

  $.Property({Static:true , Public:true }, "DarkSalmon", $.Type);

  $.Property({Static:true , Public:true }, "DarkSeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "DarkSlateBlue", $.Type);

  $.Property({Static:true , Public:true }, "DarkSlateGray", $.Type);

  $.Property({Static:true , Public:true }, "DarkTurquoise", $.Type);

  $.Property({Static:true , Public:true }, "DarkViolet", $.Type);

  $.Property({Static:true , Public:true }, "DeepPink", $.Type);

  $.Property({Static:true , Public:true }, "DeepSkyBlue", $.Type);

  $.Property({Static:true , Public:true }, "DimGray", $.Type);

  $.Property({Static:true , Public:true }, "DodgerBlue", $.Type);

  $.Property({Static:true , Public:true }, "Firebrick", $.Type);

  $.Property({Static:true , Public:true }, "FloralWhite", $.Type);

  $.Property({Static:true , Public:true }, "ForestGreen", $.Type);

  $.Property({Static:true , Public:true }, "Fuchsia", $.Type);

  $.Property({Static:true , Public:true }, "Gainsboro", $.Type);

  $.Property({Static:true , Public:true }, "GhostWhite", $.Type);

  $.Property({Static:true , Public:true }, "Gold", $.Type);

  $.Property({Static:true , Public:true }, "Goldenrod", $.Type);

  $.Property({Static:true , Public:true }, "Gray", $.Type);

  $.Property({Static:true , Public:true }, "Green", $.Type);

  $.Property({Static:true , Public:true }, "GreenYellow", $.Type);

  $.Property({Static:true , Public:true }, "Honeydew", $.Type);

  $.Property({Static:true , Public:true }, "HotPink", $.Type);

  $.Property({Static:true , Public:true }, "IndianRed", $.Type);

  $.Property({Static:true , Public:true }, "Indigo", $.Type);

  $.Property({Static:true , Public:true }, "Ivory", $.Type);

  $.Property({Static:true , Public:true }, "Khaki", $.Type);

  $.Property({Static:true , Public:true }, "Lavender", $.Type);

  $.Property({Static:true , Public:true }, "LavenderBlush", $.Type);

  $.Property({Static:true , Public:true }, "LawnGreen", $.Type);

  $.Property({Static:true , Public:true }, "LemonChiffon", $.Type);

  $.Property({Static:true , Public:true }, "LightBlue", $.Type);

  $.Property({Static:true , Public:true }, "LightCoral", $.Type);

  $.Property({Static:true , Public:true }, "LightCyan", $.Type);

  $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $.Type);

  $.Property({Static:true , Public:true }, "LightGreen", $.Type);

  $.Property({Static:true , Public:true }, "LightGray", $.Type);

  $.Property({Static:true , Public:true }, "LightPink", $.Type);

  $.Property({Static:true , Public:true }, "LightSalmon", $.Type);

  $.Property({Static:true , Public:true }, "LightSeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "LightSkyBlue", $.Type);

  $.Property({Static:true , Public:true }, "LightSlateGray", $.Type);

  $.Property({Static:true , Public:true }, "LightSteelBlue", $.Type);

  $.Property({Static:true , Public:true }, "LightYellow", $.Type);

  $.Property({Static:true , Public:true }, "Lime", $.Type);

  $.Property({Static:true , Public:true }, "LimeGreen", $.Type);

  $.Property({Static:true , Public:true }, "Linen", $.Type);

  $.Property({Static:true , Public:true }, "Magenta", $.Type);

  $.Property({Static:true , Public:true }, "Maroon", $.Type);

  $.Property({Static:true , Public:true }, "MediumAquamarine", $.Type);

  $.Property({Static:true , Public:true }, "MediumBlue", $.Type);

  $.Property({Static:true , Public:true }, "MediumOrchid", $.Type);

  $.Property({Static:true , Public:true }, "MediumPurple", $.Type);

  $.Property({Static:true , Public:true }, "MediumSeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "MediumSlateBlue", $.Type);

  $.Property({Static:true , Public:true }, "MediumSpringGreen", $.Type);

  $.Property({Static:true , Public:true }, "MediumTurquoise", $.Type);

  $.Property({Static:true , Public:true }, "MediumVioletRed", $.Type);

  $.Property({Static:true , Public:true }, "MidnightBlue", $.Type);

  $.Property({Static:true , Public:true }, "MintCream", $.Type);

  $.Property({Static:true , Public:true }, "MistyRose", $.Type);

  $.Property({Static:true , Public:true }, "Moccasin", $.Type);

  $.Property({Static:true , Public:true }, "NavajoWhite", $.Type);

  $.Property({Static:true , Public:true }, "Navy", $.Type);

  $.Property({Static:true , Public:true }, "OldLace", $.Type);

  $.Property({Static:true , Public:true }, "Olive", $.Type);

  $.Property({Static:true , Public:true }, "OliveDrab", $.Type);

  $.Property({Static:true , Public:true }, "Orange", $.Type);

  $.Property({Static:true , Public:true }, "OrangeRed", $.Type);

  $.Property({Static:true , Public:true }, "Orchid", $.Type);

  $.Property({Static:true , Public:true }, "PaleGoldenrod", $.Type);

  $.Property({Static:true , Public:true }, "PaleGreen", $.Type);

  $.Property({Static:true , Public:true }, "PaleTurquoise", $.Type);

  $.Property({Static:true , Public:true }, "PaleVioletRed", $.Type);

  $.Property({Static:true , Public:true }, "PapayaWhip", $.Type);

  $.Property({Static:true , Public:true }, "PeachPuff", $.Type);

  $.Property({Static:true , Public:true }, "Peru", $.Type);

  $.Property({Static:true , Public:true }, "Pink", $.Type);

  $.Property({Static:true , Public:true }, "Plum", $.Type);

  $.Property({Static:true , Public:true }, "PowderBlue", $.Type);

  $.Property({Static:true , Public:true }, "Purple", $.Type);

  $.Property({Static:true , Public:true }, "Red", $.Type);

  $.Property({Static:true , Public:true }, "RosyBrown", $.Type);

  $.Property({Static:true , Public:true }, "RoyalBlue", $.Type);

  $.Property({Static:true , Public:true }, "SaddleBrown", $.Type);

  $.Property({Static:true , Public:true }, "Salmon", $.Type);

  $.Property({Static:true , Public:true }, "SandyBrown", $.Type);

  $.Property({Static:true , Public:true }, "SeaGreen", $.Type);

  $.Property({Static:true , Public:true }, "SeaShell", $.Type);

  $.Property({Static:true , Public:true }, "Sienna", $.Type);

  $.Property({Static:true , Public:true }, "Silver", $.Type);

  $.Property({Static:true , Public:true }, "SkyBlue", $.Type);

  $.Property({Static:true , Public:true }, "SlateBlue", $.Type);

  $.Property({Static:true , Public:true }, "SlateGray", $.Type);

  $.Property({Static:true , Public:true }, "Snow", $.Type);

  $.Property({Static:true , Public:true }, "SpringGreen", $.Type);

  $.Property({Static:true , Public:true }, "SteelBlue", $.Type);

  $.Property({Static:true , Public:true }, "Tan", $.Type);

  $.Property({Static:true , Public:true }, "Teal", $.Type);

  $.Property({Static:true , Public:true }, "Thistle", $.Type);

  $.Property({Static:true , Public:true }, "Tomato", $.Type);

  $.Property({Static:true , Public:true }, "Turquoise", $.Type);

  $.Property({Static:true , Public:true }, "Violet", $.Type);

  $.Property({Static:true , Public:true }, "Wheat", $.Type);

  $.Property({Static:true , Public:true }, "White", $.Type);

  $.Property({Static:true , Public:true }, "WhiteSmoke", $.Type);

  $.Property({Static:true , Public:true }, "Yellow", $.Type);

  $.Property({Static:true , Public:true }, "YellowGreen", $.Type);

  $.Property({Static:false, Public:true }, "R", $.Byte);

  $.Property({Static:false, Public:true }, "G", $.Byte);

  $.Property({Static:false, Public:true }, "B", $.Byte);

  $.Property({Static:false, Public:true }, "A", $.Byte);

  $.Property({Static:false, Public:true }, "IsKnownColor", $.Boolean);

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

  $.Property({Static:false, Public:true }, "IsNamedColor", $.Boolean);

  $.Property({Static:false, Public:true }, "IsSystemColor", $.Boolean);

  $.Property({Static:false, Public:false}, "NameAndARGBValue", $.String);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:false, Public:false}, "Value", $.Int64);

})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.ColorConverter")]; })
  .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{NameAndARGBValue}"]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.ColorEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.ColorConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x144AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x144B0, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x144B1, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x144B3, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x144B4, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FillConstants", 
    $sig.make(0x144B5, null, [$asm06.TypeRef("System.Collections.Hashtable"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Colors", 
    $sig.make(0x144AD, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_SystemColors", 
    $sig.make(0x144AE, $asm06.TypeRef("System.Collections.Hashtable"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNamedColor", 
    $sig.make(0x144B2, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValues", 
    $sig.make(0x144B6, $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValuesSupported", 
    $sig.make(0x144B7, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.Field({Static:true , Public:false}, "ColorConstantsLock", $.String, "colorConstants"); 
  $.Field({Static:true , Public:false}, "colorConstants", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "SystemColorConstantsLock", $.String, "systemColorConstants"); 
  $.Field({Static:true , Public:false}, "systemColorConstants", $asm06.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "ValuesLock", $.String, "values"); 
  $.Field({Static:true , Public:false}, "values", $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection")); 
  $.Property({Static:true , Public:false}, "Colors", $asm06.TypeRef("System.Collections.Hashtable"));

  $.Property({Static:true , Public:false}, "SystemColors", $asm06.TypeRef("System.Collections.Hashtable"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.ColorConverter/ColorComparer", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14AAA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Compare", 
    $sig.make(0x14AA8, $.Int32, [$.Object, $.Object], [])
  );

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeEnum(
  "System.Drawing.ContentAlignment", true, {
    TopLeft: 1, 
    TopCenter: 2, 
    TopRight: 4, 
    MiddleLeft: 16, 
    MiddleCenter: 32, 
    MiddleRight: 64, 
    BottomLeft: 256, 
    BottomCenter: 512, 
    BottomRight: 1024
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.CopyPixelOperation", true, {
    NoMirrorBitmap: -2147483648, 
    Blackness: 66, 
    NotSourceErase: 1114278, 
    NotSourceCopy: 3342344, 
    SourceErase: 4457256, 
    DestinationInvert: 5570569, 
    PatInvert: 5898313, 
    SourceInvert: 6684742, 
    SourceAnd: 8913094, 
    MergePaint: 12255782, 
    MergeCopy: 12583114, 
    SourceCopy: 13369376, 
    SourcePaint: 15597702, 
    PatCopy: 15728673, 
    PatPaint: 16452105, 
    Whiteness: 16711778, 
    CaptureBlt: 1073741824
  }, false
);

JSIL.DeclareNamespace("System.Drawing.Drawing2D");
JSIL.MakeEnum(
  "System.Drawing.Drawing2D.DashCap", true, {
    Flat: 0, 
    Round: 2, 
    Triangle: 3
  }, false
);

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.FontConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x144CC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x144C0, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x144C1, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x144C2, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x144C3, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0x144C4, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x144BF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0x144C5, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetFormatException", 
    $sig.make(0x144C6, $asm06.TypeRef("System.ArgumentException"), [$.String, $.Char], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetGraphicsUnitText", 
    $sig.make(0x144C7, $.String, [$asm0B.TypeRef("System.Drawing.GraphicsUnit")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0x144C8, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0x144C9, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseGraphicsUnits", 
    $sig.make(0x144CB, $asm0B.TypeRef("System.Drawing.GraphicsUnit"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ParseSizeTokens", 
    $sig.make(0x144CA, $jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.Char], [])
  );

  $.Constant({Static:true , Public:false}, "styleHdr", "style="); 
  $.Field({Static:false, Public:false}, "fontNameConverter", $asm0B.TypeRef("System.Drawing.FontConverter/FontNameConverter")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.FontConverter/UnitName", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14AA3, null, [$.String, $asm0B.TypeRef("System.Drawing.GraphicsUnit")], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "unit", $asm0B.TypeRef("System.Drawing.GraphicsUnit")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "names", $jsilcore.TypeRef("System.Array", [$.Type])); 
});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.FontConverter/FontNameConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x144D3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x144D4, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x144D5, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValues", 
    $sig.make(0x144D7, $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValuesExclusive", 
    $sig.make(0x144D8, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValuesSupported", 
    $sig.make(0x144D9, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "MatchFontName", 
    $sig.make(0x144DA, $.String, [$.String, $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnInstalledFontsChanged", 
    $sig.make(0x144DB, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IDisposable.Dispose", 
    $sig.make(0x144D6, null, [], [])
  );

  $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.EnumConverter"), "System.Drawing.FontConverter/FontUnitConverter", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14B01, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValues", 
    $sig.make(0x14B02, $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.GraphicsContext", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8755, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8756, null, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x8758, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x8759, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Clip", 
    $sig.make(0x8748, $asm0B.TypeRef("System.Drawing.Region"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsCumulative", 
    $sig.make(0x8753, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Next", 
    $sig.make(0x874D, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Previous", 
    $sig.make(0x8751, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_State", 
    $sig.make(0x8745, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TransformOffset", 
    $sig.make(0x8747, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsCumulative", 
    $sig.make(0x8754, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Next", 
    $sig.make(0x874F, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Previous", 
    $sig.make(0x8752, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_State", 
    $sig.make(0x8746, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "contextState", $.Int32); 
  $.Field({Static:false, Public:false}, "transformOffset", $asm0B.TypeRef("System.Drawing.PointF")); 
  $.Field({Static:false, Public:false}, "clipRegion", $asm0B.TypeRef("System.Drawing.Region")); 
  $.Field({Static:false, Public:false}, "nextContext", $.Type); 
  $.Field({Static:false, Public:false}, "prevContext", $.Type); 
  $.Field({Static:false, Public:false}, "isCumulative", $.Boolean); 
  $.Property({Static:false, Public:true }, "State", $.Int32);

  $.Property({Static:false, Public:true }, "TransformOffset", $asm0B.TypeRef("System.Drawing.PointF"));

  $.Property({Static:false, Public:true }, "Clip", $asm0B.TypeRef("System.Drawing.Region"));

  $.Property({Static:false, Public:true }, "Next", $.Type);

  $.Property({Static:false, Public:true }, "Previous", $.Type);

  $.Property({Static:false, Public:true }, "IsCumulative", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Graphics", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7767, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMetafileComment", 
    $sig.make(0x7845, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BeginContainer", 
    $sig.make(0x7841, $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"), [
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BeginContainer", 
    $sig.make(0x7842, $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "BeginContainer", 
    $sig.make(0x7844, $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"), [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckErrorStatus", 
    $sig.make(0x7848, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x77B1, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
    $sig.make(0x7777, null, [
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Size")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
    $sig.make(0x7778, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Size")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
    $sig.make(0x7779, null, [
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Size"), $asm0B.TypeRef("System.Drawing.CopyPixelOperation")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
    $sig.make(0x777A, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Size"), $asm0B.TypeRef("System.Drawing.CopyPixelOperation")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x7772, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x7773, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
    $sig.make(0x778D, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
    $sig.make(0x778E, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
    $sig.make(0x778F, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
    $sig.make(0x7790, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawBezier", 
    $sig.make(0x7791, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawBezier", 
    $sig.make(0x7792, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.PointF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawBezier", 
    $sig.make(0x7794, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Point")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawBeziers", 
    $sig.make(0x7793, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawBeziers", 
    $sig.make(0x7795, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
    $sig.make(0x77AD, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
    $sig.make(0x77AE, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
    $sig.make(0x77AF, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
    $sig.make(0x77B0, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77A6, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77A7, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77A8, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77A9, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $.Int32, $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77AA, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77AB, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
    $sig.make(0x77AC, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $.Int32, $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
    $sig.make(0x779B, null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
    $sig.make(0x779C, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
    $sig.make(0x779D, null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
    $sig.make(0x779E, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawIcon", 
    $sig.make(0x77D9, null, [
        $asm0B.TypeRef("System.Drawing.Icon"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawIcon", 
    $sig.make(0x77DA, null, [$asm0B.TypeRef("System.Drawing.Icon"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawIconUnstretched", 
    $sig.make(0x77DB, null, [$asm0B.TypeRef("System.Drawing.Icon"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77DC, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77DD, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77DE, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77DF, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77E0, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77E1, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77E2, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77E3, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77E9, null, [$asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77EA, null, [$asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77EB, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77EC, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77ED, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77EE, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77EF, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F0, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F1, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F2, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F3, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F4, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F5, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F6, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F7, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F8, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77F9, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77FA, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77FB, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77FC, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77FD, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
    $sig.make(0x77FE, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
    $sig.make(0x77E4, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
    $sig.make(0x77E5, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
    $sig.make(0x77E6, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
    $sig.make(0x77E7, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaledAndClipped", 
    $sig.make(0x77E8, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
    $sig.make(0x7787, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
    $sig.make(0x7788, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.PointF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
    $sig.make(0x778A, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
    $sig.make(0x778B, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Point")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawLines", 
    $sig.make(0x7789, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawLines", 
    $sig.make(0x778C, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPath", 
    $sig.make(0x77A5, null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
    $sig.make(0x779F, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
    $sig.make(0x77A0, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
    $sig.make(0x77A1, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
    $sig.make(0x77A2, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPolygon", 
    $sig.make(0x77A3, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawPolygon", 
    $sig.make(0x77A4, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawRectangle", 
    $sig.make(0x7796, null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawRectangle", 
    $sig.make(0x7797, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawRectangle", 
    $sig.make(0x7798, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawRectangles", 
    $sig.make(0x7799, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawRectangles", 
    $sig.make(0x779A, null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawString", 
    $sig.make(0x77CB, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawString", 
    $sig.make(0x77CC, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.PointF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawString", 
    $sig.make(0x77CD, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawString", 
    $sig.make(0x77CE, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawString", 
    $sig.make(0x77CF, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "DrawString", 
    $sig.make(0x77D0, null, [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EndContainer", 
    $sig.make(0x7843, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x77FF, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7800, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7801, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7802, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7803, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7804, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7805, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7806, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7807, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7808, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7809, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x780A, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x780B, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x780C, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x780D, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x780E, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x780F, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7810, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7811, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7812, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7813, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7814, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7815, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7816, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7817, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7818, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7819, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x781A, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x781B, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x781C, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x781D, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x781E, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x781F, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7820, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7821, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
    $sig.make(0x7822, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExcludeClip", 
    $sig.make(0x782F, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ExcludeClip", 
    $sig.make(0x7830, null, [$asm0B.TypeRef("System.Drawing.Region")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
    $sig.make(0x77C4, null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
    $sig.make(0x77C5, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
    $sig.make(0x77C6, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
    $sig.make(0x77C7, null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
    $sig.make(0x77C8, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
    $sig.make(0x77C9, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
    $sig.make(0x77BC, null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
    $sig.make(0x77BD, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
    $sig.make(0x77BE, null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
    $sig.make(0x77BF, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPath", 
    $sig.make(0x77C3, null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPie", 
    $sig.make(0x77C0, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPie", 
    $sig.make(0x77C1, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPie", 
    $sig.make(0x77C2, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
    $sig.make(0x77B8, null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
    $sig.make(0x77B9, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
    $sig.make(0x77BA, null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
    $sig.make(0x77BB, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
    $sig.make(0x77B2, null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
    $sig.make(0x77B3, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
    $sig.make(0x77B4, null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
    $sig.make(0x77B5, null, [
        $asm0B.TypeRef("System.Drawing.Brush"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRectangles", 
    $sig.make(0x77B6, null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRectangles", 
    $sig.make(0x77B7, null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FillRegion", 
    $sig.make(0x77CA, null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Region")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x7774, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x7775, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flush", 
    $sig.make(0x7776, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.FlushIntention")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
    $sig.make(0x7768, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
    $sig.make(0x776A, $.Type, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:true , Public:true }, "FromHdcInternal", 
    $sig.make(0x7769, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:true , Public:true }, "FromHwnd", 
    $sig.make(0x776B, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:true , Public:true }, "FromHwndInternal", 
    $sig.make(0x776C, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:true , Public:true }, "FromImage", 
    $sig.make(0x776D, $.Type, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Clip", 
    $sig.make(0x7761, $asm0B.TypeRef("System.Drawing.Region"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ClipBounds", 
    $sig.make(0x7763, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CompositingMode", 
    $sig.make(0x7747, $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CompositingQuality", 
    $sig.make(0x774B, $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DpiX", 
    $sig.make(0x775F, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DpiY", 
    $sig.make(0x7760, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InterpolationMode", 
    $sig.make(0x7757, $asm0B.TypeRef("System.Drawing.Drawing2D.InterpolationMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsClipEmpty", 
    $sig.make(0x7764, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsVisibleClipEmpty", 
    $sig.make(0x7766, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NativeGraphics", 
    $sig.make(0x7746, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_PageScale", 
    $sig.make(0x775D, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageUnit", 
    $sig.make(0x775B, $asm0B.TypeRef("System.Drawing.GraphicsUnit"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PixelOffsetMode", 
    $sig.make(0x7753, $asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PrintingHelper", 
    $sig.make(0x7755, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RenderingOrigin", 
    $sig.make(0x7749, $asm0B.TypeRef("System.Drawing.Point"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SmoothingMode", 
    $sig.make(0x7751, $asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TextContrast", 
    $sig.make(0x774F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TextRenderingHint", 
    $sig.make(0x774D, $asm0B.TypeRef("System.Drawing.Text.TextRenderingHint"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
    $sig.make(0x7759, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_VisibleClipBounds", 
    $sig.make(0x7765, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetContextInfo", 
    $sig.make(0x7834, $.Object, [], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:true , Public:true }, "GetHalftonePalette", 
    $sig.make(0x7846, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHdc", 
    $sig.make(0x776E, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetNearestColor", 
    $sig.make(0x7786, $asm0B.TypeRef("System.Drawing.Color"), [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IgnoreMetafileErrors", 
    $sig.make(0x7849, null, [$asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
    $sig.make(0x782C, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
    $sig.make(0x782D, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
    $sig.make(0x782E, null, [$asm0B.TypeRef("System.Drawing.Region")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x7835, $.Boolean, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x7836, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x7837, $.Boolean, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x7838, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x7839, $.Boolean, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x783A, $.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x783B, $.Boolean, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x783C, $.Boolean, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureCharacterRanges", 
    $sig.make(0x77D8, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Region")]), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D1, $asm0B.TypeRef("System.Drawing.SizeF"), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.SizeF"), $asm0B.TypeRef("System.Drawing.StringFormat"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D2, $asm0B.TypeRef("System.Drawing.SizeF"), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D3, $asm0B.TypeRef("System.Drawing.SizeF"), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.SizeF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D4, $asm0B.TypeRef("System.Drawing.SizeF"), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $asm0B.TypeRef("System.Drawing.SizeF"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D5, $asm0B.TypeRef("System.Drawing.SizeF"), [$.String, $asm0B.TypeRef("System.Drawing.Font")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D6, $asm0B.TypeRef("System.Drawing.SizeF"), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
    $sig.make(0x77D7, $asm0B.TypeRef("System.Drawing.SizeF"), [
        $.String, $asm0B.TypeRef("System.Drawing.Font"), 
        $.Int32, $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x777C, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x777D, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnDomainUnload", 
    $sig.make(0x7847, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

  $.ExternalMethod({Static:false, Public:false}, "PopContext", 
    $sig.make(0x783E, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PushContext", 
    $sig.make(0x783D, null, [$asm0B.TypeRef("System.Drawing.GraphicsContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReleaseHdc", 
    $sig.make(0x776F, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

  $.ExternalMethod({Static:false, Public:true }, "ReleaseHdc", 
    $sig.make(0x7770, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReleaseHdcInternal", 
    $sig.make(0x7771, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:false, Public:true }, "ResetClip", 
    $sig.make(0x7831, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
    $sig.make(0x777B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Restore", 
    $sig.make(0x7840, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x7782, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x7783, null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x783F, $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsState"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x7780, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x7781, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Clip", 
    $sig.make(0x7762, null, [$asm0B.TypeRef("System.Drawing.Region")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CompositingMode", 
    $sig.make(0x7748, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.CompositingMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CompositingQuality", 
    $sig.make(0x774C, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InterpolationMode", 
    $sig.make(0x7758, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.InterpolationMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PageScale", 
    $sig.make(0x775E, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PageUnit", 
    $sig.make(0x775C, null, [$asm0B.TypeRef("System.Drawing.GraphicsUnit")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PixelOffsetMode", 
    $sig.make(0x7754, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_PrintingHelper", 
    $sig.make(0x7756, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RenderingOrigin", 
    $sig.make(0x774A, null, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SmoothingMode", 
    $sig.make(0x7752, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TextContrast", 
    $sig.make(0x7750, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TextRenderingHint", 
    $sig.make(0x774E, null, [$asm0B.TypeRef("System.Drawing.Text.TextRenderingHint")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
    $sig.make(0x775A, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7823, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7824, null, [$.Type, $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7825, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7826, null, [$asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7827, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7828, null, [$asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x7829, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x782A, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetClip", 
    $sig.make(0x782B, null, [$asm0B.TypeRef("System.Drawing.Region"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
    $sig.make(0x7784, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), 
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
    $sig.make(0x7785, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), 
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateClip", 
    $sig.make(0x7832, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateClip", 
    $sig.make(0x7833, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x777E, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x777F, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.Field({Static:false, Public:false}, "previousContext", $asm0B.TypeRef("System.Drawing.GraphicsContext")); 
  $.Field({Static:true , Public:false}, "syncObject", $.Object); 
  $.Field({Static:false, Public:false}, "nativeGraphics", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "nativeHdc", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "printingHelper", $.Object); 
  $.Field({Static:true , Public:false}, "halftonePalette", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "backingImage", $asm0B.TypeRef("System.Drawing.Image")); 
  $.Property({Static:false, Public:false}, "NativeGraphics", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "CompositingMode", $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingMode"));

  $.Property({Static:false, Public:true }, "RenderingOrigin", $asm0B.TypeRef("System.Drawing.Point"));

  $.Property({Static:false, Public:true }, "CompositingQuality", $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality"));

  $.Property({Static:false, Public:true }, "TextRenderingHint", $asm0B.TypeRef("System.Drawing.Text.TextRenderingHint"));

  $.Property({Static:false, Public:true }, "TextContrast", $.Int32);

  $.Property({Static:false, Public:true }, "SmoothingMode", $asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode"));

  $.Property({Static:false, Public:true }, "PixelOffsetMode", $asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode"));

  $.Property({Static:false, Public:false}, "PrintingHelper", $.Object);

  $.Property({Static:false, Public:true }, "InterpolationMode", $asm0B.TypeRef("System.Drawing.Drawing2D.InterpolationMode"));

  $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

  $.Property({Static:false, Public:true }, "PageUnit", $asm0B.TypeRef("System.Drawing.GraphicsUnit"));

  $.Property({Static:false, Public:true }, "PageScale", $.Single);

  $.Property({Static:false, Public:true }, "DpiX", $.Single);

  $.Property({Static:false, Public:true }, "DpiY", $.Single);

  $.Property({Static:false, Public:true }, "Clip", $asm0B.TypeRef("System.Drawing.Region"));

  $.Property({Static:false, Public:true }, "ClipBounds", $asm0B.TypeRef("System.Drawing.RectangleF"));

  $.Property({Static:false, Public:true }, "IsClipEmpty", $.Boolean);

  $.Property({Static:false, Public:true }, "VisibleClipBounds", $asm0B.TypeRef("System.Drawing.RectangleF"));

  $.Property({Static:false, Public:true }, "IsVisibleClipEmpty", $.Boolean);

  $.ImplementInterfaces($asm0B.TypeRef("System.Drawing.IDeviceContext"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeDelegate("System.Drawing.Graphics/DrawImageAbort", false, []);

JSIL.MakeDelegate("System.Drawing.Graphics/EnumerateMetafileProc", false, []);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Icon", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7001, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7002, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7003, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7004, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7006, null, [$.String, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7007, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7008, null, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x700A, null, [
        $.Type, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x700B, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x700C, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x700D, null, [$asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x700F, null, [
        $asm06.TypeRef("System.IO.Stream"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x7010, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "BitmapHasAlpha", 
    $sig.make(0x7024, $.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.BitmapData")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x7013, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CopyBitmapData", 
    $sig.make(0x7022, null, [$asm0B.TypeRef("System.Drawing.Imaging.BitmapData"), $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DestroyHandle", 
    $sig.make(0x7014, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x7016, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x7017, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Draw", 
    $sig.make(0x7019, null, [
        $asm0B.TypeRef("System.Drawing.Graphics"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Draw", 
    $sig.make(0x701A, null, [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DrawIcon", 
    $sig.make(0x7018, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DrawUnstretched", 
    $sig.make(0x701B, null, [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExtractAssociatedIcon", 
    $sig.make(0x7011, $.Type, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ExtractAssociatedIcon", 
    $sig.make(0x7012, $.Type, [$.String, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x701C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHandle", 
    $sig.make(0x701D, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
    $sig.make(0x6FFC, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x6FFD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x6FFE, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x7000, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0x7020, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Save", 
    $sig.make(0x7021, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ISerializable.GetObjectData", 
    $sig.make(0x7027, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToBitmap", 
    $sig.make(0x7025, $asm0B.TypeRef("System.Drawing.Bitmap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x7026, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "bitDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "iconData", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "bestImageOffset", $.Int32); 
  $.Field({Static:false, Public:false}, "bestBitDepth", $.Int32); 
  $.Field({Static:false, Public:false}, "iconSize", $asm0B.TypeRef("System.Drawing.Size")); 
  $.Field({Static:false, Public:false}, "handle", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "ownHandle", $.Boolean); 
  $.Property({Static:false, Public:true }, "Handle", $asm06.TypeRef("System.IntPtr"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Height", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"));

  $.Property({Static:false, Public:true }, "Width", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), $asm06.TypeRef("System.ICloneable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.IconEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.IconConverter")]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter"), "System.Drawing.IconConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x144F6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x144F2, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x144F3, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x144F4, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x144F5, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.ImageAnimator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14508, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Animate", 
    $sig.make(0x1450D, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AnimateImages50ms", 
    $sig.make(0x14510, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CanAnimate", 
    $sig.make(0x1450E, $.Boolean, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StopAnimate", 
    $sig.make(0x1450F, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UpdateFrames", 
    $sig.make(0x1450A, null, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "UpdateFrames", 
    $sig.make(0x1450C, null, [], [])
  );

  $.Field({Static:true , Public:false}, "imageInfoList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Drawing.ImageAnimator/ImageInfo")])); 
  $.Field({Static:true , Public:false}, "anyFrameDirty", $.Boolean); 
  $.Field({Static:true , Public:false}, "animationThread", $asm06.TypeRef("System.Threading.Thread")); 
  $.Field({Static:true , Public:false}, "rwImgListLock", $asm06.TypeRef("System.Threading.ReaderWriterLock")); 
  $.Field({Static:true , Public:false}, "threadWriterLockWaitCount", $.Int32)
    .Attribute($asm06.TypeRef("System.ThreadStaticAttribute")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.ImageAnimator/ImageInfo", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14B2B, null, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FrameDelay", 
    $sig.make(0x14B33, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Animated", 
    $sig.make(0x14B10, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Frame", 
    $sig.make(0x14B12, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FrameChangedHandler", 
    $sig.make(0x14B20, $asm06.TypeRef("System.EventHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FrameCount", 
    $sig.make(0x14B25, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FrameDirty", 
    $sig.make(0x14B1C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_FrameTimer", 
    $sig.make(0x14B27, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_Image", 
    $sig.make(0x14B2A, $asm0B.TypeRef("System.Drawing.Image"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnFrameChanged", 
    $sig.make(0x14B39, null, [$asm06.TypeRef("System.EventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Frame", 
    $sig.make(0x14B1A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FrameChangedHandler", 
    $sig.make(0x14B22, null, [$asm06.TypeRef("System.EventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_FrameTimer", 
    $sig.make(0x14B29, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "UpdateFrame", 
    $sig.make(0x14B36, null, [], [])
  );

  $.Constant({Static:true , Public:false}, "PropertyTagFrameDelay", 20736); 
  $.Field({Static:false, Public:false}, "image", $asm0B.TypeRef("System.Drawing.Image")); 
  $.Field({Static:false, Public:false}, "frame", $.Int32); 
  $.Field({Static:false, Public:false}, "frameCount", $.Int32); 
  $.Field({Static:false, Public:false}, "frameDirty", $.Boolean); 
  $.Field({Static:false, Public:false}, "animated", $.Boolean); 
  $.Field({Static:false, Public:false}, "onFrameChangedHandler", $asm06.TypeRef("System.EventHandler")); 
  $.Field({Static:false, Public:false}, "frameDelay", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:false, Public:false}, "frameTimer", $.Int32); 
  $.Property({Static:false, Public:true }, "Animated", $.Boolean);

  $.Property({Static:false, Public:true }, "Frame", $.Int32);

  $.Property({Static:false, Public:true }, "FrameDirty", $.Boolean);

  $.Property({Static:false, Public:true }, "FrameChangedHandler", $asm06.TypeRef("System.EventHandler"));

  $.Property({Static:false, Public:true }, "FrameCount", $.Int32);

  $.Property({Static:false, Public:false}, "FrameTimer", $.Int32);

  $.Property({Static:false, Public:false}, "Image", $asm0B.TypeRef("System.Drawing.Image"));

});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.ImageConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14535, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x1452E, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x1452F, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x14530, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x14531, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetBitmapStream", 
    $sig.make(0x14532, $asm06.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0x14533, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0x14534, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.Field({Static:false, Public:false}, "iconType", $asm06.TypeRef("System.Type")); 
});

JSIL.MakeStaticClass("System.Drawing.IntSecurity", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:false}, "DemandReadFileIO", 
    $sig.make(0x14567, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DemandWriteFileIO", 
    $sig.make(0x14568, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AllPrintingAndUnmanagedCode", 
    $sig.make(0x14566, $asm06.TypeRef("System.Security.PermissionSet"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HasPermission", 
    $sig.make(0x1456A, $.Boolean, [$asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnsafeGetFullPath", 
    $sig.make(0x14569, $.String, [$.String], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "AllWindows", $asm06.TypeRef("System.Security.Permissions.UIPermission")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SafeSubWindows", $asm06.TypeRef("System.Security.Permissions.UIPermission")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "UnmanagedCode", $asm06.TypeRef("System.Security.CodeAccessPermission")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "ObjectFromWin32Handle", $asm06.TypeRef("System.Security.CodeAccessPermission"), function ($pi) {
      return $pi.UnmanagedCode;
    }); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Win32HandleManipulation", $asm06.TypeRef("System.Security.CodeAccessPermission"), function ($pi) {
      return $pi.UnmanagedCode;
    }); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "NoPrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "SafePrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultPrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "AllPrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
  $.Field({Static:true , Public:false}, "allPrintingAndUnmanagedCode", $asm06.TypeRef("System.Security.PermissionSet")); 
  $.Property({Static:true , Public:true }, "AllPrintingAndUnmanagedCode", $asm06.TypeRef("System.Security.PermissionSet"));

});

JSIL.MakeEnum(
  "System.Drawing.KnownColor", true, {
    ActiveBorder: 1, 
    ActiveCaption: 2, 
    ActiveCaptionText: 3, 
    AppWorkspace: 4, 
    Control: 5, 
    ControlDark: 6, 
    ControlDarkDark: 7, 
    ControlLight: 8, 
    ControlLightLight: 9, 
    ControlText: 10, 
    Desktop: 11, 
    GrayText: 12, 
    Highlight: 13, 
    HighlightText: 14, 
    HotTrack: 15, 
    InactiveBorder: 16, 
    InactiveCaption: 17, 
    InactiveCaptionText: 18, 
    Info: 19, 
    InfoText: 20, 
    Menu: 21, 
    MenuText: 22, 
    ScrollBar: 23, 
    Window: 24, 
    WindowFrame: 25, 
    WindowText: 26, 
    Transparent: 27, 
    AliceBlue: 28, 
    AntiqueWhite: 29, 
    Aqua: 30, 
    Aquamarine: 31, 
    Azure: 32, 
    Beige: 33, 
    Bisque: 34, 
    Black: 35, 
    BlanchedAlmond: 36, 
    Blue: 37, 
    BlueViolet: 38, 
    Brown: 39, 
    BurlyWood: 40, 
    CadetBlue: 41, 
    Chartreuse: 42, 
    Chocolate: 43, 
    Coral: 44, 
    CornflowerBlue: 45, 
    Cornsilk: 46, 
    Crimson: 47, 
    Cyan: 48, 
    DarkBlue: 49, 
    DarkCyan: 50, 
    DarkGoldenrod: 51, 
    DarkGray: 52, 
    DarkGreen: 53, 
    DarkKhaki: 54, 
    DarkMagenta: 55, 
    DarkOliveGreen: 56, 
    DarkOrange: 57, 
    DarkOrchid: 58, 
    DarkRed: 59, 
    DarkSalmon: 60, 
    DarkSeaGreen: 61, 
    DarkSlateBlue: 62, 
    DarkSlateGray: 63, 
    DarkTurquoise: 64, 
    DarkViolet: 65, 
    DeepPink: 66, 
    DeepSkyBlue: 67, 
    DimGray: 68, 
    DodgerBlue: 69, 
    Firebrick: 70, 
    FloralWhite: 71, 
    ForestGreen: 72, 
    Fuchsia: 73, 
    Gainsboro: 74, 
    GhostWhite: 75, 
    Gold: 76, 
    Goldenrod: 77, 
    Gray: 78, 
    Green: 79, 
    GreenYellow: 80, 
    Honeydew: 81, 
    HotPink: 82, 
    IndianRed: 83, 
    Indigo: 84, 
    Ivory: 85, 
    Khaki: 86, 
    Lavender: 87, 
    LavenderBlush: 88, 
    LawnGreen: 89, 
    LemonChiffon: 90, 
    LightBlue: 91, 
    LightCoral: 92, 
    LightCyan: 93, 
    LightGoldenrodYellow: 94, 
    LightGray: 95, 
    LightGreen: 96, 
    LightPink: 97, 
    LightSalmon: 98, 
    LightSeaGreen: 99, 
    LightSkyBlue: 100, 
    LightSlateGray: 101, 
    LightSteelBlue: 102, 
    LightYellow: 103, 
    Lime: 104, 
    LimeGreen: 105, 
    Linen: 106, 
    Magenta: 107, 
    Maroon: 108, 
    MediumAquamarine: 109, 
    MediumBlue: 110, 
    MediumOrchid: 111, 
    MediumPurple: 112, 
    MediumSeaGreen: 113, 
    MediumSlateBlue: 114, 
    MediumSpringGreen: 115, 
    MediumTurquoise: 116, 
    MediumVioletRed: 117, 
    MidnightBlue: 118, 
    MintCream: 119, 
    MistyRose: 120, 
    Moccasin: 121, 
    NavajoWhite: 122, 
    Navy: 123, 
    OldLace: 124, 
    Olive: 125, 
    OliveDrab: 126, 
    Orange: 127, 
    OrangeRed: 128, 
    Orchid: 129, 
    PaleGoldenrod: 130, 
    PaleGreen: 131, 
    PaleTurquoise: 132, 
    PaleVioletRed: 133, 
    PapayaWhip: 134, 
    PeachPuff: 135, 
    Peru: 136, 
    Pink: 137, 
    Plum: 138, 
    PowderBlue: 139, 
    Purple: 140, 
    Red: 141, 
    RosyBrown: 142, 
    RoyalBlue: 143, 
    SaddleBrown: 144, 
    Salmon: 145, 
    SandyBrown: 146, 
    SeaGreen: 147, 
    SeaShell: 148, 
    Sienna: 149, 
    Silver: 150, 
    SkyBlue: 151, 
    SlateBlue: 152, 
    SlateGray: 153, 
    Snow: 154, 
    SpringGreen: 155, 
    SteelBlue: 156, 
    Tan: 157, 
    Teal: 158, 
    Thistle: 159, 
    Tomato: 160, 
    Turquoise: 161, 
    Violet: 162, 
    Wheat: 163, 
    White: 164, 
    WhiteSmoke: 165, 
    Yellow: 166, 
    YellowGreen: 167, 
    ButtonFace: 168, 
    ButtonHighlight: 169, 
    ButtonShadow: 170, 
    GradientActiveCaption: 171, 
    GradientInactiveCaption: 172, 
    MenuBar: 173, 
    MenuHighlight: 174
  }, false
);

JSIL.MakeStaticClass("System.Drawing.KnownColorTable", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "ArgbToKnownColor", 
    $sig.make(0x14636, $asm0B.TypeRef("System.Drawing.Color"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Encode", 
    $sig.make(0x14642, $.Int32, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnsureColorNameTable", 
    $sig.make(0x1463B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnsureColorTable", 
    $sig.make(0x14639, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromWin32Value", 
    $sig.make(0x14647, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitColorNameTable", 
    $sig.make(0x1463C, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitColorTable", 
    $sig.make(0x1463A, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "KnownColorToArgb", 
    $sig.make(0x1463D, $.Int32, [$asm0B.TypeRef("System.Drawing.KnownColor")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "KnownColorToName", 
    $sig.make(0x1463F, $.String, [$asm0B.TypeRef("System.Drawing.KnownColor")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnUserPreferenceChanging", 
    $sig.make(0x14649, null, [$.Object, $asm07.TypeRef("Microsoft.Win32.UserPreferenceChangingEventArgs")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SystemColorToArgb", 
    $sig.make(0x14640, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UpdateSystemColors", 
    $sig.make(0x1464A, null, [$jsilcore.TypeRef("System.Array", [$.Int32])], [])
  );

  $.Constant({Static:true , Public:false}, "AlphaShift", 24); 
  $.Constant({Static:true , Public:false}, "RedShift", 16); 
  $.Constant({Static:true , Public:false}, "GreenShift", 8); 
  $.Constant({Static:true , Public:false}, "BlueShift", 0); 
  $.Constant({Static:true , Public:false}, "Win32RedShift", 0); 
  $.Constant({Static:true , Public:false}, "Win32GreenShift", 8); 
  $.Constant({Static:true , Public:false}, "Win32BlueShift", 16); 
  $.Field({Static:true , Public:false}, "colorTable", $jsilcore.TypeRef("System.Array", [$.Int32])); 
  $.Field({Static:true , Public:false}, "colorNameTable", $jsilcore.TypeRef("System.Array", [$.String])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.NativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9393, null, [], [])
  );

  $.Constant({Static:true , Public:true }, "PC_NOCOLLAPSE", 4); 
  $.Constant({Static:true , Public:true }, "MAX_PATH", 260); 
  $.Constant({Static:true , Public:false}, "SM_REMOTESESSION", 4096); 
  $.Constant({Static:true , Public:false}, "OBJ_DC", 3); 
  $.Constant({Static:true , Public:false}, "OBJ_METADC", 4); 
  $.Constant({Static:true , Public:false}, "OBJ_MEMDC", 10); 
  $.Constant({Static:true , Public:false}, "OBJ_ENHMETADC", 12); 
  $.Constant({Static:true , Public:false}, "DIB_RGB_COLORS", 0); 
  $.Constant({Static:true , Public:false}, "BI_BITFIELDS", 3); 
  $.Constant({Static:true , Public:false}, "BI_RGB", 0); 
  $.Constant({Static:true , Public:false}, "BITMAPINFO_MAX_COLORSIZE", 256); 
  $.Constant({Static:true , Public:false}, "SPI_GETICONTITLELOGFONT", 31); 
  $.Constant({Static:true , Public:false}, "SPI_GETNONCLIENTMETRICS", 41); 
  $.Constant({Static:true , Public:false}, "DEFAULT_GUI_FONT", 17); 
  $.Field({Static:true , Public:false}, "NullHandleRef", $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA50, null, [], []), 
    function NativeMethods__cctor () {
      $thisType.NullHandleRef = new $asm06.System.Runtime.InteropServices.HandleRef();
    }
  );

});

JSIL.MakeEnum(
  "System.Drawing.NativeMethods/RegionFlags", false, {
    ERROR: 0, 
    NULLREGION: 1, 
    SIMPLEREGION: 2, 
    COMPLEXREGION: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.NativeMethods/BITMAPINFO_FLAT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "bmiHeader_biSize", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biPlanes", $.Int16); 
  $.Field({Static:false, Public:true }, "bmiHeader_biBitCount", $.Int16); 
  $.Field({Static:false, Public:true }, "bmiHeader_biCompression", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biSizeImage", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biXPelsPerMeter", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biYPelsPerMeter", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biClrUsed", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiHeader_biClrImportant", $.Int32); 
  $.Field({Static:false, Public:true }, "bmiColors", $jsilcore.TypeRef("System.Array", [$.Byte])); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.NativeMethods/BITMAPINFOHEADER", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14B5F, null, [], [])
  );

  $.Field({Static:false, Public:true }, "biSize", $.Int32); 
  $.Field({Static:false, Public:true }, "biWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "biHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "biPlanes", $.Int16); 
  $.Field({Static:false, Public:true }, "biBitCount", $.Int16); 
  $.Field({Static:false, Public:true }, "biCompression", $.Int32); 
  $.Field({Static:false, Public:true }, "biSizeImage", $.Int32); 
  $.Field({Static:false, Public:true }, "biXPelsPerMeter", $.Int32); 
  $.Field({Static:false, Public:true }, "biYPelsPerMeter", $.Int32); 
  $.Field({Static:false, Public:true }, "biClrUsed", $.Int32); 
  $.Field({Static:false, Public:true }, "biClrImportant", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.NativeMethods/PALETTEENTRY", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "peRed", $.Byte); 
  $.Field({Static:false, Public:true }, "peGreen", $.Byte); 
  $.Field({Static:false, Public:true }, "peBlue", $.Byte); 
  $.Field({Static:false, Public:true }, "peFlags", $.Byte); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.NativeMethods/RGBQUAD", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "rgbBlue", $.Byte); 
  $.Field({Static:false, Public:true }, "rgbGreen", $.Byte); 
  $.Field({Static:false, Public:true }, "rgbRed", $.Byte); 
  $.Field({Static:false, Public:true }, "rgbReserved", $.Byte); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.NativeMethods/NONCLIENTMETRICS", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBD73, null, [], [])
  );

  $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
  $.Field({Static:false, Public:true }, "iBorderWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "iScrollWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "iScrollHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "iCaptionWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "iCaptionHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfCaptionFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")); 
  $.Field({Static:false, Public:true }, "iSmCaptionWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "iSmCaptionHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfSmCaptionFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")); 
  $.Field({Static:false, Public:true }, "iMenuWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "iMenuHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfMenuFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")); 
  $.Field({Static:false, Public:true }, "lfStatusFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")); 
  $.Field({Static:false, Public:true }, "lfMessageFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")); 
});

JSIL.MakeInterface(
  "System.Drawing.Internal.ISystemColorTracker", false, [], function ($) {
    $.Method({}, "OnSystemColorChanged", $sig.make(0x85B1, null, [], []));
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Pen", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x85D4, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x85D5, null, [$asm0B.TypeRef("System.Drawing.Color"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x85D6, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x85D7, null, [$asm0B.TypeRef("System.Drawing.Color"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x85D8, null, [$asm0B.TypeRef("System.Drawing.Brush")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x85D9, null, [$asm0B.TypeRef("System.Drawing.Brush"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x85E0, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x85E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x85E3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "EnsureValidDashPattern", 
    $sig.make(0x85FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x85E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Alignment", 
    $sig.make(0x85C3, $asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Brush", 
    $sig.make(0x85CA, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Color", 
    $sig.make(0x85C8, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CompoundArray", 
    $sig.make(0x85D2, $jsilcore.TypeRef("System.Array", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CustomEndCap", 
    $sig.make(0x85BF, $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CustomStartCap", 
    $sig.make(0x85BD, $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DashCap", 
    $sig.make(0x85B9, $asm0B.TypeRef("System.Drawing.Drawing2D.DashCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DashOffset", 
    $sig.make(0x85CE, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DashPattern", 
    $sig.make(0x85D0, $jsilcore.TypeRef("System.Array", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DashStyle", 
    $sig.make(0x85CC, $asm0B.TypeRef("System.Drawing.Drawing2D.DashStyle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EndCap", 
    $sig.make(0x85B7, $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineJoin", 
    $sig.make(0x85BB, $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MiterLimit", 
    $sig.make(0x85C1, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NativePen", 
    $sig.make(0x85B2, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_PenType", 
    $sig.make(0x85C7, $asm0B.TypeRef("System.Drawing.Drawing2D.PenType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StartCap", 
    $sig.make(0x85B5, $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
    $sig.make(0x85C5, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x85B3, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNativeBrush", 
    $sig.make(0x85FB, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalSetColor", 
    $sig.make(0x85F6, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x85EC, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x85EE, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
    $sig.make(0x85EA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x85F4, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x85F5, null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x85F2, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x85F3, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Alignment", 
    $sig.make(0x85C4, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Brush", 
    $sig.make(0x85CB, null, [$asm0B.TypeRef("System.Drawing.Brush")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Color", 
    $sig.make(0x85C9, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CompoundArray", 
    $sig.make(0x85D3, null, [$jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CustomEndCap", 
    $sig.make(0x85C0, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CustomStartCap", 
    $sig.make(0x85BE, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DashCap", 
    $sig.make(0x85BA, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.DashCap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DashOffset", 
    $sig.make(0x85CF, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DashPattern", 
    $sig.make(0x85D1, null, [$jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DashStyle", 
    $sig.make(0x85CD, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.DashStyle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_EndCap", 
    $sig.make(0x85B8, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LineJoin", 
    $sig.make(0x85BC, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MiterLimit", 
    $sig.make(0x85C2, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_StartCap", 
    $sig.make(0x85B6, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
    $sig.make(0x85C6, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x85B4, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetLineCap", 
    $sig.make(0x85E7, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.DashCap")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativePen", 
    $sig.make(0x85DE, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ISystemColorTracker.OnSystemColorChanged", 
    $sig.make(0x85FF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x85EF, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x85F1, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.Field({Static:false, Public:false}, "nativePen", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "color", $asm0B.TypeRef("System.Drawing.Color")); 
  $.Field({Static:false, Public:false}, "immutable", $.Boolean); 
  $.Property({Static:false, Public:false}, "NativePen", $asm06.TypeRef("System.IntPtr"))
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Width", $.Single);

  $.Property({Static:false, Public:true }, "StartCap", $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"));

  $.Property({Static:false, Public:true }, "EndCap", $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"));

  $.Property({Static:false, Public:true }, "DashCap", $asm0B.TypeRef("System.Drawing.Drawing2D.DashCap"));

  $.Property({Static:false, Public:true }, "LineJoin", $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"));

  $.Property({Static:false, Public:true }, "CustomStartCap", $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"));

  $.Property({Static:false, Public:true }, "CustomEndCap", $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"));

  $.Property({Static:false, Public:true }, "MiterLimit", $.Single);

  $.Property({Static:false, Public:true }, "Alignment", $asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment"));

  $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

  $.Property({Static:false, Public:true }, "PenType", $asm0B.TypeRef("System.Drawing.Drawing2D.PenType"));

  $.Property({Static:false, Public:true }, "Color", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:false, Public:true }, "Brush", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:false, Public:true }, "DashStyle", $asm0B.TypeRef("System.Drawing.Drawing2D.DashStyle"));

  $.Property({Static:false, Public:true }, "DashOffset", $.Single);

  $.Property({Static:false, Public:true }, "DashPattern", $jsilcore.TypeRef("System.Array", [$.Single]));

  $.Property({Static:false, Public:true }, "CompoundArray", $jsilcore.TypeRef("System.Array", [$.Single]));

  $.ImplementInterfaces(
      $asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker"), $asm06.TypeRef("System.ICloneable"), 
      $asm06.TypeRef("System.IDisposable")
  )
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Pens", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14786, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
    $sig.make(0x146E5, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
    $sig.make(0x146E6, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
    $sig.make(0x146E7, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
    $sig.make(0x146E8, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
    $sig.make(0x146E9, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
    $sig.make(0x146EA, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
    $sig.make(0x146EB, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Black", 
    $sig.make(0x146EC, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
    $sig.make(0x146ED, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
    $sig.make(0x146EE, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
    $sig.make(0x146EF, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
    $sig.make(0x146F0, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
    $sig.make(0x146F1, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
    $sig.make(0x146F2, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
    $sig.make(0x146F3, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
    $sig.make(0x146F4, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
    $sig.make(0x146F5, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
    $sig.make(0x146F6, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
    $sig.make(0x146F7, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
    $sig.make(0x146F8, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
    $sig.make(0x146F9, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
    $sig.make(0x146FA, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
    $sig.make(0x146FB, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
    $sig.make(0x146FC, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
    $sig.make(0x146FD, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
    $sig.make(0x146FE, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
    $sig.make(0x146FF, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
    $sig.make(0x14700, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
    $sig.make(0x14701, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
    $sig.make(0x14702, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
    $sig.make(0x14703, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
    $sig.make(0x14704, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
    $sig.make(0x14705, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
    $sig.make(0x14706, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
    $sig.make(0x14707, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
    $sig.make(0x14708, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
    $sig.make(0x14709, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
    $sig.make(0x1470A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
    $sig.make(0x1470B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
    $sig.make(0x1470C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
    $sig.make(0x1470D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
    $sig.make(0x1470E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
    $sig.make(0x1470F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
    $sig.make(0x14710, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
    $sig.make(0x14711, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
    $sig.make(0x14712, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
    $sig.make(0x14713, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
    $sig.make(0x14714, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
    $sig.make(0x14715, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
    $sig.make(0x14716, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
    $sig.make(0x14717, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Green", 
    $sig.make(0x14718, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
    $sig.make(0x14719, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
    $sig.make(0x1471A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
    $sig.make(0x1471B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
    $sig.make(0x1471C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
    $sig.make(0x1471D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
    $sig.make(0x1471E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
    $sig.make(0x1471F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
    $sig.make(0x14720, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
    $sig.make(0x14721, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
    $sig.make(0x14722, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
    $sig.make(0x14723, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
    $sig.make(0x14724, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
    $sig.make(0x14725, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
    $sig.make(0x14726, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
    $sig.make(0x14727, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
    $sig.make(0x14729, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
    $sig.make(0x14728, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
    $sig.make(0x1472A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
    $sig.make(0x1472B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
    $sig.make(0x1472C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
    $sig.make(0x1472D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
    $sig.make(0x1472E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
    $sig.make(0x1472F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
    $sig.make(0x14730, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
    $sig.make(0x14731, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
    $sig.make(0x14732, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
    $sig.make(0x14733, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
    $sig.make(0x14734, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
    $sig.make(0x14735, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
    $sig.make(0x14736, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
    $sig.make(0x14737, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
    $sig.make(0x14738, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
    $sig.make(0x14739, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
    $sig.make(0x1473A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
    $sig.make(0x1473B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
    $sig.make(0x1473D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
    $sig.make(0x1473F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
    $sig.make(0x14740, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
    $sig.make(0x14741, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
    $sig.make(0x14742, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
    $sig.make(0x14743, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
    $sig.make(0x14744, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
    $sig.make(0x14746, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
    $sig.make(0x14747, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
    $sig.make(0x14748, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
    $sig.make(0x14749, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
    $sig.make(0x1474B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
    $sig.make(0x1474D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
    $sig.make(0x1474E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
    $sig.make(0x1474F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
    $sig.make(0x14750, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
    $sig.make(0x14752, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
    $sig.make(0x14755, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
    $sig.make(0x14757, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
    $sig.make(0x14758, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
    $sig.make(0x14759, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
    $sig.make(0x1475A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
    $sig.make(0x1475C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
    $sig.make(0x1475E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
    $sig.make(0x14760, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
    $sig.make(0x14761, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Red", 
    $sig.make(0x14762, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
    $sig.make(0x14763, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
    $sig.make(0x14764, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
    $sig.make(0x14765, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
    $sig.make(0x14766, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
    $sig.make(0x14768, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
    $sig.make(0x1476B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
    $sig.make(0x1476C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
    $sig.make(0x1476E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
    $sig.make(0x14770, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
    $sig.make(0x14772, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
    $sig.make(0x14774, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
    $sig.make(0x14776, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
    $sig.make(0x14778, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
    $sig.make(0x14779, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
    $sig.make(0x1477A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
    $sig.make(0x1477B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
    $sig.make(0x1477C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
    $sig.make(0x1477D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
    $sig.make(0x1477E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
    $sig.make(0x146E4, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
    $sig.make(0x1477F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
    $sig.make(0x14781, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_White", 
    $sig.make(0x14782, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
    $sig.make(0x14783, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
    $sig.make(0x14780, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
    $sig.make(0x14784, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
    $sig.make(0x14785, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "TransparentKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AliceBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AntiqueWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AquaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AquamarineKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "AzureKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BeigeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BisqueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlackKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlanchedAlmondKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BlueVioletKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "BurlyWoodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CadetBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChartreuseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChocolateKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ChoralKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CornflowerBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CornsilkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CrimsonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "CyanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkCyanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGoldenrodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkKhakiKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkMagentaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOliveGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrangeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrchidKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSalmonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkTurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DarkVioletKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DeepPinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DeepSkyBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DimGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DodgerBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FirebrickKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FloralWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ForestGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "FuchiaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GainsboroKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GhostWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GoldKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GoldenrodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GreenYellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "HoneydewKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "HotPinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IndianRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IndigoKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "IvoryKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "KhakiKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderBlushKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LawnGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LemonChiffonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightCoralKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightCyanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightGoldenrodYellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightPinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSalmonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSkyBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSlateGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightSteelBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LightYellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LimeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LimeGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "LinenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MagentaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MaroonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumAquamarineKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumOrchidKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumPurpleKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSlateBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSpringGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumTurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MediumVioletRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MidnightBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MintCreamKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MistyRoseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MoccasinKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NavajoWhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "NavyKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OldLaceKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OliveKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OliveDrabKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "OrchidKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGoldenrodKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleTurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PaleVioletRedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PapayaWhipKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PeachPuffKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PeruKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PinkKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PlumKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PowderBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "PurpleKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RedKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RosyBrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "RoyalBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SaddleBrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SalmonKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SandyBrownKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SeaGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SeaShellKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SiennaKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SilverKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SkyBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SlateBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SlateGrayKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SnowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SpringGreenKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "SteelBlueKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TanKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TealKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ThistleKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TomatoKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TurquoiseKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "VioletKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WheatKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteSmokeKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "YellowKey", $.Object); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "YellowGreenKey", $.Object); 
  $.Property({Static:true , Public:true }, "Transparent", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "AliceBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "AntiqueWhite", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Aqua", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Aquamarine", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Azure", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Beige", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Bisque", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Black", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "BlanchedAlmond", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Blue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "BlueViolet", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Brown", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "BurlyWood", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "CadetBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Chartreuse", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Chocolate", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Coral", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "CornflowerBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Cornsilk", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Crimson", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Cyan", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkCyan", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkGoldenrod", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkGray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkKhaki", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkMagenta", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkOliveGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkOrange", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkOrchid", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkRed", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkSalmon", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkSeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkSlateBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkSlateGray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkTurquoise", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DarkViolet", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DeepPink", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DeepSkyBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DimGray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "DodgerBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Firebrick", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "FloralWhite", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ForestGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Fuchsia", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Gainsboro", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "GhostWhite", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Gold", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Goldenrod", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Gray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Green", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "GreenYellow", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Honeydew", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "HotPink", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "IndianRed", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Indigo", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Ivory", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Khaki", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Lavender", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LavenderBlush", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LawnGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LemonChiffon", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightCoral", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightCyan", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightGray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightPink", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightSalmon", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightSeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightSkyBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightSlateGray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightSteelBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LightYellow", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Lime", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "LimeGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Linen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Magenta", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Maroon", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumAquamarine", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumOrchid", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumPurple", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumSeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumSlateBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumSpringGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumTurquoise", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MediumVioletRed", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MidnightBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MintCream", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MistyRose", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Moccasin", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "NavajoWhite", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Navy", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "OldLace", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Olive", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "OliveDrab", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Orange", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "OrangeRed", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Orchid", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PaleGoldenrod", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PaleGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PaleTurquoise", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PaleVioletRed", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PapayaWhip", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PeachPuff", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Peru", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Pink", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Plum", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "PowderBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Purple", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Red", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "RosyBrown", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "RoyalBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SaddleBrown", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Salmon", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SandyBrown", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SeaShell", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Sienna", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Silver", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SkyBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SlateBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SlateGray", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Snow", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SpringGreen", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "SteelBlue", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Tan", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Teal", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Thistle", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Tomato", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Turquoise", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Violet", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Wheat", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "White", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "WhiteSmoke", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Yellow", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "YellowGreen", $asm0B.TypeRef("System.Drawing.Pen"));

});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Point", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6E70, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6E71, null, [$asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6E72, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x6E79, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
    $sig.make(0x6E7B, $.Type, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x6E7E, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x6E6B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0x6E6C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0x6E6E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x6E7F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "HIWORD", 
    $sig.make(0x6E83, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "LOWORD", 
    $sig.make(0x6E84, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x6E80, null, [$.Int32, $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x6E81, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x6E75, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x6E77, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x6E74, $asm0B.TypeRef("System.Drawing.Size"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x6E73, $asm0B.TypeRef("System.Drawing.PointF"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x6E78, $.Boolean, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6E76, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Round", 
    $sig.make(0x6E7D, $.Type, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_X", 
    $sig.make(0x6E6D, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Y", 
    $sig.make(0x6E6F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x6E7A, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x6E82, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Truncate", 
    $sig.make(0x6E7C, $.Type, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "x", $.Int32); 
  $.Field({Static:false, Public:false}, "y", $.Int32); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA51, null, [], []), 
    function Point__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "X", $.Int32);

  $.Property({Static:false, Public:true }, "Y", $.Int32);

})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.PointConverter")]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.PointConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1480B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x14802, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x14804, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x14805, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x14806, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0x14807, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0x14808, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0x14809, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0x1480A, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

});

JSIL.DeclareNamespace("System.Drawing.Imaging");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.PropertyItemInternal", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1481B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertFromMemory", 
    $sig.make(0x1482B, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")]), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertFromPropertyItem", 
    $sig.make(0x14829, $.Type, [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x14825, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x14827, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x14824, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x14819, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.Field({Static:false, Public:true }, "id", $.Int32); 
  $.Field({Static:false, Public:true }, "len", $.Int32); 
  $.Field({Static:false, Public:true }, "type", $.Int16); 
  $.Field({Static:false, Public:true }, "value", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Rectangle", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x76F0, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x76F2, null, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
    $sig.make(0x76FF, $.Type, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x7704, $.Boolean, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x7705, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x7706, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x76FA, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromLTRB", 
    $sig.make(0x76F5, $.Type, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
    $sig.make(0x76EB, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x76E3, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x76EE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x76E7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Location", 
    $sig.make(0x76D6, $asm0B.TypeRef("System.Drawing.Point"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x76E9, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x76D8, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Top", 
    $sig.make(0x76E8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x76E0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0x76DA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0x76DC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x7707, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Inflate", 
    $sig.make(0x7708, null, [$.Int32, $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Inflate", 
    $sig.make(0x7709, null, [$asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Inflate", 
    $sig.make(0x770A, $.Type, [
        $.Type, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x770B, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x770C, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectsWith", 
    $sig.make(0x770D, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x770F, null, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x7710, null, [$.Int32, $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x76FB, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x76FD, $.Boolean, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "Round", 
    $sig.make(0x7703, $.Type, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x76E5, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Location", 
    $sig.make(0x76D7, null, [$asm0B.TypeRef("System.Drawing.Point")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "set_Size", 
    $sig.make(0x76D9, null, [$asm0B.TypeRef("System.Drawing.Size")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x76E1, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_X", 
    $sig.make(0x76DB, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Y", 
    $sig.make(0x76DE, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x7711, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Truncate", 
    $sig.make(0x7701, $.Type, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x770E, $.Type, [$.Type, $.Type], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "x", $.Int32); 
  $.Field({Static:false, Public:false}, "y", $.Int32); 
  $.Field({Static:false, Public:false}, "width", $.Int32); 
  $.Field({Static:false, Public:false}, "height", $.Int32); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA52, null, [], []), 
    function Rectangle__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "Location", $asm0B.TypeRef("System.Drawing.Point"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "X", $.Int32);

  $.Property({Static:false, Public:true }, "Y", $.Int32);

  $.Property({Static:false, Public:true }, "Width", $.Int32);

  $.Property({Static:false, Public:true }, "Height", $.Int32);

  $.Property({Static:false, Public:true }, "Left", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Top", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Right", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Bottom", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

})
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.RectangleConverter")]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.RectangleConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1484B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x14843, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x14844, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x14845, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x14846, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0x14847, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0x14848, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0x14849, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0x1484A, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Region", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8510, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8511, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8512, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8513, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8514, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.RegionData")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8515, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x8518, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Complement", 
    $sig.make(0x852F, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Complement", 
    $sig.make(0x8530, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Complement", 
    $sig.make(0x8531, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Complement", 
    $sig.make(0x8532, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x8519, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x851A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Equals", 
    $sig.make(0x853A, $.Boolean, [$.Type, $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Exclude", 
    $sig.make(0x852B, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Exclude", 
    $sig.make(0x852C, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Exclude", 
    $sig.make(0x852D, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Exclude", 
    $sig.make(0x852E, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x851B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHrgn", 
    $sig.make(0x8516, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
    $sig.make(0x8536, $asm0B.TypeRef("System.Drawing.RectangleF"), [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHrgn", 
    $sig.make(0x8537, $asm06.TypeRef("System.IntPtr"), [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetRegionData", 
    $sig.make(0x853B, $asm0B.TypeRef("System.Drawing.Drawing2D.RegionData"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetRegionScans", 
    $sig.make(0x854B, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")]), [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x851E, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x851F, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x8520, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x8521, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmpty", 
    $sig.make(0x8538, $.Boolean, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsInfinite", 
    $sig.make(0x8539, $.Boolean, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x853C, $.Boolean, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x853D, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x853E, $.Boolean, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x853F, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8540, $.Boolean, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8541, $.Boolean, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8542, $.Boolean, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8543, $.Boolean, [$asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8544, $.Boolean, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8545, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8546, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8547, $.Boolean, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8548, $.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8549, $.Boolean, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x854A, $.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeEmpty", 
    $sig.make(0x851D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MakeInfinite", 
    $sig.make(0x851C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ReleaseHrgn", 
    $sig.make(0x8522, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeRegion", 
    $sig.make(0x8517, null, [$asm06.TypeRef("System.IntPtr")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x8535, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Translate", 
    $sig.make(0x8533, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Translate", 
    $sig.make(0x8534, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Union", 
    $sig.make(0x8523, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Union", 
    $sig.make(0x8524, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Union", 
    $sig.make(0x8525, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Union", 
    $sig.make(0x8526, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Xor", 
    $sig.make(0x8527, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Xor", 
    $sig.make(0x8528, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Xor", 
    $sig.make(0x8529, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Xor", 
    $sig.make(0x852A, null, [$.Type], [])
  );

  $.Field({Static:false, Public:false}, "nativeRegion", $asm06.TypeRef("System.IntPtr")); 
  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.RotateFlipType", true, {
    RotateNoneFlipNone: 0, 
    Rotate180FlipXY: 0, 
    Rotate90FlipNone: 1, 
    Rotate270FlipXY: 1, 
    RotateNoneFlipXY: 2, 
    Rotate180FlipNone: 2, 
    Rotate90FlipXY: 3, 
    Rotate270FlipNone: 3, 
    RotateNoneFlipX: 4, 
    Rotate180FlipY: 4, 
    Rotate90FlipX: 5, 
    Rotate270FlipY: 5, 
    RotateNoneFlipY: 6, 
    Rotate180FlipX: 6, 
    Rotate90FlipY: 7, 
    Rotate270FlipX: 7
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Size", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6EFC, null, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6EFD, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x6F04, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
    $sig.make(0x6F05, $.Type, [$asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x6F09, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x6EFA, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x6EF7, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x6EF8, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x6F0A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x6EFF, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x6F01, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x6F03, $asm0B.TypeRef("System.Drawing.Point"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x6EFE, $asm0B.TypeRef("System.Drawing.SizeF"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x6F02, $.Boolean, [$.Type, $.Type], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6F00, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Round", 
    $sig.make(0x6F08, $.Type, [$asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x6EFB, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x6EF9, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x6F06, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x6F0B, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Truncate", 
    $sig.make(0x6F07, $.Type, [$asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "width", $.Int32); 
  $.Field({Static:false, Public:false}, "height", $.Int32); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA53, null, [], []), 
    function Size__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Width", $.Int32);

  $.Property({Static:false, Public:true }, "Height", $.Int32);

})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.SizeConverter")]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.SizeConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1404B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x14043, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x14044, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x14045, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x14046, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0x14047, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0x14048, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0x14049, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0x1404A, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

});

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Brush"), "System.Drawing.SolidBrush", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1405A, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1405B, null, [$asm0B.TypeRef("System.Drawing.Color"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1405C, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x1405D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1405E, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Color", 
    $sig.make(0x14058, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "InternalSetColor", 
    $sig.make(0x1405F, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Color", 
    $sig.make(0x14059, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ISystemColorTracker.OnSystemColorChanged", 
    $sig.make(0x14060, null, [], [])
  );

  $.Field({Static:false, Public:false}, "color", $asm0B.TypeRef("System.Drawing.Color")); 
  $.Field({Static:false, Public:false}, "immutable", $.Boolean); 
  $.Property({Static:false, Public:true }, "Color", $asm0B.TypeRef("System.Drawing.Color"));

  $.ImplementInterfaces($asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SystemBrushes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14127, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromSystemColor", 
    $sig.make(0x14128, $asm0B.TypeRef("System.Drawing.Brush"), [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveBorder", 
    $sig.make(0x1408C, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaption", 
    $sig.make(0x1408D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaptionText", 
    $sig.make(0x1408E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AppWorkspace", 
    $sig.make(0x1408F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonFace", 
    $sig.make(0x14090, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonHighlight", 
    $sig.make(0x14091, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonShadow", 
    $sig.make(0x14092, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Control", 
    $sig.make(0x14093, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlDark", 
    $sig.make(0x14096, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlDarkDark", 
    $sig.make(0x14097, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlLight", 
    $sig.make(0x14095, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlLightLight", 
    $sig.make(0x14094, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlText", 
    $sig.make(0x14099, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
    $sig.make(0x14113, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GradientActiveCaption", 
    $sig.make(0x14114, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GradientInactiveCaption", 
    $sig.make(0x14115, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GrayText", 
    $sig.make(0x14116, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Highlight", 
    $sig.make(0x14117, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HighlightText", 
    $sig.make(0x14118, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotTrack", 
    $sig.make(0x14119, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveBorder", 
    $sig.make(0x1411B, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaption", 
    $sig.make(0x1411A, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaptionText", 
    $sig.make(0x1411C, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Info", 
    $sig.make(0x1411D, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InfoText", 
    $sig.make(0x1411E, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Menu", 
    $sig.make(0x1411F, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuBar", 
    $sig.make(0x14120, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuHighlight", 
    $sig.make(0x14121, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuText", 
    $sig.make(0x14122, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ScrollBar", 
    $sig.make(0x14123, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Window", 
    $sig.make(0x14124, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WindowFrame", 
    $sig.make(0x14125, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WindowText", 
    $sig.make(0x14126, $asm0B.TypeRef("System.Drawing.Brush"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "SystemBrushesKey", $.Object); 
  $.Property({Static:true , Public:true }, "ActiveBorder", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ActiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ActiveCaptionText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "AppWorkspace", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ButtonFace", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ButtonHighlight", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ButtonShadow", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Control", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ControlLightLight", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ControlLight", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ControlDark", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ControlDarkDark", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ControlText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Desktop", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "GradientActiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "GradientInactiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "GrayText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Highlight", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "HighlightText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "HotTrack", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "InactiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "InactiveBorder", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "InactiveCaptionText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Info", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "InfoText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Menu", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MenuBar", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MenuHighlight", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "MenuText", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "ScrollBar", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "Window", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "WindowFrame", $asm0B.TypeRef("System.Drawing.Brush"));

  $.Property({Static:true , Public:true }, "WindowText", $asm0B.TypeRef("System.Drawing.Brush"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SystemColors", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1418F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveBorder", 
    $sig.make(0x14157, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaption", 
    $sig.make(0x14158, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaptionText", 
    $sig.make(0x14159, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AppWorkspace", 
    $sig.make(0x1415A, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonFace", 
    $sig.make(0x1415B, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonHighlight", 
    $sig.make(0x1415C, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonShadow", 
    $sig.make(0x1415D, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Control", 
    $sig.make(0x1415E, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "get_ControlDark", 
    $sig.make(0x1415F, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlDarkDark", 
    $sig.make(0x14160, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlLight", 
    $sig.make(0x14161, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlLightLight", 
    $sig.make(0x1416E, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlText", 
    $sig.make(0x14170, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
    $sig.make(0x14171, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GradientActiveCaption", 
    $sig.make(0x14172, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GradientInactiveCaption", 
    $sig.make(0x14173, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GrayText", 
    $sig.make(0x14175, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Highlight", 
    $sig.make(0x14177, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HighlightText", 
    $sig.make(0x14179, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotTrack", 
    $sig.make(0x1417B, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveBorder", 
    $sig.make(0x1417C, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaption", 
    $sig.make(0x1417D, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaptionText", 
    $sig.make(0x1417E, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Info", 
    $sig.make(0x14185, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InfoText", 
    $sig.make(0x14186, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Menu", 
    $sig.make(0x14187, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuBar", 
    $sig.make(0x14188, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuHighlight", 
    $sig.make(0x14189, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuText", 
    $sig.make(0x1418A, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ScrollBar", 
    $sig.make(0x1418B, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Window", 
    $sig.make(0x1418C, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WindowFrame", 
    $sig.make(0x1418D, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WindowText", 
    $sig.make(0x1418E, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.Property({Static:true , Public:true }, "ActiveBorder", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ActiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ActiveCaptionText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "AppWorkspace", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ButtonFace", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ButtonHighlight", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ButtonShadow", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "Control", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ControlDark", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ControlDarkDark", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ControlLight", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ControlLightLight", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ControlText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "Desktop", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "GradientActiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "GradientInactiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "GrayText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "Highlight", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "HighlightText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "HotTrack", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "InactiveBorder", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "InactiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "InactiveCaptionText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "Info", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "InfoText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "Menu", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "MenuBar", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "MenuHighlight", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "MenuText", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "ScrollBar", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "Window", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "WindowFrame", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:true , Public:true }, "WindowText", $asm0B.TypeRef("System.Drawing.Color"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SystemFonts", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x141D1, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FontInPoints", 
    $sig.make(0x141D4, $asm0B.TypeRef("System.Drawing.Font"), [$asm0B.TypeRef("System.Drawing.Font")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_CaptionFont", 
    $sig.make(0x141C5, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DefaultFont", 
    $sig.make(0x141CF, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_DialogFont", 
    $sig.make(0x141D0, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_IconTitleFont", 
    $sig.make(0x141CE, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuFont", 
    $sig.make(0x141C7, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MessageBoxFont", 
    $sig.make(0x141CC, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_SmallCaptionFont", 
    $sig.make(0x141C6, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_StatusFont", 
    $sig.make(0x141C8, $asm0B.TypeRef("System.Drawing.Font"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetFontByName", 
    $sig.make(0x141D6, $asm0B.TypeRef("System.Drawing.Font"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsCriticalFontException", 
    $sig.make(0x141D2, $.Boolean, [$asm06.TypeRef("System.Exception")], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "SystemFontsKey", $.Object); 
  $.Property({Static:true , Public:true }, "CaptionFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "SmallCaptionFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "MenuFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "StatusFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "MessageBoxFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "IconTitleFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "DefaultFont", $asm0B.TypeRef("System.Drawing.Font"));

  $.Property({Static:true , Public:true }, "DialogFont", $asm0B.TypeRef("System.Drawing.Font"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SystemIcons", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14208, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Application", 
    $sig.make(0x141FE, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Asterisk", 
    $sig.make(0x141FF, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Error", 
    $sig.make(0x14200, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Exclamation", 
    $sig.make(0x14201, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Hand", 
    $sig.make(0x14202, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Information", 
    $sig.make(0x14203, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Question", 
    $sig.make(0x14204, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Shield", 
    $sig.make(0x14207, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Warning", 
    $sig.make(0x14205, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WinLogo", 
    $sig.make(0x14206, $asm0B.TypeRef("System.Drawing.Icon"), [], [])
  );

  $.Field({Static:true , Public:false}, "_application", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_asterisk", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_error", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_exclamation", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_hand", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_information", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_question", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_warning", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_winlogo", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Field({Static:true , Public:false}, "_shield", $asm0B.TypeRef("System.Drawing.Icon")); 
  $.Property({Static:true , Public:true }, "Application", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Asterisk", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Error", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Exclamation", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Hand", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Information", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Question", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Warning", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "WinLogo", $asm0B.TypeRef("System.Drawing.Icon"));

  $.Property({Static:true , Public:true }, "Shield", $asm0B.TypeRef("System.Drawing.Icon"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SystemPens", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1424F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromSystemColor", 
    $sig.make(0x14250, $asm0B.TypeRef("System.Drawing.Pen"), [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveBorder", 
    $sig.make(0x14216, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaption", 
    $sig.make(0x14217, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaptionText", 
    $sig.make(0x14218, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_AppWorkspace", 
    $sig.make(0x1421A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonFace", 
    $sig.make(0x1421C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonHighlight", 
    $sig.make(0x14222, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ButtonShadow", 
    $sig.make(0x14223, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Control", 
    $sig.make(0x14225, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlDark", 
    $sig.make(0x14229, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlDarkDark", 
    $sig.make(0x1422B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlLight", 
    $sig.make(0x1422D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlLightLight", 
    $sig.make(0x14232, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ControlText", 
    $sig.make(0x14227, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
    $sig.make(0x14234, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GradientActiveCaption", 
    $sig.make(0x14236, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GradientInactiveCaption", 
    $sig.make(0x14238, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GrayText", 
    $sig.make(0x1423A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Highlight", 
    $sig.make(0x1423C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HighlightText", 
    $sig.make(0x1423D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_HotTrack", 
    $sig.make(0x1423E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveBorder", 
    $sig.make(0x1423F, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaption", 
    $sig.make(0x14240, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaptionText", 
    $sig.make(0x14242, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Info", 
    $sig.make(0x14244, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InfoText", 
    $sig.make(0x14246, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Menu", 
    $sig.make(0x14247, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuBar", 
    $sig.make(0x14248, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuHighlight", 
    $sig.make(0x14249, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MenuText", 
    $sig.make(0x1424A, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_ScrollBar", 
    $sig.make(0x1424B, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Window", 
    $sig.make(0x1424C, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WindowFrame", 
    $sig.make(0x1424D, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_WindowText", 
    $sig.make(0x1424E, $asm0B.TypeRef("System.Drawing.Pen"), [], [])
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "SystemPensKey", $.Object); 
  $.Property({Static:true , Public:true }, "ActiveBorder", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ActiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ActiveCaptionText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "AppWorkspace", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ButtonFace", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ButtonHighlight", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ButtonShadow", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Control", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ControlText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ControlDark", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ControlDarkDark", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ControlLight", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ControlLightLight", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Desktop", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "GradientActiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "GradientInactiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "GrayText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Highlight", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "HighlightText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "HotTrack", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "InactiveBorder", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "InactiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "InactiveCaptionText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Info", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "InfoText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Menu", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MenuBar", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MenuHighlight", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "MenuText", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "ScrollBar", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "Window", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "WindowFrame", $asm0B.TypeRef("System.Drawing.Pen"));

  $.Property({Static:true , Public:true }, "WindowText", $asm0B.TypeRef("System.Drawing.Pen"));

});

JSIL.MakeClass($asm06.TypeRef("System.Attribute"), "System.Drawing.ToolboxBitmapAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14258, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14259, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1425A, null, [$asm06.TypeRef("System.Type"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1425E, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x14261, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetBitmapFromResource", 
    $sig.make(0x1426A, $asm0B.TypeRef("System.Drawing.Image"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x14262, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetIconFromResource", 
    $sig.make(0x1426B, $asm0B.TypeRef("System.Drawing.Image"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetIconFromStream", 
    $sig.make(0x14268, $asm0B.TypeRef("System.Drawing.Image"), [$asm06.TypeRef("System.IO.Stream"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImage", 
    $sig.make(0x14263, $asm0B.TypeRef("System.Drawing.Image"), [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImage", 
    $sig.make(0x14264, $asm0B.TypeRef("System.Drawing.Image"), [$.Object, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImage", 
    $sig.make(0x14265, $asm0B.TypeRef("System.Drawing.Image"), [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImage", 
    $sig.make(0x14266, $asm0B.TypeRef("System.Drawing.Image"), [$asm06.TypeRef("System.Type"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetImage", 
    $sig.make(0x14267, $asm0B.TypeRef("System.Drawing.Image"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetImageFromFile", 
    $sig.make(0x14269, $asm0B.TypeRef("System.Drawing.Image"), [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetImageFromResource", 
    $sig.make(0x1426C, $asm0B.TypeRef("System.Drawing.Image"), [
        $asm06.TypeRef("System.Type"), $.String, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "MakeBackgroundAlphaZero", 
    $sig.make(0x1426D, null, [$asm0B.TypeRef("System.Drawing.Bitmap")], [])
  );

  $.Field({Static:false, Public:false}, "smallImage", $asm0B.TypeRef("System.Drawing.Image")); 
  $.Field({Static:false, Public:false}, "largeImage", $asm0B.TypeRef("System.Drawing.Image")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "largeDim", $asm0B.TypeRef("System.Drawing.Point")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "smallDim", $asm0B.TypeRef("System.Drawing.Point")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultComponent", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA54, null, [], []), 
    function ToolboxBitmapAttribute__cctor () {
      $thisType.largeDim = new $asm0B.System.Drawing.Point();
      $thisType.smallDim = new $asm0B.System.Drawing.Point();
    }
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Class]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.UnsafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBBE4, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CopyMemory", 
    $sig.make(0xBBD2, null, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateCompatibleDC", 
    $sig.make(0xBBDA, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DeleteDC", 
    $sig.make(0xBBD6, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDC", 
    $sig.make(0xBBD4, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDeviceCaps", 
    $sig.make(0xBBE0, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObjectType", 
    $sig.make(0xBBE1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetStockObject", 
    $sig.make(0xBBDB, $asm06.TypeRef("System.IntPtr"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSystemDefaultLCID", 
    $sig.make(0xBBDC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSystemMetrics", 
    $sig.make(0xBBDD, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntCreateCompatibleDC", 
    $sig.make(0xBBD9, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntDeleteDC", 
    $sig.make(0xBBD5, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGetDC", 
    $sig.make(0xBBD3, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntReleaseDC", 
    $sig.make(0xBBD7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PtrToStructure", 
    $sig.make(0xBBE2, $.Object, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.Type")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:true }, "PtrToStructure", 
    $sig.make(0xBBE3, null, [$asm06.TypeRef("System.IntPtr"), $.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ReleaseDC", 
    $sig.make(0xBBD8, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SystemParametersInfo", 
    $sig.make(0xBBDE, $.Boolean, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.NativeMethods/NONCLIENTMETRICS"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SystemParametersInfo", 
    $sig.make(0xBBDF, $.Boolean, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT"), $.Int32
      ], [])
  );

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.MakeInterface(
  "System.Drawing.UnsafeNativeMethods/IStream", false, [], function ($) {
    $.Method({}, "Read", $sig.make(0xBBEB, $.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32], []));
    $.Method({}, "Write", $sig.make(0xBBEC, $.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32], []));
    $.Method({}, "Seek", $sig.make(0xBBED, $.Int64, [$.Int64, $.Int32], []));
    $.Method({}, "SetSize", $sig.make(0xBBEE, null, [$.Int64], []));
    $.Method({}, "CopyTo", $sig.make(0xBBEF, $.Int64, [
          $.Type, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ], []));
    $.Method({}, "Commit", $sig.make(0xBBF0, null, [$.Int32], []));
    $.Method({}, "Revert", $sig.make(0xBBF1, null, [], []));
    $.Method({}, "LockRegion", $sig.make(0xBBF2, null, [
          $.Int64, $.Int64, 
          $.Int32
        ], []));
    $.Method({}, "UnlockRegion", $sig.make(0xBBF3, null, [
          $.Int64, $.Int64, 
          $.Int32
        ], []));
    $.Method({}, "Stat", $sig.make(0xBBF4, null, [$asm06.TypeRef("System.IntPtr"), $.Int32], []));
    $.Method({}, "Clone", $sig.make(0xBBF5, $.Type, [], []));
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.UnsafeNativeMethods/ComStreamFromDataStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14AD4, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ActualizeVirtualPosition", 
    $sig.make(0x14AD6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x14AD8, $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Commit", 
    $sig.make(0x14ADA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14ADB, $.Int64, [
        $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $.Int64, 
        $jsilcore.TypeRef("System.Array", [$.Int64])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EFail", 
    $sig.make(0x14ADF, $asm06.TypeRef("System.Runtime.InteropServices.ExternalException"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDataStream", 
    $sig.make(0x14ADD, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LockRegion", 
    $sig.make(0x14ADE, null, [
        $.Int64, $.Int64, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
    $sig.make(0x14AE0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x14AE1, $.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x14AE2, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Revert", 
    $sig.make(0x14AE3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x14AE4, $.Int64, [$.Int64, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSize", 
    $sig.make(0x14AE5, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Stat", 
    $sig.make(0x14AE6, null, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "UnlockRegion", 
    $sig.make(0x14AE7, null, [
        $.Int64, $.Int64, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x14AE8, $.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x14AE9, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "dataStream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "virtualPosition", $.Int64); 
  $.ImplementInterfaces($asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"))
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Drawing2D.CustomLineCap", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x967A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x967B, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x967C, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x967D, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x967E, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetBaseCap", 
    $sig.make(0x968A, $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetBaseInset", 
    $sig.make(0x968C, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetStrokeJoin", 
    $sig.make(0x9688, $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetWidthScale", 
    $sig.make(0x968E, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetBaseCap", 
    $sig.make(0x9689, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetBaseInset", 
    $sig.make(0x968B, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetStrokeJoin", 
    $sig.make(0x9687, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetWidthScale", 
    $sig.make(0x968D, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x9683, $.Object, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreateCustomLineCapObject", 
    $sig.make(0x9684, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x9680, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x9681, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x9682, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseCap", 
    $sig.make(0x9674, $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BaseInset", 
    $sig.make(0x9676, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_StrokeJoin", 
    $sig.make(0x9672, $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WidthScale", 
    $sig.make(0x9678, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStrokeCaps", 
    $sig.make(0x9686, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseCap", 
    $sig.make(0x9675, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BaseInset", 
    $sig.make(0x9677, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_StrokeJoin", 
    $sig.make(0x9673, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_WidthScale", 
    $sig.make(0x9679, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeLineCap", 
    $sig.make(0x967F, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetStrokeCaps", 
    $sig.make(0x9685, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")], [])
  );

  $.Field({Static:false, Public:false}, "nativeCap", $asm0B.TypeRef("System.Drawing.Drawing2D.SafeCustomLineCapHandle")); 
  $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
  $.Property({Static:false, Public:true }, "StrokeJoin", $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"));

  $.Property({Static:false, Public:true }, "BaseCap", $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"));

  $.Property({Static:false, Public:true }, "BaseInset", $.Single);

  $.Property({Static:false, Public:true }, "WidthScale", $.Single);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"), "System.Drawing.Drawing2D.AdjustableArrowCap", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x142DA, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142DB, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142DC, null, [
        $.Single, $.Single, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetHeight", 
    $sig.make(0x142DE, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetMiddleInset", 
    $sig.make(0x142E2, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetWidth", 
    $sig.make(0x142E0, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_IsFilled", 
    $sig.make(0x142E4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetFillState", 
    $sig.make(0x142E3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetHeight", 
    $sig.make(0x142DD, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetMiddleInset", 
    $sig.make(0x142E1, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetWidth", 
    $sig.make(0x142DF, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Filled", 
    $sig.make(0x142D8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x142D2, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MiddleInset", 
    $sig.make(0x142D6, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x142D4, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Filled", 
    $sig.make(0x142D9, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x142D3, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MiddleInset", 
    $sig.make(0x142D7, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x142D5, null, [$.Single], [])
  );

  $.Property({Static:false, Public:true }, "Height", $.Single);

  $.Property({Static:false, Public:true }, "Width", $.Single);

  $.Property({Static:false, Public:true }, "MiddleInset", $.Single);

  $.Property({Static:false, Public:true }, "Filled", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.BitmapData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x785D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x7853, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PixelFormat", 
    $sig.make(0x7857, $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Reserved", 
    $sig.make(0x785B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Scan0", 
    $sig.make(0x7859, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Stride", 
    $sig.make(0x7855, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x7851, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x7854, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PixelFormat", 
    $sig.make(0x7858, null, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Reserved", 
    $sig.make(0x785C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Scan0", 
    $sig.make(0x785A, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Stride", 
    $sig.make(0x7856, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x7852, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "width", $.Int32); 
  $.Field({Static:false, Public:false}, "height", $.Int32); 
  $.Field({Static:false, Public:false}, "stride", $.Int32); 
  $.Field({Static:false, Public:false}, "pixelFormat", $.Int32); 
  $.Field({Static:false, Public:false}, "scan0", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "reserved", $.Int32); 
  $.Property({Static:false, Public:true }, "Width", $.Int32);

  $.Property({Static:false, Public:true }, "Height", $.Int32);

  $.Property({Static:false, Public:true }, "Stride", $.Int32);

  $.Property({Static:false, Public:true }, "PixelFormat", $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"));

  $.Property({Static:false, Public:true }, "Scan0", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "Reserved", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Drawing2D.Blend", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1422A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1422C, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Factors", 
    $sig.make(0x1421E, $jsilcore.TypeRef("System.Array", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Positions", 
    $sig.make(0x14226, $jsilcore.TypeRef("System.Array", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Factors", 
    $sig.make(0x14224, null, [$jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Positions", 
    $sig.make(0x14228, null, [$jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.Field({Static:false, Public:false}, "factors", $jsilcore.TypeRef("System.Array", [$.Single])); 
  $.Field({Static:false, Public:false}, "positions", $jsilcore.TypeRef("System.Array", [$.Single])); 
  $.Property({Static:false, Public:true }, "Factors", $jsilcore.TypeRef("System.Array", [$.Single]));

  $.Property({Static:false, Public:true }, "Positions", $jsilcore.TypeRef("System.Array", [$.Single]));

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.BrushType", false, {
    SolidColor: 0, 
    HatchFill: 1, 
    TextureFill: 2, 
    PathGradient: 3, 
    LinearGradient: 4
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorAdjustType", true, {
    Default: 0, 
    Bitmap: 1, 
    Brush: 2, 
    Pen: 3, 
    Text: 4, 
    Count: 5, 
    Any: 6
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Drawing2D.ColorBlend", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1414F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14150, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Colors", 
    $sig.make(0x1414B, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Positions", 
    $sig.make(0x1414D, $jsilcore.TypeRef("System.Array", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Colors", 
    $sig.make(0x1414C, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Positions", 
    $sig.make(0x1414E, null, [$jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.Field({Static:false, Public:false}, "colors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])); 
  $.Field({Static:false, Public:false}, "positions", $jsilcore.TypeRef("System.Array", [$.Single])); 
  $.Property({Static:false, Public:true }, "Colors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

  $.Property({Static:false, Public:true }, "Positions", $jsilcore.TypeRef("System.Array", [$.Single]));

});

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorChannelFlag", true, {
    ColorChannelC: 0, 
    ColorChannelM: 1, 
    ColorChannelY: 2, 
    ColorChannelK: 3, 
    ColorChannelLast: 4
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ColorMap", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14355, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NewColor", 
    $sig.make(0x14353, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OldColor", 
    $sig.make(0x14340, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NewColor", 
    $sig.make(0x14354, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OldColor", 
    $sig.make(0x14348, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.Field({Static:false, Public:false}, "oldColor", $asm0B.TypeRef("System.Drawing.Color")); 
  $.Field({Static:false, Public:false}, "newColor", $asm0B.TypeRef("System.Drawing.Color")); 
  $.Property({Static:false, Public:true }, "OldColor", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:false, Public:true }, "NewColor", $asm0B.TypeRef("System.Drawing.Color"));

});

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorMapType", true, {
    Default: 0, 
    Brush: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ColorMatrix", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x97A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x97A5, null, [$jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])])], [])
  )
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x979A, $.Single, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix00", 
    $sig.make(0x9749, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix01", 
    $sig.make(0x974C, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix02", 
    $sig.make(0x974E, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix03", 
    $sig.make(0x9750, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix04", 
    $sig.make(0x9752, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix10", 
    $sig.make(0x9754, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix11", 
    $sig.make(0x9756, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix12", 
    $sig.make(0x9758, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix13", 
    $sig.make(0x975A, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix14", 
    $sig.make(0x975C, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix20", 
    $sig.make(0x975E, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix21", 
    $sig.make(0x9760, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix22", 
    $sig.make(0x9762, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix23", 
    $sig.make(0x9765, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix24", 
    $sig.make(0x9769, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix30", 
    $sig.make(0x976D, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix31", 
    $sig.make(0x976F, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix32", 
    $sig.make(0x9771, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix33", 
    $sig.make(0x9779, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix34", 
    $sig.make(0x977C, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix40", 
    $sig.make(0x9783, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix41", 
    $sig.make(0x9789, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix42", 
    $sig.make(0x978D, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix43", 
    $sig.make(0x9793, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Matrix44", 
    $sig.make(0x9796, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetMatrix", 
    $sig.make(0x97A8, $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x979E, null, [
        $.Int32, $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix00", 
    $sig.make(0x974B, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix01", 
    $sig.make(0x974D, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix02", 
    $sig.make(0x974F, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix03", 
    $sig.make(0x9751, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix04", 
    $sig.make(0x9753, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix10", 
    $sig.make(0x9755, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix11", 
    $sig.make(0x9757, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix12", 
    $sig.make(0x9759, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix13", 
    $sig.make(0x975B, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix14", 
    $sig.make(0x975D, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix20", 
    $sig.make(0x975F, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix21", 
    $sig.make(0x9761, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix22", 
    $sig.make(0x9763, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix23", 
    $sig.make(0x9766, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix24", 
    $sig.make(0x976B, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix30", 
    $sig.make(0x976E, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix31", 
    $sig.make(0x9770, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix32", 
    $sig.make(0x9773, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix33", 
    $sig.make(0x977A, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix34", 
    $sig.make(0x977E, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix40", 
    $sig.make(0x9787, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix41", 
    $sig.make(0x978B, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix42", 
    $sig.make(0x978E, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix43", 
    $sig.make(0x9794, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Matrix44", 
    $sig.make(0x9798, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetMatrix", 
    $sig.make(0x97A7, null, [$jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])])], [])
  );

  $.Field({Static:false, Public:false}, "matrix00", $.Single); 
  $.Field({Static:false, Public:false}, "matrix01", $.Single); 
  $.Field({Static:false, Public:false}, "matrix02", $.Single); 
  $.Field({Static:false, Public:false}, "matrix03", $.Single); 
  $.Field({Static:false, Public:false}, "matrix04", $.Single); 
  $.Field({Static:false, Public:false}, "matrix10", $.Single); 
  $.Field({Static:false, Public:false}, "matrix11", $.Single); 
  $.Field({Static:false, Public:false}, "matrix12", $.Single); 
  $.Field({Static:false, Public:false}, "matrix13", $.Single); 
  $.Field({Static:false, Public:false}, "matrix14", $.Single); 
  $.Field({Static:false, Public:false}, "matrix20", $.Single); 
  $.Field({Static:false, Public:false}, "matrix21", $.Single); 
  $.Field({Static:false, Public:false}, "matrix22", $.Single); 
  $.Field({Static:false, Public:false}, "matrix23", $.Single); 
  $.Field({Static:false, Public:false}, "matrix24", $.Single); 
  $.Field({Static:false, Public:false}, "matrix30", $.Single); 
  $.Field({Static:false, Public:false}, "matrix31", $.Single); 
  $.Field({Static:false, Public:false}, "matrix32", $.Single); 
  $.Field({Static:false, Public:false}, "matrix33", $.Single); 
  $.Field({Static:false, Public:false}, "matrix34", $.Single); 
  $.Field({Static:false, Public:false}, "matrix40", $.Single); 
  $.Field({Static:false, Public:false}, "matrix41", $.Single); 
  $.Field({Static:false, Public:false}, "matrix42", $.Single); 
  $.Field({Static:false, Public:false}, "matrix43", $.Single); 
  $.Field({Static:false, Public:false}, "matrix44", $.Single); 
  $.Property({Static:false, Public:true }, "Matrix00", $.Single);

  $.Property({Static:false, Public:true }, "Matrix01", $.Single);

  $.Property({Static:false, Public:true }, "Matrix02", $.Single);

  $.Property({Static:false, Public:true }, "Matrix03", $.Single);

  $.Property({Static:false, Public:true }, "Matrix04", $.Single);

  $.Property({Static:false, Public:true }, "Matrix10", $.Single);

  $.Property({Static:false, Public:true }, "Matrix11", $.Single);

  $.Property({Static:false, Public:true }, "Matrix12", $.Single);

  $.Property({Static:false, Public:true }, "Matrix13", $.Single);

  $.Property({Static:false, Public:true }, "Matrix14", $.Single);

  $.Property({Static:false, Public:true }, "Matrix20", $.Single);

  $.Property({Static:false, Public:true }, "Matrix21", $.Single);

  $.Property({Static:false, Public:true }, "Matrix22", $.Single);

  $.Property({Static:false, Public:true }, "Matrix23", $.Single);

  $.Property({Static:false, Public:true }, "Matrix24", $.Single);

  $.Property({Static:false, Public:true }, "Matrix30", $.Single);

  $.Property({Static:false, Public:true }, "Matrix31", $.Single);

  $.Property({Static:false, Public:true }, "Matrix32", $.Single);

  $.Property({Static:false, Public:true }, "Matrix33", $.Single);

  $.Property({Static:false, Public:true }, "Matrix34", $.Single);

  $.Property({Static:false, Public:true }, "Matrix40", $.Single);

  $.Property({Static:false, Public:true }, "Matrix41", $.Single);

  $.Property({Static:false, Public:true }, "Matrix42", $.Single);

  $.Property({Static:false, Public:true }, "Matrix43", $.Single);

  $.Property({Static:false, Public:true }, "Matrix44", $.Single);

  $.Property({Static:false, Public:true }, "Item", $.Single);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorMatrixFlag", true, {
    Default: 0, 
    SkipGrays: 1, 
    AltGrays: 2
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorMode", true, {
    Argb32Mode: 0, 
    Argb64Mode: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ColorPalette", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8A6F, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8A70, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConvertFromMemory", 
    $sig.make(0x8A71, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConvertToMemory", 
    $sig.make(0x8A72, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Entries", 
    $sig.make(0x8A6E, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
    $sig.make(0x8A6D, $.Int32, [], [])
  );

  $.Field({Static:false, Public:false}, "flags", $.Int32); 
  $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])); 
  $.Property({Static:false, Public:true }, "Flags", $.Int32);

  $.Property({Static:false, Public:true }, "Entries", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.ColorTranslator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14409, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHtml", 
    $sig.make(0x1440F, $asm0B.TypeRef("System.Drawing.Color"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromOle", 
    $sig.make(0x1440C, $asm0B.TypeRef("System.Drawing.Color"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromWin32", 
    $sig.make(0x1440D, $asm0B.TypeRef("System.Drawing.Color"), [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "InitializeHtmlSysColorTable", 
    $sig.make(0x14411, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToHtml", 
    $sig.make(0x14410, $.String, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToOle", 
    $sig.make(0x1440B, $.Int32, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ToWin32", 
    $sig.make(0x1440A, $.Int32, [$asm0B.TypeRef("System.Drawing.Color")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.Constant({Static:true , Public:false}, "Win32RedShift", 0); 
  $.Constant({Static:true , Public:false}, "Win32GreenShift", 8); 
  $.Constant({Static:true , Public:false}, "Win32BlueShift", 16); 
  $.Field({Static:true , Public:false}, "htmlSysColorTable", $asm06.TypeRef("System.Collections.Hashtable")); 
});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CombineMode", true, {
    Replace: 0, 
    Intersect: 1, 
    Union: 2, 
    Xor: 3, 
    Exclude: 4, 
    Complement: 5
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CompositingMode", true, {
    SourceOver: 0, 
    SourceCopy: 1
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CompositingQuality", true, {
    Invalid: -1, 
    Default: 0, 
    HighSpeed: 1, 
    HighQuality: 2, 
    GammaCorrected: 3, 
    AssumeLinear: 4
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CoordinateSpace", true, {
    World: 0, 
    Page: 1, 
    Device: 2
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CustomLineCapType", false, {
    Default: 0, 
    AdjustableArrowCap: 1
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.DashStyle", true, {
    Solid: 0, 
    Dash: 1, 
    Dot: 2, 
    DashDot: 3, 
    DashDotDot: 4, 
    Custom: 5
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.EmfPlusFlags", false, {
    Display: 1, 
    NonDualGdi: 2
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.EmfPlusRecordType", true, {
    EmfMin: 1, 
    EmfHeader: 1, 
    EmfPolyBezier: 2, 
    EmfPolygon: 3, 
    EmfPolyline: 4, 
    EmfPolyBezierTo: 5, 
    EmfPolyLineTo: 6, 
    EmfPolyPolyline: 7, 
    EmfPolyPolygon: 8, 
    EmfSetWindowExtEx: 9, 
    EmfSetWindowOrgEx: 10, 
    EmfSetViewportExtEx: 11, 
    EmfSetViewportOrgEx: 12, 
    EmfSetBrushOrgEx: 13, 
    EmfEof: 14, 
    EmfSetPixelV: 15, 
    EmfSetMapperFlags: 16, 
    EmfSetMapMode: 17, 
    EmfSetBkMode: 18, 
    EmfSetPolyFillMode: 19, 
    EmfSetROP2: 20, 
    EmfSetStretchBltMode: 21, 
    EmfSetTextAlign: 22, 
    EmfSetColorAdjustment: 23, 
    EmfSetTextColor: 24, 
    EmfSetBkColor: 25, 
    EmfOffsetClipRgn: 26, 
    EmfMoveToEx: 27, 
    EmfSetMetaRgn: 28, 
    EmfExcludeClipRect: 29, 
    EmfIntersectClipRect: 30, 
    EmfScaleViewportExtEx: 31, 
    EmfScaleWindowExtEx: 32, 
    EmfSaveDC: 33, 
    EmfRestoreDC: 34, 
    EmfSetWorldTransform: 35, 
    EmfModifyWorldTransform: 36, 
    EmfSelectObject: 37, 
    EmfCreatePen: 38, 
    EmfCreateBrushIndirect: 39, 
    EmfDeleteObject: 40, 
    EmfAngleArc: 41, 
    EmfEllipse: 42, 
    EmfRectangle: 43, 
    EmfRoundRect: 44, 
    EmfRoundArc: 45, 
    EmfChord: 46, 
    EmfPie: 47, 
    EmfSelectPalette: 48, 
    EmfCreatePalette: 49, 
    EmfSetPaletteEntries: 50, 
    EmfResizePalette: 51, 
    EmfRealizePalette: 52, 
    EmfExtFloodFill: 53, 
    EmfLineTo: 54, 
    EmfArcTo: 55, 
    EmfPolyDraw: 56, 
    EmfSetArcDirection: 57, 
    EmfSetMiterLimit: 58, 
    EmfBeginPath: 59, 
    EmfEndPath: 60, 
    EmfCloseFigure: 61, 
    EmfFillPath: 62, 
    EmfStrokeAndFillPath: 63, 
    EmfStrokePath: 64, 
    EmfFlattenPath: 65, 
    EmfWidenPath: 66, 
    EmfSelectClipPath: 67, 
    EmfAbortPath: 68, 
    EmfReserved069: 69, 
    EmfGdiComment: 70, 
    EmfFillRgn: 71, 
    EmfFrameRgn: 72, 
    EmfInvertRgn: 73, 
    EmfPaintRgn: 74, 
    EmfExtSelectClipRgn: 75, 
    EmfBitBlt: 76, 
    EmfStretchBlt: 77, 
    EmfMaskBlt: 78, 
    EmfPlgBlt: 79, 
    EmfSetDIBitsToDevice: 80, 
    EmfStretchDIBits: 81, 
    EmfExtCreateFontIndirect: 82, 
    EmfExtTextOutA: 83, 
    EmfExtTextOutW: 84, 
    EmfPolyBezier16: 85, 
    EmfPolygon16: 86, 
    EmfPolyline16: 87, 
    EmfPolyBezierTo16: 88, 
    EmfPolylineTo16: 89, 
    EmfPolyPolyline16: 90, 
    EmfPolyPolygon16: 91, 
    EmfPolyDraw16: 92, 
    EmfCreateMonoBrush: 93, 
    EmfCreateDibPatternBrushPt: 94, 
    EmfExtCreatePen: 95, 
    EmfPolyTextOutA: 96, 
    EmfPolyTextOutW: 97, 
    EmfSetIcmMode: 98, 
    EmfCreateColorSpace: 99, 
    EmfSetColorSpace: 100, 
    EmfDeleteColorSpace: 101, 
    EmfGlsRecord: 102, 
    EmfGlsBoundedRecord: 103, 
    EmfPixelFormat: 104, 
    EmfDrawEscape: 105, 
    EmfExtEscape: 106, 
    EmfStartDoc: 107, 
    EmfSmallTextOut: 108, 
    EmfForceUfiMapping: 109, 
    EmfNamedEscpae: 110, 
    EmfColorCorrectPalette: 111, 
    EmfSetIcmProfileA: 112, 
    EmfSetIcmProfileW: 113, 
    EmfAlphaBlend: 114, 
    EmfSetLayout: 115, 
    EmfTransparentBlt: 116, 
    EmfReserved117: 117, 
    EmfGradientFill: 118, 
    EmfSetLinkedUfis: 119, 
    EmfSetTextJustification: 120, 
    EmfColorMatchToTargetW: 121, 
    EmfCreateColorSpaceW: 122, 
    EmfMax: 122, 
    EmfPlusRecordBase: 16384, 
    Invalid: 16384, 
    Min: 16385, 
    Header: 16385, 
    EndOfFile: 16386, 
    Comment: 16387, 
    GetDC: 16388, 
    MultiFormatStart: 16389, 
    MultiFormatSection: 16390, 
    MultiFormatEnd: 16391, 
    Object: 16392, 
    Clear: 16393, 
    FillRects: 16394, 
    DrawRects: 16395, 
    FillPolygon: 16396, 
    DrawLines: 16397, 
    FillEllipse: 16398, 
    DrawEllipse: 16399, 
    FillPie: 16400, 
    DrawPie: 16401, 
    DrawArc: 16402, 
    FillRegion: 16403, 
    FillPath: 16404, 
    DrawPath: 16405, 
    FillClosedCurve: 16406, 
    DrawClosedCurve: 16407, 
    DrawCurve: 16408, 
    DrawBeziers: 16409, 
    DrawImage: 16410, 
    DrawImagePoints: 16411, 
    DrawString: 16412, 
    SetRenderingOrigin: 16413, 
    SetAntiAliasMode: 16414, 
    SetTextRenderingHint: 16415, 
    SetTextContrast: 16416, 
    SetInterpolationMode: 16417, 
    SetPixelOffsetMode: 16418, 
    SetCompositingMode: 16419, 
    SetCompositingQuality: 16420, 
    Save: 16421, 
    Restore: 16422, 
    BeginContainer: 16423, 
    BeginContainerNoParams: 16424, 
    EndContainer: 16425, 
    SetWorldTransform: 16426, 
    ResetWorldTransform: 16427, 
    MultiplyWorldTransform: 16428, 
    TranslateWorldTransform: 16429, 
    ScaleWorldTransform: 16430, 
    RotateWorldTransform: 16431, 
    SetPageTransform: 16432, 
    ResetClip: 16433, 
    SetClipRect: 16434, 
    SetClipPath: 16435, 
    SetClipRegion: 16436, 
    OffsetClip: 16437, 
    Max: 16438, 
    DrawDriverString: 16438, 
    Total: 16439, 
    WmfRecordBase: 65536, 
    WmfSaveDC: 65566, 
    WmfRealizePalette: 65589, 
    WmfSetPalEntries: 65591, 
    WmfCreatePalette: 65783, 
    WmfSetBkMode: 65794, 
    WmfSetMapMode: 65795, 
    WmfSetROP2: 65796, 
    WmfSetRelAbs: 65797, 
    WmfSetPolyFillMode: 65798, 
    WmfSetStretchBltMode: 65799, 
    WmfSetTextCharExtra: 65800, 
    WmfRestoreDC: 65831, 
    WmfInvertRegion: 65834, 
    WmfPaintRegion: 65835, 
    WmfSelectClipRegion: 65836, 
    WmfSelectObject: 65837, 
    WmfSetTextAlign: 65838, 
    WmfResizePalette: 65849, 
    WmfDibCreatePatternBrush: 65858, 
    WmfSetLayout: 65865, 
    WmfDeleteObject: 66032, 
    WmfCreatePatternBrush: 66041, 
    WmfSetBkColor: 66049, 
    WmfSetTextColor: 66057, 
    WmfSetTextJustification: 66058, 
    WmfSetWindowOrg: 66059, 
    WmfSetWindowExt: 66060, 
    WmfSetViewportOrg: 66061, 
    WmfSetViewportExt: 66062, 
    WmfOffsetWindowOrg: 66063, 
    WmfOffsetViewportOrg: 66065, 
    WmfLineTo: 66067, 
    WmfMoveTo: 66068, 
    WmfOffsetCilpRgn: 66080, 
    WmfFillRegion: 66088, 
    WmfSetMapperFlags: 66097, 
    WmfSelectPalette: 66100, 
    WmfCreatePenIndirect: 66298, 
    WmfCreateFontIndirect: 66299, 
    WmfCreateBrushIndirect: 66300, 
    WmfPolygon: 66340, 
    WmfPolyline: 66341, 
    WmfScaleWindowExt: 66576, 
    WmfScaleViewportExt: 66578, 
    WmfExcludeClipRect: 66581, 
    WmfIntersectClipRect: 66582, 
    WmfEllipse: 66584, 
    WmfFloodFill: 66585, 
    WmfRectangle: 66587, 
    WmfSetPixel: 66591, 
    WmfFrameRegion: 66601, 
    WmfAnimatePalette: 66614, 
    WmfTextOut: 66849, 
    WmfPolyPolygon: 66872, 
    WmfExtFloodFill: 66888, 
    WmfRoundRect: 67100, 
    WmfPatBlt: 67101, 
    WmfEscape: 67110, 
    WmfCreateRegion: 67327, 
    WmfArc: 67607, 
    WmfPie: 67610, 
    WmfChord: 67632, 
    WmfBitBlt: 67874, 
    WmfDibBitBlt: 67904, 
    WmfExtTextOut: 68146, 
    WmfStretchBlt: 68387, 
    WmfDibStretchBlt: 68417, 
    WmfSetDibToDev: 68915, 
    WmfStretchDib: 69443
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.EmfType", true, {
    EmfOnly: 3, 
    EmfPlusOnly: 4, 
    EmfPlusDual: 5
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.Encoder", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1443D, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
    $sig.make(0x1443C, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Compression", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "ColorDepth", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "ScanMethod", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Version", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "RenderMethod", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Quality", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Transformation", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "LuminanceTable", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "ChrominanceTable", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "SaveFlag", $.Type); 
  $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
  $.Property({Static:false, Public:true }, "Guid", $asm06.TypeRef("System.Guid"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.EncoderParameter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1444F, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14452, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Byte, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14455, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14456, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14457, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14458, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int64, 
        $.Int64
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14459, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1445A, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1445B, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1445C, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1445D, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int16])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1445E, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int64])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1445F, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14460, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
        $jsilcore.TypeRef("System.Array", [$.Int64])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14461, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14462, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Add", 
    $sig.make(0x14463, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Add", 
    $sig.make(0x14464, $asm06.TypeRef("System.IntPtr"), [$.Int32, $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x1444B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1444D, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x1444A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Encoder", 
    $sig.make(0x14445, $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NumberOfValues", 
    $sig.make(0x14449, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x14447, $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
    $sig.make(0x14448, $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Encoder", 
    $sig.make(0x14446, null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder")], [])
  );

  $.Field({Static:false, Public:false}, "parameterGuid", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "numberOfValues", $.Int32); 
  $.Field({Static:false, Public:false}, "parameterValueType", $.Int32); 
  $.Field({Static:false, Public:false}, "parameterValue", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "Encoder", $asm0B.TypeRef("System.Drawing.Imaging.Encoder"));

  $.Property({Static:false, Public:true }, "Type", $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"));

  $.Property({Static:false, Public:true }, "ValueType", $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"));

  $.Property({Static:false, Public:true }, "NumberOfValues", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.EncoderParameters", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8ADA, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8ADB, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertFromMemory", 
    $sig.make(0x8ADD, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ConvertToMemory", 
    $sig.make(0x8ADC, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x8ADE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Param", 
    $sig.make(0x8AD8, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Param", 
    $sig.make(0x8AD9, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")])], [])
  );

  $.Field({Static:false, Public:false}, "param", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")])); 
  $.Property({Static:false, Public:true }, "Param", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.Imaging.EncoderParameterValueType", true, {
    ValueTypeByte: 1, 
    ValueTypeAscii: 2, 
    ValueTypeShort: 3, 
    ValueTypeLong: 4, 
    ValueTypeRational: 5, 
    ValueTypeLongRange: 6, 
    ValueTypeUndefined: 7, 
    ValueTypeRationalRange: 8
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.EncoderValue", true, {
    ColorTypeCMYK: 0, 
    ColorTypeYCCK: 1, 
    CompressionLZW: 2, 
    CompressionCCITT3: 3, 
    CompressionCCITT4: 4, 
    CompressionRle: 5, 
    CompressionNone: 6, 
    ScanMethodInterlaced: 7, 
    ScanMethodNonInterlaced: 8, 
    VersionGif87: 9, 
    VersionGif89: 10, 
    RenderProgressive: 11, 
    RenderNonProgressive: 12, 
    TransformRotate90: 13, 
    TransformRotate180: 14, 
    TransformRotate270: 15, 
    TransformFlipHorizontal: 16, 
    TransformFlipVertical: 17, 
    MultiFrame: 18, 
    LastFrame: 19, 
    Flush: 20, 
    FrameDimensionTime: 21, 
    FrameDimensionResolution: 22, 
    FrameDimensionPage: 23
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.FillMode", true, {
    Alternate: 0, 
    Winding: 1
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.FlushIntention", true, {
    Flush: 0, 
    Sync: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Font", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x82C4, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82C6, null, [$.Type, $asm0B.TypeRef("System.Drawing.FontStyle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82C7, null, [
        $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82C8, null, [
        $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $.Byte
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82C9, null, [
        $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $.Byte, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82CA, null, [
        $.String, $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $.Byte
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82CB, null, [
        $.String, $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $.Byte, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82CC, null, [
        $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82CD, null, [
        $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82CE, null, [$asm0B.TypeRef("System.Drawing.FontFamily"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82CF, null, [
        $.String, $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82D0, null, [
        $.String, $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82D1, null, [
        $.String, $.Single, 
        $asm0B.TypeRef("System.Drawing.GraphicsUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82D2, null, [$.String, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x82D3, null, [
        $asm06.TypeRef("System.IntPtr"), $.Byte, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x82DA, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateNativeFont", 
    $sig.make(0x82C3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x82DD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x82DE, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x82E0, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x82DC, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
    $sig.make(0x82D9, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromHfont", 
    $sig.make(0x82D6, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromLogFont", 
    $sig.make(0x82D7, $.Type, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromLogFont", 
    $sig.make(0x82D8, $.Type, [$.Object, $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bold", 
    $sig.make(0x82B4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FontFamily", 
    $sig.make(0x82B3, $asm0B.TypeRef("System.Drawing.FontFamily"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_GdiCharSet", 
    $sig.make(0x82B5, $.Byte, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GdiVerticalFont", 
    $sig.make(0x82B6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x82C0, $.Int32, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_IsSystemFont", 
    $sig.make(0x82C1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Italic", 
    $sig.make(0x82B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x82B8, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NativeFont", 
    $sig.make(0x82B2, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_OriginalFontName", 
    $sig.make(0x82B9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x82BD, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SizeInPoints", 
    $sig.make(0x82BE, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Strikeout", 
    $sig.make(0x82BA, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Style", 
    $sig.make(0x82BC, $asm0B.TypeRef("System.Drawing.FontStyle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SystemFontName", 
    $sig.make(0x82C2, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Underline", 
    $sig.make(0x82BB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Unit", 
    $sig.make(0x82BF, $asm0B.TypeRef("System.Drawing.GraphicsUnit"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x82E1, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHeight", 
    $sig.make(0x82F2, $.Single, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHeight", 
    $sig.make(0x82F4, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHeight", 
    $sig.make(0x82F6, $.Single, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0x82D4, null, [
        $.String, $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $.Byte, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Initialize", 
    $sig.make(0x82D5, null, [
        $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $.Byte, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IsVerticalName", 
    $sig.make(0x82DF, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetFontFamily", 
    $sig.make(0x82DB, null, [$asm0B.TypeRef("System.Drawing.FontFamily")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetSystemFontName", 
    $sig.make(0x82F9, null, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StripVerticalName", 
    $sig.make(0x82E2, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ISerializable.GetObjectData", 
    $sig.make(0x82C5, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToHfont", 
    $sig.make(0x82E9, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToLogFont", 
    $sig.make(0x82E6, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToLogFont", 
    $sig.make(0x82E8, null, [$.Object, $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x82E3, $.String, [], [])
  );

  $.Constant({Static:true , Public:false}, "LogFontCharSetOffset", 23); 
  $.Constant({Static:true , Public:false}, "LogFontNameOffset", 28); 
  $.Field({Static:false, Public:false}, "nativeFont", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "fontSize", $.Single); 
  $.Field({Static:false, Public:false}, "fontStyle", $asm0B.TypeRef("System.Drawing.FontStyle")); 
  $.Field({Static:false, Public:false}, "fontFamily", $asm0B.TypeRef("System.Drawing.FontFamily")); 
  $.Field({Static:false, Public:false}, "fontUnit", $asm0B.TypeRef("System.Drawing.GraphicsUnit")); 
  $.Field({Static:false, Public:false}, "gdiCharSet", $.Byte); 
  $.Field({Static:false, Public:false}, "gdiVerticalFont", $.Boolean); 
  $.Field({Static:false, Public:false}, "systemFontName", $.String); 
  $.Field({Static:false, Public:false}, "originalFontName", $.String); 
  $.Property({Static:false, Public:false}, "NativeFont", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:false, Public:true }, "FontFamily", $asm0B.TypeRef("System.Drawing.FontFamily"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Bold", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "GdiCharSet", $.Byte)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "GdiVerticalFont", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "Italic", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "Name", $.String)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.FontConverter/FontNameConverter")]; });

  $.Property({Static:false, Public:true }, "OriginalFontName", $.String)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Strikeout", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "Underline", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "Style", $asm0B.TypeRef("System.Drawing.FontStyle"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Size", $.Single);

  $.Property({Static:false, Public:true }, "SizeInPoints", $.Single)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Unit", $asm0B.TypeRef("System.Drawing.GraphicsUnit"))
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.FontConverter/FontUnitConverter")]; });

  $.Property({Static:false, Public:true }, "Height", $.Int32)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "IsSystemFont", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "SystemFontName", $.String)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.ImplementInterfaces(
      $asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), 
      $asm06.TypeRef("System.IDisposable")
  )
})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.FontConverter")]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.DeclareNamespace("System.Drawing.Text");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Text.FontCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA2E1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0xA2E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0xA2E4, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0xA2E5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Families", 
    $sig.make(0xA2DF, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.FontFamily")]), [], [])
  );

  $.Field({Static:false, Public:false}, "nativeFontCollection", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "Families", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.FontFamily")]));

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.FontFamily", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x946A, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x946C, null, [$.String, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x946E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9470, null, [$.String, $asm0B.TypeRef("System.Drawing.Text.FontCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9473, null, [$asm0B.TypeRef("System.Drawing.Text.GenericFontFamilies")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateFontFamily", 
    $sig.make(0x9472, null, [$.String, $asm0B.TypeRef("System.Drawing.Text.FontCollection")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x9478, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x9479, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x9475, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x9474, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_CurrentLanguage", 
    $sig.make(0x9456, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Families", 
    $sig.make(0x945A, $jsilcore.TypeRef("System.Array", [$.Type]), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericMonospace", 
    $sig.make(0x9466, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericSansSerif", 
    $sig.make(0x945B, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericSerif", 
    $sig.make(0x9463, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Name", 
    $sig.make(0x9458, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_NativeFamily", 
    $sig.make(0x9454, $asm06.TypeRef("System.IntPtr"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "GetCellAscent", 
    $sig.make(0x9481, $.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCellDescent", 
    $sig.make(0x9482, $.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEmHeight", 
    $sig.make(0x9480, $.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetFamilies", 
    $sig.make(0x947E, $jsilcore.TypeRef("System.Array", [$.Type]), [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  )
    .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Do not use method GetFamilies, use property Families instead"]; });

  $.ExternalMethod({Static:true , Public:false}, "GetGdipGenericSansSerif", 
    $sig.make(0x947B, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x9477, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLineSpacing", 
    $sig.make(0x9483, $.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetName", 
    $sig.make(0x947A, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNativeGenericMonospace", 
    $sig.make(0x947D, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetNativeGenericSerif", 
    $sig.make(0x947C, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsStyleAvailable", 
    $sig.make(0x947F, $.Boolean, [$asm0B.TypeRef("System.Drawing.FontStyle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeFamily", 
    $sig.make(0x9467, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x9476, $.String, [], [])
  );

  $.Constant({Static:true , Public:false}, "LANG_NEUTRAL", 0); 
  $.Field({Static:false, Public:false}, "nativeFamily", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "createDefaultOnFail", $.Boolean); 
  $.Property({Static:false, Public:false}, "NativeFamily", $asm06.TypeRef("System.IntPtr"));

  $.Property({Static:true , Public:false}, "CurrentLanguage", $.Int32);

  $.Property({Static:false, Public:true }, "Name", $.String);

  $.Property({Static:true , Public:true }, "Families", $jsilcore.TypeRef("System.Array", [$.Type]));

  $.Property({Static:true , Public:true }, "GenericSansSerif", $.Type);

  $.Property({Static:true , Public:true }, "GenericSerif", $.Type);

  $.Property({Static:true , Public:true }, "GenericMonospace", $.Type);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.FontStyle", true, {
    Regular: 0, 
    Bold: 1, 
    Italic: 2, 
    Underline: 4, 
    Strikeout: 8
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.FrameDimension", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8A84, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x8A85, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
    $sig.make(0x8A80, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Page", 
    $sig.make(0x8A83, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resolution", 
    $sig.make(0x8A82, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Time", 
    $sig.make(0x8A81, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x8A86, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x8A87, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "time", $.Type); 
  $.Field({Static:true , Public:false}, "resolution", $.Type); 
  $.Field({Static:true , Public:false}, "page", $.Type); 
  $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
  $.Property({Static:false, Public:true }, "Guid", $asm06.TypeRef("System.Guid"));

  $.Property({Static:true , Public:true }, "Time", $.Type);

  $.Property({Static:true , Public:true }, "Resolution", $.Type);

  $.Property({Static:true , Public:true }, "Page", $.Type);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAE4A, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AbortDoc", 
    $sig.make(0xAE1E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddFontFile", 
    $sig.make(0xAE2E, $.Int32, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "AddFontResourceEx", 
    $sig.make(0xAE2D, $.Int32, [
        $.String, $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "BitBlt", 
    $sig.make(0xAE15, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CopyImage", 
    $sig.make(0xAE42, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateBitmap", 
    $sig.make(0xAE14, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateCompatibleBitmap", 
    $sig.make(0xAE12, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateDIBSection", 
    $sig.make(0xAE19, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods/BITMAPINFO_FLAT")]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateRectRgn", 
    $sig.make(0xAE2A, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DeleteObject", 
    $sig.make(0xAE37, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DestroyIcon", 
    $sig.make(0xAE40, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DeviceCapabilities", 
    $sig.make(0xAE22, $.Int32, [
        $.String, $.String, 
        $.Int16, $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DocumentProperties", 
    $sig.make(0xAE23, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DocumentProperties", 
    $sig.make(0xAE24, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "DrawIconEx", 
    $sig.make(0xAE48, $.Boolean, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EndDoc", 
    $sig.make(0xAE1F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EndPage", 
    $sig.make(0xAE1D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "EnumPrinters", 
    $sig.make(0xAE25, $.Int32, [
        $.Int32, $.String, 
        $.Int32, $asm06.TypeRef("System.IntPtr"), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExtEscape", 
    $sig.make(0xAE31, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExtEscape", 
    $sig.make(0xAE32, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ExtractAssociatedIcon", 
    $sig.make(0xAE3C, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Text.StringBuilder"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetClipRgn", 
    $sig.make(0xAE2B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetDIBits", 
    $sig.make(0xAE16, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods/BITMAPINFO_FLAT")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetIconInfo", 
    $sig.make(0xAE46, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.SafeNativeMethods/ICONINFO")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0xAE43, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.SafeNativeMethods/BITMAP")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0xAE44, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0xAE45, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.SafeNativeMethods/LOGFONT")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetPaletteEntries", 
    $sig.make(0xAE17, $.UInt32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetSysColor", 
    $sig.make(0xAE47, $.Int32, [$.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GlobalAlloc", 
    $sig.make(0xAE35, $asm06.TypeRef("System.IntPtr"), [$.Int32, $.UInt32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GlobalFree", 
    $sig.make(0xAE1A, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GlobalLock", 
    $sig.make(0xAE26, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GlobalUnlock", 
    $sig.make(0xAE28, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntCopyImage", 
    $sig.make(0xAE41, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateBitmap", 
    $sig.make(0xAE13, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateCompatibleBitmap", 
    $sig.make(0xAE11, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntCreateDIBSection", 
    $sig.make(0xAE18, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods/BITMAPINFO_FLAT")]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntCreateRectRgn", 
    $sig.make(0xAE29, $asm06.TypeRef("System.IntPtr"), [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntDeleteObject", 
    $sig.make(0xAE36, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntDestroyIcon", 
    $sig.make(0xAE3F, $.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntersectClipRect", 
    $sig.make(0xAE33, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntExtractAssociatedIcon", 
    $sig.make(0xAE3B, $asm06.TypeRef("System.IntPtr"), [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Text.StringBuilder"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "IntGlobalAlloc", 
    $sig.make(0xAE34, $asm06.TypeRef("System.IntPtr"), [$.Int32, $asm06.TypeRef("System.UIntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntLoadIcon", 
    $sig.make(0xAE3D, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "LoadIcon", 
    $sig.make(0xAE3E, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "OleCreatePictureIndirect", 
    $sig.make(0xAE49, $asm0B.TypeRef("System.Drawing.SafeNativeMethods/IPicture"), [
        $asm0B.TypeRef("System.Drawing.SafeNativeMethods/PICTDESC"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PrintDlg", 
    $sig.make(0xAE20, $.Boolean, [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/PRINTDLG")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "PrintDlg", 
    $sig.make(0xAE21, $.Boolean, [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/PRINTDLGX86")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "ResetDC", 
    $sig.make(0xAE27, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "RestoreClipRgn", 
    $sig.make(0xAE30, null, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "SaveClipRgn", 
    $sig.make(0xAE2F, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SelectClipRgn", 
    $sig.make(0xAE2C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "SelectObject", 
    $sig.make(0xAE38, $asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StartDoc", 
    $sig.make(0xAE1B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.SafeNativeMethods/DOCINFO")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "StartPage", 
    $sig.make(0xAE1C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.Constant({Static:true , Public:true }, "ERROR_CANCELLED", 1223); 
  $.Constant({Static:true , Public:true }, "RASTERCAPS", 38); 
  $.Constant({Static:true , Public:true }, "RC_PALETTE", 256); 
  $.Constant({Static:true , Public:true }, "SIZEPALETTE", 104); 
  $.Constant({Static:true , Public:true }, "SYSPAL_STATIC", 1); 
  $.Constant({Static:true , Public:true }, "BS_SOLID", 0); 
  $.Constant({Static:true , Public:true }, "HOLLOW_BRUSH", 5); 
  $.Constant({Static:true , Public:true }, "R2_BLACK", 1); 
  $.Constant({Static:true , Public:true }, "R2_NOTMERGEPEN", 2); 
  $.Constant({Static:true , Public:true }, "R2_MASKNOTPEN", 3); 
  $.Constant({Static:true , Public:true }, "R2_NOTCOPYPEN", 4); 
  $.Constant({Static:true , Public:true }, "R2_MASKPENNOT", 5); 
  $.Constant({Static:true , Public:true }, "R2_NOT", 6); 
  $.Constant({Static:true , Public:true }, "R2_XORPEN", 7); 
  $.Constant({Static:true , Public:true }, "R2_NOTMASKPEN", 8); 
  $.Constant({Static:true , Public:true }, "R2_MASKPEN", 9); 
  $.Constant({Static:true , Public:true }, "R2_NOTXORPEN", 10); 
  $.Constant({Static:true , Public:true }, "R2_NOP", 11); 
  $.Constant({Static:true , Public:true }, "R2_MERGENOTPEN", 12); 
  $.Constant({Static:true , Public:true }, "R2_COPYPEN", 13); 
  $.Constant({Static:true , Public:true }, "R2_MERGEPENNOT", 14); 
  $.Constant({Static:true , Public:true }, "R2_MERGEPEN", 15); 
  $.Constant({Static:true , Public:true }, "R2_WHITE", 16); 
  $.Constant({Static:true , Public:true }, "UOI_FLAGS", 1); 
  $.Constant({Static:true , Public:true }, "WSF_VISIBLE", 1); 
  $.Constant({Static:true , Public:true }, "E_UNEXPECTED", -2147418113); 
  $.Constant({Static:true , Public:true }, "E_NOTIMPL", -2147467263); 
  $.Constant({Static:true , Public:true }, "E_OUTOFMEMORY", -2147024882); 
  $.Constant({Static:true , Public:true }, "E_INVALIDARG", -2147024809); 
  $.Constant({Static:true , Public:true }, "E_NOINTERFACE", -2147467262); 
  $.Constant({Static:true , Public:true }, "E_POINTER", -2147467261); 
  $.Constant({Static:true , Public:true }, "E_HANDLE", -2147024890); 
  $.Constant({Static:true , Public:true }, "E_ABORT", -2147467260); 
  $.Constant({Static:true , Public:true }, "E_FAIL", -2147467259); 
  $.Constant({Static:true , Public:true }, "E_ACCESSDENIED", -2147024891); 
  $.Constant({Static:true , Public:true }, "PM_NOREMOVE", 0); 
  $.Constant({Static:true , Public:true }, "PM_REMOVE", 1); 
  $.Constant({Static:true , Public:true }, "PM_NOYIELD", 2); 
  $.Constant({Static:true , Public:true }, "GMEM_FIXED", 0); 
  $.Constant({Static:true , Public:true }, "GMEM_MOVEABLE", 2); 
  $.Constant({Static:true , Public:true }, "GMEM_NOCOMPACT", 16); 
  $.Constant({Static:true , Public:true }, "GMEM_NODISCARD", 32); 
  $.Constant({Static:true , Public:true }, "GMEM_ZEROINIT", 64); 
  $.Constant({Static:true , Public:true }, "GMEM_MODIFY", 128); 
  $.Constant({Static:true , Public:true }, "GMEM_DISCARDABLE", 256); 
  $.Constant({Static:true , Public:true }, "GMEM_NOT_BANKED", 4096); 
  $.Constant({Static:true , Public:true }, "GMEM_SHARE", 8192); 
  $.Constant({Static:true , Public:true }, "GMEM_DDESHARE", 8192); 
  $.Constant({Static:true , Public:true }, "GMEM_NOTIFY", 16384); 
  $.Constant({Static:true , Public:true }, "GMEM_LOWER", 4096); 
  $.Constant({Static:true , Public:true }, "GMEM_VALID_FLAGS", 32626); 
  $.Constant({Static:true , Public:true }, "GMEM_INVALID_HANDLE", 32768); 
  $.Constant({Static:true , Public:true }, "DM_UPDATE", 1); 
  $.Constant({Static:true , Public:true }, "DM_COPY", 2); 
  $.Constant({Static:true , Public:true }, "DM_PROMPT", 4); 
  $.Constant({Static:true , Public:true }, "DM_MODIFY", 8); 
  $.Constant({Static:true , Public:true }, "DM_IN_BUFFER", 8); 
  $.Constant({Static:true , Public:true }, "DM_IN_PROMPT", 4); 
  $.Constant({Static:true , Public:true }, "DM_OUT_BUFFER", 2); 
  $.Constant({Static:true , Public:true }, "DM_OUT_DEFAULT", 1); 
  $.Constant({Static:true , Public:true }, "DT_PLOTTER", 0); 
  $.Constant({Static:true , Public:true }, "DT_RASDISPLAY", 1); 
  $.Constant({Static:true , Public:true }, "DT_RASPRINTER", 2); 
  $.Constant({Static:true , Public:true }, "DT_RASCAMERA", 3); 
  $.Constant({Static:true , Public:true }, "DT_CHARSTREAM", 4); 
  $.Constant({Static:true , Public:true }, "DT_METAFILE", 5); 
  $.Constant({Static:true , Public:true }, "DT_DISPFILE", 6); 
  $.Constant({Static:true , Public:true }, "TECHNOLOGY", 2); 
  $.Constant({Static:true , Public:true }, "DC_FIELDS", 1); 
  $.Constant({Static:true , Public:true }, "DC_PAPERS", 2); 
  $.Constant({Static:true , Public:true }, "DC_PAPERSIZE", 3); 
  $.Constant({Static:true , Public:true }, "DC_MINEXTENT", 4); 
  $.Constant({Static:true , Public:true }, "DC_MAXEXTENT", 5); 
  $.Constant({Static:true , Public:true }, "DC_BINS", 6); 
  $.Constant({Static:true , Public:true }, "DC_DUPLEX", 7); 
  $.Constant({Static:true , Public:true }, "DC_SIZE", 8); 
  $.Constant({Static:true , Public:true }, "DC_EXTRA", 9); 
  $.Constant({Static:true , Public:true }, "DC_VERSION", 10); 
  $.Constant({Static:true , Public:true }, "DC_DRIVER", 11); 
  $.Constant({Static:true , Public:true }, "DC_BINNAMES", 12); 
  $.Constant({Static:true , Public:true }, "DC_ENUMRESOLUTIONS", 13); 
  $.Constant({Static:true , Public:true }, "DC_FILEDEPENDENCIES", 14); 
  $.Constant({Static:true , Public:true }, "DC_TRUETYPE", 15); 
  $.Constant({Static:true , Public:true }, "DC_PAPERNAMES", 16); 
  $.Constant({Static:true , Public:true }, "DC_ORIENTATION", 17); 
  $.Constant({Static:true , Public:true }, "DC_COPIES", 18); 
  $.Constant({Static:true , Public:true }, "PD_ALLPAGES", 0); 
  $.Constant({Static:true , Public:true }, "PD_SELECTION", 1); 
  $.Constant({Static:true , Public:true }, "PD_PAGENUMS", 2); 
  $.Constant({Static:true , Public:true }, "PD_CURRENTPAGE", 4194304); 
  $.Constant({Static:true , Public:true }, "PD_NOSELECTION", 4); 
  $.Constant({Static:true , Public:true }, "PD_NOPAGENUMS", 8); 
  $.Constant({Static:true , Public:true }, "PD_NOCURRENTPAGE", 8388608); 
  $.Constant({Static:true , Public:true }, "PD_COLLATE", 16); 
  $.Constant({Static:true , Public:true }, "PD_PRINTTOFILE", 32); 
  $.Constant({Static:true , Public:true }, "PD_PRINTSETUP", 64); 
  $.Constant({Static:true , Public:true }, "PD_NOWARNING", 128); 
  $.Constant({Static:true , Public:true }, "PD_RETURNDC", 256); 
  $.Constant({Static:true , Public:true }, "PD_RETURNIC", 512); 
  $.Constant({Static:true , Public:true }, "PD_RETURNDEFAULT", 1024); 
  $.Constant({Static:true , Public:true }, "PD_SHOWHELP", 2048); 
  $.Constant({Static:true , Public:true }, "PD_ENABLEPRINTHOOK", 4096); 
  $.Constant({Static:true , Public:true }, "PD_ENABLESETUPHOOK", 8192); 
  $.Constant({Static:true , Public:true }, "PD_ENABLEPRINTTEMPLATE", 16384); 
  $.Constant({Static:true , Public:true }, "PD_ENABLESETUPTEMPLATE", 32768); 
  $.Constant({Static:true , Public:true }, "PD_ENABLEPRINTTEMPLATEHANDLE", 65536); 
  $.Constant({Static:true , Public:true }, "PD_ENABLESETUPTEMPLATEHANDLE", 131072); 
  $.Constant({Static:true , Public:true }, "PD_USEDEVMODECOPIES", 262144); 
  $.Constant({Static:true , Public:true }, "PD_USEDEVMODECOPIESANDCOLLATE", 262144); 
  $.Constant({Static:true , Public:true }, "PD_DISABLEPRINTTOFILE", 524288); 
  $.Constant({Static:true , Public:true }, "PD_HIDEPRINTTOFILE", 1048576); 
  $.Constant({Static:true , Public:true }, "PD_NONETWORKBUTTON", 2097152); 
  $.Constant({Static:true , Public:true }, "DI_MASK", 1); 
  $.Constant({Static:true , Public:true }, "DI_IMAGE", 2); 
  $.Constant({Static:true , Public:true }, "DI_NORMAL", 3); 
  $.Constant({Static:true , Public:true }, "DI_COMPAT", 4); 
  $.Constant({Static:true , Public:true }, "DI_DEFAULTSIZE", 8); 
  $.Constant({Static:true , Public:true }, "IDC_ARROW", 32512); 
  $.Constant({Static:true , Public:true }, "IDC_IBEAM", 32513); 
  $.Constant({Static:true , Public:true }, "IDC_WAIT", 32514); 
  $.Constant({Static:true , Public:true }, "IDC_CROSS", 32515); 
  $.Constant({Static:true , Public:true }, "IDC_UPARROW", 32516); 
  $.Constant({Static:true , Public:true }, "IDC_SIZE", 32640); 
  $.Constant({Static:true , Public:true }, "IDC_ICON", 32641); 
  $.Constant({Static:true , Public:true }, "IDC_SIZENWSE", 32642); 
  $.Constant({Static:true , Public:true }, "IDC_SIZENESW", 32643); 
  $.Constant({Static:true , Public:true }, "IDC_SIZEWE", 32644); 
  $.Constant({Static:true , Public:true }, "IDC_SIZENS", 32645); 
  $.Constant({Static:true , Public:true }, "IDC_SIZEALL", 32646); 
  $.Constant({Static:true , Public:true }, "IDC_NO", 32648); 
  $.Constant({Static:true , Public:true }, "IDC_APPSTARTING", 32650); 
  $.Constant({Static:true , Public:true }, "IDC_HELP", 32651); 
  $.Constant({Static:true , Public:true }, "IMAGE_BITMAP", 0); 
  $.Constant({Static:true , Public:true }, "IMAGE_ICON", 1); 
  $.Constant({Static:true , Public:true }, "IMAGE_CURSOR", 2); 
  $.Constant({Static:true , Public:true }, "IMAGE_ENHMETAFILE", 3); 
  $.Constant({Static:true , Public:true }, "IDI_APPLICATION", 32512); 
  $.Constant({Static:true , Public:true }, "IDI_HAND", 32513); 
  $.Constant({Static:true , Public:true }, "IDI_QUESTION", 32514); 
  $.Constant({Static:true , Public:true }, "IDI_EXCLAMATION", 32515); 
  $.Constant({Static:true , Public:true }, "IDI_ASTERISK", 32516); 
  $.Constant({Static:true , Public:true }, "IDI_WINLOGO", 32517); 
  $.Constant({Static:true , Public:true }, "IDI_WARNING", 32515); 
  $.Constant({Static:true , Public:true }, "IDI_ERROR", 32513); 
  $.Constant({Static:true , Public:true }, "IDI_INFORMATION", 32516); 
  $.Constant({Static:true , Public:true }, "SRCCOPY", 13369376); 
  $.Constant({Static:true , Public:true }, "PLANES", 14); 
  $.Constant({Static:true , Public:true }, "PS_SOLID", 0); 
  $.Constant({Static:true , Public:true }, "PS_DASH", 1); 
  $.Constant({Static:true , Public:true }, "PS_DOT", 2); 
  $.Constant({Static:true , Public:true }, "PS_DASHDOT", 3); 
  $.Constant({Static:true , Public:true }, "PS_DASHDOTDOT", 4); 
  $.Constant({Static:true , Public:true }, "PS_NULL", 5); 
  $.Constant({Static:true , Public:true }, "PS_INSIDEFRAME", 6); 
  $.Constant({Static:true , Public:true }, "PS_USERSTYLE", 7); 
  $.Constant({Static:true , Public:true }, "PS_ALTERNATE", 8); 
  $.Constant({Static:true , Public:true }, "PS_STYLE_MASK", 15); 
  $.Constant({Static:true , Public:true }, "PS_ENDCAP_ROUND", 0); 
  $.Constant({Static:true , Public:true }, "PS_ENDCAP_SQUARE", 256); 
  $.Constant({Static:true , Public:true }, "PS_ENDCAP_FLAT", 512); 
  $.Constant({Static:true , Public:true }, "PS_ENDCAP_MASK", 3840); 
  $.Constant({Static:true , Public:true }, "PS_JOIN_ROUND", 0); 
  $.Constant({Static:true , Public:true }, "PS_JOIN_BEVEL", 4096); 
  $.Constant({Static:true , Public:true }, "PS_JOIN_MITER", 8192); 
  $.Constant({Static:true , Public:true }, "PS_JOIN_MASK", 61440); 
  $.Constant({Static:true , Public:true }, "PS_COSMETIC", 0); 
  $.Constant({Static:true , Public:true }, "PS_GEOMETRIC", 65536); 
  $.Constant({Static:true , Public:true }, "PS_TYPE_MASK", 983040); 
  $.Constant({Static:true , Public:true }, "BITSPIXEL", 12); 
  $.Constant({Static:true , Public:true }, "ALTERNATE", 1); 
  $.Constant({Static:true , Public:true }, "LOGPIXELSX", 88); 
  $.Constant({Static:true , Public:true }, "LOGPIXELSY", 90); 
  $.Constant({Static:true , Public:true }, "PHYSICALWIDTH", 110); 
  $.Constant({Static:true , Public:true }, "PHYSICALHEIGHT", 111); 
  $.Constant({Static:true , Public:true }, "PHYSICALOFFSETX", 112); 
  $.Constant({Static:true , Public:true }, "PHYSICALOFFSETY", 113); 
  $.Constant({Static:true , Public:true }, "WINDING", 2); 
  $.Constant({Static:true , Public:true }, "VERTRES", 10); 
  $.Constant({Static:true , Public:true }, "HORZRES", 8); 
  $.Constant({Static:true , Public:true }, "DM_SPECVERSION", 1025); 
  $.Constant({Static:true , Public:true }, "DM_ORIENTATION", 1); 
  $.Constant({Static:true , Public:true }, "DM_PAPERSIZE", 2); 
  $.Constant({Static:true , Public:true }, "DM_PAPERLENGTH", 4); 
  $.Constant({Static:true , Public:true }, "DM_PAPERWIDTH", 8); 
  $.Constant({Static:true , Public:true }, "DM_SCALE", 16); 
  $.Constant({Static:true , Public:true }, "DM_COPIES", 256); 
  $.Constant({Static:true , Public:true }, "DM_DEFAULTSOURCE", 512); 
  $.Constant({Static:true , Public:true }, "DM_PRINTQUALITY", 1024); 
  $.Constant({Static:true , Public:true }, "DM_COLOR", 2048); 
  $.Constant({Static:true , Public:true }, "DM_DUPLEX", 4096); 
  $.Constant({Static:true , Public:true }, "DM_YRESOLUTION", 8192); 
  $.Constant({Static:true , Public:true }, "DM_TTOPTION", 16384); 
  $.Constant({Static:true , Public:true }, "DM_COLLATE", 32768); 
  $.Constant({Static:true , Public:true }, "DM_FORMNAME", 65536); 
  $.Constant({Static:true , Public:true }, "DM_LOGPIXELS", 131072); 
  $.Constant({Static:true , Public:true }, "DM_BITSPERPEL", 262144); 
  $.Constant({Static:true , Public:true }, "DM_PELSWIDTH", 524288); 
  $.Constant({Static:true , Public:true }, "DM_PELSHEIGHT", 1048576); 
  $.Constant({Static:true , Public:true }, "DM_DISPLAYFLAGS", 2097152); 
  $.Constant({Static:true , Public:true }, "DM_DISPLAYFREQUENCY", 4194304); 
  $.Constant({Static:true , Public:true }, "DM_PANNINGWIDTH", 8388608); 
  $.Constant({Static:true , Public:true }, "DM_PANNINGHEIGHT", 16777216); 
  $.Constant({Static:true , Public:true }, "DM_ICMMETHOD", 33554432); 
  $.Constant({Static:true , Public:true }, "DM_ICMINTENT", 67108864); 
  $.Constant({Static:true , Public:true }, "DM_MEDIATYPE", 134217728); 
  $.Constant({Static:true , Public:true }, "DM_DITHERTYPE", 268435456); 
  $.Constant({Static:true , Public:true }, "DM_ICCMANUFACTURER", 536870912); 
  $.Constant({Static:true , Public:true }, "DM_ICCMODEL", 1073741824); 
  $.Constant({Static:true , Public:true }, "DMORIENT_PORTRAIT", 1); 
  $.Constant({Static:true , Public:true }, "DMORIENT_LANDSCAPE", 2); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTER", 1); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTERSMALL", 2); 
  $.Constant({Static:true , Public:true }, "DMPAPER_TABLOID", 3); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LEDGER", 4); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LEGAL", 5); 
  $.Constant({Static:true , Public:true }, "DMPAPER_STATEMENT", 6); 
  $.Constant({Static:true , Public:true }, "DMPAPER_EXECUTIVE", 7); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A3", 8); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A4", 9); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A4SMALL", 10); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A5", 11); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B4", 12); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B5", 13); 
  $.Constant({Static:true , Public:true }, "DMPAPER_FOLIO", 14); 
  $.Constant({Static:true , Public:true }, "DMPAPER_QUARTO", 15); 
  $.Constant({Static:true , Public:true }, "DMPAPER_10X14", 16); 
  $.Constant({Static:true , Public:true }, "DMPAPER_11X17", 17); 
  $.Constant({Static:true , Public:true }, "DMPAPER_NOTE", 18); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_9", 19); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_10", 20); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_11", 21); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_12", 22); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_14", 23); 
  $.Constant({Static:true , Public:true }, "DMPAPER_CSHEET", 24); 
  $.Constant({Static:true , Public:true }, "DMPAPER_DSHEET", 25); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ESHEET", 26); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_DL", 27); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C5", 28); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C3", 29); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C4", 30); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C6", 31); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C65", 32); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_B4", 33); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_B5", 34); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_B6", 35); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_ITALY", 36); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_MONARCH", 37); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_PERSONAL", 38); 
  $.Constant({Static:true , Public:true }, "DMPAPER_FANFOLD_US", 39); 
  $.Constant({Static:true , Public:true }, "DMPAPER_FANFOLD_STD_GERMAN", 40); 
  $.Constant({Static:true , Public:true }, "DMPAPER_FANFOLD_LGL_GERMAN", 41); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ISO_B4", 42); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JAPANESE_POSTCARD", 43); 
  $.Constant({Static:true , Public:true }, "DMPAPER_9X11", 44); 
  $.Constant({Static:true , Public:true }, "DMPAPER_10X11", 45); 
  $.Constant({Static:true , Public:true }, "DMPAPER_15X11", 46); 
  $.Constant({Static:true , Public:true }, "DMPAPER_ENV_INVITE", 47); 
  $.Constant({Static:true , Public:true }, "DMPAPER_RESERVED_48", 48); 
  $.Constant({Static:true , Public:true }, "DMPAPER_RESERVED_49", 49); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_EXTRA", 50); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LEGAL_EXTRA", 51); 
  $.Constant({Static:true , Public:true }, "DMPAPER_TABLOID_EXTRA", 52); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A4_EXTRA", 53); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_TRANSVERSE", 54); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A4_TRANSVERSE", 55); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_EXTRA_TRANSVERSE", 56); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A_PLUS", 57); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B_PLUS", 58); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_PLUS", 59); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A4_PLUS", 60); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A5_TRANSVERSE", 61); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B5_TRANSVERSE", 62); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A3_EXTRA", 63); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A5_EXTRA", 64); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B5_EXTRA", 65); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A2", 66); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A3_TRANSVERSE", 67); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A3_EXTRA_TRANSVERSE", 68); 
  $.Constant({Static:true , Public:true }, "DMPAPER_DBL_JAPANESE_POSTCARD", 69); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A6", 70); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU2", 71); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU3", 72); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU3", 73); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU4", 74); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_ROTATED", 75); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A3_ROTATED", 76); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A4_ROTATED", 77); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A5_ROTATED", 78); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B4_JIS_ROTATED", 79); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B5_JIS_ROTATED", 80); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JAPANESE_POSTCARD_ROTATED", 81); 
  $.Constant({Static:true , Public:true }, "DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED", 82); 
  $.Constant({Static:true , Public:true }, "DMPAPER_A6_ROTATED", 83); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU2_ROTATED", 84); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU3_ROTATED", 85); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU3_ROTATED", 86); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU4_ROTATED", 87); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B6_JIS", 88); 
  $.Constant({Static:true , Public:true }, "DMPAPER_B6_JIS_ROTATED", 89); 
  $.Constant({Static:true , Public:true }, "DMPAPER_12X11", 90); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_YOU4", 91); 
  $.Constant({Static:true , Public:true }, "DMPAPER_JENV_YOU4_ROTATED", 92); 
  $.Constant({Static:true , Public:true }, "DMPAPER_P16K", 93); 
  $.Constant({Static:true , Public:true }, "DMPAPER_P32K", 94); 
  $.Constant({Static:true , Public:true }, "DMPAPER_P32KBIG", 95); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_1", 96); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_2", 97); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_3", 98); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_4", 99); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_5", 100); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_6", 101); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_7", 102); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_8", 103); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_9", 104); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_10", 105); 
  $.Constant({Static:true , Public:true }, "DMPAPER_P16K_ROTATED", 106); 
  $.Constant({Static:true , Public:true }, "DMPAPER_P32K_ROTATED", 107); 
  $.Constant({Static:true , Public:true }, "DMPAPER_P32KBIG_ROTATED", 108); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_1_ROTATED", 109); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_2_ROTATED", 110); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_3_ROTATED", 111); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_4_ROTATED", 112); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_5_ROTATED", 113); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_6_ROTATED", 114); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_7_ROTATED", 115); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_8_ROTATED", 116); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_9_ROTATED", 117); 
  $.Constant({Static:true , Public:true }, "DMPAPER_PENV_10_ROTATED", 118); 
  $.Constant({Static:true , Public:true }, "DMPAPER_LAST", 118); 
  $.Constant({Static:true , Public:true }, "DMPAPER_USER", 256); 
  $.Constant({Static:true , Public:true }, "DMBIN_UPPER", 1); 
  $.Constant({Static:true , Public:true }, "DMBIN_ONLYONE", 1); 
  $.Constant({Static:true , Public:true }, "DMBIN_LOWER", 2); 
  $.Constant({Static:true , Public:true }, "DMBIN_MIDDLE", 3); 
  $.Constant({Static:true , Public:true }, "DMBIN_MANUAL", 4); 
  $.Constant({Static:true , Public:true }, "DMBIN_ENVELOPE", 5); 
  $.Constant({Static:true , Public:true }, "DMBIN_ENVMANUAL", 6); 
  $.Constant({Static:true , Public:true }, "DMBIN_AUTO", 7); 
  $.Constant({Static:true , Public:true }, "DMBIN_TRACTOR", 8); 
  $.Constant({Static:true , Public:true }, "DMBIN_SMALLFMT", 9); 
  $.Constant({Static:true , Public:true }, "DMBIN_LARGEFMT", 10); 
  $.Constant({Static:true , Public:true }, "DMBIN_LARGECAPACITY", 11); 
  $.Constant({Static:true , Public:true }, "DMBIN_CASSETTE", 14); 
  $.Constant({Static:true , Public:true }, "DMBIN_FORMSOURCE", 15); 
  $.Constant({Static:true , Public:true }, "DMBIN_LAST", 15); 
  $.Constant({Static:true , Public:true }, "DMBIN_USER", 256); 
  $.Constant({Static:true , Public:true }, "DMRES_DRAFT", -1); 
  $.Constant({Static:true , Public:true }, "DMRES_LOW", -2); 
  $.Constant({Static:true , Public:true }, "DMRES_MEDIUM", -3); 
  $.Constant({Static:true , Public:true }, "DMRES_HIGH", -4); 
  $.Constant({Static:true , Public:true }, "DMCOLOR_MONOCHROME", 1); 
  $.Constant({Static:true , Public:true }, "DMCOLOR_COLOR", 2); 
  $.Constant({Static:true , Public:true }, "DMDUP_SIMPLEX", 1); 
  $.Constant({Static:true , Public:true }, "DMDUP_VERTICAL", 2); 
  $.Constant({Static:true , Public:true }, "DMDUP_HORIZONTAL", 3); 
  $.Constant({Static:true , Public:true }, "DMTT_BITMAP", 1); 
  $.Constant({Static:true , Public:true }, "DMTT_DOWNLOAD", 2); 
  $.Constant({Static:true , Public:true }, "DMTT_SUBDEV", 3); 
  $.Constant({Static:true , Public:true }, "DMTT_DOWNLOAD_OUTLINE", 4); 
  $.Constant({Static:true , Public:true }, "DMCOLLATE_FALSE", 0); 
  $.Constant({Static:true , Public:true }, "DMCOLLATE_TRUE", 1); 
  $.Constant({Static:true , Public:true }, "DMDISPLAYFLAGS_TEXTMODE", 4); 
  $.Constant({Static:true , Public:true }, "DMICMMETHOD_NONE", 1); 
  $.Constant({Static:true , Public:true }, "DMICMMETHOD_SYSTEM", 2); 
  $.Constant({Static:true , Public:true }, "DMICMMETHOD_DRIVER", 3); 
  $.Constant({Static:true , Public:true }, "DMICMMETHOD_DEVICE", 4); 
  $.Constant({Static:true , Public:true }, "DMICMMETHOD_USER", 256); 
  $.Constant({Static:true , Public:true }, "DMICM_SATURATE", 1); 
  $.Constant({Static:true , Public:true }, "DMICM_CONTRAST", 2); 
  $.Constant({Static:true , Public:true }, "DMICM_COLORMETRIC", 3); 
  $.Constant({Static:true , Public:true }, "DMICM_USER", 256); 
  $.Constant({Static:true , Public:true }, "DMMEDIA_STANDARD", 1); 
  $.Constant({Static:true , Public:true }, "DMMEDIA_TRANSPARENCY", 2); 
  $.Constant({Static:true , Public:true }, "DMMEDIA_GLOSSY", 3); 
  $.Constant({Static:true , Public:true }, "DMMEDIA_USER", 256); 
  $.Constant({Static:true , Public:true }, "DMDITHER_NONE", 1); 
  $.Constant({Static:true , Public:true }, "DMDITHER_COARSE", 2); 
  $.Constant({Static:true , Public:true }, "DMDITHER_FINE", 3); 
  $.Constant({Static:true , Public:true }, "DMDITHER_LINEART", 4); 
  $.Constant({Static:true , Public:true }, "DMDITHER_GRAYSCALE", 5); 
  $.Constant({Static:true , Public:true }, "DMDITHER_USER", 256); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_DEFAULT", 1); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_LOCAL", 2); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_CONNECTIONS", 4); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_FAVORITE", 4); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_NAME", 8); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_REMOTE", 16); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_SHARED", 32); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_NETWORK", 64); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_EXPAND", 16384); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_CONTAINER", 32768); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICONMASK", 16711680); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON1", 65536); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON2", 131072); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON3", 262144); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON4", 524288); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON5", 1048576); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON6", 2097152); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON7", 4194304); 
  $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON8", 8388608); 
  $.Constant({Static:true , Public:true }, "DC_BINADJUST", 19); 
  $.Constant({Static:true , Public:true }, "DC_EMF_COMPLIANT", 20); 
  $.Constant({Static:true , Public:true }, "DC_DATATYPE_PRODUCED", 21); 
  $.Constant({Static:true , Public:true }, "DC_COLLATE", 22); 
  $.Constant({Static:true , Public:true }, "DCTT_BITMAP", 1); 
  $.Constant({Static:true , Public:true }, "DCTT_DOWNLOAD", 2); 
  $.Constant({Static:true , Public:true }, "DCTT_SUBDEV", 4); 
  $.Constant({Static:true , Public:true }, "DCTT_DOWNLOAD_OUTLINE", 8); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEUPNONE", 0); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEUPCENTER", 1); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEUPLEFT", 2); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEUPRIGHT", 3); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNNONE", 256); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNCENTER", 257); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNLEFT", 258); 
  $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNRIGHT", 259); 
  $.Constant({Static:true , Public:true }, "SRCPAINT", 15597702); 
  $.Constant({Static:true , Public:true }, "SRCAND", 8913094); 
  $.Constant({Static:true , Public:true }, "SRCINVERT", 6684742); 
  $.Constant({Static:true , Public:true }, "SRCERASE", 4457256); 
  $.Constant({Static:true , Public:true }, "NOTSRCCOPY", 3342344); 
  $.Constant({Static:true , Public:true }, "NOTSRCERASE", 1114278); 
  $.Constant({Static:true , Public:true }, "MERGECOPY", 12583114); 
  $.Constant({Static:true , Public:true }, "MERGEPAINT", 12255782); 
  $.Constant({Static:true , Public:true }, "PATCOPY", 15728673); 
  $.Constant({Static:true , Public:true }, "PATPAINT", 16452105); 
  $.Constant({Static:true , Public:true }, "PATINVERT", 5898313); 
  $.Constant({Static:true , Public:true }, "DSTINVERT", 5570569); 
  $.Constant({Static:true , Public:true }, "BLACKNESS", 66); 
  $.Constant({Static:true , Public:true }, "WHITENESS", 16711778); 
  $.Constant({Static:true , Public:true }, "CAPTUREBLT", 1073741824); 
  $.Constant({Static:true , Public:true }, "SM_CXSCREEN", 0); 
  $.Constant({Static:true , Public:true }, "SM_CYSCREEN", 1); 
  $.Constant({Static:true , Public:true }, "SM_CXVSCROLL", 2); 
  $.Constant({Static:true , Public:true }, "SM_CYHSCROLL", 3); 
  $.Constant({Static:true , Public:true }, "SM_CYCAPTION", 4); 
  $.Constant({Static:true , Public:true }, "SM_CXBORDER", 5); 
  $.Constant({Static:true , Public:true }, "SM_CYBORDER", 6); 
  $.Constant({Static:true , Public:true }, "SM_CXDLGFRAME", 7); 
  $.Constant({Static:true , Public:true }, "SM_CYDLGFRAME", 8); 
  $.Constant({Static:true , Public:true }, "SM_CYVTHUMB", 9); 
  $.Constant({Static:true , Public:true }, "SM_CXHTHUMB", 10); 
  $.Constant({Static:true , Public:true }, "SM_CXICON", 11); 
  $.Constant({Static:true , Public:true }, "SM_CYICON", 12); 
  $.Constant({Static:true , Public:true }, "SM_CXCURSOR", 13); 
  $.Constant({Static:true , Public:true }, "SM_CYCURSOR", 14); 
  $.Constant({Static:true , Public:true }, "SM_CYMENU", 15); 
  $.Constant({Static:true , Public:true }, "SM_CXFULLSCREEN", 16); 
  $.Constant({Static:true , Public:true }, "SM_CYFULLSCREEN", 17); 
  $.Constant({Static:true , Public:true }, "SM_CYKANJIWINDOW", 18); 
  $.Constant({Static:true , Public:true }, "SM_MOUSEPRESENT", 19); 
  $.Constant({Static:true , Public:true }, "SM_CYVSCROLL", 20); 
  $.Constant({Static:true , Public:true }, "SM_CXHSCROLL", 21); 
  $.Constant({Static:true , Public:true }, "SM_DEBUG", 22); 
  $.Constant({Static:true , Public:true }, "SM_SWAPBUTTON", 23); 
  $.Constant({Static:true , Public:true }, "SM_RESERVED1", 24); 
  $.Constant({Static:true , Public:true }, "SM_RESERVED2", 25); 
  $.Constant({Static:true , Public:true }, "SM_RESERVED3", 26); 
  $.Constant({Static:true , Public:true }, "SM_RESERVED4", 27); 
  $.Constant({Static:true , Public:true }, "SM_CXMIN", 28); 
  $.Constant({Static:true , Public:true }, "SM_CYMIN", 29); 
  $.Constant({Static:true , Public:true }, "SM_CXSIZE", 30); 
  $.Constant({Static:true , Public:true }, "SM_CYSIZE", 31); 
  $.Constant({Static:true , Public:true }, "SM_CXFRAME", 32); 
  $.Constant({Static:true , Public:true }, "SM_CYFRAME", 33); 
  $.Constant({Static:true , Public:true }, "SM_CXMINTRACK", 34); 
  $.Constant({Static:true , Public:true }, "SM_CYMINTRACK", 35); 
  $.Constant({Static:true , Public:true }, "SM_CXDOUBLECLK", 36); 
  $.Constant({Static:true , Public:true }, "SM_CYDOUBLECLK", 37); 
  $.Constant({Static:true , Public:true }, "SM_CXICONSPACING", 38); 
  $.Constant({Static:true , Public:true }, "SM_CYICONSPACING", 39); 
  $.Constant({Static:true , Public:true }, "SM_MENUDROPALIGNMENT", 40); 
  $.Constant({Static:true , Public:true }, "SM_PENWINDOWS", 41); 
  $.Constant({Static:true , Public:true }, "SM_DBCSENABLED", 42); 
  $.Constant({Static:true , Public:true }, "SM_CMOUSEBUTTONS", 43); 
  $.Constant({Static:true , Public:true }, "SM_CXFIXEDFRAME", 7); 
  $.Constant({Static:true , Public:true }, "SM_CYFIXEDFRAME", 8); 
  $.Constant({Static:true , Public:true }, "SM_CXSIZEFRAME", 32); 
  $.Constant({Static:true , Public:true }, "SM_CYSIZEFRAME", 33); 
  $.Constant({Static:true , Public:true }, "SM_SECURE", 44); 
  $.Constant({Static:true , Public:true }, "SM_CXEDGE", 45); 
  $.Constant({Static:true , Public:true }, "SM_CYEDGE", 46); 
  $.Constant({Static:true , Public:true }, "SM_CXMINSPACING", 47); 
  $.Constant({Static:true , Public:true }, "SM_CYMINSPACING", 48); 
  $.Constant({Static:true , Public:true }, "SM_CXSMICON", 49); 
  $.Constant({Static:true , Public:true }, "SM_CYSMICON", 50); 
  $.Constant({Static:true , Public:true }, "SM_CYSMCAPTION", 51); 
  $.Constant({Static:true , Public:true }, "SM_CXSMSIZE", 52); 
  $.Constant({Static:true , Public:true }, "SM_CYSMSIZE", 53); 
  $.Constant({Static:true , Public:true }, "SM_CXMENUSIZE", 54); 
  $.Constant({Static:true , Public:true }, "SM_CYMENUSIZE", 55); 
  $.Constant({Static:true , Public:true }, "SM_ARRANGE", 56); 
  $.Constant({Static:true , Public:true }, "SM_CXMINIMIZED", 57); 
  $.Constant({Static:true , Public:true }, "SM_CYMINIMIZED", 58); 
  $.Constant({Static:true , Public:true }, "SM_CXMAXTRACK", 59); 
  $.Constant({Static:true , Public:true }, "SM_CYMAXTRACK", 60); 
  $.Constant({Static:true , Public:true }, "SM_CXMAXIMIZED", 61); 
  $.Constant({Static:true , Public:true }, "SM_CYMAXIMIZED", 62); 
  $.Constant({Static:true , Public:true }, "SM_NETWORK", 63); 
  $.Constant({Static:true , Public:true }, "SM_CLEANBOOT", 67); 
  $.Constant({Static:true , Public:true }, "SM_CXDRAG", 68); 
  $.Constant({Static:true , Public:true }, "SM_CYDRAG", 69); 
  $.Constant({Static:true , Public:true }, "SM_SHOWSOUNDS", 70); 
  $.Constant({Static:true , Public:true }, "SM_CXMENUCHECK", 71); 
  $.Constant({Static:true , Public:true }, "SM_CYMENUCHECK", 72); 
  $.Constant({Static:true , Public:true }, "SM_SLOWMACHINE", 73); 
  $.Constant({Static:true , Public:true }, "SM_MIDEASTENABLED", 74); 
  $.Constant({Static:true , Public:true }, "SM_MOUSEWHEELPRESENT", 75); 
  $.Constant({Static:true , Public:true }, "SM_XVIRTUALSCREEN", 76); 
  $.Constant({Static:true , Public:true }, "SM_YVIRTUALSCREEN", 77); 
  $.Constant({Static:true , Public:true }, "SM_CXVIRTUALSCREEN", 78); 
  $.Constant({Static:true , Public:true }, "SM_CYVIRTUALSCREEN", 79); 
  $.Constant({Static:true , Public:true }, "SM_CMONITORS", 80); 
  $.Constant({Static:true , Public:true }, "SM_SAMEDISPLAYFORMAT", 81); 
  $.Constant({Static:true , Public:true }, "SM_CMETRICS", 83); 
  $.Constant({Static:true , Public:true }, "GM_COMPATIBLE", 1); 
  $.Constant({Static:true , Public:true }, "GM_ADVANCED", 2); 
  $.Constant({Static:true , Public:true }, "MWT_IDENTITY", 1); 
  $.Constant({Static:true , Public:true }, "FW_DONTCARE", 0); 
  $.Constant({Static:true , Public:true }, "FW_NORMAL", 400); 
  $.Constant({Static:true , Public:true }, "FW_BOLD", 700); 
  $.Constant({Static:true , Public:true }, "ANSI_CHARSET", 0); 
  $.Constant({Static:true , Public:true }, "DEFAULT_CHARSET", 1); 
  $.Constant({Static:true , Public:true }, "OUT_DEFAULT_PRECIS", 0); 
  $.Constant({Static:true , Public:true }, "OUT_TT_PRECIS", 4); 
  $.Constant({Static:true , Public:true }, "OUT_TT_ONLY_PRECIS", 7); 
  $.Constant({Static:true , Public:true }, "CLIP_DEFAULT_PRECIS", 0); 
  $.Constant({Static:true , Public:true }, "DEFAULT_QUALITY", 0); 
  $.Constant({Static:true , Public:true }, "MM_TEXT", 1); 
  $.Constant({Static:true , Public:true }, "OBJ_FONT", 6); 
  $.Constant({Static:true , Public:true }, "TA_DEFAULT", 0); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", 256); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
  $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_DEFAULT", 4608); 
  $.Constant({Static:true , Public:true }, "NOMIRRORBITMAP", -2147483648); 
  $.Constant({Static:true , Public:true }, "QUERYESCSUPPORT", 8); 
  $.Constant({Static:true , Public:true }, "CHECKJPEGFORMAT", 4119); 
  $.Constant({Static:true , Public:true }, "CHECKPNGFORMAT", 4120); 
  $.Constant({Static:true , Public:true }, "ERROR_ACCESS_DENIED", 5); 
  $.Constant({Static:true , Public:true }, "ERROR_PROC_NOT_FOUND", 127); 
  $.Field({Static:true , Public:true }, "InvalidIntPtr", $asm06.TypeRef("System.IntPtr")); 
})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/Gdip", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14DD5, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "AddAtom", 
    $sig.make(0x14B1E, $.UInt16, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertGPPOINTArray", 
    $sig.make(0x14DD0, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertGPPOINTFArrayF", 
    $sig.make(0x14DCF, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertPointToMemory", 
    $sig.make(0x14DD1, $asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertPointToMemory", 
    $sig.make(0x14DD2, $asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertRectangleToMemory", 
    $sig.make(0x14DD3, $asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertRectangleToMemory", 
    $sig.make(0x14DD4, $asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DeleteAtom", 
    $sig.make(0x14B1F, $.UInt16, [$.UInt16], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DestroyAtom", 
    $sig.make(0x14B16, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "DummyFunction", 
    $sig.make(0x14B1B, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EnsureAtomInitialized", 
    $sig.make(0x14B15, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FindAtom", 
    $sig.make(0x14B21, $.UInt16, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathArc", 
    $sig.make(0x14B51, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathArcI", 
    $sig.make(0x14B64, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBezier", 
    $sig.make(0x14B52, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBezierI", 
    $sig.make(0x14B65, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBeziers", 
    $sig.make(0x14B53, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBeziersI", 
    $sig.make(0x14B67, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurve", 
    $sig.make(0x14B57, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurve2", 
    $sig.make(0x14B58, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurve2I", 
    $sig.make(0x14B71, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurveI", 
    $sig.make(0x14B70, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve", 
    $sig.make(0x14B54, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve2", 
    $sig.make(0x14B55, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve2I", 
    $sig.make(0x14B6E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve3", 
    $sig.make(0x14B56, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve3I", 
    $sig.make(0x14B6F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurveI", 
    $sig.make(0x14B6C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathEllipse", 
    $sig.make(0x14B5B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathEllipseI", 
    $sig.make(0x14B74, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLine", 
    $sig.make(0x14B4F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLine2", 
    $sig.make(0x14B50, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLine2I", 
    $sig.make(0x14B63, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLineI", 
    $sig.make(0x14B62, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPath", 
    $sig.make(0x14B5E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPie", 
    $sig.make(0x14B5C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPieI", 
    $sig.make(0x14B75, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPolygon", 
    $sig.make(0x14B5D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPolygonI", 
    $sig.make(0x14B76, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectangle", 
    $sig.make(0x14B59, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectangleI", 
    $sig.make(0x14B72, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectangles", 
    $sig.make(0x14B5A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectanglesI", 
    $sig.make(0x14B73, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathString", 
    $sig.make(0x14B60, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipAddPathStringI", 
    $sig.make(0x14B61, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBeginContainer", 
    $sig.make(0x14D78, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBeginContainer2", 
    $sig.make(0x14D79, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBeginContainerI", 
    $sig.make(0x14D7A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBitmapGetPixel", 
    $sig.make(0x14CE3, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBitmapLockBits", 
    $sig.make(0x14CE1, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageLockMode"), $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), 
        $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBitmapSetPixel", 
    $sig.make(0x14CE4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBitmapSetResolution", 
    $sig.make(0x14CE5, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipBitmapUnlockBits", 
    $sig.make(0x14CE2, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipClearPathMarkers", 
    $sig.make(0x14B4C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneBitmapArea", 
    $sig.make(0x14CDF, $.Int32, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneBitmapAreaI", 
    $sig.make(0x14CE0, $.Int32, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneBrush", 
    $sig.make(0x14BCC, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneCustomLineCap", 
    $sig.make(0x14C88, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneFont", 
    $sig.make(0x14DAB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneFontFamily", 
    $sig.make(0x14D9E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneImage", 
    $sig.make(0x14CAA, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneImageAttributes", 
    $sig.make(0x14CE7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneMatrix", 
    $sig.make(0x14B92, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipClonePath", 
    $sig.make(0x14B2D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipClonePen", 
    $sig.make(0x14C51, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneRegion", 
    $sig.make(0x14BAA, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCloneStringFormat", 
    $sig.make(0x14DBD, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipClosePathFigure", 
    $sig.make(0x14B49, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipClosePathFigures", 
    $sig.make(0x14B4A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionPath", 
    $sig.make(0x14BB4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionRect", 
    $sig.make(0x14BB0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionRectI", 
    $sig.make(0x14BB2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionRegion", 
    $sig.make(0x14BB6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipComment", 
    $sig.make(0x14D8F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateAdjustableArrowCap", 
    $sig.make(0x14C97, $.Int32, [
        $.Single, $.Single, 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromFile", 
    $sig.make(0x14CD5, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromFileICM", 
    $sig.make(0x14CD7, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromGraphics", 
    $sig.make(0x14CD9, $.Int32, [
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromHBITMAP", 
    $sig.make(0x14CDA, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromHICON", 
    $sig.make(0x14CDB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromResource", 
    $sig.make(0x14CDC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromScan0", 
    $sig.make(0x14CD8, $.Int32, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromStream", 
    $sig.make(0x14CD4, $.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromStreamICM", 
    $sig.make(0x14CD6, $.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateCustomLineCap", 
    $sig.make(0x14C85, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFont", 
    $sig.make(0x14DA8, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFamilyFromName", 
    $sig.make(0x14D98, $.Int32, [
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFromDC", 
    $sig.make(0x14DA5, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFromLogfontA", 
    $sig.make(0x14DA6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Object, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFromLogfontW", 
    $sig.make(0x14DA7, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Object, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFromHDC", 
    $sig.make(0x14CF5, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFromHDC2", 
    $sig.make(0x14CF6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateFromHWND", 
    $sig.make(0x14CF7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateHalftonePalette", 
    $sig.make(0x14D1D, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateHatchBrush", 
    $sig.make(0x14BD8, $.Int32, [
        $.Int32, $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateHBITMAPFromBitmap", 
    $sig.make(0x14CDD, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateHICONFromBitmap", 
    $sig.make(0x14CDE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateImageAttributes", 
    $sig.make(0x14CE6, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrush", 
    $sig.make(0x14BFA, $.Int32, [
        $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), 
        $.Int32, $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRect", 
    $sig.make(0x14BFD, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRectI", 
    $sig.make(0x14BFE, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRectWithAngle", 
    $sig.make(0x14BFF, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
        $.Int32, $.Single, 
        $.Boolean, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRectWithAngleI", 
    $sig.make(0x14C00, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
        $.Int32, $.Single, 
        $.Boolean, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushI", 
    $sig.make(0x14BFC, $.Int32, [
        $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), 
        $.Int32, $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix", 
    $sig.make(0x14B8E, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix2", 
    $sig.make(0x14B8F, $.Int32, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix3", 
    $sig.make(0x14B90, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix3I", 
    $sig.make(0x14B91, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromEmf", 
    $sig.make(0x14D83, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromFile", 
    $sig.make(0x14D84, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromStream", 
    $sig.make(0x14D85, $.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromWmf", 
    $sig.make(0x14D82, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader"), 
        $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePath", 
    $sig.make(0x14B26, $.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePath2", 
    $sig.make(0x14B28, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePath2I", 
    $sig.make(0x14B2C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathGradient", 
    $sig.make(0x14C21, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathGradientFromPath", 
    $sig.make(0x14C2C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathGradientI", 
    $sig.make(0x14C24, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathIter", 
    $sig.make(0x14B80, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePen1", 
    $sig.make(0x14C4F, $.Int32, [
        $.Int32, $.Single, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreatePen2", 
    $sig.make(0x14C50, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegion", 
    $sig.make(0x14BA4, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionHrgn", 
    $sig.make(0x14BA9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionPath", 
    $sig.make(0x14BA7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionRect", 
    $sig.make(0x14BA5, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionRectI", 
    $sig.make(0x14BA6, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionRgnData", 
    $sig.make(0x14BA8, $.Int32, [
        $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateSolidFill", 
    $sig.make(0x14BF1, $.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateStringFormat", 
    $sig.make(0x14DB8, $.Int32, [
        $asm0B.TypeRef("System.Drawing.StringFormatFlags"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateTexture", 
    $sig.make(0x14BDC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateTexture2", 
    $sig.make(0x14BDD, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateTexture2I", 
    $sig.make(0x14BDF, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateTextureIA", 
    $sig.make(0x14BDE, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipCreateTextureIAI", 
    $sig.make(0x14BE0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteBrush", 
    $sig.make(0x14BD1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteCustomLineCap", 
    $sig.make(0x14C87, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteFont", 
    $sig.make(0x14DAD, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteFontFamily", 
    $sig.make(0x14D9D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteGraphics", 
    $sig.make(0x14CF9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteMatrix", 
    $sig.make(0x14B94, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeletePath", 
    $sig.make(0x14B31, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeletePathIter", 
    $sig.make(0x14B82, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeletePen", 
    $sig.make(0x14C53, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeletePrivateFontCollection", 
    $sig.make(0x14D93, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteRegion", 
    $sig.make(0x14BAC, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDeleteStringFormat", 
    $sig.make(0x14DBC, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDisposeImage", 
    $sig.make(0x14CAC, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDisposeImageAttributes", 
    $sig.make(0x14CE9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawArc", 
    $sig.make(0x14D22, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawArcI", 
    $sig.make(0x14D23, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawBezier", 
    $sig.make(0x14D24, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawBeziers", 
    $sig.make(0x14D25, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawBeziersI", 
    $sig.make(0x14D26, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurve", 
    $sig.make(0x14D38, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurve2", 
    $sig.make(0x14D3A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurve2I", 
    $sig.make(0x14D3B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurveI", 
    $sig.make(0x14D39, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve", 
    $sig.make(0x14D32, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve2", 
    $sig.make(0x14D34, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve2I", 
    $sig.make(0x14D35, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve3", 
    $sig.make(0x14D36, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve3I", 
    $sig.make(0x14D37, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurveI", 
    $sig.make(0x14D33, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawEllipse", 
    $sig.make(0x14D2B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawEllipseI", 
    $sig.make(0x14D2C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImage", 
    $sig.make(0x14D4D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageI", 
    $sig.make(0x14D4E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointRect", 
    $sig.make(0x14D53, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointRectI", 
    $sig.make(0x14D54, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePoints", 
    $sig.make(0x14D51, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointsI", 
    $sig.make(0x14D52, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointsRect", 
    $sig.make(0x14D57, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointsRectI", 
    $sig.make(0x14D58, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRect", 
    $sig.make(0x14D4F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRectI", 
    $sig.make(0x14D50, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRectRect", 
    $sig.make(0x14D55, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRectRectI", 
    $sig.make(0x14D56, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Graphics/DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawLine", 
    $sig.make(0x14D1E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawLineI", 
    $sig.make(0x14D1F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawLines", 
    $sig.make(0x14D20, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawLinesI", 
    $sig.make(0x14D21, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawPath", 
    $sig.make(0x14D31, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawPie", 
    $sig.make(0x14D2D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawPieI", 
    $sig.make(0x14D2E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawPolygon", 
    $sig.make(0x14D2F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawPolygonI", 
    $sig.make(0x14D30, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectangle", 
    $sig.make(0x14D27, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectangleI", 
    $sig.make(0x14D28, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectangles", 
    $sig.make(0x14D29, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectanglesI", 
    $sig.make(0x14D2A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipDrawString", 
    $sig.make(0x14DB4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEndContainer", 
    $sig.make(0x14D7B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPoint", 
    $sig.make(0x14D59, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPointI", 
    $sig.make(0x14D5A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPoints", 
    $sig.make(0x14D5D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPointsI", 
    $sig.make(0x14D5E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestRect", 
    $sig.make(0x14D5B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestRectI", 
    $sig.make(0x14D5C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPoint", 
    $sig.make(0x14D5F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPointI", 
    $sig.make(0x14D60, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPoints", 
    $sig.make(0x14D63, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPointsI", 
    $sig.make(0x14D64, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestRect", 
    $sig.make(0x14D61, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestRectI", 
    $sig.make(0x14D62, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $.Int32, $asm0B.TypeRef("System.Drawing.Graphics/EnumerateMetafileProc"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurve", 
    $sig.make(0x14D48, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurve2", 
    $sig.make(0x14D4A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurve2I", 
    $sig.make(0x14D4B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurveI", 
    $sig.make(0x14D49, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillEllipse", 
    $sig.make(0x14D43, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillEllipseI", 
    $sig.make(0x14D44, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillPath", 
    $sig.make(0x14D47, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillPie", 
    $sig.make(0x14D45, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillPieI", 
    $sig.make(0x14D46, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillPolygon", 
    $sig.make(0x14D41, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillPolygonI", 
    $sig.make(0x14D42, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillRectangle", 
    $sig.make(0x14D3D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillRectangleI", 
    $sig.make(0x14D3E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillRectangles", 
    $sig.make(0x14D3F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillRectanglesI", 
    $sig.make(0x14D40, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFillRegion", 
    $sig.make(0x14D4C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFlattenPath", 
    $sig.make(0x14B77, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipFlush", 
    $sig.make(0x14CF4, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.FlushIntention")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapFillState", 
    $sig.make(0x14CA4, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapHeight", 
    $sig.make(0x14C9A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapMiddleInset", 
    $sig.make(0x14CA1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapWidth", 
    $sig.make(0x14C9D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetAllPropertyItems", 
    $sig.make(0x14CCC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCellAscent", 
    $sig.make(0x14DA2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCellDescent", 
    $sig.make(0x14DA3, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetClip", 
    $sig.make(0x14D6D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetClipBounds", 
    $sig.make(0x14D6E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCompositingMode", 
    $sig.make(0x14D01, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCompositingQuality", 
    $sig.make(0x14D05, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapBaseCap", 
    $sig.make(0x14C92, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapBaseInset", 
    $sig.make(0x14C94, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapStrokeCaps", 
    $sig.make(0x14C8B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapStrokeJoin", 
    $sig.make(0x14C8E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapType", 
    $sig.make(0x14C89, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCapType")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapWidthScale", 
    $sig.make(0x14C96, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetDC", 
    $sig.make(0x14CFA, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetDpiX", 
    $sig.make(0x14D18, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetDpiY", 
    $sig.make(0x14D19, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetEmHeight", 
    $sig.make(0x14DA1, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetEncoderParameterList", 
    $sig.make(0x14CBE, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $.Int32, $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetEncoderParameterListSize", 
    $sig.make(0x14CBD, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFamily", 
    $sig.make(0x14DAE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFamilyName", 
    $sig.make(0x14D9F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Text.StringBuilder"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontCollectionFamilyCount", 
    $sig.make(0x14D94, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontCollectionFamilyList", 
    $sig.make(0x14D95, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontHeight", 
    $sig.make(0x14DB1, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontHeightGivenDPI", 
    $sig.make(0x14DB2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontSize", 
    $sig.make(0x14DB0, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontStyle", 
    $sig.make(0x14DAF, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.FontStyle")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetFontUnit", 
    $sig.make(0x14DB3, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetGenericFontFamilyMonospace", 
    $sig.make(0x14D9B, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetGenericFontFamilySansSerif", 
    $sig.make(0x14D99, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetGenericFontFamilySerif", 
    $sig.make(0x14D9A, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetHatchBackgroundColor", 
    $sig.make(0x14BDB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetHatchForegroundColor", 
    $sig.make(0x14BDA, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetHatchStyle", 
    $sig.make(0x14BD9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetHemfFromMetafile", 
    $sig.make(0x14D81, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageAttributesAdjustedPalette", 
    $sig.make(0x14CF3, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageBounds", 
    $sig.make(0x14CB2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageDecoders", 
    $sig.make(0x14CD1, $.Int32, [
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageDecodersSize", 
    $sig.make(0x14CD0, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageDimension", 
    $sig.make(0x14CB3, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageEncoders", 
    $sig.make(0x14CD3, $.Int32, [
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageEncodersSize", 
    $sig.make(0x14CD2, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageFlags", 
    $sig.make(0x14CB9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageGraphicsContext", 
    $sig.make(0x14CB1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageHeight", 
    $sig.make(0x14CB6, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageHorizontalResolution", 
    $sig.make(0x14CB7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImagePalette", 
    $sig.make(0x14CC4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImagePaletteSize", 
    $sig.make(0x14CC6, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImagePixelFormat", 
    $sig.make(0x14CBB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageRawFormat", 
    $sig.make(0x14CBA, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageThumbnail", 
    $sig.make(0x14CBC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
        $asm0B.TypeRef("System.Drawing.Image/GetThumbnailImageAbort"), $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageType", 
    $sig.make(0x14CB4, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageVerticalResolution", 
    $sig.make(0x14CB8, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetImageWidth", 
    $sig.make(0x14CB5, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetInterpolationMode", 
    $sig.make(0x14D0C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineBlend", 
    $sig.make(0x14C0F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineBlendCount", 
    $sig.make(0x14C0D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineColors", 
    $sig.make(0x14C03, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineGammaCorrection", 
    $sig.make(0x14C06, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLinePresetBlend", 
    $sig.make(0x14C12, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLinePresetBlendCount", 
    $sig.make(0x14C11, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineRect", 
    $sig.make(0x14C05, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineSpacing", 
    $sig.make(0x14DA4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineTransform", 
    $sig.make(0x14C18, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLineWrapMode", 
    $sig.make(0x14C15, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLogFontA", 
    $sig.make(0x14DAA, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetLogFontW", 
    $sig.make(0x14DA9, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetMatrixElements", 
    $sig.make(0x14BA0, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromEmf", 
    $sig.make(0x14D7D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderEmf")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromFile", 
    $sig.make(0x14D7E, $.Int32, [$.String, $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromMetafile", 
    $sig.make(0x14D80, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromStream", 
    $sig.make(0x14D7F, $.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromWmf", 
    $sig.make(0x14D7C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderWmf")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetNearestColor", 
    $sig.make(0x14D1C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPageScale", 
    $sig.make(0x14D15, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPageUnit", 
    $sig.make(0x14D14, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathData", 
    $sig.make(0x14B46, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathFillMode", 
    $sig.make(0x14B3C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientBlend", 
    $sig.make(0x14C37, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientBlendCount", 
    $sig.make(0x14C36, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientCenterColor", 
    $sig.make(0x14C2D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientCenterPoint", 
    $sig.make(0x14C31, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientFocusScales", 
    $sig.make(0x14C4D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single]), 
        $jsilcore.TypeRef("System.Array", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientPointCount", 
    $sig.make(0x14C34, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientPresetBlend", 
    $sig.make(0x14C3A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $asm06.TypeRef("System.IntPtr"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientPresetBlendCount", 
    $sig.make(0x14C39, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientRect", 
    $sig.make(0x14C33, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientSurroundColorCount", 
    $sig.make(0x14C35, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientSurroundColorsWithCount", 
    $sig.make(0x14C2F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientTransform", 
    $sig.make(0x14C47, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientWrapMode", 
    $sig.make(0x14C45, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathLastPoint", 
    $sig.make(0x14B4E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathPoints", 
    $sig.make(0x14B3A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathTypes", 
    $sig.make(0x14B37, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPathWorldBounds", 
    $sig.make(0x14B7B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenBrushFill", 
    $sig.make(0x14C77, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenColor", 
    $sig.make(0x14C75, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCompoundArray", 
    $sig.make(0x14C83, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCompoundCount", 
    $sig.make(0x14C80, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCustomEndCap", 
    $sig.make(0x14C6A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCustomStartCap", 
    $sig.make(0x14C68, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashArray", 
    $sig.make(0x14C7F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashCap197819", 
    $sig.make(0x14C63, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashCount", 
    $sig.make(0x14C7E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashOffset", 
    $sig.make(0x14C7C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashStyle", 
    $sig.make(0x14C79, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenEndCap", 
    $sig.make(0x14C62, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenFillType", 
    $sig.make(0x14C78, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenLineJoin", 
    $sig.make(0x14C66, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenMiterLimit", 
    $sig.make(0x14C6C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenMode", 
    $sig.make(0x14C56, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenStartCap", 
    $sig.make(0x14C61, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenTransform", 
    $sig.make(0x14C6E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPenWidth", 
    $sig.make(0x14C5D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPixelOffsetMode", 
    $sig.make(0x14D09, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPointCount", 
    $sig.make(0x14B35, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyCount", 
    $sig.make(0x14CC7, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyIdList", 
    $sig.make(0x14CC8, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyItem", 
    $sig.make(0x14CCA, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyItemSize", 
    $sig.make(0x14CC9, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertySize", 
    $sig.make(0x14CCB, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionBounds", 
    $sig.make(0x14BBC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionData", 
    $sig.make(0x14BC2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionDataSize", 
    $sig.make(0x14BC1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionHRgn", 
    $sig.make(0x14BBD, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionScans", 
    $sig.make(0x14BCB, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionScansCount", 
    $sig.make(0x14BC7, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetRenderingOrigin", 
    $sig.make(0x14D03, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetSmoothingMode", 
    $sig.make(0x14D07, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetSolidFillColor", 
    $sig.make(0x14BF5, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatAlign", 
    $sig.make(0x14DC1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringAlignment")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatDigitSubstitution", 
    $sig.make(0x14DCD, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringDigitSubstitute")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatFlags", 
    $sig.make(0x14DBF, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringFormatFlags")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatHotkeyPrefix", 
    $sig.make(0x14DC5, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatLineAlign", 
    $sig.make(0x14DC3, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringAlignment")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatMeasurableCharacterRangeCount", 
    $sig.make(0x14DC9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatTabStopCount", 
    $sig.make(0x14DC8, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatTabStops", 
    $sig.make(0x14DC7, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $jsilcore.TypeRef("System.Array", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatTrimming", 
    $sig.make(0x14DCB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringTrimming")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetTextContrast", 
    $sig.make(0x14D0B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetTextRenderingHint", 
    $sig.make(0x14D0A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Text.TextRenderingHint")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetTextureImage", 
    $sig.make(0x14BF0, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetTextureTransform", 
    $sig.make(0x14BE2, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetTextureWrapMode", 
    $sig.make(0x14BEE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetVisibleClipBounds", 
    $sig.make(0x14D70, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGetWorldTransform", 
    $sig.make(0x14D13, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipGraphicsClear", 
    $sig.make(0x14D3C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipImageForceValidation", 
    $sig.make(0x14CCF, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipImageGetFrameCount", 
    $sig.make(0x14CC1, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $jsilcore.TypeRef("System.Array", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipImageGetFrameDimensionsCount", 
    $sig.make(0x14CBF, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipImageGetFrameDimensionsList", 
    $sig.make(0x14CC0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipImageRotateFlip", 
    $sig.make(0x14CC3, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipImageSelectActiveFrame", 
    $sig.make(0x14CC2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipInvertMatrix", 
    $sig.make(0x14B9B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsClipEmpty", 
    $sig.make(0x14D6F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsEmptyRegion", 
    $sig.make(0x14BBE, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsEqualRegion", 
    $sig.make(0x14BC0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsInfiniteRegion", 
    $sig.make(0x14BBF, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsMatrixEqual", 
    $sig.make(0x14BA3, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsMatrixIdentity", 
    $sig.make(0x14BA2, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsMatrixInvertible", 
    $sig.make(0x14BA1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsOutlineVisiblePathPoint", 
    $sig.make(0x14B7E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsOutlineVisiblePathPointI", 
    $sig.make(0x14B7F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsStyleAvailable", 
    $sig.make(0x14DA0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleClipEmpty", 
    $sig.make(0x14D71, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePathPoint", 
    $sig.make(0x14B7C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePathPointI", 
    $sig.make(0x14B7D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePoint", 
    $sig.make(0x14D72, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePointI", 
    $sig.make(0x14D73, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRect", 
    $sig.make(0x14D74, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRectI", 
    $sig.make(0x14D75, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionPoint", 
    $sig.make(0x14BC3, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionPointI", 
    $sig.make(0x14BC4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionRect", 
    $sig.make(0x14BC5, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionRectI", 
    $sig.make(0x14BC6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromFile", 
    $sig.make(0x14CA7, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromFileICM", 
    $sig.make(0x14CA9, $.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromStream", 
    $sig.make(0x14CA6, $.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromStreamICM", 
    $sig.make(0x14CA8, $.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdiplusShutdown", 
    $sig.make(0x14B24, null, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdiplusStartup", 
    $sig.make(0x14B23, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/Gdip/StartupInput")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/Gdip/StartupOutput")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMeasureCharacterRanges", 
    $sig.make(0x14DB6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMeasureString", 
    $sig.make(0x14DB5, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyLineTransform", 
    $sig.make(0x14C17, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyMatrix", 
    $sig.make(0x14B96, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyPathGradientTransform", 
    $sig.make(0x14C49, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyPenTransform", 
    $sig.make(0x14C70, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyTextureTransform", 
    $sig.make(0x14BE4, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyWorldTransform", 
    $sig.make(0x14D0F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipNewInstalledFontCollection", 
    $sig.make(0x14D90, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipNewPrivateFontCollection", 
    $sig.make(0x14D91, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterCopyData", 
    $sig.make(0x14B8D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterEnumerate", 
    $sig.make(0x14B8C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterGetCount", 
    $sig.make(0x14B88, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterGetSubpathCount", 
    $sig.make(0x14B89, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterHasCurve", 
    $sig.make(0x14B8A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextMarker", 
    $sig.make(0x14B86, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextMarkerPath", 
    $sig.make(0x14B87, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextPathType", 
    $sig.make(0x14B85, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextSubpath", 
    $sig.make(0x14B83, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextSubpathPath", 
    $sig.make(0x14B84, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPathIterRewind", 
    $sig.make(0x14B8B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPlayMetafileRecord", 
    $sig.make(0x14D65, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusRecordType"), 
        $.Int32, $.Int32, 
        $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPrivateAddFontFile", 
    $sig.make(0x14D96, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipPrivateAddMemoryFont", 
    $sig.make(0x14D97, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafile", 
    $sig.make(0x14D86, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafile", 
    $sig.make(0x14D87, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileFileName", 
    $sig.make(0x14D89, $.Int32, [
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $.Int32, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileFileName", 
    $sig.make(0x14D8A, $.Int32, [
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileFileNameI", 
    $sig.make(0x14D8B, $.Int32, [
        $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $.Int32, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileI", 
    $sig.make(0x14D88, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
        $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileStream", 
    $sig.make(0x14D8C, $.Int32, [
        $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
        $.Int32, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileStream", 
    $sig.make(0x14D8D, $.Int32, [
        $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileStreamI", 
    $sig.make(0x14D8E, $.Int32, [
        $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
        $.Int32, $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipReleaseDC", 
    $sig.make(0x14CFC, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRemovePropertyItem", 
    $sig.make(0x14CCD, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetClip", 
    $sig.make(0x14D6B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetLineTransform", 
    $sig.make(0x14C16, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetPath", 
    $sig.make(0x14B32, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetPathGradientTransform", 
    $sig.make(0x14C48, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetPenTransform", 
    $sig.make(0x14C6F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetTextureTransform", 
    $sig.make(0x14BE3, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipResetWorldTransform", 
    $sig.make(0x14D0E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRestoreGraphics", 
    $sig.make(0x14D77, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipReversePath", 
    $sig.make(0x14B4D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRotateLineTransform", 
    $sig.make(0x14C1F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRotateMatrix", 
    $sig.make(0x14B99, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRotatePathGradientTransform", 
    $sig.make(0x14C4C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRotatePenTransform", 
    $sig.make(0x14C73, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRotateTextureTransform", 
    $sig.make(0x14BE7, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipRotateWorldTransform", 
    $sig.make(0x14D12, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSaveAdd", 
    $sig.make(0x14CAF, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSaveAddImage", 
    $sig.make(0x14CB0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSaveGraphics", 
    $sig.make(0x14D76, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSaveImageToFile", 
    $sig.make(0x14CAD, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSaveImageToStream", 
    $sig.make(0x14CAE, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipScaleLineTransform", 
    $sig.make(0x14C1D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipScaleMatrix", 
    $sig.make(0x14B98, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipScalePathGradientTransform", 
    $sig.make(0x14C4B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipScalePenTransform", 
    $sig.make(0x14C72, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipScaleTextureTransform", 
    $sig.make(0x14BE6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipScaleWorldTransform", 
    $sig.make(0x14D11, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapFillState", 
    $sig.make(0x14CA2, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapHeight", 
    $sig.make(0x14C98, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapMiddleInset", 
    $sig.make(0x14C9F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapWidth", 
    $sig.make(0x14C9B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetClipGraphics", 
    $sig.make(0x14D66, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetClipPath", 
    $sig.make(0x14D69, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetClipRect", 
    $sig.make(0x14D67, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetClipRectI", 
    $sig.make(0x14D68, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetClipRegion", 
    $sig.make(0x14D6A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCompositingMode", 
    $sig.make(0x14CFD, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCompositingQuality", 
    $sig.make(0x14D04, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapBaseCap", 
    $sig.make(0x14C90, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapBaseInset", 
    $sig.make(0x14C93, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapStrokeCaps", 
    $sig.make(0x14C8A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapStrokeJoin", 
    $sig.make(0x14C8C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapWidthScale", 
    $sig.make(0x14C95, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetEmpty", 
    $sig.make(0x14BAE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesColorKeys", 
    $sig.make(0x14CEE, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesColorMatrix", 
    $sig.make(0x14CEA, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesGamma", 
    $sig.make(0x14CEC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesNoOp", 
    $sig.make(0x14CED, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesOutputChannel", 
    $sig.make(0x14CEF, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $asm0B.TypeRef("System.Drawing.Imaging.ColorChannelFlag")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesOutputChannelColorProfile", 
    $sig.make(0x14CF0, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $.String
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesRemapTable", 
    $sig.make(0x14CF1, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $.Int32, 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesThreshold", 
    $sig.make(0x14CEB, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
        $.Boolean, $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesWrapMode", 
    $sig.make(0x14CF2, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetImagePalette", 
    $sig.make(0x14CC5, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetInfinite", 
    $sig.make(0x14BAD, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetInterpolationMode", 
    $sig.make(0x14D00, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineBlend", 
    $sig.make(0x14C10, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineColors", 
    $sig.make(0x14C01, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineGammaCorrection", 
    $sig.make(0x14C08, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineLinearBlend", 
    $sig.make(0x14C0B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLinePresetBlend", 
    $sig.make(0x14C13, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineSigmaBlend", 
    $sig.make(0x14C0A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineTransform", 
    $sig.make(0x14C19, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetLineWrapMode", 
    $sig.make(0x14C14, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetMatrixElements", 
    $sig.make(0x14B95, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPageScale", 
    $sig.make(0x14D17, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPageUnit", 
    $sig.make(0x14D16, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathFillMode", 
    $sig.make(0x14B3E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientBlend", 
    $sig.make(0x14C38, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientCenterColor", 
    $sig.make(0x14C2E, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientCenterPoint", 
    $sig.make(0x14C32, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientFocusScales", 
    $sig.make(0x14C4E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientLinearBlend", 
    $sig.make(0x14C42, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientPresetBlend", 
    $sig.make(0x14C3B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientSigmaBlend", 
    $sig.make(0x14C3D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientSurroundColorsWithCount", 
    $sig.make(0x14C30, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientTransform", 
    $sig.make(0x14C46, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientWrapMode", 
    $sig.make(0x14C44, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPathMarker", 
    $sig.make(0x14B4B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenBrushFill", 
    $sig.make(0x14C76, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenColor", 
    $sig.make(0x14C74, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenCompoundArray", 
    $sig.make(0x14C81, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single]), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenCustomEndCap", 
    $sig.make(0x14C69, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenCustomStartCap", 
    $sig.make(0x14C67, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashArray", 
    $sig.make(0x14C7B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashCap197819", 
    $sig.make(0x14C64, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashOffset", 
    $sig.make(0x14C7D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashStyle", 
    $sig.make(0x14C7A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenEndCap", 
    $sig.make(0x14C60, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenLineCap197819", 
    $sig.make(0x14C5E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenLineJoin", 
    $sig.make(0x14C65, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenMiterLimit", 
    $sig.make(0x14C6B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenMode", 
    $sig.make(0x14C54, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenStartCap", 
    $sig.make(0x14C5F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenTransform", 
    $sig.make(0x14C6D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPenWidth", 
    $sig.make(0x14C5B, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPixelOffsetMode", 
    $sig.make(0x14D08, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetPropertyItem", 
    $sig.make(0x14CCE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.PropertyItemInternal")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetRenderingOrigin", 
    $sig.make(0x14D02, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetSmoothingMode", 
    $sig.make(0x14D06, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetSolidFillColor", 
    $sig.make(0x14BF3, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatAlign", 
    $sig.make(0x14DC0, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringAlignment")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatDigitSubstitution", 
    $sig.make(0x14DCC, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $asm0B.TypeRef("System.Drawing.StringDigitSubstitute")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatFlags", 
    $sig.make(0x14DBE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringFormatFlags")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatHotkeyPrefix", 
    $sig.make(0x14DC4, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatLineAlign", 
    $sig.make(0x14DC2, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringAlignment")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatMeasurableCharacterRanges", 
    $sig.make(0x14DB7, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.CharacterRange")])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatTabStops", 
    $sig.make(0x14DC6, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Single])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatTrimming", 
    $sig.make(0x14DCA, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringTrimming")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetTextContrast", 
    $sig.make(0x14CFF, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetTextRenderingHint", 
    $sig.make(0x14CFE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Text.TextRenderingHint")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetTextureTransform", 
    $sig.make(0x14BE1, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetTextureWrapMode", 
    $sig.make(0x14BE9, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipSetWorldTransform", 
    $sig.make(0x14D0D, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipShearMatrix", 
    $sig.make(0x14B9A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipStartPathFigure", 
    $sig.make(0x14B48, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipStringFormatGetGenericDefault", 
    $sig.make(0x14DB9, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipStringFormatGetGenericTypographic", 
    $sig.make(0x14DBA, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTransformMatrixPoints", 
    $sig.make(0x14B9C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTransformMatrixPointsI", 
    $sig.make(0x14B9D, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTransformPath", 
    $sig.make(0x14B7A, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTransformPoints", 
    $sig.make(0x14D1A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTransformPointsI", 
    $sig.make(0x14D1B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTransformRegion", 
    $sig.make(0x14BBB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateClip", 
    $sig.make(0x14D6C, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateLineTransform", 
    $sig.make(0x14C1B, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateMatrix", 
    $sig.make(0x14B97, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslatePathGradientTransform", 
    $sig.make(0x14C4A, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslatePenTransform", 
    $sig.make(0x14C71, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateRegion", 
    $sig.make(0x14BB7, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateRegionI", 
    $sig.make(0x14BB9, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateTextureTransform", 
    $sig.make(0x14BE5, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipTranslateWorldTransform", 
    $sig.make(0x14D10, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
        $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipWarpPath", 
    $sig.make(0x14B79, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.WarpMode"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipVectorTransformMatrixPoints", 
    $sig.make(0x14B9E, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipVectorTransformMatrixPointsI", 
    $sig.make(0x14B9F, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GdipWidenPath", 
    $sig.make(0x14B78, $.Int32, [
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
        $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_AtomName", 
    $sig.make(0x14B0F, $.String, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:true , Public:false}, "get_IsShutdown", 
    $sig.make(0x14B11, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_ThreadData", 
    $sig.make(0x14B13, $asm06.TypeRef("System.Collections.IDictionary"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetCurrentProcessId", 
    $sig.make(0x14B1D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Initialize", 
    $sig.make(0x14B17, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteBrush", 
    $sig.make(0x14BCE, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteCustomLineCap", 
    $sig.make(0x14C86, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteFont", 
    $sig.make(0x14DAC, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteFontFamily", 
    $sig.make(0x14D9C, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteGraphics", 
    $sig.make(0x14CF8, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteMatrix", 
    $sig.make(0x14B93, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePath", 
    $sig.make(0x14B2F, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePathIter", 
    $sig.make(0x14B81, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePen", 
    $sig.make(0x14C52, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePrivateFontCollection", 
    $sig.make(0x14D92, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteRegion", 
    $sig.make(0x14BAB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteStringFormat", 
    $sig.make(0x14DBB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDisposeImage", 
    $sig.make(0x14CAB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipDisposeImageAttributes", 
    $sig.make(0x14CE8, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "IntGdipReleaseDC", 
    $sig.make(0x14CFB, $.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnProcessExit", 
    $sig.make(0x14B19, null, [$.Object, $asm06.TypeRef("System.EventArgs")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

  $.ExternalMethod({Static:true , Public:false}, "Shutdown", 
    $sig.make(0x14B18, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "StatusException", 
    $sig.make(0x14DCE, $asm06.TypeRef("System.Exception"), [$.Int32], [])
  );

  $.Constant({Static:true , Public:false}, "ThreadDataSlotName", "system.drawing.threaddata"); 
  $.Constant({Static:true , Public:false}, "Ok", 0); 
  $.Constant({Static:true , Public:false}, "GenericError", 1); 
  $.Constant({Static:true , Public:false}, "InvalidParameter", 2); 
  $.Constant({Static:true , Public:false}, "OutOfMemory", 3); 
  $.Constant({Static:true , Public:false}, "ObjectBusy", 4); 
  $.Constant({Static:true , Public:false}, "InsufficientBuffer", 5); 
  $.Constant({Static:true , Public:false}, "NotImplemented", 6); 
  $.Constant({Static:true , Public:false}, "Win32Error", 7); 
  $.Constant({Static:true , Public:false}, "WrongState", 8); 
  $.Constant({Static:true , Public:false}, "Aborted", 9); 
  $.Constant({Static:true , Public:false}, "FileNotFound", 10); 
  $.Constant({Static:true , Public:false}, "ValueOverflow", 11); 
  $.Constant({Static:true , Public:false}, "AccessDenied", 12); 
  $.Constant({Static:true , Public:false}, "UnknownImageFormat", 13); 
  $.Constant({Static:true , Public:false}, "FontFamilyNotFound", 14); 
  $.Constant({Static:true , Public:false}, "FontStyleNotFound", 15); 
  $.Constant({Static:true , Public:false}, "NotTrueTypeFont", 16); 
  $.Constant({Static:true , Public:false}, "UnsupportedGdiplusVersion", 17); 
  $.Constant({Static:true , Public:false}, "GdiplusNotInitialized", 18); 
  $.Constant({Static:true , Public:false}, "PropertyNotFound", 19); 
  $.Constant({Static:true , Public:false}, "PropertyNotSupported", 20); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GdiPlusInitialization", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "GdiPlusIgnoreAtom", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
  $.Field({Static:true , Public:false}, "initToken", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:true , Public:false}, "atomName", $.String, null); 
  $.Field({Static:true , Public:false}, "hAtom", $.UInt16, 0); 
  $.Property({Static:true , Public:false}, "AtomName", $.String);

  $.Property({Static:true , Public:false}, "IsShutdown", $.Boolean);

  $.Property({Static:true , Public:false}, "ThreadData", $asm06.TypeRef("System.Collections.IDictionary"));

})
  .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/Gdip/StartupInput", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:true , Public:true }, "GetDefault", 
    $sig.make(0x14DDC, $.Type, [], [])
  );

  $.Field({Static:false, Public:true }, "GdiplusVersion", $.Int32); 
  $.Field({Static:false, Public:true }, "DebugEventCallback", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "SuppressBackgroundThread", $.Boolean); 
  $.Field({Static:false, Public:true }, "SuppressExternalCodecs", $.Boolean); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/Gdip/StartupOutput", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "hook", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "unhook", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods/Gdip/DebugEventLevel", false, {
    Fatal: 0, 
    Warning: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/ENHMETAHEADER", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAE52, null, [], [])
  );

  $.Field({Static:false, Public:true }, "iType", $.Int32); 
  $.Field({Static:false, Public:true }, "nSize", $.Int32); 
  $.Field({Static:false, Public:true }, "rclBounds_left", $.Int32); 
  $.Field({Static:false, Public:true }, "rclBounds_top", $.Int32); 
  $.Field({Static:false, Public:true }, "rclBounds_right", $.Int32); 
  $.Field({Static:false, Public:true }, "rclBounds_bottom", $.Int32); 
  $.Field({Static:false, Public:true }, "rclFrame_left", $.Int32); 
  $.Field({Static:false, Public:true }, "rclFrame_top", $.Int32); 
  $.Field({Static:false, Public:true }, "rclFrame_right", $.Int32); 
  $.Field({Static:false, Public:true }, "rclFrame_bottom", $.Int32); 
  $.Field({Static:false, Public:true }, "dSignature", $.Int32); 
  $.Field({Static:false, Public:true }, "nVersion", $.Int32); 
  $.Field({Static:false, Public:true }, "nBytes", $.Int32); 
  $.Field({Static:false, Public:true }, "nRecords", $.Int32); 
  $.Field({Static:false, Public:true }, "nHandles", $.Int16); 
  $.Field({Static:false, Public:true }, "sReserved", $.Int16); 
  $.Field({Static:false, Public:true }, "nDescription", $.Int32); 
  $.Field({Static:false, Public:true }, "offDescription", $.Int32); 
  $.Field({Static:false, Public:true }, "nPalEntries", $.Int32); 
  $.Field({Static:false, Public:true }, "szlDevice_cx", $.Int32); 
  $.Field({Static:false, Public:true }, "szlDevice_cy", $.Int32); 
  $.Field({Static:false, Public:true }, "szlMillimeters_cx", $.Int32); 
  $.Field({Static:false, Public:true }, "szlMillimeters_cy", $.Int32); 
  $.Field({Static:false, Public:true }, "cbPixelFormat", $.Int32); 
  $.Field({Static:false, Public:true }, "offPixelFormat", $.Int32); 
  $.Field({Static:false, Public:true }, "bOpenGL", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/DOCINFO", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB65D, null, [], [])
  );

  $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
  $.Field({Static:false, Public:true }, "lpszDocName", $.String); 
  $.Field({Static:false, Public:true }, "lpszOutput", $.String); 
  $.Field({Static:false, Public:true }, "lpszDatatype", $.String); 
  $.Field({Static:false, Public:true }, "fwType", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/PRINTDLG", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB64F, null, [], [])
  );

  $.Field({Static:false, Public:true }, "lStructSize", $.Int32); 
  $.Field({Static:false, Public:true }, "hwndOwner", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hDevMode", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hDevNames", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hDC", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "Flags", $.Int32); 
  $.Field({Static:false, Public:true }, "nFromPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nToPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nMinPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nMaxPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nCopies", $.Int16); 
  $.Field({Static:false, Public:true }, "hInstance", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lCustData", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lpfnPrintHook", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lpfnSetupHook", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lpPrintTemplateName", $.String); 
  $.Field({Static:false, Public:true }, "lpSetupTemplateName", $.String); 
  $.Field({Static:false, Public:true }, "hPrintTemplate", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hSetupTemplate", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/PRINTDLGX86", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB656, null, [], [])
  );

  $.Field({Static:false, Public:true }, "lStructSize", $.Int32); 
  $.Field({Static:false, Public:true }, "hwndOwner", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hDevMode", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hDevNames", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hDC", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "Flags", $.Int32); 
  $.Field({Static:false, Public:true }, "nFromPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nToPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nMinPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nMaxPage", $.Int16); 
  $.Field({Static:false, Public:true }, "nCopies", $.Int16); 
  $.Field({Static:false, Public:true }, "hInstance", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lCustData", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lpfnPrintHook", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lpfnSetupHook", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lpPrintTemplateName", $.String); 
  $.Field({Static:false, Public:true }, "lpSetupTemplateName", $.String); 
  $.Field({Static:false, Public:true }, "hPrintTemplate", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hSetupTemplate", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods/StructFormat", false, {
    Ansi: 1, 
    Unicode: 2, 
    Auto: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/RECT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "left", $.Int32); 
  $.Field({Static:false, Public:true }, "top", $.Int32); 
  $.Field({Static:false, Public:true }, "right", $.Int32); 
  $.Field({Static:false, Public:true }, "bottom", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/MSG", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "hwnd", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "message", $.Int32); 
  $.Field({Static:false, Public:true }, "wParam", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "lParam", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "time", $.Int32); 
  $.Field({Static:false, Public:true }, "pt_x", $.Int32); 
  $.Field({Static:false, Public:true }, "pt_y", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/ICONINFO", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB648, null, [], [])
  );

  $.Field({Static:false, Public:true }, "fIcon", $.Int32); 
  $.Field({Static:false, Public:true }, "xHotspot", $.Int32); 
  $.Field({Static:false, Public:true }, "yHotspot", $.Int32); 
  $.Field({Static:false, Public:true }, "hbmMask", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "hbmColor", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/BITMAP", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB664, null, [], [])
  );

  $.Field({Static:false, Public:true }, "bmType", $.Int32); 
  $.Field({Static:false, Public:true }, "bmWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "bmHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "bmWidthBytes", $.Int32); 
  $.Field({Static:false, Public:true }, "bmPlanes", $.Int16); 
  $.Field({Static:false, Public:true }, "bmBitsPixel", $.Int16); 
  $.Field({Static:false, Public:true }, "bmBits", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/BITMAPINFOHEADER", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14AEF, null, [], [])
  );

  $.Field({Static:false, Public:true }, "biSize", $.Int32); 
  $.Field({Static:false, Public:true }, "biWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "biHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "biPlanes", $.Int16); 
  $.Field({Static:false, Public:true }, "biBitCount", $.Int16); 
  $.Field({Static:false, Public:true }, "biCompression", $.Int32); 
  $.Field({Static:false, Public:true }, "biSizeImage", $.Int32); 
  $.Field({Static:false, Public:true }, "biXPelsPerMeter", $.Int32); 
  $.Field({Static:false, Public:true }, "biYPelsPerMeter", $.Int32); 
  $.Field({Static:false, Public:true }, "biClrUsed", $.Int32); 
  $.Field({Static:false, Public:true }, "biClrImportant", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/LOGFONT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB66B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB66C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0xB66D, $.String, [], [])
  );

  $.Field({Static:false, Public:true }, "lfHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "lfEscapement", $.Int32); 
  $.Field({Static:false, Public:true }, "lfOrientation", $.Int32); 
  $.Field({Static:false, Public:true }, "lfWeight", $.Int32); 
  $.Field({Static:false, Public:true }, "lfItalic", $.Byte); 
  $.Field({Static:false, Public:true }, "lfUnderline", $.Byte); 
  $.Field({Static:false, Public:true }, "lfStrikeOut", $.Byte); 
  $.Field({Static:false, Public:true }, "lfCharSet", $.Byte); 
  $.Field({Static:false, Public:true }, "lfOutPrecision", $.Byte); 
  $.Field({Static:false, Public:true }, "lfClipPrecision", $.Byte); 
  $.Field({Static:false, Public:true }, "lfQuality", $.Byte); 
  $.Field({Static:false, Public:true }, "lfPitchAndFamily", $.Byte); 
  $.Field({Static:false, Public:true }, "lfFaceName", $.String); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/TEXTMETRIC", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
  $.Field({Static:false, Public:true }, "tmFirstChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmLastChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmDefaultChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmBreakChar", $.Char); 
  $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
  $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
  $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
  $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
  $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/TEXTMETRICA", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
  $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
  $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
  $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
  $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
  $.Field({Static:false, Public:true }, "tmFirstChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmLastChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmDefaultChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmBreakChar", $.Byte); 
  $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
  $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
  $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
  $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
  $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/ICONDIR", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "idReserved", $.Int16); 
  $.Field({Static:false, Public:true }, "idType", $.Int16); 
  $.Field({Static:false, Public:true }, "idCount", $.Int16); 
  $.Field({Static:false, Public:true }, "idEntries", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/ICONDIRENTRY")); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/ICONDIRENTRY", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "bWidth", $.Byte); 
  $.Field({Static:false, Public:true }, "bHeight", $.Byte); 
  $.Field({Static:false, Public:true }, "bColorCount", $.Byte); 
  $.Field({Static:false, Public:true }, "bReserved", $.Byte); 
  $.Field({Static:false, Public:true }, "wPlanes", $.Int16); 
  $.Field({Static:false, Public:true }, "wBitCount", $.Int16); 
  $.Field({Static:false, Public:true }, "dwBytesInRes", $.Int32); 
  $.Field({Static:false, Public:true }, "dwImageOffset", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/Ole", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14C25, null, [], [])
  );

  $.Constant({Static:true , Public:true }, "PICTYPE_UNINITIALIZED", -1); 
  $.Constant({Static:true , Public:true }, "PICTYPE_NONE", 0); 
  $.Constant({Static:true , Public:true }, "PICTYPE_BITMAP", 1); 
  $.Constant({Static:true , Public:true }, "PICTYPE_METAFILE", 2); 
  $.Constant({Static:true , Public:true }, "PICTYPE_ICON", 3); 
  $.Constant({Static:true , Public:true }, "PICTYPE_ENHMETAFILE", 4); 
  $.Constant({Static:true , Public:true }, "STATFLAG_DEFAULT", 0); 
  $.Constant({Static:true , Public:true }, "STATFLAG_NONAME", 1); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/PICTDESC", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB684, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "CreateIconPICTDESC", 
    $sig.make(0xB682, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHandle", 
    $sig.make(0xB683, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.Field({Static:false, Public:false}, "cbSizeOfStruct", $.Int32); 
  $.Field({Static:false, Public:true }, "picType", $.Int32); 
  $.Field({Static:false, Public:false}, "union1", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:false}, "union2", $.Int32); 
  $.Field({Static:false, Public:false}, "union3", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/DEVMODE", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1487C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1487B, $.String, [], [])
  );

  $.Field({Static:false, Public:true }, "dmDeviceName", $.String); 
  $.Field({Static:false, Public:true }, "dmSpecVersion", $.Int16); 
  $.Field({Static:false, Public:true }, "dmDriverVersion", $.Int16); 
  $.Field({Static:false, Public:true }, "dmSize", $.Int16); 
  $.Field({Static:false, Public:true }, "dmDriverExtra", $.Int16); 
  $.Field({Static:false, Public:true }, "dmFields", $.Int32); 
  $.Field({Static:false, Public:true }, "dmOrientation", $.Int16); 
  $.Field({Static:false, Public:true }, "dmPaperSize", $.Int16); 
  $.Field({Static:false, Public:true }, "dmPaperLength", $.Int16); 
  $.Field({Static:false, Public:true }, "dmPaperWidth", $.Int16); 
  $.Field({Static:false, Public:true }, "dmScale", $.Int16); 
  $.Field({Static:false, Public:true }, "dmCopies", $.Int16); 
  $.Field({Static:false, Public:true }, "dmDefaultSource", $.Int16); 
  $.Field({Static:false, Public:true }, "dmPrintQuality", $.Int16); 
  $.Field({Static:false, Public:true }, "dmColor", $.Int16); 
  $.Field({Static:false, Public:true }, "dmDuplex", $.Int16); 
  $.Field({Static:false, Public:true }, "dmYResolution", $.Int16); 
  $.Field({Static:false, Public:true }, "dmTTOption", $.Int16); 
  $.Field({Static:false, Public:true }, "dmCollate", $.Int16); 
  $.Field({Static:false, Public:true }, "dmFormName", $.String); 
  $.Field({Static:false, Public:true }, "dmLogPixels", $.Int16); 
  $.Field({Static:false, Public:true }, "dmBitsPerPel", $.Int32); 
  $.Field({Static:false, Public:true }, "dmPelsWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "dmPelsHeight", $.Int32); 
  $.Field({Static:false, Public:true }, "dmDisplayFlags", $.Int32); 
  $.Field({Static:false, Public:true }, "dmDisplayFrequency", $.Int32); 
  $.Field({Static:false, Public:true }, "dmICMMethod", $.Int32); 
  $.Field({Static:false, Public:true }, "dmICMIntent", $.Int32); 
  $.Field({Static:false, Public:true }, "dmMediaType", $.Int32); 
  $.Field({Static:false, Public:true }, "dmDitherType", $.Int32); 
  $.Field({Static:false, Public:true }, "dmICCManufacturer", $.Int32); 
  $.Field({Static:false, Public:true }, "dmICCModel", $.Int32); 
  $.Field({Static:false, Public:true }, "dmPanningWidth", $.Int32); 
  $.Field({Static:false, Public:true }, "dmPanningHeight", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/CommonHandles", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14B30, null, [], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Accelerator", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Cursor", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "EMF", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Find", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "GDI", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "HDC", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Icon", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Kernel", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Menu", $.Int32); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Window", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SafeNativeMethods/StreamConsts", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A86, null, [], [])
  );

  $.Constant({Static:true , Public:true }, "LOCK_WRITE", 1); 
  $.Constant({Static:true , Public:true }, "LOCK_EXCLUSIVE", 2); 
  $.Constant({Static:true , Public:true }, "LOCK_ONLYONCE", 4); 
  $.Constant({Static:true , Public:true }, "STATFLAG_DEFAULT", 0); 
  $.Constant({Static:true , Public:true }, "STATFLAG_NONAME", 1); 
  $.Constant({Static:true , Public:true }, "STATFLAG_NOOPEN", 2); 
  $.Constant({Static:true , Public:true }, "STGC_DEFAULT", 0); 
  $.Constant({Static:true , Public:true }, "STGC_OVERWRITE", 1); 
  $.Constant({Static:true , Public:true }, "STGC_ONLYIFCURRENT", 2); 
  $.Constant({Static:true , Public:true }, "STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE", 4); 
  $.Constant({Static:true , Public:true }, "STREAM_SEEK_SET", 0); 
  $.Constant({Static:true , Public:true }, "STREAM_SEEK_CUR", 1); 
  $.Constant({Static:true , Public:true }, "STREAM_SEEK_END", 2); 
});

JSIL.MakeInterface(
  "System.Drawing.SafeNativeMethods/IPicture", false, [], function ($) {
    $.Method({}, "GetHandle", $sig.make(0xB673, $asm06.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "GetHPal", $sig.make(0xB674, $asm06.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "GetPictureType", $sig.make(0xB675, $.Int16, [], []));
    $.Method({}, "GetWidth", $sig.make(0xB676, $.Int32, [], []));
    $.Method({}, "GetHeight", $sig.make(0xB677, $.Int32, [], []));
    $.Method({}, "Render", $sig.make(0xB678, null, [], []));
    $.Method({}, "SetHPal", $sig.make(0xB679, null, [$asm06.TypeRef("System.IntPtr")], []));
    $.Method({}, "GetCurDC", $sig.make(0xB67A, $asm06.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "SelectPicture", $sig.make(0xB67B, null, [
          $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ], []));
    $.Method({}, "GetKeepOriginalFormat", $sig.make(0xB67C, $.Boolean, [], []));
    $.Method({}, "SetKeepOriginalFormat", $sig.make(0xB67D, null, [$.Boolean], []));
    $.Method({}, "PictureChanged", $sig.make(0xB67E, null, [], []));
    $.Method({}, "SaveAsFile", $sig.make(0xB67F, $.Int32, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []));
    $.Method({}, "GetAttributes", $sig.make(0xB680, $.Int32, [], []));
    $.Method({}, "SetHdc", $sig.make(0xB681, null, [$asm06.TypeRef("System.IntPtr")], []));
  }, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SafeNativeMethods/OBJECTHEADER", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "signature", $.Int16); 
  $.Field({Static:false, Public:true }, "headersize", $.Int16); 
  $.Field({Static:false, Public:true }, "objectType", $.Int16); 
  $.Field({Static:false, Public:true }, "nameLen", $.Int16); 
  $.Field({Static:false, Public:true }, "classLen", $.Int16); 
  $.Field({Static:false, Public:true }, "nameOffset", $.Int16); 
  $.Field({Static:false, Public:true }, "classOffset", $.Int16); 
  $.Field({Static:false, Public:true }, "width", $.Int16); 
  $.Field({Static:false, Public:true }, "height", $.Int16); 
  $.Field({Static:false, Public:true }, "pInfo", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods/Win32SystemColors", false, {
    ScrollBar: 0, 
    Desktop: 1, 
    ActiveCaption: 2, 
    InactiveCaption: 3, 
    Menu: 4, 
    Window: 5, 
    WindowFrame: 6, 
    MenuText: 7, 
    WindowText: 8, 
    ActiveCaptionText: 9, 
    ActiveBorder: 10, 
    InactiveBorder: 11, 
    AppWorkspace: 12, 
    Highlight: 13, 
    HighlightText: 14, 
    Control: 15, 
    ButtonFace: 15, 
    ControlDark: 16, 
    ButtonShadow: 16, 
    GrayText: 17, 
    ControlText: 18, 
    InactiveCaptionText: 19, 
    ButtonHighlight: 20, 
    ControlLightLight: 20, 
    ControlDarkDark: 21, 
    ControlLight: 22, 
    InfoText: 23, 
    Info: 24, 
    HotTrack: 26, 
    GradientActiveCaption: 27, 
    GradientInactiveCaption: 28, 
    MenuHighlight: 29, 
    MenuBar: 30
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods/BackgroundMode", false, {
    TRANSPARENT: 1, 
    OPAQUE: 2
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Text.GenericFontFamilies", true, {
    Serif: 0, 
    SansSerif: 1, 
    Monospace: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.GPPOINT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14628, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1462A, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1462C, null, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToPoint", 
    $sig.make(0x1462E, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.Field({Static:false, Public:false}, "X", $.Int32); 
  $.Field({Static:false, Public:false}, "Y", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.GPPOINTF", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14687, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14688, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14689, null, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToPoint", 
    $sig.make(0x1468A, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.Field({Static:false, Public:false}, "X", $.Single); 
  $.Field({Static:false, Public:false}, "Y", $.Single); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Internal.GPRECT", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1469B, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1469C, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToRectangle", 
    $sig.make(0x1469D, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.Field({Static:false, Public:false}, "X", $.Int32); 
  $.Field({Static:false, Public:false}, "Y", $.Int32); 
  $.Field({Static:false, Public:false}, "Width", $.Int32); 
  $.Field({Static:false, Public:false}, "Height", $.Int32); 
});

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Internal.GPRECTF", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x95FF, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x9600, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_SizeF", 
    $sig.make(0x95FC, $asm0B.TypeRef("System.Drawing.SizeF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToRectangleF", 
    $sig.make(0x9602, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.Field({Static:false, Public:false}, "X", $.Single); 
  $.Field({Static:false, Public:false}, "Y", $.Single); 
  $.Field({Static:false, Public:false}, "Width", $.Single); 
  $.Field({Static:false, Public:false}, "Height", $.Single); 
  $.Property({Static:false, Public:false}, "SizeF", $asm0B.TypeRef("System.Drawing.SizeF"));

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.GPStream", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x146CC, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ActualizeVirtualPosition", 
    $sig.make(0x146CD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x146CE, $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Commit", 
    $sig.make(0x146CF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x146D0, $.Int64, [
        $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"), $.Int64, 
        $jsilcore.TypeRef("System.Array", [$.Int64])
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "EFail", 
    $sig.make(0x146D3, $asm06.TypeRef("System.Runtime.InteropServices.ExternalException"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetDataStream", 
    $sig.make(0x146D1, $asm06.TypeRef("System.IO.Stream"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "LockRegion", 
    $sig.make(0x146D2, null, [
        $.Int64, $.Int64, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
    $sig.make(0x146D4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x146D5, $.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Read", 
    $sig.make(0x146D6, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "Revert", 
    $sig.make(0x146D7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Seek", 
    $sig.make(0x146D8, $.Int64, [$.Int64, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSize", 
    $sig.make(0x146D9, null, [$.Int64], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Stat", 
    $sig.make(0x146DA, null, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "UnlockRegion", 
    $sig.make(0x146DB, null, [
        $.Int64, $.Int64, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x146DC, $.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Write", 
    $sig.make(0x146DD, $.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
  );

  $.Field({Static:false, Public:false}, "dataStream", $asm06.TypeRef("System.IO.Stream")); 
  $.Field({Static:false, Public:false}, "virtualPosition", $.Int64); 
  $.ImplementInterfaces($asm0B.TypeRef("System.Drawing.UnsafeNativeMethods/IStream"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.GPStream/STATSTG", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14BF2, null, [], [])
  );

  $.Field({Static:false, Public:true }, "pwcsName", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "type", $.Int32); 
  $.Field({Static:false, Public:true }, "cbSize", $.Int64); 
  $.Field({Static:false, Public:true }, "mtime", $.Int64); 
  $.Field({Static:false, Public:true }, "ctime", $.Int64); 
  $.Field({Static:false, Public:true }, "atime", $.Int64); 
  $.Field({Static:false, Public:true }, "grfMode", $.Int32); 
  $.Field({Static:false, Public:true }, "grfLocksSupported", $.Int32); 
  $.Field({Static:false, Public:true }, "clsid_data1", $.Int32); 
  $.Field({Static:false, Public:true }, "clsid_data2", $.Int16); 
  $.Field({Static:false, Public:true }, "clsid_data3", $.Int16); 
  $.Field({Static:false, Public:true }, "clsid_b0", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b1", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b2", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b3", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b4", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b5", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b6", $.Byte); 
  $.Field({Static:false, Public:true }, "clsid_b7", $.Byte); 
  $.Field({Static:false, Public:true }, "grfStateBits", $.Int32); 
  $.Field({Static:false, Public:true }, "reserved", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Drawing2D.GraphicsContainer", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x877A, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "nativeGraphicsContainer", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Drawing2D.GraphicsPath", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8652, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8654, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8656, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8657, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8658, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8659, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x865D, null, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetPathData", 
    $sig.make(0x8665, $asm0B.TypeRef("System.Drawing.Drawing2D.PathData"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddArc", 
    $sig.make(0x8686, null, [
        $asm0B.TypeRef("System.Drawing.RectangleF"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddArc", 
    $sig.make(0x8687, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddArc", 
    $sig.make(0x8688, null, [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddArc", 
    $sig.make(0x8689, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
    $sig.make(0x868A, null, [
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
    $sig.make(0x868B, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
    $sig.make(0x868D, null, [
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
    $sig.make(0x868E, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddBeziers", 
    $sig.make(0x868C, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddBeziers", 
    $sig.make(0x868F, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
    $sig.make(0x8696, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
    $sig.make(0x8697, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
    $sig.make(0x8698, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
    $sig.make(0x8699, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
    $sig.make(0x8690, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
    $sig.make(0x8691, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
    $sig.make(0x8692, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $.Int32, 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
    $sig.make(0x8693, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
    $sig.make(0x8694, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
    $sig.make(0x8695, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $.Int32, 
        $.Int32, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
    $sig.make(0x869E, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
    $sig.make(0x869F, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
    $sig.make(0x86A0, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
    $sig.make(0x86A1, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLine", 
    $sig.make(0x8680, null, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLine", 
    $sig.make(0x8681, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLine", 
    $sig.make(0x8683, null, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLine", 
    $sig.make(0x8684, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLines", 
    $sig.make(0x8682, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddLines", 
    $sig.make(0x8685, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPath", 
    $sig.make(0x86A7, null, [$.Type, $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPie", 
    $sig.make(0x86A2, null, [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPie", 
    $sig.make(0x86A3, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPie", 
    $sig.make(0x86A4, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPolygon", 
    $sig.make(0x86A5, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddPolygon", 
    $sig.make(0x86A6, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddRectangle", 
    $sig.make(0x869A, null, [$asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddRectangle", 
    $sig.make(0x869C, null, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddRectangles", 
    $sig.make(0x869B, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddRectangles", 
    $sig.make(0x869D, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddString", 
    $sig.make(0x86A8, null, [
        $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
        $.Int32, $.Single, 
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddString", 
    $sig.make(0x86A9, null, [
        $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
        $.Int32, $.Single, 
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddString", 
    $sig.make(0x86AA, null, [
        $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
        $.Int32, $.Single, 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddString", 
    $sig.make(0x86AB, null, [
        $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
        $.Int32, $.Single, 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.StringFormat")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearMarkers", 
    $sig.make(0x866D, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x865B, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloseAllFigures", 
    $sig.make(0x866A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CloseFigure", 
    $sig.make(0x8668, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x865F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x8660, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x8662, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flatten", 
    $sig.make(0x86B0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flatten", 
    $sig.make(0x86B1, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Flatten", 
    $sig.make(0x86B2, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FillMode", 
    $sig.make(0x864C, $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PathData", 
    $sig.make(0x864E, $asm0B.TypeRef("System.Drawing.Drawing2D.PathData"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PathPoints", 
    $sig.make(0x8651, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PathTypes", 
    $sig.make(0x8650, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PointCount", 
    $sig.make(0x864F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
    $sig.make(0x86AD, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
    $sig.make(0x86AE, $asm0B.TypeRef("System.Drawing.RectangleF"), [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
    $sig.make(0x86AF, $asm0B.TypeRef("System.Drawing.RectangleF"), [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Pen")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetLastPoint", 
    $sig.make(0x866F, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x8678, $.Boolean, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Pen")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x8679, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Pen")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x867A, $.Boolean, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x867B, $.Boolean, [
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Pen"), 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x867C, $.Boolean, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Pen")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x867D, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Pen")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x867E, $.Boolean, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
    $sig.make(0x867F, $.Boolean, [
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Pen"), 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8670, $.Boolean, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8671, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8672, $.Boolean, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8673, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8674, $.Boolean, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8675, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8676, $.Boolean, [
        $.Int32, $.Int32, 
        $asm0B.TypeRef("System.Drawing.Graphics")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
    $sig.make(0x8677, $.Boolean, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x8664, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reverse", 
    $sig.make(0x866E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FillMode", 
    $sig.make(0x864D, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetMarkers", 
    $sig.make(0x866C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "StartFigure", 
    $sig.make(0x8667, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Transform", 
    $sig.make(0x86AC, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Warp", 
    $sig.make(0x86B6, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Warp", 
    $sig.make(0x86B7, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Warp", 
    $sig.make(0x86B8, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.WarpMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Warp", 
    $sig.make(0x86B9, null, [
        $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.WarpMode"), 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Widen", 
    $sig.make(0x86B3, null, [$asm0B.TypeRef("System.Drawing.Pen")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Widen", 
    $sig.make(0x86B4, null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Widen", 
    $sig.make(0x86B5, null, [
        $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), 
        $.Single
      ], [])
  );

  $.Field({Static:false, Public:false}, "nativePath", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "FillMode", $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"));

  $.Property({Static:false, Public:true }, "PathData", $asm0B.TypeRef("System.Drawing.Drawing2D.PathData"));

  $.Property({Static:false, Public:true }, "PointCount", $.Int32);

  $.Property({Static:false, Public:true }, "PathTypes", $jsilcore.TypeRef("System.Array", [$.Byte]));

  $.Property({Static:false, Public:true }, "PathPoints", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]));

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Drawing2D.GraphicsPathIterator", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14745, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyData", 
    $sig.make(0x1476A, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x1474A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1474C, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Enumerate", 
    $sig.make(0x14769, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x14751, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x1473C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SubpathCount", 
    $sig.make(0x1473E, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "HasCurve", 
    $sig.make(0x1475F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextMarker", 
    $sig.make(0x1475B, $.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextMarker", 
    $sig.make(0x1475D, $.Int32, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextPathType", 
    $sig.make(0x14756, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextSubpath", 
    $sig.make(0x14753, $.Int32, [
        $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "NextSubpath", 
    $sig.make(0x14754, $.Int32, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Rewind", 
    $sig.make(0x14767, null, [], [])
  );

  $.Field({Static:false, Public:false}, "nativeIter", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true }, "SubpathCount", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Drawing2D.GraphicsState", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x842D, null, [$.Int32], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.Field({Static:false, Public:false}, "nativeState", $.Int32); 
});

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Brush"), "System.Drawing.Drawing2D.HatchBrush", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x147A4, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"), $asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x147A5, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x147A6, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x147A7, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BackgroundColor", 
    $sig.make(0x147A3, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ForegroundColor", 
    $sig.make(0x147A2, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HatchStyle", 
    $sig.make(0x147A1, $asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"), [], [])
  );

  $.Property({Static:false, Public:true }, "HatchStyle", $asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"));

  $.Property({Static:false, Public:true }, "ForegroundColor", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:false, Public:true }, "BackgroundColor", $asm0B.TypeRef("System.Drawing.Color"));

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.HatchStyle", true, {
    Horizontal: 0, 
    Min: 0, 
    Vertical: 1, 
    ForwardDiagonal: 2, 
    BackwardDiagonal: 3, 
    Max: 4, 
    Cross: 4, 
    LargeGrid: 4, 
    DiagonalCross: 5, 
    Percent05: 6, 
    Percent10: 7, 
    Percent20: 8, 
    Percent25: 9, 
    Percent30: 10, 
    Percent40: 11, 
    Percent50: 12, 
    Percent60: 13, 
    Percent70: 14, 
    Percent75: 15, 
    Percent80: 16, 
    Percent90: 17, 
    LightDownwardDiagonal: 18, 
    LightUpwardDiagonal: 19, 
    DarkDownwardDiagonal: 20, 
    DarkUpwardDiagonal: 21, 
    WideDownwardDiagonal: 22, 
    WideUpwardDiagonal: 23, 
    LightVertical: 24, 
    LightHorizontal: 25, 
    NarrowVertical: 26, 
    NarrowHorizontal: 27, 
    DarkVertical: 28, 
    DarkHorizontal: 29, 
    DashedDownwardDiagonal: 30, 
    DashedUpwardDiagonal: 31, 
    DashedHorizontal: 32, 
    DashedVertical: 33, 
    SmallConfetti: 34, 
    LargeConfetti: 35, 
    ZigZag: 36, 
    Wave: 37, 
    DiagonalBrick: 38, 
    HorizontalBrick: 39, 
    Weave: 40, 
    Plaid: 41, 
    Divot: 42, 
    DottedGrid: 43, 
    DottedDiamond: 44, 
    Shingle: 45, 
    Trellis: 46, 
    Sphere: 47, 
    SmallGrid: 48, 
    SmallCheckerBoard: 49, 
    LargeCheckerBoard: 50, 
    OutlinedDiamond: 51, 
    SolidDiamond: 52
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Text.HotkeyPrefix", true, {
    None: 0, 
    Show: 1, 
    Hide: 2
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ImageAttributes", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x87CE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x87D0, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearBrushRemapTable", 
    $sig.make(0x87FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearColorKey", 
    $sig.make(0x87EE, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearColorKey", 
    $sig.make(0x87EF, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearColorMatrix", 
    $sig.make(0x87DB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearColorMatrix", 
    $sig.make(0x87DC, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearGamma", 
    $sig.make(0x87E6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearGamma", 
    $sig.make(0x87E7, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearNoOp", 
    $sig.make(0x87EA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearNoOp", 
    $sig.make(0x87EB, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannel", 
    $sig.make(0x87F2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannel", 
    $sig.make(0x87F3, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannelColorProfile", 
    $sig.make(0x87F6, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannelColorProfile", 
    $sig.make(0x87F7, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearRemapTable", 
    $sig.make(0x87FA, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearRemapTable", 
    $sig.make(0x87FB, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearThreshold", 
    $sig.make(0x87E2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ClearThreshold", 
    $sig.make(0x87E3, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x87D7, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x87D2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x87D4, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x87D5, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetAdjustedPalette", 
    $sig.make(0x8801, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetBrushRemapTable", 
    $sig.make(0x87FC, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.ColorMap")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorKey", 
    $sig.make(0x87EC, null, [$asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorKey", 
    $sig.make(0x87ED, null, [
        $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorMatrices", 
    $sig.make(0x87DD, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorMatrices", 
    $sig.make(0x87DE, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorMatrices", 
    $sig.make(0x87DF, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorMatrix", 
    $sig.make(0x87D8, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorMatrix", 
    $sig.make(0x87D9, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetColorMatrix", 
    $sig.make(0x87DA, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetGamma", 
    $sig.make(0x87E4, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetGamma", 
    $sig.make(0x87E5, null, [$.Single, $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeImageAttributes", 
    $sig.make(0x87CC, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetNoOp", 
    $sig.make(0x87E8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetNoOp", 
    $sig.make(0x87E9, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetOutputChannel", 
    $sig.make(0x87F0, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorChannelFlag")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetOutputChannel", 
    $sig.make(0x87F1, null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorChannelFlag"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetOutputChannelColorProfile", 
    $sig.make(0x87F4, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetOutputChannelColorProfile", 
    $sig.make(0x87F5, null, [$.String, $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetRemapTable", 
    $sig.make(0x87F8, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.ColorMap")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetRemapTable", 
    $sig.make(0x87F9, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.ColorMap")]), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetThreshold", 
    $sig.make(0x87E0, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetThreshold", 
    $sig.make(0x87E1, null, [$.Single, $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetWrapMode", 
    $sig.make(0x87FE, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetWrapMode", 
    $sig.make(0x87FF, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), $asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetWrapMode", 
    $sig.make(0x8800, null, [
        $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), $asm0B.TypeRef("System.Drawing.Color"), 
        $.Boolean
      ], [])
  );

  $.Field({Static:false, Public:false}, "nativeImageAttributes", $asm06.TypeRef("System.IntPtr")); 
  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.Imaging.ImageCodecFlags", true, {
    Encoder: 1, 
    Decoder: 2, 
    SupportBitmap: 4, 
    SupportVector: 8, 
    SeekableEncode: 16, 
    BlockingDecode: 32, 
    Builtin: 65536, 
    System: 131072, 
    User: 262144
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ImageCodecInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8B0D, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ConvertFromMemory", 
    $sig.make(0x8B13, $jsilcore.TypeRef("System.Array", [$.Type]), [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Clsid", 
    $sig.make(0x8AF0, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CodecName", 
    $sig.make(0x8AF7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DllName", 
    $sig.make(0x8AF9, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FilenameExtension", 
    $sig.make(0x8AFD, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
    $sig.make(0x8B01, $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FormatDescription", 
    $sig.make(0x8AFB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FormatID", 
    $sig.make(0x8AF4, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MimeType", 
    $sig.make(0x8AFF, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SignatureMasks", 
    $sig.make(0x8B09, $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SignaturePatterns", 
    $sig.make(0x8B07, $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x8B05, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetImageDecoders", 
    $sig.make(0x8B0F, $jsilcore.TypeRef("System.Array", [$.Type]), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetImageEncoders", 
    $sig.make(0x8B11, $jsilcore.TypeRef("System.Array", [$.Type]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Clsid", 
    $sig.make(0x8AF2, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CodecName", 
    $sig.make(0x8AF8, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DllName", 
    $sig.make(0x8AFA, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FilenameExtension", 
    $sig.make(0x8AFE, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Flags", 
    $sig.make(0x8B03, null, [$asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FormatDescription", 
    $sig.make(0x8AFC, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FormatID", 
    $sig.make(0x8AF6, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MimeType", 
    $sig.make(0x8B00, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SignatureMasks", 
    $sig.make(0x8B0B, null, [$jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SignaturePatterns", 
    $sig.make(0x8B08, null, [$jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Version", 
    $sig.make(0x8B06, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "clsid", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "formatID", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:false}, "codecName", $.String); 
  $.Field({Static:false, Public:false}, "dllName", $.String); 
  $.Field({Static:false, Public:false}, "formatDescription", $.String); 
  $.Field({Static:false, Public:false}, "filenameExtension", $.String); 
  $.Field({Static:false, Public:false}, "mimeType", $.String); 
  $.Field({Static:false, Public:false}, "flags", $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags")); 
  $.Field({Static:false, Public:false}, "version", $.Int32); 
  $.Field({Static:false, Public:false}, "signaturePatterns", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
  $.Field({Static:false, Public:false}, "signatureMasks", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
  $.Property({Static:false, Public:true }, "Clsid", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true }, "FormatID", $asm06.TypeRef("System.Guid"));

  $.Property({Static:false, Public:true }, "CodecName", $.String);

  $.Property({Static:false, Public:true }, "DllName", $.String);

  $.Property({Static:false, Public:true }, "FormatDescription", $.String);

  $.Property({Static:false, Public:true }, "FilenameExtension", $.String);

  $.Property({Static:false, Public:true }, "MimeType", $.String);

  $.Property({Static:false, Public:true }, "Flags", $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags"));

  $.Property({Static:false, Public:true }, "Version", $.Int32);

  $.Property({Static:false, Public:true }, "SignaturePatterns", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "SignatureMasks", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ImageCodecInfoPrivate", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14073, null, [], [])
  );

  $.Field({Static:false, Public:true }, "Clsid", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:true }, "FormatID", $asm06.TypeRef("System.Guid")); 
  $.Field({Static:false, Public:true }, "CodecName", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "DllName", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "FormatDescription", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "FilenameExtension", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "MimeType", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "Flags", $.Int32); 
  $.Field({Static:false, Public:true }, "Version", $.Int32); 
  $.Field({Static:false, Public:true }, "SigCount", $.Int32); 
  $.Field({Static:false, Public:true }, "SigSize", $.Int32); 
  $.Field({Static:false, Public:true }, "SigPattern", $asm06.TypeRef("System.IntPtr")); 
  $.Field({Static:false, Public:true }, "SigMask", $asm06.TypeRef("System.IntPtr")); 
});

JSIL.MakeEnum(
  "System.Drawing.Imaging.ImageFlags", true, {
    None: 0, 
    Scalable: 1, 
    HasAlpha: 2, 
    HasTranslucent: 4, 
    PartiallyScalable: 8, 
    ColorSpaceRgb: 16, 
    ColorSpaceCmyk: 32, 
    ColorSpaceGray: 64, 
    ColorSpaceYcbcr: 128, 
    ColorSpaceYcck: 256, 
    HasRealDpi: 4096, 
    HasRealPixelSize: 8192, 
    ReadOnly: 65536, 
    Caching: 131072
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.ImageFormat", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8AC4, null, [$asm06.TypeRef("System.Guid")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x8AC5, $.Boolean, [$.Object], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:false}, "FindEncoder", 
    $sig.make(0x8AC7, $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Bmp", 
    $sig.make(0x8AB5, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Emf", 
    $sig.make(0x8AB6, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Exif", 
    $sig.make(0x8AC2, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Gif", 
    $sig.make(0x8ABE, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
    $sig.make(0x8AB3, $asm06.TypeRef("System.Guid"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Icon", 
    $sig.make(0x8AC3, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Jpeg", 
    $sig.make(0x8ABF, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_MemoryBmp", 
    $sig.make(0x8AB4, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Png", 
    $sig.make(0x8AC0, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Tiff", 
    $sig.make(0x8AC1, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Wmf", 
    $sig.make(0x8AB8, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x8AC6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x8AC8, $.String, [], [])
  );

  $.Field({Static:true , Public:false}, "memoryBMP", $.Type); 
  $.Field({Static:true , Public:false}, "bmp", $.Type); 
  $.Field({Static:true , Public:false}, "emf", $.Type); 
  $.Field({Static:true , Public:false}, "wmf", $.Type); 
  $.Field({Static:true , Public:false}, "jpeg", $.Type); 
  $.Field({Static:true , Public:false}, "png", $.Type); 
  $.Field({Static:true , Public:false}, "gif", $.Type); 
  $.Field({Static:true , Public:false}, "tiff", $.Type); 
  $.Field({Static:true , Public:false}, "exif", $.Type); 
  $.Field({Static:true , Public:false}, "photoCD", $.Type); 
  $.Field({Static:true , Public:false}, "flashPIX", $.Type); 
  $.Field({Static:true , Public:false}, "icon", $.Type); 
  $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
  $.Property({Static:false, Public:true }, "Guid", $asm06.TypeRef("System.Guid"));

  $.Property({Static:true , Public:true }, "MemoryBmp", $.Type);

  $.Property({Static:true , Public:true }, "Bmp", $.Type);

  $.Property({Static:true , Public:true }, "Emf", $.Type);

  $.Property({Static:true , Public:true }, "Wmf", $.Type);

  $.Property({Static:true , Public:true }, "Gif", $.Type);

  $.Property({Static:true , Public:true }, "Jpeg", $.Type);

  $.Property({Static:true , Public:true }, "Png", $.Type);

  $.Property({Static:true , Public:true }, "Tiff", $.Type);

  $.Property({Static:true , Public:true }, "Exif", $.Type);

  $.Property({Static:true , Public:true }, "Icon", $.Type);

})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.ImageFormatConverter")]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.ImageFormatConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1409B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x1409C, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x1409D, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x1409E, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x1409F, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetProperties", 
    $sig.make(0x140A0, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.PropertyInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValues", 
    $sig.make(0x140A1, $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetStandardValuesSupported", 
    $sig.make(0x140A2, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.ComponentModel.TypeConverter/StandardValuesCollection")); 
});

JSIL.MakeEnum(
  "System.Drawing.Imaging.ImageLockMode", true, {
    ReadOnly: 1, 
    WriteOnly: 2, 
    ReadWrite: 3, 
    UserInputBuffer: 4
  }, false
);

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Text.FontCollection"), "System.Drawing.Text.InstalledFontCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140B1, null, [], [])
  );

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.InterpolationMode", true, {
    Invalid: -1, 
    Default: 0, 
    Low: 1, 
    High: 2, 
    Bilinear: 3, 
    Bicubic: 4, 
    NearestNeighbor: 5, 
    HighQualityBilinear: 6, 
    HighQualityBicubic: 7
  }, false
);

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Brush"), "System.Drawing.Drawing2D.LinearGradientBrush", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140CC, null, [
        $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140CE, null, [
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
        $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140D0, null, [
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Drawing2D.LinearGradientMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140D3, null, [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Drawing2D.LinearGradientMode")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140D5, null, [
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140D7, null, [
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color"), $.Single, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140D8, null, [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color"), $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x140D9, null, [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Color"), 
        $asm0B.TypeRef("System.Drawing.Color"), $.Single, 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x140DA, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetBlend", 
    $sig.make(0x140DF, $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetInterpolationColors", 
    $sig.make(0x140E5, $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetLinearColors", 
    $sig.make(0x140DD, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetRectangle", 
    $sig.make(0x140DE, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetTransform", 
    $sig.make(0x140EA, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetWrapMode", 
    $sig.make(0x140E8, $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetBlend", 
    $sig.make(0x140E0, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Blend")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetInterpolationColors", 
    $sig.make(0x140E6, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetLinearColors", 
    $sig.make(0x140DC, null, [$asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetTransform", 
    $sig.make(0x140E9, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetWrapMode", 
    $sig.make(0x140E7, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x140DB, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Blend", 
    $sig.make(0x140C3, $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_GammaCorrection", 
    $sig.make(0x140C1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InterpolationColors", 
    $sig.make(0x140C5, $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LinearColors", 
    $sig.make(0x140BE, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Rectangle", 
    $sig.make(0x140C0, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
    $sig.make(0x140C9, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WrapMode", 
    $sig.make(0x140C7, $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x140EC, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x140ED, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
    $sig.make(0x140EB, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x140F3, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x140F4, null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x140F0, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x140F1, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Blend", 
    $sig.make(0x140C4, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Blend")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_GammaCorrection", 
    $sig.make(0x140C2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InterpolationColors", 
    $sig.make(0x140C6, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LinearColors", 
    $sig.make(0x140BF, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
    $sig.make(0x140CA, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_WrapMode", 
    $sig.make(0x140C8, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
    $sig.make(0x140E3, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
    $sig.make(0x140E4, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
    $sig.make(0x140E1, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
    $sig.make(0x140E2, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x140EE, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x140EF, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.Field({Static:false, Public:false}, "interpolationColorsWasSet", $.Boolean); 
  $.Property({Static:false, Public:true }, "LinearColors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

  $.Property({Static:false, Public:true }, "Rectangle", $asm0B.TypeRef("System.Drawing.RectangleF"));

  $.Property({Static:false, Public:true }, "GammaCorrection", $.Boolean);

  $.Property({Static:false, Public:true }, "Blend", $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"));

  $.Property({Static:false, Public:true }, "InterpolationColors", $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"));

  $.Property({Static:false, Public:true }, "WrapMode", $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"));

  $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.LinearGradientMode", true, {
    Horizontal: 0, 
    Vertical: 1, 
    ForwardDiagonal: 2, 
    BackwardDiagonal: 3
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.LineCap", true, {
    Flat: 0, 
    Square: 1, 
    Round: 2, 
    Triangle: 3, 
    NoAnchor: 16, 
    SquareAnchor: 17, 
    RoundAnchor: 18, 
    DiamondAnchor: 19, 
    ArrowAnchor: 20, 
    AnchorMask: 240, 
    Custom: 255
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.LineJoin", true, {
    Miter: 0, 
    Bevel: 1, 
    Round: 2, 
    MiterClipped: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.Drawing2D.Matrix", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x86E8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x86EA, null, [
        $.Single, $.Single, 
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x86EC, null, [$asm0B.TypeRef("System.Drawing.RectangleF"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x86EE, null, [$asm0B.TypeRef("System.Drawing.Rectangle"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x870C, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x86F3, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x86F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x86F1, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x8708, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x86F2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Elements", 
    $sig.make(0x86DF, $jsilcore.TypeRef("System.Array", [$.Single]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsIdentity", 
    $sig.make(0x86E6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInvertible", 
    $sig.make(0x86E4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OffsetX", 
    $sig.make(0x86E1, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OffsetY", 
    $sig.make(0x86E2, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x870A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Invert", 
    $sig.make(0x8701, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Multiply", 
    $sig.make(0x86F5, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Multiply", 
    $sig.make(0x86F6, null, [$.Type, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x86F4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Rotate", 
    $sig.make(0x86FB, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Rotate", 
    $sig.make(0x86FC, null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateAt", 
    $sig.make(0x86FD, null, [$.Single, $asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateAt", 
    $sig.make(0x86FE, null, [
        $.Single, $asm0B.TypeRef("System.Drawing.PointF"), 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Scale", 
    $sig.make(0x86F9, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Scale", 
    $sig.make(0x86FA, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetNativeMatrix", 
    $sig.make(0x870D, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Shear", 
    $sig.make(0x86FF, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Shear", 
    $sig.make(0x8700, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
    $sig.make(0x8702, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
    $sig.make(0x8703, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TransformVectors", 
    $sig.make(0x8704, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TransformVectors", 
    $sig.make(0x8706, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Translate", 
    $sig.make(0x86F7, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Translate", 
    $sig.make(0x86F8, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "VectorTransformPoints", 
    $sig.make(0x8705, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.Field({Static:false, Public:false}, "nativeMatrix", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "Elements", $jsilcore.TypeRef("System.Array", [$.Single]));

  $.Property({Static:false, Public:true }, "OffsetX", $.Single);

  $.Property({Static:false, Public:true }, "OffsetY", $.Single);

  $.Property({Static:false, Public:true }, "IsInvertible", $.Boolean);

  $.Property({Static:false, Public:true }, "IsIdentity", $.Boolean);

  $.ImplementInterfaces($asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.MatrixOrder", true, {
    Prepend: 0, 
    Append: 1
  }, false
);

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Image"), "System.Drawing.Imaging.Metafile", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8876, null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8877, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader"), 
        $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8878, null, [$asm06.TypeRef("System.IntPtr"), $.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8879, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x887A, null, [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x887B, null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x887C, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x887D, null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x887E, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x887F, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8880, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8881, null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8882, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8883, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8884, null, [
        $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8885, null, [$.String, $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8886, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8887, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8888, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8889, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x888A, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x888B, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x888C, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x888D, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x888E, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x888F, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8890, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8891, null, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8892, null, [$asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8893, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8894, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8895, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8896, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8897, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8898, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8899, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x889A, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x889B, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x889C, null, [
        $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
        $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x889D, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x88A6, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FromGDIplus", 
    $sig.make(0x88A5, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHenhmetafile", 
    $sig.make(0x88A3, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
    $sig.make(0x889E, $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
    $sig.make(0x889F, $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
    $sig.make(0x88A0, $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
    $sig.make(0x88A1, $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$asm06.TypeRef("System.IO.Stream")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetMetafileHeader", 
    $sig.make(0x88A2, $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PlayRecord", 
    $sig.make(0x88A4, null, [
        $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusRecordType"), $.Int32, 
        $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
      ], [])
  );

})
  .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.MetafileEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.TypeRef("System.Drawing.Design.UITypeEditor")]; });

JSIL.MakeEnum(
  "System.Drawing.Imaging.MetafileFrameUnit", true, {
    Pixel: 2, 
    Point: 3, 
    Inch: 4, 
    Document: 5, 
    Millimeter: 6, 
    GdiCompatible: 7
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.MetafileHeader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x97F1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
    $sig.make(0x97EB, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DpiX", 
    $sig.make(0x97E8, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DpiY", 
    $sig.make(0x97E9, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_EmfPlusHeaderSize", 
    $sig.make(0x97EE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogicalDpiX", 
    $sig.make(0x97EF, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LogicalDpiY", 
    $sig.make(0x97F0, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MetafileSize", 
    $sig.make(0x97E4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x97E2, $asm0B.TypeRef("System.Drawing.Imaging.MetafileType"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x97E6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WmfHeader", 
    $sig.make(0x97ED, $asm0B.TypeRef("System.Drawing.Imaging.MetaHeader"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDisplay", 
    $sig.make(0x97F9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmf", 
    $sig.make(0x97F4, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmfOrEmfPlus", 
    $sig.make(0x97F5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmfPlus", 
    $sig.make(0x97F6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmfPlusDual", 
    $sig.make(0x97F7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsEmfPlusOnly", 
    $sig.make(0x97F8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsWmf", 
    $sig.make(0x97F2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsWmfPlaceable", 
    $sig.make(0x97F3, $.Boolean, [], [])
  );

  $.Field({Static:false, Public:false}, "wmf", $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderWmf")); 
  $.Field({Static:false, Public:false}, "emf", $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderEmf")); 
  $.Property({Static:false, Public:true }, "Type", $asm0B.TypeRef("System.Drawing.Imaging.MetafileType"));

  $.Property({Static:false, Public:true }, "MetafileSize", $.Int32);

  $.Property({Static:false, Public:true }, "Version", $.Int32);

  $.Property({Static:false, Public:true }, "DpiX", $.Single);

  $.Property({Static:false, Public:true }, "DpiY", $.Single);

  $.Property({Static:false, Public:true }, "Bounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

  $.Property({Static:false, Public:true }, "WmfHeader", $asm0B.TypeRef("System.Drawing.Imaging.MetaHeader"));

  $.Property({Static:false, Public:true }, "EmfPlusHeaderSize", $.Int32);

  $.Property({Static:false, Public:true }, "LogicalDpiX", $.Int32);

  $.Property({Static:false, Public:true }, "LogicalDpiY", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.MetafileHeaderEmf", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA375, null, [], [])
  );

  $.Field({Static:false, Public:true }, "type", $asm0B.TypeRef("System.Drawing.Imaging.MetafileType")); 
  $.Field({Static:false, Public:true }, "size", $.Int32); 
  $.Field({Static:false, Public:true }, "version", $.Int32); 
  $.Field({Static:false, Public:true }, "emfPlusFlags", $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusFlags")); 
  $.Field({Static:false, Public:true }, "dpiX", $.Single); 
  $.Field({Static:false, Public:true }, "dpiY", $.Single); 
  $.Field({Static:false, Public:true }, "X", $.Int32); 
  $.Field({Static:false, Public:true }, "Y", $.Int32); 
  $.Field({Static:false, Public:true }, "Width", $.Int32); 
  $.Field({Static:false, Public:true }, "Height", $.Int32); 
  $.Field({Static:false, Public:true }, "EmfHeader", $asm0B.TypeRef("System.Drawing.SafeNativeMethods/ENHMETAHEADER")); 
  $.Field({Static:false, Public:true }, "EmfPlusHeaderSize", $.Int32); 
  $.Field({Static:false, Public:true }, "LogicalDpiX", $.Int32); 
  $.Field({Static:false, Public:true }, "LogicalDpiY", $.Int32); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.MetafileHeaderWmf", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA3AF, null, [], [])
  );

  $.Field({Static:false, Public:true }, "type", $asm0B.TypeRef("System.Drawing.Imaging.MetafileType")); 
  $.Field({Static:false, Public:true }, "size", $.Int32); 
  $.Field({Static:false, Public:true }, "version", $.Int32); 
  $.Field({Static:false, Public:true }, "emfPlusFlags", $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusFlags")); 
  $.Field({Static:false, Public:true }, "dpiX", $.Single); 
  $.Field({Static:false, Public:true }, "dpiY", $.Single); 
  $.Field({Static:false, Public:true }, "X", $.Int32); 
  $.Field({Static:false, Public:true }, "Y", $.Int32); 
  $.Field({Static:false, Public:true }, "Width", $.Int32); 
  $.Field({Static:false, Public:true }, "Height", $.Int32); 
  $.Field({Static:false, Public:true }, "WmfHeader", $asm0B.TypeRef("System.Drawing.Imaging.MetaHeader")); 
  $.Field({Static:false, Public:true }, "dummy1", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy2", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy3", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy4", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy5", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy6", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy7", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy8", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy9", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy10", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy11", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy12", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy13", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy14", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy15", $.Int32); 
  $.Field({Static:false, Public:true }, "dummy16", $.Int32); 
  $.Field({Static:false, Public:true }, "EmfPlusHeaderSize", $.Int32); 
  $.Field({Static:false, Public:true }, "LogicalDpiX", $.Int32); 
  $.Field({Static:false, Public:true }, "LogicalDpiY", $.Int32); 
});

JSIL.MakeEnum(
  "System.Drawing.Imaging.MetafileType", true, {
    Invalid: 0, 
    Wmf: 1, 
    WmfPlaceable: 2, 
    Emf: 3, 
    EmfPlusOnly: 4, 
    EmfPlusDual: 5
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.MetaHeader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA395, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HeaderSize", 
    $sig.make(0xA381, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaxRecord", 
    $sig.make(0xA390, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NoObjects", 
    $sig.make(0xA38C, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_NoParameters", 
    $sig.make(0xA393, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0xA388, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0xA37D, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0xA385, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HeaderSize", 
    $sig.make(0xA383, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaxRecord", 
    $sig.make(0xA392, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NoObjects", 
    $sig.make(0xA38E, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_NoParameters", 
    $sig.make(0xA394, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Size", 
    $sig.make(0xA38A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0xA37F, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Version", 
    $sig.make(0xA386, null, [$.Int16], [])
  );

  $.Field({Static:false, Public:false}, "type", $.Int16); 
  $.Field({Static:false, Public:false}, "headerSize", $.Int16); 
  $.Field({Static:false, Public:false}, "version", $.Int16); 
  $.Field({Static:false, Public:false}, "size", $.Int32); 
  $.Field({Static:false, Public:false}, "noObjects", $.Int16); 
  $.Field({Static:false, Public:false}, "maxRecord", $.Int32); 
  $.Field({Static:false, Public:false}, "noParameters", $.Int16); 
  $.Property({Static:false, Public:true }, "Type", $.Int16);

  $.Property({Static:false, Public:true }, "HeaderSize", $.Int16);

  $.Property({Static:false, Public:true }, "Version", $.Int16);

  $.Property({Static:false, Public:true }, "Size", $.Int32);

  $.Property({Static:false, Public:true }, "NoObjects", $.Int16);

  $.Property({Static:false, Public:true }, "MaxRecord", $.Int32);

  $.Property({Static:false, Public:true }, "NoParameters", $.Int16);

});

JSIL.MakeEnum(
  "System.Drawing.Imaging.PaletteFlags", true, {
    HasAlpha: 1, 
    GrayScale: 2, 
    Halftone: 4
  }, true
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Drawing2D.PathData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x96FD, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Points", 
    $sig.make(0x96F8, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Types", 
    $sig.make(0x96FB, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Points", 
    $sig.make(0x96FA, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Types", 
    $sig.make(0x96FC, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.Field({Static:false, Public:false}, "points", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])); 
  $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "Points", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]));

  $.Property({Static:false, Public:true }, "Types", $jsilcore.TypeRef("System.Array", [$.Byte]));

});

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Brush"), "System.Drawing.Drawing2D.PathGradientBrush", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142AD, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142AE, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142AF, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142B0, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x142B1, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x142B2, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetBlend", 
    $sig.make(0x142B7, $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetInterpolationColors", 
    $sig.make(0x142BD, $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetRectangle", 
    $sig.make(0x142B6, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetSurroundColors", 
    $sig.make(0x142B5, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetTransform", 
    $sig.make(0x142C0, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetWrapMode", 
    $sig.make(0x142CB, $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetBlend", 
    $sig.make(0x142B8, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Blend")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetInterpolationColors", 
    $sig.make(0x142BE, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetSurroundColors", 
    $sig.make(0x142B4, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetTransform", 
    $sig.make(0x142BF, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetWrapMode", 
    $sig.make(0x142CA, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x142B3, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Blend", 
    $sig.make(0x142A3, $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CenterColor", 
    $sig.make(0x1429C, $asm0B.TypeRef("System.Drawing.Color"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CenterPoint", 
    $sig.make(0x142A0, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FocusScales", 
    $sig.make(0x142A9, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InterpolationColors", 
    $sig.make(0x142A5, $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Rectangle", 
    $sig.make(0x142A2, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SurroundColors", 
    $sig.make(0x1429E, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
    $sig.make(0x142A7, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WrapMode", 
    $sig.make(0x142AB, $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x142C2, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x142C3, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
    $sig.make(0x142C1, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x142C8, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x142C9, null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x142C6, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x142C7, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Blend", 
    $sig.make(0x142A4, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Blend")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CenterColor", 
    $sig.make(0x1429D, null, [$asm0B.TypeRef("System.Drawing.Color")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_CenterPoint", 
    $sig.make(0x142A1, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FocusScales", 
    $sig.make(0x142AA, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_InterpolationColors", 
    $sig.make(0x142A6, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SurroundColors", 
    $sig.make(0x1429F, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
    $sig.make(0x142A8, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_WrapMode", 
    $sig.make(0x142AC, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
    $sig.make(0x142BB, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
    $sig.make(0x142BC, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
    $sig.make(0x142B9, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
    $sig.make(0x142BA, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x142C4, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x142C5, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.Property({Static:false, Public:true }, "CenterColor", $asm0B.TypeRef("System.Drawing.Color"));

  $.Property({Static:false, Public:true }, "SurroundColors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

  $.Property({Static:false, Public:true }, "CenterPoint", $asm0B.TypeRef("System.Drawing.PointF"));

  $.Property({Static:false, Public:true }, "Rectangle", $asm0B.TypeRef("System.Drawing.RectangleF"));

  $.Property({Static:false, Public:true }, "Blend", $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"));

  $.Property({Static:false, Public:true }, "InterpolationColors", $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"));

  $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

  $.Property({Static:false, Public:true }, "FocusScales", $asm0B.TypeRef("System.Drawing.PointF"));

  $.Property({Static:false, Public:true }, "WrapMode", $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"));

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PathPointType", true, {
    Start: 0, 
    Line: 1, 
    Bezier: 3, 
    Bezier3: 3, 
    PathTypeMask: 7, 
    DashMode: 16, 
    PathMarker: 32, 
    CloseSubpath: 128
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PenAlignment", true, {
    Center: 0, 
    Inset: 1, 
    Outset: 2, 
    Left: 3, 
    Right: 4
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PenType", true, {
    SolidColor: 0, 
    HatchFill: 1, 
    TextureFill: 2, 
    PathGradient: 3, 
    LinearGradient: 4
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Imaging.PixelFormat", true, {
    DontCare: 0, 
    Undefined: 0, 
    Max: 15, 
    Indexed: 65536, 
    Gdi: 131072, 
    Format16bppRgb555: 135173, 
    Format16bppRgb565: 135174, 
    Format24bppRgb: 137224, 
    Format32bppRgb: 139273, 
    Format1bppIndexed: 196865, 
    Format4bppIndexed: 197634, 
    Format8bppIndexed: 198659, 
    Alpha: 262144, 
    Format16bppArgb1555: 397319, 
    PAlpha: 524288, 
    Format32bppPArgb: 925707, 
    Extended: 1048576, 
    Format16bppGrayScale: 1052676, 
    Format48bppRgb: 1060876, 
    Format64bppPArgb: 1851406, 
    Canonical: 2097152, 
    Format32bppArgb: 2498570, 
    Format64bppArgb: 3424269
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PixelOffsetMode", true, {
    Invalid: -1, 
    Default: 0, 
    HighSpeed: 1, 
    HighQuality: 2, 
    None: 3, 
    Half: 4
  }, false
);

JSIL.MakeDelegate("System.Drawing.Imaging.PlayRecordCallback", true, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.PointF", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6EB8, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x6EC3, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x6EC5, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x6EC8, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x6EB0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0x6EB2, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0x6EB5, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x6ECA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x6EBA, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x6EBD, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x6EC1, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x6EC2, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6EBC, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6EBF, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_X", 
    $sig.make(0x6EB3, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Y", 
    $sig.make(0x6EB7, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x6EC4, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x6EC6, $.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x6ECC, $.String, [], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "x", $.Single); 
  $.Field({Static:false, Public:false}, "y", $.Single); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA66, null, [], []), 
    function PointF__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "X", $.Single);

  $.Property({Static:false, Public:true }, "Y", $.Single);

})
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Text.FontCollection"), "System.Drawing.Text.PrivateFontCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1431E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddFontFile", 
    $sig.make(0x14320, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "AddMemoryFont", 
    $sig.make(0x14321, null, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x1431F, null, [$.Boolean], [])
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.PropertyItem", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8A5F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Id", 
    $sig.make(0x8A57, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Len", 
    $sig.make(0x8A59, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Type", 
    $sig.make(0x8A5B, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0x8A5D, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Id", 
    $sig.make(0x8A58, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Len", 
    $sig.make(0x8A5A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Type", 
    $sig.make(0x8A5C, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Value", 
    $sig.make(0x8A5E, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.Field({Static:false, Public:false}, "id", $.Int32); 
  $.Field({Static:false, Public:false}, "len", $.Int32); 
  $.Field({Static:false, Public:false}, "type", $.Int16); 
  $.Field({Static:false, Public:false}, "value", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "Id", $.Int32);

  $.Property({Static:false, Public:true }, "Len", $.Int32);

  $.Property({Static:false, Public:true }, "Type", $.Int16);

  $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.QualityMode", true, {
    Invalid: -1, 
    Default: 0, 
    Low: 1, 
    High: 2
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.RectangleF", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8459, null, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x845A, null, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x845F, $.Boolean, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x8460, $.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x8461, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x845C, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "FromLTRB", 
    $sig.make(0x845B, $.Type, [
        $.Single, $.Single, 
        $.Single, $.Single
      ], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
    $sig.make(0x8457, $.Single, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x8452, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x8458, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x8454, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Location", 
    $sig.make(0x843F, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x8456, $.Single, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Size", 
    $sig.make(0x8443, $asm0B.TypeRef("System.Drawing.SizeF"), [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Top", 
    $sig.make(0x8455, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x844F, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0x8445, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0x8447, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x8462, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Inflate", 
    $sig.make(0x8463, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Inflate", 
    $sig.make(0x8464, null, [$asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Inflate", 
    $sig.make(0x8465, $.Type, [
        $.Type, $.Single, 
        $.Single
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x8466, null, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Intersect", 
    $sig.make(0x8467, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IntersectsWith", 
    $sig.make(0x8468, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x846A, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Offset", 
    $sig.make(0x846B, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x845D, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x846D, $.Type, [$asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x845E, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x8453, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Location", 
    $sig.make(0x8441, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Size", 
    $sig.make(0x8444, null, [$asm0B.TypeRef("System.Drawing.SizeF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x8451, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_X", 
    $sig.make(0x8446, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Y", 
    $sig.make(0x8449, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ToGPRECTF", 
    $sig.make(0x846C, $asm0B.TypeRef("System.Drawing.Internal.GPRECTF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x846E, $.String, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Union", 
    $sig.make(0x8469, $.Type, [$.Type, $.Type], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "x", $.Single); 
  $.Field({Static:false, Public:false}, "y", $.Single); 
  $.Field({Static:false, Public:false}, "width", $.Single); 
  $.Field({Static:false, Public:false}, "height", $.Single); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA67, null, [], []), 
    function RectangleF__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "Location", $asm0B.TypeRef("System.Drawing.PointF"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.SizeF"))
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "X", $.Single);

  $.Property({Static:false, Public:true }, "Y", $.Single);

  $.Property({Static:false, Public:true }, "Width", $.Single);

  $.Property({Static:false, Public:true }, "Height", $.Single);

  $.Property({Static:false, Public:true }, "Left", $.Single)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Top", $.Single)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Right", $.Single)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Bottom", $.Single)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Drawing2D.RegionData", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x9628, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Data", 
    $sig.make(0x9626, $jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Data", 
    $sig.make(0x9627, null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
  );

  $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Byte]));

});

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Drawing.Drawing2D.SafeCustomLineCapHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0xA332, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInvalid", 
    $sig.make(0xA331, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0xA338, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0xA336, $asm06.TypeRef("System.IntPtr"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0xA334, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.SizeF", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6FD7, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6FD8, null, [$asm0B.TypeRef("System.Drawing.PointF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6FDA, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Add", 
    $sig.make(0x6FE1, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x6FE3, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x6FD4, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
    $sig.make(0x6FD1, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x6FD2, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x6FE5, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x6FDB, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x6FDE, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x6FE0, $asm0B.TypeRef("System.Drawing.PointF"), [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x6FDF, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6FDC, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x6FD6, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x6FD3, null, [$.Single], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Subtract", 
    $sig.make(0x6FE2, $.Type, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToPointF", 
    $sig.make(0x6FE6, $asm0B.TypeRef("System.Drawing.PointF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToSize", 
    $sig.make(0x6FE7, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x6FE8, $.String, [], [])
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:false, Public:false}, "width", $.Single); 
  $.Field({Static:false, Public:false}, "height", $.Single); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA68, null, [], []), 
    function SizeF__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "Width", $.Single);

  $.Property({Static:false, Public:true }, "Height", $.Single);

})
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.SizeFConverter")]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.TypeConverter"), "System.Drawing.SizeFConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1434F, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x14341, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x14342, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x14344, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x14345, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0x14347, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0x1434A, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetProperties", 
    $sig.make(0x1434B, $asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPropertiesSupported", 
    $sig.make(0x1434D, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.SmoothingMode", true, {
    Invalid: -1, 
    Default: 0, 
    HighSpeed: 1, 
    HighQuality: 2, 
    None: 3, 
    AntiAlias: 4
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.StringAlignment", true, {
    Near: 0, 
    Center: 1, 
    Far: 2
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.StringDigitSubstitute", true, {
    User: 0, 
    None: 1, 
    National: 2, 
    Traditional: 3
  }, false
);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.CharacterRange", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14371, null, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x14372, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_First", 
    $sig.make(0x14365, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Length", 
    $sig.make(0x1436F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x14378, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x14374, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x14376, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_First", 
    $sig.make(0x1436D, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Length", 
    $sig.make(0x14370, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "first", $.Int32); 
  $.Field({Static:false, Public:false}, "$length", $.Int32); 
  $.Property({Static:false, Public:true }, "First", $.Int32);

  $.Property({Static:false, Public:true }, "Length", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.MarshalByRefObject"), "System.Drawing.StringFormat", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x8594, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8595, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8596, null, [$asm0B.TypeRef("System.Drawing.StringFormatFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8597, null, [$asm0B.TypeRef("System.Drawing.StringFormatFlags"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8598, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x859B, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Dispose", 
    $sig.make(0x8599, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x859A, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Finalize", 
    $sig.make(0x85A0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Alignment", 
    $sig.make(0x8588, $asm0B.TypeRef("System.Drawing.StringAlignment"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DigitSubstitutionLanguage", 
    $sig.make(0x8593, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DigitSubstitutionMethod", 
    $sig.make(0x8592, $asm0B.TypeRef("System.Drawing.StringDigitSubstitute"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FormatFlags", 
    $sig.make(0x8586, $asm0B.TypeRef("System.Drawing.StringFormatFlags"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericDefault", 
    $sig.make(0x8590, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_GenericTypographic", 
    $sig.make(0x8591, $.Type, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HotkeyPrefix", 
    $sig.make(0x858C, $asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LineAlignment", 
    $sig.make(0x858A, $asm0B.TypeRef("System.Drawing.StringAlignment"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Trimming", 
    $sig.make(0x858E, $asm0B.TypeRef("System.Drawing.StringTrimming"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetTabStops", 
    $sig.make(0x859E, $jsilcore.TypeRef("System.Array", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Alignment", 
    $sig.make(0x8589, null, [$asm0B.TypeRef("System.Drawing.StringAlignment")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FormatFlags", 
    $sig.make(0x8587, null, [$asm0B.TypeRef("System.Drawing.StringFormatFlags")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HotkeyPrefix", 
    $sig.make(0x858D, null, [$asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_LineAlignment", 
    $sig.make(0x858B, null, [$asm0B.TypeRef("System.Drawing.StringAlignment")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Trimming", 
    $sig.make(0x858F, null, [$asm0B.TypeRef("System.Drawing.StringTrimming")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetDigitSubstitution", 
    $sig.make(0x859F, null, [$.Int32, $asm0B.TypeRef("System.Drawing.StringDigitSubstitute")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetMeasurableCharacterRanges", 
    $sig.make(0x859C, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.CharacterRange")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetTabStops", 
    $sig.make(0x859D, null, [$.Single, $jsilcore.TypeRef("System.Array", [$.Single])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x85A1, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "nativeFormat", $asm06.TypeRef("System.IntPtr")); 
  $.Property({Static:false, Public:true }, "FormatFlags", $asm0B.TypeRef("System.Drawing.StringFormatFlags"));

  $.Property({Static:false, Public:true }, "Alignment", $asm0B.TypeRef("System.Drawing.StringAlignment"));

  $.Property({Static:false, Public:true }, "LineAlignment", $asm0B.TypeRef("System.Drawing.StringAlignment"));

  $.Property({Static:false, Public:true }, "HotkeyPrefix", $asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix"));

  $.Property({Static:false, Public:true }, "Trimming", $asm0B.TypeRef("System.Drawing.StringTrimming"));

  $.Property({Static:true , Public:true }, "GenericDefault", $.Type);

  $.Property({Static:true , Public:true }, "GenericTypographic", $.Type);

  $.Property({Static:false, Public:true }, "DigitSubstitutionMethod", $asm0B.TypeRef("System.Drawing.StringDigitSubstitute"));

  $.Property({Static:false, Public:true }, "DigitSubstitutionLanguage", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"), $asm06.TypeRef("System.IDisposable"))
});

JSIL.MakeEnum(
  "System.Drawing.StringFormatFlags", true, {
    DirectionRightToLeft: 1, 
    DirectionVertical: 2, 
    FitBlackBox: 4, 
    DisplayFormatControl: 32, 
    NoFontFallback: 1024, 
    MeasureTrailingSpaces: 2048, 
    NoWrap: 4096, 
    LineLimit: 8192, 
    NoClip: 16384
  }, true
);

JSIL.MakeEnum(
  "System.Drawing.StringTrimming", true, {
    None: 0, 
    Character: 1, 
    Word: 2, 
    EllipsisCharacter: 3, 
    EllipsisWord: 4, 
    EllipsisPath: 5
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.StringUnit", true, {
    World: 0, 
    Display: 1, 
    Pixel: 2, 
    Point: 3, 
    Inch: 4, 
    Document: 5, 
    Millimeter: 6, 
    Em: 32
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Internal.SystemColorTracker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x143E4, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "Add", 
    $sig.make(0x143E5, null, [$asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CleanOutBrokenLinks", 
    $sig.make(0x143E6, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GarbageCollectList", 
    $sig.make(0x143E7, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "OnUserPreferenceChanged", 
    $sig.make(0x143E8, null, [$.Object, $asm07.TypeRef("Microsoft.Win32.UserPreferenceChangedEventArgs")], [])
  );

  $.Field({Static:true , Public:false}, "INITIAL_SIZE", $.Int32, 200); 
  $.Field({Static:true , Public:false}, "WARNING_SIZE", $.Int32, 100000); 
  $.Field({Static:true , Public:false}, "EXPAND_THRESHOLD", $.Single, 0.75); 
  $.Field({Static:true , Public:false}, "EXPAND_FACTOR", $.Int32, 2); 
  $.Field({Static:true , Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.WeakReference")]), function ($pi) {
      return JSIL.Array.New($asm06.System.WeakReference, $pi.INITIAL_SIZE);
    }); 
  $.Field({Static:true , Public:false}, "count", $.Int32, 0); 
  $.Field({Static:true , Public:false}, "addedTracker", $.Boolean); 
});

JSIL.MakeEnum(
  "System.Drawing.Text.TextRenderingHint", true, {
    SystemDefault: 0, 
    SingleBitPerPixelGridFit: 1, 
    SingleBitPerPixel: 2, 
    AntiAliasGridFit: 3, 
    AntiAlias: 4, 
    ClearTypeGridFit: 5
  }, false
);

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Brush"), "System.Drawing.TextureBrush", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14416, null, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14418, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1441B, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), 
        $asm0B.TypeRef("System.Drawing.RectangleF")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1441C, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), 
        $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1441D, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1441E, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1441F, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14420, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14421, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetTransform", 
    $sig.make(0x14425, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_GetWrapMode", 
    $sig.make(0x14428, $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetTransform", 
    $sig.make(0x14423, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_SetWrapMode", 
    $sig.make(0x14427, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x14422, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Image", 
    $sig.make(0x14414, $asm0B.TypeRef("System.Drawing.Image"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
    $sig.make(0x14406, $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_WrapMode", 
    $sig.make(0x14408, $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x1442A, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
    $sig.make(0x1442B, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
    $sig.make(0x14429, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x14433, null, [$.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
    $sig.make(0x14434, null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x1442F, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
    $sig.make(0x14431, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
    $sig.make(0x14407, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_WrapMode", 
    $sig.make(0x1440E, null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x1442C, null, [$.Single, $.Single], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
    $sig.make(0x1442D, null, [
        $.Single, $.Single, 
        $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
      ], [])
  );

  $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

  $.Property({Static:false, Public:true }, "WrapMode", $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"));

  $.Property({Static:false, Public:true }, "Image", $asm0B.TypeRef("System.Drawing.Image"));

});

JSIL.MakeEnum(
  "System.Drawing.GraphicsUnit", true, {
    World: 0, 
    Display: 1, 
    Pixel: 2, 
    Point: 3, 
    Inch: 4, 
    Document: 5, 
    Millimeter: 6
  }, false
);

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.WarpMode", true, {
    Perspective: 0, 
    Bilinear: 1
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Imaging.WmfPlaceableFileHeader", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x981C, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BboxBottom", 
    $sig.make(0x9811, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BboxLeft", 
    $sig.make(0x9805, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BboxRight", 
    $sig.make(0x980D, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_BboxTop", 
    $sig.make(0x9807, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Checksum", 
    $sig.make(0x981A, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Hmf", 
    $sig.make(0x9803, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Inch", 
    $sig.make(0x9815, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Key", 
    $sig.make(0x9800, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Reserved", 
    $sig.make(0x9818, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BboxBottom", 
    $sig.make(0x9813, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BboxLeft", 
    $sig.make(0x9806, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BboxRight", 
    $sig.make(0x980F, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_BboxTop", 
    $sig.make(0x9808, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Checksum", 
    $sig.make(0x981B, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Hmf", 
    $sig.make(0x9804, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Inch", 
    $sig.make(0x9817, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Key", 
    $sig.make(0x9802, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Reserved", 
    $sig.make(0x9819, null, [$.Int32], [])
  );

  $.Field({Static:false, Public:false}, "key", $.Int32); 
  $.Field({Static:false, Public:false}, "hmf", $.Int16); 
  $.Field({Static:false, Public:false}, "bboxLeft", $.Int16); 
  $.Field({Static:false, Public:false}, "bboxTop", $.Int16); 
  $.Field({Static:false, Public:false}, "bboxRight", $.Int16); 
  $.Field({Static:false, Public:false}, "bboxBottom", $.Int16); 
  $.Field({Static:false, Public:false}, "inch", $.Int16); 
  $.Field({Static:false, Public:false}, "reserved", $.Int32); 
  $.Field({Static:false, Public:false}, "checksum", $.Int16); 
  $.Property({Static:false, Public:true }, "Key", $.Int32);

  $.Property({Static:false, Public:true }, "Hmf", $.Int16);

  $.Property({Static:false, Public:true }, "BboxLeft", $.Int16);

  $.Property({Static:false, Public:true }, "BboxTop", $.Int16);

  $.Property({Static:false, Public:true }, "BboxRight", $.Int16);

  $.Property({Static:false, Public:true }, "BboxBottom", $.Int16);

  $.Property({Static:false, Public:true }, "Inch", $.Int16);

  $.Property({Static:false, Public:true }, "Reserved", $.Int32);

  $.Property({Static:false, Public:true }, "Checksum", $.Int16);

});

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.WrapMode", true, {
    Tile: 0, 
    TileFlipX: 1, 
    TileFlipY: 2, 
    TileFlipXY: 3, 
    Clamp: 4
  }, false
);

JSIL.DeclareNamespace("System.Drawing.Design");
JSIL.MakeClass($asm06.TypeRef("System.Collections.ReadOnlyCollectionBase"), "System.Drawing.Design.CategoryNameCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1407C, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1407D, null, [$jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x141BC, $.Boolean, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x141BD, null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x1407B, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x141BE, $.Int32, [$.String], [])
  );

  $.Property({Static:false, Public:true }, "Item", $.String);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeInterface(
  "System.Drawing.Design.IPropertyValueUIService", true, [], function ($) {
    $.Method({}, "add_PropertyUIValueItemsChanged", $sig.make(0x142FB, null, [$asm06.TypeRef("System.EventHandler")], []));
    $.Method({}, "remove_PropertyUIValueItemsChanged", $sig.make(0x142FC, null, [$asm06.TypeRef("System.EventHandler")], []));
    $.Method({}, "AddPropertyValueUIHandler", $sig.make(0x142FD, null, [$asm0B.TypeRef("System.Drawing.Design.PropertyValueUIHandler")], []));
    $.Method({}, "GetPropertyUIValueItems", $sig.make(0x142FE, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItem")]), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.ComponentModel.PropertyDescriptor")], []));
    $.Method({}, "NotifyPropertyValueUIItemsChanged", $sig.make(0x142FF, null, [], []));
    $.Method({}, "RemovePropertyValueUIHandler", $sig.make(0x14300, null, [$asm0B.TypeRef("System.Drawing.Design.PropertyValueUIHandler")], []));
  }, []);

JSIL.MakeInterface(
  "System.Drawing.Design.IToolboxItemProvider", true, [], function ($) {
    $.Method({}, "get_Items", $sig.make(0x14311, $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [], []));
    $.Property({}, "Items");
  }, []);

JSIL.MakeInterface(
  "System.Drawing.Design.IToolboxService", true, [], function ($) {
    $.Method({}, "get_CategoryNames", $sig.make(0x149F0, $asm0B.TypeRef("System.Drawing.Design.CategoryNameCollection"), [], []));
    $.Method({}, "get_SelectedCategory", $sig.make(0x149F1, $.String, [], []));
    $.Method({}, "set_SelectedCategory", $sig.make(0x149F2, null, [$.String], []));
    $.Method({}, "AddCreator", $sig.make(0x149F3, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItemCreatorCallback"), $.String], []));
    $.Method({}, "AddCreator", $sig.make(0x149F5, null, [
          $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCreatorCallback"), $.String, 
          $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")
        ], []));
    $.Method({}, "AddLinkedToolboxItem", $sig.make(0x149F6, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "AddLinkedToolboxItem", $sig.make(0x149F8, null, [
          $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.String, 
          $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")
        ], []));
    $.Method({}, "AddToolboxItem", $sig.make(0x149F9, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], []));
    $.Method({}, "AddToolboxItem", $sig.make(0x149FA, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.String], []));
    $.Method({}, "DeserializeToolboxItem", $sig.make(0x149FB, $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$.Object], []));
    $.Method({}, "DeserializeToolboxItem", $sig.make(0x149FC, $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$.Object, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "GetSelectedToolboxItem", $sig.make(0x149FD, $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [], []));
    $.Method({}, "GetSelectedToolboxItem", $sig.make(0x149FE, $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "GetToolboxItems", $sig.make(0x149FF, $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [], []));
    $.Method({}, "GetToolboxItems", $sig.make(0x14A00, $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "GetToolboxItems", $sig.make(0x14A01, $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [$.String], []));
    $.Method({}, "GetToolboxItems", $sig.make(0x14A02, $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [$.String, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "IsSupported", $sig.make(0x14A03, $.Boolean, [$.Object, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "IsSupported", $sig.make(0x14A04, $.Boolean, [$.Object, $asm06.TypeRef("System.Collections.ICollection")], []));
    $.Method({}, "IsToolboxItem", $sig.make(0x14A05, $.Boolean, [$.Object], []));
    $.Method({}, "IsToolboxItem", $sig.make(0x14A06, $.Boolean, [$.Object, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "Refresh", $sig.make(0x14A07, null, [], []));
    $.Method({}, "RemoveCreator", $sig.make(0x14A08, null, [$.String], []));
    $.Method({}, "RemoveCreator", $sig.make(0x14A09, null, [$.String, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], []));
    $.Method({}, "RemoveToolboxItem", $sig.make(0x14A0A, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], []));
    $.Method({}, "RemoveToolboxItem", $sig.make(0x14A0B, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.String], []));
    $.Method({}, "SelectedToolboxItemUsed", $sig.make(0x14A0C, null, [], []));
    $.Method({}, "SerializeToolboxItem", $sig.make(0x14A0D, $.Object, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], []));
    $.Method({}, "SetCursor", $sig.make(0x14A0E, $.Boolean, [], []));
    $.Method({}, "SetSelectedToolboxItem", $sig.make(0x14A0F, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], []));
    $.Property({}, "CategoryNames");
    $.Property({}, "SelectedCategory");
  }, []);

JSIL.MakeInterface(
  "System.Drawing.Design.IToolboxUser", true, [], function ($) {
    $.Method({}, "GetToolSupported", $sig.make(0x14A16, $.Boolean, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], []));
    $.Method({}, "ToolPicked", $sig.make(0x14A17, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], []));
  }, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Drawing.Design.PaintValueEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA402, null, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
        $asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
    $sig.make(0xA3FE, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Context", 
    $sig.make(0xA3FF, $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Graphics", 
    $sig.make(0xA400, $asm0B.TypeRef("System.Drawing.Graphics"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Value", 
    $sig.make(0xA401, $.Object, [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "valueToPaint", $.Object); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "bounds", $asm0B.TypeRef("System.Drawing.Rectangle")); 
  $.Property({Static:false, Public:true }, "Bounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

  $.Property({Static:false, Public:true }, "Context", $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"));

  $.Property({Static:false, Public:true }, "Graphics", $asm0B.TypeRef("System.Drawing.Graphics"));

  $.Property({Static:false, Public:true }, "Value", $.Object);

});

JSIL.MakeDelegate("System.Drawing.Design.PropertyValueUIHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Design.PropertyValueUIItem", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14582, null, [
        $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler"), 
        $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Image", 
    $sig.make(0x1457A, $asm0B.TypeRef("System.Drawing.Image"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_InvokeHandler", 
    $sig.make(0x1457D, $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ToolTip", 
    $sig.make(0x1457F, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x14584, null, [], [])
  );

  $.Field({Static:false, Public:false}, "itemImage", $asm0B.TypeRef("System.Drawing.Image")); 
  $.Field({Static:false, Public:false}, "handler", $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler")); 
  $.Field({Static:false, Public:false}, "tooltip", $.String); 
  $.Property({Static:false, Public:true , Virtual:true }, "Image", $asm0B.TypeRef("System.Drawing.Image"));

  $.Property({Static:false, Public:true , Virtual:true }, "InvokeHandler", $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler"));

  $.Property({Static:false, Public:true , Virtual:true }, "ToolTip", $.String);

});

JSIL.MakeDelegate("System.Drawing.Design.PropertyValueUIItemInvokeHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Drawing.Design.ToolboxComponentsCreatedEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1455F, null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Components", 
    $sig.make(0x1455E, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "comps", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")])); 
  $.Property({Static:false, Public:true }, "Components", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]));

});

JSIL.MakeDelegate("System.Drawing.Design.ToolboxComponentsCreatedEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Drawing.Design.ToolboxComponentsCreatingEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1459E, null, [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DesignerHost", 
    $sig.make(0x1459D, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), [], [])
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "host", $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")); 
  $.Property({Static:false, Public:true }, "DesignerHost", $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"));

});

JSIL.MakeDelegate("System.Drawing.Design.ToolboxComponentsCreatingEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Design.ToolboxItem", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x143AC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x143AD, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x143AE, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ComponentsCreated", 
    $sig.make(0x143A8, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_ComponentsCreating", 
    $sig.make(0x143AA, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckUnlocked", 
    $sig.make(0x143AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateComponents", 
    $sig.make(0x143B0, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateComponents", 
    $sig.make(0x143B1, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateComponents", 
    $sig.make(0x143B2, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateComponentsCore", 
    $sig.make(0x143B3, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateComponentsCore", 
    $sig.make(0x143B4, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Deserialize", 
    $sig.make(0x143B5, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x143B7, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "FilterPropertyValue", 
    $sig.make(0x143BB, $.Object, [$.String, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
    $sig.make(0x14392, $asm06.TypeRef("System.Reflection.AssemblyName"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bitmap", 
    $sig.make(0x14396, $asm0B.TypeRef("System.Drawing.Bitmap"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Company", 
    $sig.make(0x14398, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ComponentType", 
    $sig.make(0x1439A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DependentAssemblies", 
    $sig.make(0x14394, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.AssemblyName")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x1439B, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x1439D, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
    $sig.make(0x1439F, $asm06.TypeRef("System.Collections.ICollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsTransient", 
    $sig.make(0x143A1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Locked", 
    $sig.make(0x143A3, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
    $sig.make(0x143A4, $asm06.TypeRef("System.Collections.IDictionary"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
    $sig.make(0x143A5, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Version", 
    $sig.make(0x143A7, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x143B9, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetNonRetargetedAssemblyName", 
    $sig.make(0x143C0, $asm06.TypeRef("System.Reflection.AssemblyName"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.AssemblyName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetType", 
    $sig.make(0x143BD, $asm06.TypeRef("System.Type"), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetType", 
    $sig.make(0x143BE, $asm06.TypeRef("System.Type"), [
        $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), $asm06.TypeRef("System.Reflection.AssemblyName"), 
        $.String, $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Initialize", 
    $sig.make(0x143C5, null, [$asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Lock", 
    $sig.make(0x143C7, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnComponentsCreated", 
    $sig.make(0x143C8, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnComponentsCreating", 
    $sig.make(0x143C9, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ComponentsCreated", 
    $sig.make(0x143A9, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_ComponentsCreating", 
    $sig.make(0x143AB, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Serialize", 
    $sig.make(0x143CA, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
    $sig.make(0x14393, null, [$asm06.TypeRef("System.Reflection.AssemblyName")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Bitmap", 
    $sig.make(0x14397, null, [$asm0B.TypeRef("System.Drawing.Bitmap")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Company", 
    $sig.make(0x14399, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DependentAssemblies", 
    $sig.make(0x14395, null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.AssemblyName")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Description", 
    $sig.make(0x1439C, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
    $sig.make(0x1439E, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Filter", 
    $sig.make(0x143A0, null, [$asm06.TypeRef("System.Collections.ICollection")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_IsTransient", 
    $sig.make(0x143A2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
    $sig.make(0x143A6, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ISerializable.GetObjectData", 
    $sig.make(0x143CE, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x143CB, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidatePropertyType", 
    $sig.make(0x143CC, null, [
        $.String, $.Object, 
        $asm06.TypeRef("System.Type"), $.Boolean
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ValidatePropertyValue", 
    $sig.make(0x143CD, $.Object, [$.String, $.Object], [])
  );

  $.Field({Static:true , Public:false}, "ToolboxItemPersist", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
  $.Field({Static:true , Public:false}, "EventComponentsCreated", $.Object); 
  $.Field({Static:true , Public:false}, "EventComponentsCreating", $.Object); 
  $.Field({Static:false, Public:false}, "locked", $.Boolean); 
  $.Field({Static:false, Public:false}, "properties", $asm0B.TypeRef("System.Drawing.Design.ToolboxItem/LockableDictionary")); 
  $.Field({Static:false, Public:false}, "componentsCreatedEvent", $asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler")); 
  $.Field({Static:false, Public:false}, "componentsCreatingEvent", $asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler")); 
  $.Property({Static:false, Public:true }, "AssemblyName", $asm06.TypeRef("System.Reflection.AssemblyName"));

  $.Property({Static:false, Public:true }, "DependentAssemblies", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.AssemblyName")]));

  $.Property({Static:false, Public:true }, "Bitmap", $asm0B.TypeRef("System.Drawing.Bitmap"));

  $.Property({Static:false, Public:true }, "Company", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $.String);

  $.Property({Static:false, Public:true }, "Description", $.String);

  $.Property({Static:false, Public:true }, "DisplayName", $.String);

  $.Property({Static:false, Public:true }, "Filter", $asm06.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:true }, "IsTransient", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Locked", $.Boolean);

  $.Property({Static:false, Public:true }, "Properties", $asm06.TypeRef("System.Collections.IDictionary"));

  $.Property({Static:false, Public:true }, "TypeName", $.String);

  $.Property({Static:false, Public:true , Virtual:true }, "Version", $.String);

  $.ImplementInterfaces($asm06.TypeRef("System.Runtime.Serialization.ISerializable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Collections.Hashtable"), "System.Drawing.Design.ToolboxItem/LockableDictionary", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1450B, null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14516, null, [$.Object, $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSerializable", 
    $sig.make(0x14519, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clear", 
    $sig.make(0x1451B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x14505, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x14506, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14507, $.Object, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPropertyName", 
    $sig.make(0x1451D, $.String, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Remove", 
    $sig.make(0x1451F, null, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Item", 
    $sig.make(0x14509, null, [$.Object, $.Object], [])
  );

  $.Field({Static:false, Public:false}, "_item", $asm0B.TypeRef("System.Drawing.Design.ToolboxItem")); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Collections.ReadOnlyCollectionBase"), "System.Drawing.Design.ToolboxItemCollection", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14313, null, [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14314, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Contains", 
    $sig.make(0x14315, $.Boolean, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14316, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14312, $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x14317, $.Int32, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")], [])
  );

  $.Property({Static:false, Public:true }, "Item", $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"));

})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeDelegate("System.Drawing.Design.ToolboxItemCreatorCallback", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Design.UITypeEditor", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA0B3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EditValue", 
    $sig.make(0xA0B4, $.Object, [$asm06.TypeRef("System.IServiceProvider"), $.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "EditValue", 
    $sig.make(0xA0B5, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.IServiceProvider"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDropDownResizable", 
    $sig.make(0xA0B1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEditStyle", 
    $sig.make(0xA0B6, $asm0B.TypeRef("System.Drawing.Design.UITypeEditorEditStyle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEditStyle", 
    $sig.make(0xA0B9, $asm0B.TypeRef("System.Drawing.Design.UITypeEditorEditStyle"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPaintValueSupported", 
    $sig.make(0xA0B7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPaintValueSupported", 
    $sig.make(0xA0B8, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PaintValue", 
    $sig.make(0xA0BA, null, [
        $.Object, $asm0B.TypeRef("System.Drawing.Graphics"), 
        $asm0B.TypeRef("System.Drawing.Rectangle")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "PaintValue", 
    $sig.make(0xA0BB, null, [$asm0B.TypeRef("System.Drawing.Design.PaintValueEventArgs")], [])
  );

  $.Property({Static:false, Public:true , Virtual:true }, "IsDropDownResizable", $.Boolean);

});

JSIL.MakeEnum(
  "System.Drawing.Design.UITypeEditorEditStyle", true, {
    None: 1, 
    Modal: 2, 
    DropDown: 3
  }, false
);

JSIL.DeclareNamespace("System.Drawing.Printing");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrintController", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x147AF, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreatePrintPageEvent", 
    $sig.make(0x147B6, $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsPreview", 
    $sig.make(0x147AE, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnEndPage", 
    $sig.make(0x147B9, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnEndPrint", 
    $sig.make(0x147BA, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnStartPage", 
    $sig.make(0x147B8, $asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnStartPrint", 
    $sig.make(0x147B7, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Print", 
    $sig.make(0x147B4, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrintLoop", 
    $sig.make(0x147B5, $.Boolean, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument")], [])
  );

  $.Field({Static:false, Public:false}, "modeHandle", $asm0B.TypeRef("System.Drawing.Printing.PrintController/SafeDeviceModeHandle")); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsPreview", $.Boolean);

});

JSIL.MakeClass($asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Drawing.Printing.PrintController/SafeDeviceModeHandle", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x148DC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x148DD, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsInvalid", 
    $sig.make(0x148DB, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x148E0, $.Type, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x148DF, $asm06.TypeRef("System.IntPtr"), [$.Type], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ReleaseHandle", 
    $sig.make(0x148DE, $.Boolean, [], [])
  )
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

})
  .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Printing.PrintController"), "System.Drawing.Printing.StandardPrintController", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x149A8, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSecurity", 
    $sig.make(0x149A3, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnEndPage", 
    $sig.make(0x149A6, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnEndPrint", 
    $sig.make(0x149A7, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnStartPage", 
    $sig.make(0x149A5, $asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnStartPrint", 
    $sig.make(0x149A4, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.Field({Static:false, Public:false}, "dc", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext")); 
  $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
});

JSIL.MakeEnum(
  "System.Drawing.Printing.Duplex", true, {
    Default: -1, 
    Simplex: 1, 
    Vertical: 2, 
    Horizontal: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.SystemException"), "System.Drawing.Printing.InvalidPrinterException", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x149BB, null, [$asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x149BC, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GenerateMessage", 
    $sig.make(0x149BE, $.String, [$asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetObjectData", 
    $sig.make(0x149BD, null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  );

  $.Field({Static:false, Public:false}, "settings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.Margins", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x146B4, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x146B5, null, [
        $.Int32, $.Int32, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckMargin", 
    $sig.make(0x146B7, null, [$.Int32, $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x146B8, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x146B9, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
    $sig.make(0x146AA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DoubleBottom", 
    $sig.make(0x146B2, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DoubleLeft", 
    $sig.make(0x146AC, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DoubleRight", 
    $sig.make(0x146AE, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DoubleTop", 
    $sig.make(0x146B0, $.Double, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Left", 
    $sig.make(0x146A4, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Right", 
    $sig.make(0x146A6, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Top", 
    $sig.make(0x146A8, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x146BA, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnDeserializedMethod", 
    $sig.make(0x146B6, null, [$asm06.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
  )
    .Attribute($asm06.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x146BB, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x146BC, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Bottom", 
    $sig.make(0x146AB, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DoubleBottom", 
    $sig.make(0x146B3, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DoubleLeft", 
    $sig.make(0x146AD, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DoubleRight", 
    $sig.make(0x146AF, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_DoubleTop", 
    $sig.make(0x146B1, null, [$.Double], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Left", 
    $sig.make(0x146A5, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Right", 
    $sig.make(0x146A7, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Top", 
    $sig.make(0x146A9, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x146BD, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "left", $.Int32); 
  $.Field({Static:false, Public:false}, "right", $.Int32); 
  $.Field({Static:false, Public:false}, "top", $.Int32); 
  $.Field({Static:false, Public:false}, "bottom", $.Int32); 
  $.Field({Static:false, Public:false}, "doubleLeft", $.Double)
    .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
  $.Field({Static:false, Public:false}, "doubleRight", $.Double)
    .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
  $.Field({Static:false, Public:false}, "doubleTop", $.Double)
    .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
  $.Field({Static:false, Public:false}, "doubleBottom", $.Double)
    .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
  $.Property({Static:false, Public:true }, "Left", $.Int32);

  $.Property({Static:false, Public:true }, "Right", $.Int32);

  $.Property({Static:false, Public:true }, "Top", $.Int32);

  $.Property({Static:false, Public:true }, "Bottom", $.Int32);

  $.Property({Static:false, Public:false}, "DoubleLeft", $.Double);

  $.Property({Static:false, Public:false}, "DoubleRight", $.Double);

  $.Property({Static:false, Public:false}, "DoubleTop", $.Double);

  $.Property({Static:false, Public:false}, "DoubleBottom", $.Double);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"))
})
  .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.TypeRef("System.Drawing.Printing.MarginsConverter")]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter"), "System.Drawing.Printing.MarginsConverter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14794, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertFrom", 
    $sig.make(0x1478E, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
    $sig.make(0x1478F, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertFrom", 
    $sig.make(0x14790, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
    $sig.make(0x14791, $.Object, [
        $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
        $.Object, $asm06.TypeRef("System.Type")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
    $sig.make(0x14792, $.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetCreateInstanceSupported", 
    $sig.make(0x14793, $.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
  );

});

JSIL.MakeEnum(
  "System.Drawing.Printing.ModeField", false, {
    Orientation: 0, 
    PaperSize: 1, 
    PaperLength: 2, 
    PaperWidth: 3, 
    Copies: 4, 
    DefaultSource: 5, 
    PrintQuality: 6, 
    Color: 7, 
    Duplex: 8, 
    YResolution: 9, 
    TTOption: 10, 
    Collate: 11
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PageSettings", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x147D0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x147D1, null, [$asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x147D2, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CopyToHdevmode", 
    $sig.make(0x147D3, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
    $sig.make(0x147B0, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Color", 
    $sig.make(0x147B1, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_ExtraBytes", 
    $sig.make(0x147CF, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HardMarginX", 
    $sig.make(0x147B3, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HardMarginY", 
    $sig.make(0x147BE, $.Single, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Landscape", 
    $sig.make(0x147C0, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Margins", 
    $sig.make(0x147C4, $asm0B.TypeRef("System.Drawing.Printing.Margins"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PaperSize", 
    $sig.make(0x147C6, $asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PaperSource", 
    $sig.make(0x147C8, $asm0B.TypeRef("System.Drawing.Printing.PaperSource"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrintableArea", 
    $sig.make(0x147CA, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrinterResolution", 
    $sig.make(0x147CB, $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrinterSettings", 
    $sig.make(0x147CD, $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetBounds", 
    $sig.make(0x147D4, $asm0B.TypeRef("System.Drawing.Rectangle"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLandscape", 
    $sig.make(0x147D5, $.Boolean, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetPaperSize", 
    $sig.make(0x147D6, $asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PaperSizeFromMode", 
    $sig.make(0x147D7, $asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/DEVMODE")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PaperSourceFromMode", 
    $sig.make(0x147D8, $asm0B.TypeRef("System.Drawing.Printing.PaperSource"), [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/DEVMODE")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "PrinterResolutionFromMode", 
    $sig.make(0x147D9, $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"), [$asm0B.TypeRef("System.Drawing.SafeNativeMethods/DEVMODE")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Color", 
    $sig.make(0x147B2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Landscape", 
    $sig.make(0x147C2, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Margins", 
    $sig.make(0x147C5, null, [$asm0B.TypeRef("System.Drawing.Printing.Margins")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PaperSize", 
    $sig.make(0x147C7, null, [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PaperSource", 
    $sig.make(0x147C9, null, [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrinterResolution", 
    $sig.make(0x147CC, null, [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrinterSettings", 
    $sig.make(0x147CE, null, [$asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetHdevmode", 
    $sig.make(0x147DB, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x147DD, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "printerSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")); 
  $.Field({Static:false, Public:false}, "color", $asm0B.TypeRef("System.Drawing.Printing.TriState")); 
  $.Field({Static:false, Public:false}, "paperSize", $asm0B.TypeRef("System.Drawing.Printing.PaperSize")); 
  $.Field({Static:false, Public:false}, "paperSource", $asm0B.TypeRef("System.Drawing.Printing.PaperSource")); 
  $.Field({Static:false, Public:false}, "printerResolution", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")); 
  $.Field({Static:false, Public:false}, "landscape", $asm0B.TypeRef("System.Drawing.Printing.TriState")); 
  $.Field({Static:false, Public:false}, "margins", $asm0B.TypeRef("System.Drawing.Printing.Margins")); 
  $.Property({Static:false, Public:true }, "Bounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

  $.Property({Static:false, Public:true }, "Color", $.Boolean);

  $.Property({Static:false, Public:true }, "HardMarginX", $.Single);

  $.Property({Static:false, Public:true }, "HardMarginY", $.Single);

  $.Property({Static:false, Public:true }, "Landscape", $.Boolean);

  $.Property({Static:false, Public:true }, "Margins", $asm0B.TypeRef("System.Drawing.Printing.Margins"));

  $.Property({Static:false, Public:true }, "PaperSize", $asm0B.TypeRef("System.Drawing.Printing.PaperSize"));

  $.Property({Static:false, Public:true }, "PaperSource", $asm0B.TypeRef("System.Drawing.Printing.PaperSource"));

  $.Property({Static:false, Public:true }, "PrintableArea", $asm0B.TypeRef("System.Drawing.RectangleF"));

  $.Property({Static:false, Public:true }, "PrinterResolution", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"));

  $.Property({Static:false, Public:true }, "PrinterSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"));

  $.Property({Static:false, Public:false}, "ExtraBytes", $.Int16);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"))
});

JSIL.MakeEnum(
  "System.Drawing.Printing.PaperKind", true, {
    Custom: 0, 
    Letter: 1, 
    LetterSmall: 2, 
    Tabloid: 3, 
    Ledger: 4, 
    Legal: 5, 
    Statement: 6, 
    Executive: 7, 
    A3: 8, 
    A4: 9, 
    A4Small: 10, 
    A5: 11, 
    B4: 12, 
    B5: 13, 
    Folio: 14, 
    Quarto: 15, 
    Standard10x14: 16, 
    Standard11x17: 17, 
    Note: 18, 
    Number9Envelope: 19, 
    Number10Envelope: 20, 
    Number11Envelope: 21, 
    Number12Envelope: 22, 
    Number14Envelope: 23, 
    CSheet: 24, 
    DSheet: 25, 
    ESheet: 26, 
    DLEnvelope: 27, 
    C5Envelope: 28, 
    C3Envelope: 29, 
    C4Envelope: 30, 
    C6Envelope: 31, 
    C65Envelope: 32, 
    B4Envelope: 33, 
    B5Envelope: 34, 
    B6Envelope: 35, 
    ItalyEnvelope: 36, 
    MonarchEnvelope: 37, 
    PersonalEnvelope: 38, 
    USStandardFanfold: 39, 
    GermanStandardFanfold: 40, 
    GermanLegalFanfold: 41, 
    IsoB4: 42, 
    JapanesePostcard: 43, 
    Standard9x11: 44, 
    Standard10x11: 45, 
    Standard15x11: 46, 
    InviteEnvelope: 47, 
    LetterExtra: 50, 
    LegalExtra: 51, 
    TabloidExtra: 52, 
    A4Extra: 53, 
    LetterTransverse: 54, 
    A4Transverse: 55, 
    LetterExtraTransverse: 56, 
    APlus: 57, 
    BPlus: 58, 
    LetterPlus: 59, 
    A4Plus: 60, 
    A5Transverse: 61, 
    B5Transverse: 62, 
    A3Extra: 63, 
    A5Extra: 64, 
    B5Extra: 65, 
    A2: 66, 
    A3Transverse: 67, 
    A3ExtraTransverse: 68, 
    JapaneseDoublePostcard: 69, 
    A6: 70, 
    JapaneseEnvelopeKakuNumber2: 71, 
    JapaneseEnvelopeKakuNumber3: 72, 
    JapaneseEnvelopeChouNumber3: 73, 
    JapaneseEnvelopeChouNumber4: 74, 
    LetterRotated: 75, 
    A3Rotated: 76, 
    A4Rotated: 77, 
    A5Rotated: 78, 
    B4JisRotated: 79, 
    B5JisRotated: 80, 
    JapanesePostcardRotated: 81, 
    JapaneseDoublePostcardRotated: 82, 
    A6Rotated: 83, 
    JapaneseEnvelopeKakuNumber2Rotated: 84, 
    JapaneseEnvelopeKakuNumber3Rotated: 85, 
    JapaneseEnvelopeChouNumber3Rotated: 86, 
    JapaneseEnvelopeChouNumber4Rotated: 87, 
    B6Jis: 88, 
    B6JisRotated: 89, 
    Standard12x11: 90, 
    JapaneseEnvelopeYouNumber4: 91, 
    JapaneseEnvelopeYouNumber4Rotated: 92, 
    Prc16K: 93, 
    Prc32K: 94, 
    Prc32KBig: 95, 
    PrcEnvelopeNumber1: 96, 
    PrcEnvelopeNumber2: 97, 
    PrcEnvelopeNumber3: 98, 
    PrcEnvelopeNumber4: 99, 
    PrcEnvelopeNumber5: 100, 
    PrcEnvelopeNumber6: 101, 
    PrcEnvelopeNumber7: 102, 
    PrcEnvelopeNumber8: 103, 
    PrcEnvelopeNumber9: 104, 
    PrcEnvelopeNumber10: 105, 
    Prc16KRotated: 106, 
    Prc32KRotated: 107, 
    Prc32KBigRotated: 108, 
    PrcEnvelopeNumber1Rotated: 109, 
    PrcEnvelopeNumber2Rotated: 110, 
    PrcEnvelopeNumber3Rotated: 111, 
    PrcEnvelopeNumber4Rotated: 112, 
    PrcEnvelopeNumber5Rotated: 113, 
    PrcEnvelopeNumber6Rotated: 114, 
    PrcEnvelopeNumber7Rotated: 115, 
    PrcEnvelopeNumber8Rotated: 116, 
    PrcEnvelopeNumber9Rotated: 117, 
    PrcEnvelopeNumber10Rotated: 118
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PaperSize", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x148F0, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x148F1, null, [
        $asm0B.TypeRef("System.Drawing.Printing.PaperKind"), $.String, 
        $.Int32, $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x148F2, null, [
        $.String, $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Height", 
    $sig.make(0x148E7, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x148E9, $asm0B.TypeRef("System.Drawing.Printing.PaperKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PaperName", 
    $sig.make(0x148EA, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RawKind", 
    $sig.make(0x148EC, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Width", 
    $sig.make(0x148EE, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Height", 
    $sig.make(0x148E8, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PaperName", 
    $sig.make(0x148EB, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RawKind", 
    $sig.make(0x148ED, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Width", 
    $sig.make(0x148EF, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x148F3, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "kind", $asm0B.TypeRef("System.Drawing.Printing.PaperKind")); 
  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "width", $.Int32); 
  $.Field({Static:false, Public:false}, "height", $.Int32); 
  $.Field({Static:false, Public:false}, "createdByDefaultConstructor", $.Boolean); 
  $.Property({Static:false, Public:true }, "Height", $.Int32);

  $.Property({Static:false, Public:true }, "Kind", $asm0B.TypeRef("System.Drawing.Printing.PaperKind"));

  $.Property({Static:false, Public:true }, "PaperName", $.String);

  $.Property({Static:false, Public:true }, "RawKind", $.Int32);

  $.Property({Static:false, Public:true }, "Width", $.Int32);

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PaperSource", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14857, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14858, null, [$asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind"), $.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x14852, $asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_RawKind", 
    $sig.make(0x14853, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SourceName", 
    $sig.make(0x14855, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_RawKind", 
    $sig.make(0x14854, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_SourceName", 
    $sig.make(0x14856, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x14859, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "$name", $.String); 
  $.Field({Static:false, Public:false}, "kind", $asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind")); 
  $.Property({Static:false, Public:true }, "Kind", $asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind"));

  $.Property({Static:false, Public:true }, "RawKind", $.Int32);

  $.Property({Static:false, Public:true }, "SourceName", $.String);

});

JSIL.MakeEnum(
  "System.Drawing.Printing.PaperSourceKind", true, {
    Upper: 1, 
    Lower: 2, 
    Middle: 3, 
    Manual: 4, 
    Envelope: 5, 
    ManualFeed: 6, 
    AutomaticFeed: 7, 
    TractorFeed: 8, 
    SmallFormat: 9, 
    LargeFormat: 10, 
    LargeCapacity: 11, 
    Cassette: 14, 
    FormSource: 15, 
    Custom: 257
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PreviewPageInfo", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A5E, null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Size")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Image", 
    $sig.make(0x14A5C, $asm0B.TypeRef("System.Drawing.Image"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PhysicalSize", 
    $sig.make(0x14A5D, $asm0B.TypeRef("System.Drawing.Size"), [], [])
  );

  $.Field({Static:false, Public:false}, "image", $asm0B.TypeRef("System.Drawing.Image")); 
  $.Field({Static:false, Public:false}, "physicalSize", $asm0B.TypeRef("System.Drawing.Size")); 
  $.Property({Static:false, Public:true }, "Image", $asm0B.TypeRef("System.Drawing.Image"));

  $.Property({Static:false, Public:true }, "PhysicalSize", $asm0B.TypeRef("System.Drawing.Size"));

});

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Printing.PrintController"), "System.Drawing.Printing.PreviewPrintController", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A6E, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CheckSecurity", 
    $sig.make(0x14A68, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsPreview", 
    $sig.make(0x14A65, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_UseAntiAlias", 
    $sig.make(0x14A66, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetPreviewPageInfo", 
    $sig.make(0x14A6D, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PreviewPageInfo")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnEndPage", 
    $sig.make(0x14A6B, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnEndPrint", 
    $sig.make(0x14A6C, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnStartPage", 
    $sig.make(0x14A6A, $asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "OnStartPrint", 
    $sig.make(0x14A69, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_UseAntiAlias", 
    $sig.make(0x14A67, null, [$.Boolean], [])
  );

  $.Field({Static:false, Public:false}, "list", $asm06.TypeRef("System.Collections.IList")); 
  $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Field({Static:false, Public:false}, "dc", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext")); 
  $.Field({Static:false, Public:false}, "antiAlias", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsPreview", $.Boolean);

  $.Property({Static:false, Public:true , Virtual:true }, "UseAntiAlias", $.Boolean);

});

JSIL.MakeEnum(
  "System.Drawing.Printing.PrintAction", true, {
    PrintToFile: 0, 
    PrintToPreview: 1, 
    PrintToPrinter: 2
  }, false
);

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.Component"), "System.Drawing.Printing.PrintDocument", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x147F3, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_OnBeginPrint", 
    $sig.make(0x147F4, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_OnEndPrint", 
    $sig.make(0x147F6, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_OnPrintPage", 
    $sig.make(0x147F8, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "_OnQueryPageSettings", 
    $sig.make(0x147FA, null, [$asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_BeginPrint", 
    $sig.make(0x147EB, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_EndPrint", 
    $sig.make(0x147ED, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_PrintPage", 
    $sig.make(0x147EF, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "add_QueryPageSettings", 
    $sig.make(0x147F1, null, [$asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultPageSettings", 
    $sig.make(0x147DA, $asm0B.TypeRef("System.Drawing.Printing.PageSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DocumentName", 
    $sig.make(0x147DE, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_OriginAtMargins", 
    $sig.make(0x147E2, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrintController", 
    $sig.make(0x147E6, $asm0B.TypeRef("System.Drawing.Printing.PrintController"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrinterSettings", 
    $sig.make(0x147E9, $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnBeginPrint", 
    $sig.make(0x147F5, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnEndPrint", 
    $sig.make(0x147F7, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnPrintPage", 
    $sig.make(0x147F9, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "OnQueryPageSettings", 
    $sig.make(0x147FB, null, [$asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Print", 
    $sig.make(0x147FC, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_BeginPrint", 
    $sig.make(0x147EC, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_EndPrint", 
    $sig.make(0x147EE, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_PrintPage", 
    $sig.make(0x147F0, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "remove_QueryPageSettings", 
    $sig.make(0x147F2, null, [$asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DefaultPageSettings", 
    $sig.make(0x147DC, null, [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_DocumentName", 
    $sig.make(0x147DF, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_OriginAtMargins", 
    $sig.make(0x147E3, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrintController", 
    $sig.make(0x147E8, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintController")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrinterSettings", 
    $sig.make(0x147EA, null, [$asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x147FD, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "documentName", $.String); 
  $.Field({Static:false, Public:false}, "beginPrintHandler", $asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")); 
  $.Field({Static:false, Public:false}, "endPrintHandler", $asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")); 
  $.Field({Static:false, Public:false}, "printPageHandler", $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler")); 
  $.Field({Static:false, Public:false}, "queryHandler", $asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler")); 
  $.Field({Static:false, Public:false}, "printerSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")); 
  $.Field({Static:false, Public:false}, "defaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
  $.Field({Static:false, Public:false}, "printController", $asm0B.TypeRef("System.Drawing.Printing.PrintController")); 
  $.Field({Static:false, Public:false}, "originAtMargins", $.Boolean); 
  $.Field({Static:false, Public:false}, "userSetPageSettings", $.Boolean); 
  $.Property({Static:false, Public:true }, "DefaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCdocumentPageSettingsDescr"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

  $.Property({Static:false, Public:true }, "DocumentName", $.String)
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["document"]; })
    .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCdocumentNameDescr"]; });

  $.Property({Static:false, Public:true }, "OriginAtMargins", $.Boolean)
    .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCoriginAtMarginsDescr"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "PrintController", $asm0B.TypeRef("System.Drawing.Printing.PrintController"))
    .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCprintControllerDescr"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "PrinterSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCprinterSettingsDescr"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

})
  .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PrintDocumentDesc"]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.ToolboxItemFilterAttribute"), function () { return ["System.Drawing.Printing"]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["PrintPage"]; })
  .Attribute($asm07.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["DocumentName"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterResolution", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1483B, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1483C, null, [
        $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x14835, $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_X", 
    $sig.make(0x14837, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Y", 
    $sig.make(0x14839, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Kind", 
    $sig.make(0x14836, null, [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_X", 
    $sig.make(0x14838, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Y", 
    $sig.make(0x1483A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x1483D, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "x", $.Int32); 
  $.Field({Static:false, Public:false}, "y", $.Int32); 
  $.Field({Static:false, Public:false}, "kind", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind")); 
  $.Property({Static:false, Public:true }, "Kind", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"));

  $.Property({Static:false, Public:true }, "X", $.Int32);

  $.Property({Static:false, Public:true }, "Y", $.Int32);

});

JSIL.MakeEnum(
  "System.Drawing.Printing.PrinterResolutionKind", true, {
    High: -4, 
    Medium: -3, 
    Low: -2, 
    Draft: -1, 
    Custom: 0
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterSettings", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14969, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Clone", 
    $sig.make(0x1496C, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDeviceContext", 
    $sig.make(0x1496D, $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateDeviceContext", 
    $sig.make(0x1496E, $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInformationContext", 
    $sig.make(0x1496F, $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "CreateInformationContext", 
    $sig.make(0x14970, $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
    $sig.make(0x14971, $asm0B.TypeRef("System.Drawing.Graphics"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
    $sig.make(0x14972, $asm0B.TypeRef("System.Drawing.Graphics"), [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
    $sig.make(0x14973, $asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
    $sig.make(0x14974, $asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings"), $.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreatePRINTDLG", 
    $sig.make(0x14976, $asm0B.TypeRef("System.Drawing.SafeNativeMethods/PRINTDLG"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "CreatePRINTDLGX86", 
    $sig.make(0x14975, $asm0B.TypeRef("System.Drawing.SafeNativeMethods/PRINTDLGX86"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "DeviceCapabilities", 
    $sig.make(0x14977, $.Int32, [
        $.Int16, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "FastDeviceCapabilities", 
    $sig.make(0x14978, $.Int32, [
        $.Int16, $asm06.TypeRef("System.IntPtr"), 
        $.Int32, $.String
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_CanDuplex", 
    $sig.make(0x1493A, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Collate", 
    $sig.make(0x14940, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Copies", 
    $sig.make(0x1493C, $.Int16, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_DefaultPageSettings", 
    $sig.make(0x14944, $asm0B.TypeRef("System.Drawing.Printing.PageSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_DriverName", 
    $sig.make(0x14946, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Duplex", 
    $sig.make(0x14947, $asm0B.TypeRef("System.Drawing.Printing.Duplex"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_FromPage", 
    $sig.make(0x14949, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_InstalledPrinters", 
    $sig.make(0x1494B, $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/StringCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefaultPrinter", 
    $sig.make(0x1494C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsPlotter", 
    $sig.make(0x1494D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
    $sig.make(0x1494E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_LandscapeAngle", 
    $sig.make(0x1494F, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaximumCopies", 
    $sig.make(0x14950, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MaximumPage", 
    $sig.make(0x14951, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MinimumPage", 
    $sig.make(0x14953, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_OutputPort", 
    $sig.make(0x14955, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PaperSizes", 
    $sig.make(0x14959, $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/PaperSizeCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Get_PaperSizes", 
    $sig.make(0x14983, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PaperSources", 
    $sig.make(0x1495A, $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/PaperSourceCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Get_PaperSources", 
    $sig.make(0x14984, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PrintDialogDisplayed", 
    $sig.make(0x1495B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrinterName", 
    $sig.make(0x14961, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "get_PrinterNameInternal", 
    $sig.make(0x14963, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrinterResolutions", 
    $sig.make(0x14965, $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/PrinterResolutionCollection"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Get_PrinterResolutions", 
    $sig.make(0x14985, $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")]), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrintFileName", 
    $sig.make(0x14957, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrintRange", 
    $sig.make(0x1495D, $asm0B.TypeRef("System.Drawing.Printing.PrintRange"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrintToFile", 
    $sig.make(0x1495F, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_SupportsColor", 
    $sig.make(0x14966, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_ToPage", 
    $sig.make(0x14967, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetDefaultPrinterName", 
    $sig.make(0x14979, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetDeviceCaps", 
    $sig.make(0x1497B, $.Int32, [$.Int32, $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHdevmode", 
    $sig.make(0x1497C, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHdevmode", 
    $sig.make(0x1497F, $asm06.TypeRef("System.IntPtr"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHdevmodeInternal", 
    $sig.make(0x1497D, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetHdevmodeInternal", 
    $sig.make(0x1497E, $asm06.TypeRef("System.IntPtr"), [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHdevnames", 
    $sig.make(0x14980, $asm06.TypeRef("System.IntPtr"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetModeField", 
    $sig.make(0x14981, $.Int16, [$asm0B.TypeRef("System.Drawing.Printing.ModeField"), $.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetModeField", 
    $sig.make(0x14982, $.Int16, [
        $asm0B.TypeRef("System.Drawing.Printing.ModeField"), $.Int16, 
        $asm06.TypeRef("System.IntPtr")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetOutputPort", 
    $sig.make(0x1497A, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDirectPrintingSupported", 
    $sig.make(0x1496A, $.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsDirectPrintingSupported", 
    $sig.make(0x1496B, $.Boolean, [$asm0B.TypeRef("System.Drawing.Image")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "ReadOneDEVNAME", 
    $sig.make(0x14986, $.String, [$asm06.TypeRef("System.IntPtr"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Collate", 
    $sig.make(0x14941, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Copies", 
    $sig.make(0x1493E, null, [$.Int16], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Duplex", 
    $sig.make(0x14948, null, [$asm0B.TypeRef("System.Drawing.Printing.Duplex")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_FromPage", 
    $sig.make(0x1494A, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MaximumPage", 
    $sig.make(0x14952, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_MinimumPage", 
    $sig.make(0x14954, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_OutputPort", 
    $sig.make(0x14956, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_PrintDialogDisplayed", 
    $sig.make(0x1495C, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrinterName", 
    $sig.make(0x14962, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "set_PrinterNameInternal", 
    $sig.make(0x14964, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrintFileName", 
    $sig.make(0x14958, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrintRange", 
    $sig.make(0x1495E, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintRange")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PrintToFile", 
    $sig.make(0x14960, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_ToPage", 
    $sig.make(0x14968, null, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetHdevmode", 
    $sig.make(0x14987, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "SetHdevnames", 
    $sig.make(0x14988, null, [$asm06.TypeRef("System.IntPtr")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x14989, $.String, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "WriteOneDEVNAME", 
    $sig.make(0x1498A, $.Int16, [
        $.String, $asm06.TypeRef("System.IntPtr"), 
        $.Int32
      ], [])
  );

  $.Constant({Static:true , Public:false}, "PADDING_IA64", 4); 
  $.Field({Static:false, Public:false}, "printerName", $.String); 
  $.Field({Static:false, Public:false}, "driverName", $.String); 
  $.Field({Static:false, Public:false}, "outputPort", $.String); 
  $.Field({Static:false, Public:false}, "printToFile", $.Boolean); 
  $.Field({Static:false, Public:false}, "printDialogDisplayed", $.Boolean); 
  $.Field({Static:false, Public:false}, "extrabytes", $.Int16); 
  $.Field({Static:false, Public:false}, "extrainfo", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Field({Static:false, Public:false}, "copies", $.Int16); 
  $.Field({Static:false, Public:false}, "duplex", $asm0B.TypeRef("System.Drawing.Printing.Duplex")); 
  $.Field({Static:false, Public:false}, "collate", $asm0B.TypeRef("System.Drawing.Printing.TriState")); 
  $.Field({Static:false, Public:false}, "defaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
  $.Field({Static:false, Public:false}, "fromPage", $.Int32); 
  $.Field({Static:false, Public:false}, "toPage", $.Int32); 
  $.Field({Static:false, Public:false}, "maxPage", $.Int32); 
  $.Field({Static:false, Public:false}, "minPage", $.Int32); 
  $.Field({Static:false, Public:false}, "printRange", $asm0B.TypeRef("System.Drawing.Printing.PrintRange")); 
  $.Field({Static:false, Public:false}, "devmodebytes", $.Int16); 
  $.Field({Static:false, Public:false}, "cachedDevmode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
  $.Property({Static:false, Public:true }, "CanDuplex", $.Boolean);

  $.Property({Static:false, Public:true }, "Copies", $.Int16);

  $.Property({Static:false, Public:true }, "Collate", $.Boolean);

  $.Property({Static:false, Public:true }, "DefaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"));

  $.Property({Static:false, Public:false}, "DriverName", $.String);

  $.Property({Static:false, Public:true }, "Duplex", $asm0B.TypeRef("System.Drawing.Printing.Duplex"));

  $.Property({Static:false, Public:true }, "FromPage", $.Int32);

  $.Property({Static:true , Public:true }, "InstalledPrinters", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/StringCollection"));

  $.Property({Static:false, Public:true }, "IsDefaultPrinter", $.Boolean);

  $.Property({Static:false, Public:true }, "IsPlotter", $.Boolean);

  $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

  $.Property({Static:false, Public:true }, "LandscapeAngle", $.Int32);

  $.Property({Static:false, Public:true }, "MaximumCopies", $.Int32);

  $.Property({Static:false, Public:true }, "MaximumPage", $.Int32);

  $.Property({Static:false, Public:true }, "MinimumPage", $.Int32);

  $.Property({Static:false, Public:false}, "OutputPort", $.String);

  $.Property({Static:false, Public:true }, "PrintFileName", $.String);

  $.Property({Static:false, Public:true }, "PaperSizes", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/PaperSizeCollection"));

  $.Property({Static:false, Public:true }, "PaperSources", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/PaperSourceCollection"));

  $.Property({Static:false, Public:false}, "PrintDialogDisplayed", $.Boolean);

  $.Property({Static:false, Public:true }, "PrintRange", $asm0B.TypeRef("System.Drawing.Printing.PrintRange"));

  $.Property({Static:false, Public:true }, "PrintToFile", $.Boolean);

  $.Property({Static:false, Public:true }, "PrinterName", $.String);

  $.Property({Static:false, Public:false}, "PrinterNameInternal", $.String);

  $.Property({Static:false, Public:true }, "PrinterResolutions", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings/PrinterResolutionCollection"));

  $.Property({Static:false, Public:true }, "SupportsColor", $.Boolean);

  $.Property({Static:false, Public:true }, "ToPage", $.Int32);

  $.ImplementInterfaces($asm06.TypeRef("System.ICloneable"))
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterSettings/PaperSizeCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A3F, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14A44, $.Int32, [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14A42, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x14A3A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14A3B, $asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x14A40, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x14A41, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_Count", 
    $sig.make(0x14A3C, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x14A3D, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x14A3E, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x14A43, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")])); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0B.TypeRef("System.Drawing.Printing.PaperSize"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterSettings/PaperSourceCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A2E, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14A33, $.Int32, [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14A31, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x14A29, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14A2A, $asm0B.TypeRef("System.Drawing.Printing.PaperSource"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x14A2F, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x14A30, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_Count", 
    $sig.make(0x14A2B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x14A2C, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x14A2D, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x14A32, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")])); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0B.TypeRef("System.Drawing.Printing.PaperSource"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterSettings/PrinterResolutionCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A1D, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14A22, $.Int32, [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14A20, null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x14A18, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14A19, $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"), [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x14A1E, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x14A1F, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_Count", 
    $sig.make(0x14A1A, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x14A1B, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x14A1C, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x14A21, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")])); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterSettings/StringCollection", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14A50, null, [$jsilcore.TypeRef("System.Array", [$.String])], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Add", 
    $sig.make(0x14A55, $.Int32, [$.String], [])
  )
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

  $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x14A53, null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Count", 
    $sig.make(0x14A4B, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Item", 
    $sig.make(0x14A4C, $.String, [$.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x14A51, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x14A52, null, [$asm06.TypeRef("System.Array"), $.Int32], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_Count", 
    $sig.make(0x14A4D, $.Int32, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x14A4E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x14A4F, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x14A54, $asm06.TypeRef("System.Collections.IEnumerator"), [], [])
  );

  $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.String])); 
  $.Property({Static:false, Public:true }, "Count", $.Int32);

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.Count", $.Int32);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $.Boolean);

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.ICollection"), $asm06.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterSettings/ArrayEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14AF8, null, [
        $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
        $.Int32
      ], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Current", 
    $sig.make(0x14AF7, $.Object, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x14AF9, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Reset", 
    $sig.make(0x14AFA, null, [], [])
  );

  $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.Object])); 
  $.Field({Static:false, Public:false}, "item", $.Object); 
  $.Field({Static:false, Public:false}, "index", $.Int32); 
  $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
  $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

  $.ImplementInterfaces($asm06.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeEnum(
  "System.Drawing.Printing.PrinterUnit", true, {
    Display: 0, 
    ThousandthsOfAnInch: 1, 
    HundredthsOfAMillimeter: 2, 
    TenthsOfAMillimeter: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.Printing.PrinterUnitConvert", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1485F, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x14860, $.Double, [
        $.Double, $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
        $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x14861, $.Int32, [
        $.Int32, $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
        $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x14862, $asm0B.TypeRef("System.Drawing.Point"), [
        $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
        $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x14863, $asm0B.TypeRef("System.Drawing.Size"), [
        $asm0B.TypeRef("System.Drawing.Size"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
        $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x14864, $asm0B.TypeRef("System.Drawing.Rectangle"), [
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
        $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "Convert", 
    $sig.make(0x14865, $asm0B.TypeRef("System.Drawing.Printing.Margins"), [
        $asm0B.TypeRef("System.Drawing.Printing.Margins"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
        $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
      ], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "UnitsPerDisplay", 
    $sig.make(0x14866, $.Double, [$asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")], [])
  );

});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.CancelEventArgs"), "System.Drawing.Printing.PrintEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1489A, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1489B, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintAction")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PrintAction", 
    $sig.make(0x14899, $asm0B.TypeRef("System.Drawing.Printing.PrintAction"), [], [])
  );

  $.Field({Static:false, Public:false}, "printAction", $asm0B.TypeRef("System.Drawing.Printing.PrintAction")); 
  $.Property({Static:false, Public:true }, "PrintAction", $asm0B.TypeRef("System.Drawing.Printing.PrintAction"));

});

JSIL.MakeDelegate("System.Drawing.Printing.PrintEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Security.CodeAccessPermission"), "System.Drawing.Printing.PrintingPermission", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14579, null, [$asm06.TypeRef("System.Security.Permissions.PermissionState")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1457B, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Copy", 
    $sig.make(0x14585, $asm06.TypeRef("System.Security.IPermission"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "FromXml", 
    $sig.make(0x14587, null, [$asm06.TypeRef("System.Security.SecurityElement")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Level", 
    $sig.make(0x14577, $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Intersect", 
    $sig.make(0x14581, $asm06.TypeRef("System.Security.IPermission"), [$asm06.TypeRef("System.Security.IPermission")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsSubsetOf", 
    $sig.make(0x14580, $.Boolean, [$asm06.TypeRef("System.Security.IPermission")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "IsUnrestricted", 
    $sig.make(0x1457E, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Level", 
    $sig.make(0x14578, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "ToXml", 
    $sig.make(0x14586, $asm06.TypeRef("System.Security.SecurityElement"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Union", 
    $sig.make(0x14583, $asm06.TypeRef("System.Security.IPermission"), [$asm06.TypeRef("System.Security.IPermission")], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "VerifyPrintingLevel", 
    $sig.make(0x1457C, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")], [])
  );

  $.Field({Static:false, Public:false}, "printingLevel", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")); 
  $.Property({Static:false, Public:true }, "Level", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"));

  $.ImplementInterfaces($asm06.TypeRef("System.Security.Permissions.IUnrestrictedPermission"))
});

JSIL.MakeClass($asm06.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), "System.Drawing.Printing.PrintingPermissionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14903, null, [$asm06.TypeRef("System.Security.Permissions.SecurityAction")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "CreatePermission", 
    $sig.make(0x14904, $asm06.TypeRef("System.Security.IPermission"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Level", 
    $sig.make(0x14901, $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Level", 
    $sig.make(0x14902, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")], [])
  );

  $.Field({Static:false, Public:false}, "level", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")); 
  $.Property({Static:false, Public:true }, "Level", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"));

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeEnum(
  "System.Drawing.Printing.PrintingPermissionLevel", true, {
    NoPrinting: 0, 
    SafePrinting: 1, 
    DefaultPrinting: 2, 
    AllPrinting: 3
  }, false
);

JSIL.MakeClass($asm06.TypeRef("System.EventArgs"), "System.Drawing.Printing.PrintPageEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x148A0, null, [
        $asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
        $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Printing.PageSettings")
      ], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "Dispose", 
    $sig.make(0x148A2, null, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Cancel", 
    $sig.make(0x14892, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Graphics", 
    $sig.make(0x14894, $asm0B.TypeRef("System.Drawing.Graphics"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_HasMorePages", 
    $sig.make(0x14895, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_MarginBounds", 
    $sig.make(0x14897, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageBounds", 
    $sig.make(0x14898, $asm0B.TypeRef("System.Drawing.Rectangle"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageSettings", 
    $sig.make(0x1489E, $asm0B.TypeRef("System.Drawing.Printing.PageSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_Cancel", 
    $sig.make(0x14893, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_HasMorePages", 
    $sig.make(0x14896, null, [$.Boolean], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "SetGraphics", 
    $sig.make(0x148A4, null, [$asm0B.TypeRef("System.Drawing.Graphics")], [])
  );

  $.Field({Static:false, Public:false}, "hasMorePages", $.Boolean); 
  $.Field({Static:false, Public:false}, "cancel", $.Boolean); 
  $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "marginBounds", $asm0B.TypeRef("System.Drawing.Rectangle")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "pageBounds", $asm0B.TypeRef("System.Drawing.Rectangle")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "pageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
  $.Property({Static:false, Public:true }, "Cancel", $.Boolean);

  $.Property({Static:false, Public:true }, "Graphics", $asm0B.TypeRef("System.Drawing.Graphics"));

  $.Property({Static:false, Public:true }, "HasMorePages", $.Boolean);

  $.Property({Static:false, Public:true }, "MarginBounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

  $.Property({Static:false, Public:true }, "PageBounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

  $.Property({Static:false, Public:true }, "PageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"));

});

JSIL.MakeDelegate("System.Drawing.Printing.PrintPageEventHandler", true, []);

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.PrintPreviewGraphics", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x14991, null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_VisibleClipBounds", 
    $sig.make(0x14990, $asm0B.TypeRef("System.Drawing.RectangleF"), [], [])
  );

  $.Field({Static:false, Public:false}, "printPageEventArgs", $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")); 
  $.Field({Static:false, Public:false}, "printDocument", $asm0B.TypeRef("System.Drawing.Printing.PrintDocument")); 
  $.Property({Static:false, Public:true }, "VisibleClipBounds", $asm0B.TypeRef("System.Drawing.RectangleF"));

});

JSIL.MakeEnum(
  "System.Drawing.Printing.PrintRange", true, {
    AllPages: 0, 
    Selection: 1, 
    SomePages: 2, 
    CurrentPage: 4194304
  }, false
);

JSIL.MakeClass($asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs"), "System.Drawing.Printing.QueryPageSettingsEventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1490D, null, [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_PageSettings", 
    $sig.make(0x1490B, $asm0B.TypeRef("System.Drawing.Printing.PageSettings"), [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "set_PageSettings", 
    $sig.make(0x1490C, null, [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")], [])
  );

  $.Field({Static:false, Public:false}, "pageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
  $.Property({Static:false, Public:true }, "PageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"));

});

JSIL.MakeDelegate("System.Drawing.Printing.QueryPageSettingsEventHandler", true, []);

JSIL.MakeStruct($asm06.TypeRef("System.ValueType"), "System.Drawing.Printing.TriState", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x149C9, null, [$.Byte], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x149CC, $.Boolean, [$.Object], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
    $sig.make(0x149C5, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsFalse", 
    $sig.make(0x149C6, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsNotDefault", 
    $sig.make(0x149C7, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_IsTrue", 
    $sig.make(0x149C8, $.Boolean, [], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x149CD, $.Int32, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x149CA, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0x149CF, $.Boolean, [$.Type], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x149CE, $.Type, [$.Boolean], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x149CB, $.Boolean, [$.Type, $.Type], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "toString", 
    $sig.make(0x149D0, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "value", $.Byte); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "False", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "True", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2AA6A, null, [], []), 
    function TriState__cctor () {
      $thisType.Default = new $thisType();
      $thisType.False = new $thisType();
      $thisType.True = new $thisType();
    }
  );

  $.Property({Static:false, Public:true }, "IsDefault", $.Boolean);

  $.Property({Static:false, Public:true }, "IsFalse", $.Boolean);

  $.Property({Static:false, Public:true }, "IsNotDefault", $.Boolean);

  $.Property({Static:false, Public:true }, "IsTrue", $.Boolean);

});

JSIL.MakeStaticClass("FXAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
});

JSIL.MakeStaticClass("ThisAssembly", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "Title", "System.Drawing.dll"); 
  $.Constant({Static:true , Public:false}, "Description", "System.Drawing.dll"); 
  $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Drawing.dll"); 
  $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
  $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
  $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.282"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
  $.Constant({Static:true , Public:false}, "BuildRevisionStr", "282"); 
  $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
});

JSIL.MakeStaticClass("AssemblyRef", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
  $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
  $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
  $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
  $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
});

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Drawing.SRDescriptionAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x148B5, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:true }, "get_Description", 
    $sig.make(0x148B2, $.String, [], [])
  );

  $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
  $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm07.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Drawing.SRCategoryAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x148F9, null, [$.String], [])
  );

  $.ExternalMethod({Static:false, Public:false}, "GetLocalizedString", 
    $sig.make(0x148FA, $.String, [$.String], [])
  );

})
  .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.$Flags(
        "All", "Assembly", "Class", "Constructor", 
        "Delegate", "Enum", "Event", "Field", 
        "GenericParameter", "Interface", "Method", "Module", 
        "Parameter", "Property", "ReturnValue", "Struct"
    )]; });

JSIL.MakeClass($asm06.TypeRef("System.Object"), "System.Drawing.SR", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.ExternalMethod({Static:false, Public:false}, ".ctor", 
    $sig.make(0x14067, null, [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
    $sig.make(0x14064, $asm06.TypeRef("System.Globalization.CultureInfo"), [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
    $sig.make(0x14066, $asm06.TypeRef("System.Resources.ResourceManager"), [], [])
  );

  $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
    $sig.make(0x14068, $.Type, [], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetObject", 
    $sig.make(0x1406D, $.Object, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x14069, $.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x1406A, $.String, [$.String], [])
  );

  $.ExternalMethod({Static:true , Public:true }, "GetString", 
    $sig.make(0x1406C, $.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
  );

  $.Constant({Static:true , Public:false}, "CantTellPrinterName", "CantTellPrinterName"); 
  $.Constant({Static:true , Public:false}, "CantChangeImmutableObjects", "CantChangeImmutableObjects"); 
  $.Constant({Static:true , Public:false}, "CantMakeIconTransparent", "CantMakeIconTransparent"); 
  $.Constant({Static:true , Public:false}, "ColorNotSystemColor", "ColorNotSystemColor"); 
  $.Constant({Static:true , Public:false}, "DotNET_ComponentType", "DotNET_ComponentType"); 
  $.Constant({Static:true , Public:false}, "GdiplusAborted", "GdiplusAborted"); 
  $.Constant({Static:true , Public:false}, "GdiplusAccessDenied", "GdiplusAccessDenied"); 
  $.Constant({Static:true , Public:false}, "GdiplusCannotCreateGraphicsFromIndexedPixelFormat", "GdiplusCannotCreateGraphicsFromIndexedPixelFormat"); 
  $.Constant({Static:true , Public:false}, "GdiplusCannotSetPixelFromIndexedPixelFormat", "GdiplusCannotSetPixelFromIndexedPixelFormat"); 
  $.Constant({Static:true , Public:false}, "GdiplusDestPointsInvalidParallelogram", "GdiplusDestPointsInvalidParallelogram"); 
  $.Constant({Static:true , Public:false}, "GdiplusDestPointsInvalidLength", "GdiplusDestPointsInvalidLength"); 
  $.Constant({Static:true , Public:false}, "GdiplusFileNotFound", "GdiplusFileNotFound"); 
  $.Constant({Static:true , Public:false}, "GdiplusFontFamilyNotFound", "GdiplusFontFamilyNotFound"); 
  $.Constant({Static:true , Public:false}, "GdiplusFontStyleNotFound", "GdiplusFontStyleNotFound"); 
  $.Constant({Static:true , Public:false}, "GdiplusGenericError", "GdiplusGenericError"); 
  $.Constant({Static:true , Public:false}, "GdiplusInsufficientBuffer", "GdiplusInsufficientBuffer"); 
  $.Constant({Static:true , Public:false}, "GdiplusInvalidParameter", "GdiplusInvalidParameter"); 
  $.Constant({Static:true , Public:false}, "GdiplusInvalidRectangle", "GdiplusInvalidRectangle"); 
  $.Constant({Static:true , Public:false}, "GdiplusInvalidSize", "GdiplusInvalidSize"); 
  $.Constant({Static:true , Public:false}, "GdiplusOutOfMemory", "GdiplusOutOfMemory"); 
  $.Constant({Static:true , Public:false}, "GdiplusNotImplemented", "GdiplusNotImplemented"); 
  $.Constant({Static:true , Public:false}, "GdiplusNotInitialized", "GdiplusNotInitialized"); 
  $.Constant({Static:true , Public:false}, "GdiplusNotTrueTypeFont", "GdiplusNotTrueTypeFont"); 
  $.Constant({Static:true , Public:false}, "GdiplusNotTrueTypeFont_NoName", "GdiplusNotTrueTypeFont_NoName"); 
  $.Constant({Static:true , Public:false}, "GdiplusObjectBusy", "GdiplusObjectBusy"); 
  $.Constant({Static:true , Public:false}, "GdiplusOverflow", "GdiplusOverflow"); 
  $.Constant({Static:true , Public:false}, "GdiplusPropertyNotFoundError", "GdiplusPropertyNotFoundError"); 
  $.Constant({Static:true , Public:false}, "GdiplusPropertyNotSupportedError", "GdiplusPropertyNotSupportedError"); 
  $.Constant({Static:true , Public:false}, "GdiplusUnknown", "GdiplusUnknown"); 
  $.Constant({Static:true , Public:false}, "GdiplusUnknownImageFormat", "GdiplusUnknownImageFormat"); 
  $.Constant({Static:true , Public:false}, "GdiplusUnsupportedGdiplusVersion", "GdiplusUnsupportedGdiplusVersion"); 
  $.Constant({Static:true , Public:false}, "GdiplusWrongState", "GdiplusWrongState"); 
  $.Constant({Static:true , Public:false}, "GlobalAssemblyCache", "GlobalAssemblyCache"); 
  $.Constant({Static:true , Public:false}, "GraphicsBufferCurrentlyBusy", "GraphicsBufferCurrentlyBusy"); 
  $.Constant({Static:true , Public:false}, "GraphicsBufferQueryFail", "GraphicsBufferQueryFail"); 
  $.Constant({Static:true , Public:false}, "ToolboxItemLocked", "ToolboxItemLocked"); 
  $.Constant({Static:true , Public:false}, "ToolboxItemInvalidPropertyType", "ToolboxItemInvalidPropertyType"); 
  $.Constant({Static:true , Public:false}, "ToolboxItemValueNotSerializable", "ToolboxItemValueNotSerializable"); 
  $.Constant({Static:true , Public:false}, "ToolboxItemInvalidKey", "ToolboxItemInvalidKey"); 
  $.Constant({Static:true , Public:false}, "IllegalState", "IllegalState"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsColorBlendNotSet", "InterpolationColorsColorBlendNotSet"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsCommon", "InterpolationColorsCommon"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsInvalidColorBlendObject", "InterpolationColorsInvalidColorBlendObject"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsInvalidStartPosition", "InterpolationColorsInvalidStartPosition"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsInvalidEndPosition", "InterpolationColorsInvalidEndPosition"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsLength", "InterpolationColorsLength"); 
  $.Constant({Static:true , Public:false}, "InterpolationColorsLengthsDiffer", "InterpolationColorsLengthsDiffer"); 
  $.Constant({Static:true , Public:false}, "InvalidArgument", "InvalidArgument"); 
  $.Constant({Static:true , Public:false}, "InvalidBoundArgument", "InvalidBoundArgument"); 
  $.Constant({Static:true , Public:false}, "InvalidClassName", "InvalidClassName"); 
  $.Constant({Static:true , Public:false}, "InvalidColor", "InvalidColor"); 
  $.Constant({Static:true , Public:false}, "InvalidDashPattern", "InvalidDashPattern"); 
  $.Constant({Static:true , Public:false}, "InvalidEx2BoundArgument", "InvalidEx2BoundArgument"); 
  $.Constant({Static:true , Public:false}, "InvalidFrame", "InvalidFrame"); 
  $.Constant({Static:true , Public:false}, "InvalidGDIHandle", "InvalidGDIHandle"); 
  $.Constant({Static:true , Public:false}, "InvalidImage", "InvalidImage"); 
  $.Constant({Static:true , Public:false}, "InvalidLowBoundArgumentEx", "InvalidLowBoundArgumentEx"); 
  $.Constant({Static:true , Public:false}, "InvalidPermissionLevel", "InvalidPermissionLevel"); 
  $.Constant({Static:true , Public:false}, "InvalidPermissionState", "InvalidPermissionState"); 
  $.Constant({Static:true , Public:false}, "InvalidPictureType", "InvalidPictureType"); 
  $.Constant({Static:true , Public:false}, "InvalidPrinterException_InvalidPrinter", "InvalidPrinterException_InvalidPrinter"); 
  $.Constant({Static:true , Public:false}, "InvalidPrinterException_NoDefaultPrinter", "InvalidPrinterException_NoDefaultPrinter"); 
  $.Constant({Static:true , Public:false}, "InvalidPrinterHandle", "InvalidPrinterHandle"); 
  $.Constant({Static:true , Public:false}, "ValidRangeX", "ValidRangeX"); 
  $.Constant({Static:true , Public:false}, "ValidRangeY", "ValidRangeY"); 
  $.Constant({Static:true , Public:false}, "NativeHandle0", "NativeHandle0"); 
  $.Constant({Static:true , Public:false}, "NoDefaultPrinter", "NoDefaultPrinter"); 
  $.Constant({Static:true , Public:false}, "NotImplemented", "NotImplemented"); 
  $.Constant({Static:true , Public:false}, "PDOCbeginPrintDescr", "PDOCbeginPrintDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCdocumentNameDescr", "PDOCdocumentNameDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCdocumentPageSettingsDescr", "PDOCdocumentPageSettingsDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCendPrintDescr", "PDOCendPrintDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCoriginAtMarginsDescr", "PDOCoriginAtMarginsDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCprintControllerDescr", "PDOCprintControllerDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCprintPageDescr", "PDOCprintPageDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCprinterSettingsDescr", "PDOCprinterSettingsDescr"); 
  $.Constant({Static:true , Public:false}, "PDOCqueryPageSettingsDescr", "PDOCqueryPageSettingsDescr"); 
  $.Constant({Static:true , Public:false}, "PrintDocumentDesc", "PrintDocumentDesc"); 
  $.Constant({Static:true , Public:false}, "PrintingPermissionBadXml", "PrintingPermissionBadXml"); 
  $.Constant({Static:true , Public:false}, "PrintingPermissionAttributeInvalidPermissionLevel", "PrintingPermissionAttributeInvalidPermissionLevel"); 
  $.Constant({Static:true , Public:false}, "PropertyValueInvalidEntry", "PropertyValueInvalidEntry"); 
  $.Constant({Static:true , Public:false}, "PSizeNotCustom", "PSizeNotCustom"); 
  $.Constant({Static:true , Public:false}, "ResourceNotFound", "ResourceNotFound"); 
  $.Constant({Static:true , Public:false}, "TargetNotPrintingPermission", "TargetNotPrintingPermission"); 
  $.Constant({Static:true , Public:false}, "TextParseFailedFormat", "TextParseFailedFormat"); 
  $.Constant({Static:true , Public:false}, "TriStateCompareError", "TriStateCompareError"); 
  $.Constant({Static:true , Public:false}, "toStringIcon", "toStringIcon"); 
  $.Constant({Static:true , Public:false}, "toStringNone", "toStringNone"); 
  $.Constant({Static:true , Public:false}, "DCTypeInvalid", "DCTypeInvalid"); 
  $.Field({Static:true , Public:false}, "loader", $.Type); 
  $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
  $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

});

