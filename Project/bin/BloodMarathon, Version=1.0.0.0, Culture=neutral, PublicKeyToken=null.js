/* Generated by JSIL v0.6.0 build 23610. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("BloodMarathon, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("BloodMarathon");
JSIL.MakeClass($asm06.TypeRef("System.Object"), "BloodMarathon.Gravestone", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2A, null, [], []), 
    function Gravestone__ctor () {
    }
  );

});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "BloodMarathon.SpriteAnimation", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x11, null, [], []), 
    function SpriteAnimation__ctor () {
      this.Position = new ($T00())(0, 0);
      this.FrameLenght = $T01().FromSeconds(1).MemberwiseClone();
      this.CurrentFrameTime = $T01().FromSeconds(1).MemberwiseClone();
    }
  );

  $.Method({Static:false, Public:true }, "Draw", 
    $sig.make(0x10, null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
    function SpriteAnimation_Draw (theSpriteBatch) {
      var tileWidth = ((this.mSpriteTexture.get_Width() / this.Columns) | 0);
      var tileHeight = ((this.mSpriteTexture.get_Height() / this.Rows) | 0);
      var x = ((((((this.CurrentFrameTime.get_TotalMilliseconds() / this.FrameLenght.get_TotalMilliseconds()) % this.FrameLenght.get_TotalMilliseconds())) | 0) % this.Columns) | 0);
      theSpriteBatch.Draw(this.mSpriteTexture, this.Position, new ($T04())(((tileWidth * x) | 0), ((tileHeight * this.CurrentAnimation) | 0), tileWidth, tileHeight), $T05().get_White());
    }
  );

  $.Method({Static:false, Public:true }, "LoadContent", 
    $sig.make(0xE, null, [
        $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $.String, 
        $.Int32, $.Int32, 
        $asm06.TypeRef("System.TimeSpan")
      ], []), 
    function SpriteAnimation_LoadContent (game, textureName, rows, columns, frameLenght) {
      this.mSpriteTexture = game.Load$b1($T08())(textureName);
      this.Rows = rows;
      this.Columns = columns;
      this.FrameLenght = frameLenght.MemberwiseClone();
    }
  );

  $.Method({Static:false, Public:true }, "Update", 
    $sig.make(0xF, null, [
        $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
      ], []), 
    function SpriteAnimation_Update (theGameTime, theSpeed, theDirection) {
      this.CurrentFrameTime = $T01().op_Addition(this.CurrentFrameTime, theGameTime.get_ElapsedGameTime()).MemberwiseClone();
      this.Position = $T00().op_Addition(this.Position, $T00().op_MultiplyScalar(
          $T00().op_Multiply(theDirection, theSpeed), 
          theGameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
    }
  );

  $.Field({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mSpriteTexture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
  $.Field({Static:false, Public:false}, "Rows", $.Int32); 
  $.Field({Static:false, Public:false}, "Columns", $.Int32); 
  $.Field({Static:false, Public:true }, "CurrentAnimation", $.Int32); 
  $.Field({Static:false, Public:false}, "FrameLenght", $asm06.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false}, "CurrentFrameTime", $asm06.TypeRef("System.TimeSpan")); 
});

JSIL.MakeClass($asm00.TypeRef("BloodMarathon.SpriteAnimation"), "BloodMarathon.P1", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BloodMarathon.P1_State)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BloodMarathon.SpriteAnimation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x45D, null, [], []), 
    function P1__ctor () {
      this.mCurrentState = $T00().Walking;
      this.mDirection = $T01().get_Zero().MemberwiseClone();
      this.mSpeed = $T01().get_Zero().MemberwiseClone();
      this.AnimationSpeed = 100;
      $T02().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "LoadContent", 
    $sig.make(0x458, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
    function P1_LoadContent (theContentManger) {
      this.Position = new ($T01())(450, 210);
      this.LoadContent(
        theContentManger, 
        "VampireAnimationP1", 
        2, 
        6, 
        $T04().FromMilliseconds(this.AnimationSpeed).MemberwiseClone()
      );
      this.CurrentAnimation = 1;
    }
  );

  $.Method({Static:false, Public:true }, "Update", 
    $sig.make(0x45A, null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
    function P1_Update (theGameTime) {
      var aCurrentKeyboardState = $T07().GetState();
      this.UpdateMovement(aCurrentKeyboardState.MemberwiseClone());
      this.mPreviousKeyboardState = aCurrentKeyboardState.MemberwiseClone();
      this.Update(theGameTime, this.mSpeed.MemberwiseClone(), this.mDirection.MemberwiseClone());
    }
  );

  $.Method({Static:false, Public:false}, "UpdateMovement", 
    $sig.make(0x45B, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")], []), 
    function P1_UpdateMovement (aCurrentKeyboardState) {
      if (this.mCurrentState === $T00().Walking) {
        this.mSpeed = $T01().get_Zero().MemberwiseClone();
        this.mDirection = $T01().get_Zero().MemberwiseClone();
        if (!((this.Position.Y > 210) || !aCurrentKeyboardState.IsKeyDown($T08().W))) {
          this.mSpeed.Y -= 200;
          this.AnimationSpeed = 100;
          this.CurrentAnimation = 0;
        }
        if (this.Position.Y >= 210) {
          this.AnimationSpeed = 100;
          this.CurrentAnimation = 1;
        }
      }
    }
  );

  $.Constant({Static:true , Public:false}, "PLAYER1_ASSETNAME", "VampireAnimationP1"); 
  $.Constant({Static:true , Public:false}, "START_POSITION_X", 450); 
  $.Constant({Static:true , Public:false}, "START_POSITION_Y", 210); 
  $.Constant({Static:true , Public:false}, "PLAYER1_SPEED", 200); 
  $.Field({Static:false, Public:false}, "mCurrentState", $asm00.TypeRef("BloodMarathon.P1/State")); 
  $.Field({Static:false, Public:false}, "mDirection", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mSpeed", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mPreviousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
  $.Field({Static:false, Public:false}, "AnimationSpeed", $.Int32); 
});

JSIL.MakeEnum(
  "BloodMarathon.P1/State", false, {
    Walking: 0
  }, false
);

JSIL.MakeClass($asm00.TypeRef("BloodMarathon.SpriteAnimation"), "BloodMarathon.Priest2", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BloodMarathon.Priest2_State)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BloodMarathon.SpriteAnimation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEC, null, [], []), 
    function Priest2__ctor () {
      this.mCurrentState = $T00().Walking;
      this.mDirection = $T01().get_Zero().MemberwiseClone();
      this.mSpeed = $T01().get_Zero().MemberwiseClone();
      $T02().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "LoadContent", 
    $sig.make(0xE7, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
    function Priest2_LoadContent (theContentManger) {
      this.Position = new ($T01())(0, 500);
      this.LoadContent(
        theContentManger, 
        "SpriteSheetPriest", 
        1, 
        4, 
        $T04().FromMilliseconds(80).MemberwiseClone()
      );
      this.CurrentAnimation = 0;
    }
  );

  $.Method({Static:false, Public:true }, "Update", 
    $sig.make(0xE8, null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
    function Priest2_Update (theGameTime) {
      var aCurrentKeyboardState = $T07().GetState();
      this.UpdateMovement(aCurrentKeyboardState);
      this.mPreviousKeyboardState = aCurrentKeyboardState.MemberwiseClone();
      this.Update(theGameTime, this.mSpeed.MemberwiseClone(), this.mDirection.MemberwiseClone());
    }
  );

  $.Method({Static:false, Public:false}, "UpdateMovement", 
    $sig.make(0xEA, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")], []), 
    function Priest2_UpdateMovement (aCurrentKeyboardState) {
      if (this.mCurrentState === $T00().Walking) {
        this.mSpeed = $T01().get_Zero().MemberwiseClone();
        this.mDirection = $T01().get_Zero().MemberwiseClone();
      }
    }
  );

  $.Constant({Static:true , Public:false}, "PRIEST2_ASSETNAME", "SpriteSheetPriest"); 
  $.Constant({Static:true , Public:false}, "START_POSITION_X", 0); 
  $.Constant({Static:true , Public:false}, "START_POSITION_Y", 500); 
  $.Constant({Static:true , Public:false}, "PRIEST2_SPEED", 200); 
  $.Field({Static:false, Public:false}, "mCurrentState", $asm00.TypeRef("BloodMarathon.Priest2/State")); 
  $.Field({Static:false, Public:false}, "mDirection", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mSpeed", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mPreviousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
});

JSIL.MakeEnum(
  "BloodMarathon.Priest2/State", false, {
    Walking: 0
  }, false
);

JSIL.MakeClass($asm00.TypeRef("BloodMarathon.SpriteAnimation"), "BloodMarathon.Priest1", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BloodMarathon.Priest1_State)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BloodMarathon.SpriteAnimation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC97, null, [], []), 
    function Priest1__ctor () {
      this.mCurrentState = $T00().Walking;
      this.mDirection = $T01().get_Zero().MemberwiseClone();
      this.mSpeed = $T01().get_Zero().MemberwiseClone();
      $T02().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "LoadContent", 
    $sig.make(0xC90, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
    function Priest1_LoadContent (theContentManger) {
      this.Position = new ($T01())(0, 150);
      this.LoadContent(
        theContentManger, 
        "SpriteSheetPriest", 
        1, 
        4, 
        $T04().FromMilliseconds(80).MemberwiseClone()
      );
      this.CurrentAnimation = 0;
    }
  );

  $.Method({Static:false, Public:true }, "Update", 
    $sig.make(0xC93, null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
    function Priest1_Update (theGameTime) {
      var aCurrentKeyboardState = $T07().GetState();
      this.UpdateMovement(aCurrentKeyboardState);
      this.mPreviousKeyboardState = aCurrentKeyboardState.MemberwiseClone();
      this.Update(theGameTime, this.mSpeed.MemberwiseClone(), this.mDirection.MemberwiseClone());
    }
  );

  $.Method({Static:false, Public:false}, "UpdateMovement", 
    $sig.make(0xC94, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")], []), 
    function Priest1_UpdateMovement (aCurrentKeyboardState) {
      if (this.mCurrentState === $T00().Walking) {
        this.mSpeed = $T01().get_Zero().MemberwiseClone();
        this.mDirection = $T01().get_Zero().MemberwiseClone();
      }
    }
  );

  $.Constant({Static:true , Public:false}, "PRIEST1_ASSETNAME", "SpriteSheetPriest"); 
  $.Constant({Static:true , Public:false}, "START_POSITION_X", 0); 
  $.Constant({Static:true , Public:false}, "START_POSITION_Y", 150); 
  $.Constant({Static:true , Public:false}, "PRIEST1_SPEED", 200); 
  $.Field({Static:false, Public:false}, "mCurrentState", $asm00.TypeRef("BloodMarathon.Priest1/State")); 
  $.Field({Static:false, Public:false}, "mDirection", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mSpeed", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mPreviousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
});

JSIL.MakeEnum(
  "BloodMarathon.Priest1/State", false, {
    Walking: 0
  }, false
);

JSIL.MakeClass($asm00.TypeRef("BloodMarathon.SpriteAnimation"), "BloodMarathon.P2", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BloodMarathon.P2_State)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BloodMarathon.SpriteAnimation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6F, null, [], []), 
    function P2__ctor () {
      this.mCurrentState = $T00().Walking;
      this.mDirection = $T01().get_Zero().MemberwiseClone();
      this.mSpeed = $T01().get_Zero().MemberwiseClone();
      this.AnimationSpeed = 100;
      $T02().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "LoadContent", 
    $sig.make(0x6C, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
    function P2_LoadContent (theContentManger) {
      this.Position = new ($T01())(450, 560);
      this.LoadContent(
        theContentManger, 
        "SpriteSheetP2V2", 
        3, 
        12, 
        $T04().FromMilliseconds(this.AnimationSpeed).MemberwiseClone()
      );
      this.CurrentAnimation = 1;
    }
  );

  $.Method({Static:false, Public:true }, "Update", 
    $sig.make(0x6D, null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
    function P2_Update (theGameTime) {
      var aCurrentKeyboardState = $T07().GetState();
      this.UpdateMovement(aCurrentKeyboardState.MemberwiseClone());
      this.mPreviousKeyboardState = aCurrentKeyboardState.MemberwiseClone();
      this.Update(theGameTime, this.mSpeed.MemberwiseClone(), this.mDirection.MemberwiseClone());
    }
  );

  $.Method({Static:false, Public:false}, "UpdateMovement", 
    $sig.make(0x6E, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")], []), 
    function P2_UpdateMovement (aCurrentKeyboardState) {
      if (this.mCurrentState === $T00().Walking) {
        this.mSpeed = $T01().get_Zero().MemberwiseClone();
        this.mDirection = $T01().get_Zero().MemberwiseClone();
        if (!((this.Position.Y > 560) || !aCurrentKeyboardState.IsKeyDown($T08().Up))) {
          this.mSpeed.Y -= 200;
          this.AnimationSpeed = 100;
          this.CurrentAnimation = 0;
        }
        if (this.Position.Y >= 560) {
          this.AnimationSpeed = 100;
          this.CurrentAnimation = 1;
        }
      }
    }
  );

  $.Constant({Static:true , Public:false}, "PLAYER2_ASSETNAME", "SpriteSheetP2V2"); 
  $.Constant({Static:true , Public:false}, "START_POSITION_X", 450); 
  $.Constant({Static:true , Public:false}, "START_POSITION_Y", 560); 
  $.Constant({Static:true , Public:false}, "PLAYER2_SPEED", 200); 
  $.Field({Static:false, Public:false}, "mCurrentState", $asm00.TypeRef("BloodMarathon.P2/State")); 
  $.Field({Static:false, Public:false}, "mDirection", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mSpeed", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mPreviousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
  $.Field({Static:false, Public:false}, "AnimationSpeed", $.Int32); 
});

JSIL.MakeEnum(
  "BloodMarathon.P2/State", false, {
    Walking: 0
  }, false
);

JSIL.MakeStaticClass("BloodMarathon.Program", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BloodMarathon.Game1)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.IDisposable)) ();
  };

  $.Method({Static:true , Public:false}, "Main", 
    $sig.make(0x2E4F, null, [$jsilcore.TypeRef("System.Array", [$.String])], []), 
    function Program_Main (args) {
      var game = new ($T01())();
      try {
        game.Run();
      } finally {
        if (game !== null) {
          game.IDisposable_Dispose();
        }
      }
    }
  );

});

JSIL.MakeClass($asm02.TypeRef("Microsoft.Xna.Framework.Game"), "BloodMarathon.Game1", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.BloodMarathon.Sprite)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.BloodMarathon.SpriteAnimation)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.BloodMarathon.P1)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.BloodMarathon.P2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.BloodMarathon.Priest2)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.BloodMarathon.Priest1)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7C, null, [], []), 
    function Game1__ctor () {
      this.velocity = 0;
      this.velocity2 = 0;
      this.g = 0.49099999666213989;
      this.gameSpeed = 150;
      this.SP1 = 0;
      this.SP2 = 0;
      $T00().prototype._ctor.call(this);
      this.graphics = new ($T01())(this);
      this.graphics.set_PreferredBackBufferHeight(700);
      this.graphics.set_PreferredBackBufferWidth(1000);
      this.get_Content().set_RootDirectory("Content");
    }
  );

  $.Method({Static:false, Public:false}, "Draw", 
    $sig.make(0x86, null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
    function Game1_Draw (gameTime) {
      this.get_GraphicsDevice().InternalClear($T04().get_CornflowerBlue());
      this.spriteBatch.Begin();
      this.mBackgroundOne.Draw(this.spriteBatch);
      this.mBackgroundTwo.Draw(this.spriteBatch);
      this.mPlayer1Sprite.Draw(this.spriteBatch);
      this.mPlayer2Sprite.Draw(this.spriteBatch);
      this.graveStone.Draw(this.spriteBatch);
      this.graveStone2.Draw(this.spriteBatch);
      this.graveStone3.Draw(this.spriteBatch);
      this.graveStone4.Draw(this.spriteBatch);
      this.huntingPriest1.Draw(this.spriteBatch);
      this.huntingPriest2.Draw(this.spriteBatch);
      if (this.mPlayer2Sprite.Position.X < (this.huntingPriest2.Position.X + 80)) {
        this.P1WIN.Draw(this.spriteBatch);
      }
      if (this.mPlayer1Sprite.Position.X < (this.huntingPriest1.Position.X + 80)) {
        this.P2WIN.Draw(this.spriteBatch);
      }
      this.spriteBatch.End();
      $T00().prototype.Draw.call(this, gameTime);
    }
  );

  $.Method({Static:false, Public:false}, "Initialize", 
    $sig.make(0x7D, null, [], []), 
    function Game1_Initialize () {
      this.mPlayer1Sprite = new ($T08())();
      this.mPlayer2Sprite = new ($T09())();
      this.huntingPriest2 = new ($T0A())();
      this.huntingPriest1 = new ($T0B())();
      this.set_IsMouseVisible(true);
      $T00().prototype.Initialize.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "LoadContent", 
    $sig.make(0x7F, null, [], []), 
    function Game1_LoadContent () {
      this.spriteBatch = new ($T05())(this.get_GraphicsDevice());
      this.mPlayer1Sprite.LoadContent(this.get_Content());
      this.mPlayer2Sprite.LoadContent(this.get_Content());
      this.huntingPriest2.LoadContent(this.get_Content());
      this.huntingPriest1.LoadContent(this.get_Content());
      this.mBackgroundOne = new ($T06())();
      this.mBackgroundOne.LoadContent(this.get_Content(), "Map1");
      this.mBackgroundOne.Position = new ($T0C())(0, 0);
      this.mBackgroundOne.set_Scale(1);
      this.mBackgroundTwo = new ($T06())();
      this.mBackgroundTwo.LoadContent(this.get_Content(), "Map1 - Kopia");
      this.mBackgroundTwo.Position = new ($T0C())((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width), 0);
      this.mBackgroundTwo.set_Scale(1);
      this.graveStone = new ($T06())();
      this.graveStone.LoadContent(this.get_Content(), "GraveyardStone");
      this.graveStone.Position = new ($T0C())(((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 2110), 625);
      this.graveStone.set_Scale(1);
      this.graveStone2 = new ($T06())();
      this.graveStone2.LoadContent(this.get_Content(), "GraveyardStone");
      this.graveStone2.Position = new ($T0C())(((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 1095), 625);
      this.graveStone2.set_Scale(1);
      this.graveStone3 = new ($T06())();
      this.graveStone3.LoadContent(this.get_Content(), "GraveyardStone");
      this.graveStone3.Position = new ($T0C())(((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 2110), 275);
      this.graveStone3.set_Scale(1);
      this.graveStone4 = new ($T06())();
      this.graveStone4.LoadContent(this.get_Content(), "GraveyardStone");
      this.graveStone4.Position = new ($T0C())(((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 1095), 275);
      this.graveStone4.set_Scale(1);
      this.P1WIN = new ($T06())();
      this.P1WIN.LoadContent(this.get_Content(), "P1Win");
      this.P2WIN = new ($T06())();
      this.P2WIN.LoadContent(this.get_Content(), "P2Win");
    }
  );

  $.Method({Static:false, Public:false}, "UnloadContent", 
    $sig.make(0x81, null, [], []), 
    function Game1_UnloadContent () {
    }
  );

  $.Method({Static:false, Public:false}, "Update", 
    $sig.make(0x85, null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
    function Game1_Update (gameTime) {
      var keyboard = $T0E().GetState().MemberwiseClone();
      if (keyboard.IsKeyDown($T0F().Escape)) {
        this.Exit();
      }
      if (keyboard.IsKeyDown($T0F().F11)) {
        this.graphics.set_IsFullScreen(true);
      }
      this.mPlayer1Sprite.Update(gameTime);
      this.mPlayer2Sprite.Update(gameTime);
      this.huntingPriest2.Update(gameTime);
      this.huntingPriest1.Update(gameTime);
      this.SP1 += 0.5;
      this.SP2 += 0.5;
      if (this.mBackgroundOne.Position.X < -this.mBackgroundOne.Size.Width) {
        this.mBackgroundOne.Position.X = (this.mBackgroundTwo.Position.X + this.mBackgroundOne.Size.Width);
      }
      if (this.mBackgroundTwo.Position.X < -this.mBackgroundTwo.Size.Width) {
        this.mBackgroundTwo.Position.X = (this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width);
      }
      this.gameSpeed += 0.5;
      var pDirection = new ($T0C())(0.0099999997764825821, 0);
      var hDirection = new ($T0C())(-1.0099999904632568, 0);
      var eDirection = new ($T0C())(0, 0);
      var aDirection = new ($T0C())(-1, 0);
      var aSpeed = new ($T0C())(this.gameSpeed, 0);
      this.mBackgroundOne.Position = $T0C().op_Addition(this.mBackgroundOne.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(aDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.mBackgroundTwo.Position = $T0C().op_Addition(this.mBackgroundTwo.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(aDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.graveStone.Position = $T0C().op_Addition(this.graveStone.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(aDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.graveStone2.Position = $T0C().op_Addition(this.graveStone2.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(aDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.graveStone3.Position = $T0C().op_Addition(this.graveStone3.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(aDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.graveStone4.Position = $T0C().op_Addition(this.graveStone4.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(aDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.mPlayer1Sprite.Position = $T0C().op_Addition(this.mPlayer1Sprite.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(pDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      this.mPlayer2Sprite.Position = $T0C().op_Addition(this.mPlayer2Sprite.Position, $T0C().op_MultiplyScalar(
          $T0C().op_Multiply(pDirection, aSpeed), 
          gameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
      if (this.graveStone.Position.X < -100) {
        this.graveStone.Position.X = 2902.5;
      }
      if (this.graveStone2.Position.X < -100) {
        this.graveStone2.Position.X = 2902.5;
      }
      if (this.graveStone3.Position.X < -100) {
        this.graveStone3.Position.X = 2902.5;
      }
      if (this.graveStone4.Position.X < -100) {
        this.graveStone4.Position.X = 2902.5;
      }
      this.velocity += this.g;
      this.velocity2 += this.g;
      var expr_469_cp_0 = this.mPlayer1Sprite;
      expr_469_cp_0.Position.Y += this.velocity;
      var expr_486_cp_0 = this.mPlayer2Sprite;
      expr_486_cp_0.Position.Y += this.velocity2;
      if (!((this.mPlayer1Sprite.Position.Y <= 210) || (this.velocity <= 0))) {
        this.velocity = 0;
        this.mPlayer1Sprite.Position.Y = 210;
      }
      if (!(!$T0E().GetState().IsKeyDown($T0F().W) || (this.velocity !== 0))) {
        this.velocity -= 13;
      }
      if (!((this.mPlayer2Sprite.Position.Y <= 560) || (this.velocity2 <= 0))) {
        this.velocity2 = 0;
        this.mPlayer2Sprite.Position.Y = 560;
      }
      if (!(!$T0E().GetState().IsKeyDown($T0F().Up) || (this.velocity2 !== 0))) {
        this.velocity2 -= 13;
      }
      if (!((this.mPlayer1Sprite.Position.Y <= (this.graveStone3.Position.Y - 90)) || 
          (this.mPlayer1Sprite.Position.X < (this.graveStone3.Position.X - 70)) || (this.mPlayer1Sprite.Position.X >= (this.graveStone3.Position.X + 40)))) {
        this.mPlayer1Sprite.Position = $T0C().op_Addition(this.mPlayer1Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(hDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
      }
      if (!((this.mPlayer1Sprite.Position.Y <= (this.graveStone4.Position.Y - 90)) || 
          (this.mPlayer1Sprite.Position.X < (this.graveStone4.Position.X - 70)) || (this.mPlayer1Sprite.Position.X >= (this.graveStone4.Position.X + 40)))) {
        this.mPlayer1Sprite.Position = $T0C().op_Addition(this.mPlayer1Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(hDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
      }
      if (!((this.mPlayer2Sprite.Position.Y <= (this.graveStone.Position.Y - 90)) || 
          (this.mPlayer2Sprite.Position.X < (this.graveStone.Position.X - 70)) || (this.mPlayer2Sprite.Position.X >= (this.graveStone.Position.X + 40)))) {
        this.mPlayer2Sprite.Position = $T0C().op_Addition(this.mPlayer2Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(hDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
      }
      if (!((this.mPlayer2Sprite.Position.Y <= (this.graveStone2.Position.Y - 90)) || 
          (this.mPlayer2Sprite.Position.X < (this.graveStone2.Position.X - 70)) || (this.mPlayer2Sprite.Position.X >= (this.graveStone2.Position.X + 40)))) {
        this.mPlayer2Sprite.Position = $T0C().op_Addition(this.mPlayer2Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(hDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
      }
      if (this.mPlayer1Sprite.Position.X < (this.huntingPriest1.Position.X + 80)) {
        this.gameSpeed -= 0.5;
        this.gameSpeed = 0;
        this.mPlayer1Sprite.Position = $T0C().op_Addition(this.mPlayer1Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(eDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
        this.mPlayer2Sprite.Position = $T0C().op_Addition(this.mPlayer2Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(eDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
      }
      if (this.mPlayer2Sprite.Position.X < (this.huntingPriest2.Position.X + 80)) {
        this.gameSpeed -= 0.5;
        this.gameSpeed = 0;
        this.mPlayer1Sprite.Position = $T0C().op_Addition(this.mPlayer1Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(eDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
        this.mPlayer2Sprite.Position = $T0C().op_Addition(this.mPlayer2Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(eDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
      }
      if ($T0E().GetState().IsKeyDown($T0F().R)) {
        this.mPlayer1Sprite.Position.X = 450;
        this.mPlayer2Sprite.Position.X = 450;
        this.gameSpeed = 150;
        this.mPlayer1Sprite.Position = $T0C().op_Addition(this.mPlayer1Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(pDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
        this.mPlayer2Sprite.Position = $T0C().op_Addition(this.mPlayer2Sprite.Position, $T0C().op_MultiplyScalar(
            $T0C().op_Multiply(pDirection, aSpeed), 
            gameTime.get_ElapsedGameTime().get_TotalSeconds()
          ));
        this.mBackgroundOne.Position.X = 0;
        this.mBackgroundTwo.Position.X = (this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width);
        this.graveStone.Position.X = ((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 2110);
        this.graveStone2.Position.X = ((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 1095);
        this.graveStone3.Position.X = ((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 2110);
        this.graveStone4.Position.X = ((this.mBackgroundOne.Position.X + this.mBackgroundOne.Size.Width) - 1095);
      }
      $T00().prototype.Update.call(this, gameTime);
    }
  );

  $.Field({Static:false, Public:false}, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
  $.Field({Static:false, Public:false}, "spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
  $.Field({Static:false, Public:false}, "mPlayer1Sprite", $asm00.TypeRef("BloodMarathon.P1")); 
  $.Field({Static:false, Public:false}, "mPlayer2Sprite", $asm00.TypeRef("BloodMarathon.P2")); 
  $.Field({Static:false, Public:false}, "huntingPriest2", $asm00.TypeRef("BloodMarathon.Priest2")); 
  $.Field({Static:false, Public:false}, "huntingPriest1", $asm00.TypeRef("BloodMarathon.Priest1")); 
  $.Field({Static:false, Public:false}, "mBackgroundOne", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "mBackgroundTwo", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "graveStone", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "graveStone2", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "graveStone3", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "graveStone4", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "P1WIN", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "P2WIN", $asm00.TypeRef("BloodMarathon.Sprite")); 
  $.Field({Static:false, Public:false}, "velocity", $.Single); 
  $.Field({Static:false, Public:false}, "velocity2", $.Single); 
  $.Field({Static:false, Public:false}, "g", $.Single); 
  $.Field({Static:false, Public:false}, "gameSpeed", $.Single); 
  $.Field({Static:false, Public:false}, "SP1", $.Single); 
  $.Field({Static:false, Public:false}, "SP2", $.Single); 
});

JSIL.MakeClass($asm06.TypeRef("System.Object"), "BloodMarathon.Sprite", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA3, null, [], []), 
    function Sprite__ctor () {
      this.mScale = 1;
      this.Position = new ($T00())(0, 0);
    }
  );

  $.Method({Static:false, Public:true }, "Draw", 
    $sig.make(0xB9F, null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
    function Sprite_Draw (theSpriteBatch) {
      theSpriteBatch.DrawScaleF(
        this.mSpriteTexture, 
        this.Position, 
        new ($T02())(0, 0, this.mSpriteTexture.get_Width(), this.mSpriteTexture.get_Height()), 
        $T03().get_White(), 
        0, 
        $T00().get_Zero(), 
        this.get_Scale(), 
        $T04().None, 
        0
      );
    }
  );

  $.Method({Static:false, Public:true }, "get_Scale", 
    $sig.make(0xB9B, $.Single, [], []), 
    function Sprite_get_Scale () {
      return this.mScale;
    }
  );

  $.Method({Static:false, Public:true }, "LoadContent", 
    $sig.make(0xB9D, null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $.String], []), 
    function Sprite_LoadContent (theContentManager, theAssetName) {
      this.mSpriteTexture = theContentManager.Load$b1($T07())(theAssetName);
      this.P2Vampire = theAssetName;
      this.Size = new ($T02())(0, 0, (((this.mSpriteTexture.get_Width() * this.get_Scale())) | 0), (((this.mSpriteTexture.get_Height() * this.get_Scale())) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "set_Scale", 
    $sig.make(0xB9C, null, [$.Single], []), 
    function Sprite_set_Scale (value) {
      this.mScale = value;
      this.Size = new ($T02())(0, 0, (((this.mSpriteTexture.get_Width() * this.get_Scale())) | 0), (((this.mSpriteTexture.get_Height() * this.get_Scale())) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "Update", 
    $sig.make(0xBA1, null, [
        $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
      ], []), 
    function Sprite_Update (theGameTime, theSpeed, theDirection) {
      this.Position = $T00().op_Addition(this.Position, $T00().op_MultiplyScalar(
          $T00().op_Multiply(theDirection, theSpeed), 
          theGameTime.get_ElapsedGameTime().get_TotalSeconds()
        ));
    }
  );

  $.Field({Static:false, Public:true }, "P2Vampire", $.String); 
  $.Field({Static:false, Public:true }, "Size", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
  $.Field({Static:false, Public:false}, "mScale", $.Single); 
  $.Field({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
  $.Field({Static:false, Public:false}, "mSpriteTexture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
  $.Property({Static:false, Public:true }, "Scale", $.Single);

});

